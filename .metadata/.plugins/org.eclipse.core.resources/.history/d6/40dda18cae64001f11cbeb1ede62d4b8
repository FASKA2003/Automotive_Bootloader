/**
  ******************************************************************************
  * @file    cmac_check.c
  * @brief   source file of firmware cmac check module.
  *          This file contains implementation for set of firmware functions to
  *          manage Common functionalities
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 Sigma Embedded.
  * All rights reserved.
  *
  ******************************************************************************/
#include "cmac_check.h"

/* Initialization for AES-CMAC for Authentication TAG Generation*/
cmox_cmac_retval_t AES_CMAC_Init(AESCMACctx_stt *P_pAESCMACctx) {
	  cmox_mac_retval_t cmox_retval;
	  int32_t retval;

	  /* Parameter Checking */
	  if (P_pAESCMACctx == NULL)
	  {
	    retval = AES_ERR_BAD_PARAMETER;
	    goto error;
	  }

	  P_pAESCMACctx->mac_handle = cmox_cmac_construct(&P_pAESCMACctx->cmac_handle, CMOX_CMAC_AESFAST);
	  if (P_pAESCMACctx->mac_handle == NULL)
	  {
	    retval = AES_ERR_BAD_PARAMETER;
	    goto error;
	  }

	  cmox_retval = cmox_mac_init(P_pAESCMACctx->mac_handle);
	  if (cmox_retval != CMOX_MAC_SUCCESS)
	  {
	    retval = AES_ERR_BAD_PARAMETER;
	    goto error;
	  }

	  cmox_retval = cmox_mac_setTagLen(P_pAESCMACctx->mac_handle, (size_t)P_pAESCMACctx->mTagSize);
	  if (cmox_retval != CMOX_MAC_SUCCESS)
	  {
	    retval = AES_ERR_BAD_CONTEXT;
	    goto error;
	  }

	  cmox_retval = cmox_mac_setKey(P_pAESCMACctx->mac_handle, P_pAESCMACctx->pmKey, (size_t)P_pAESCMACctx->mKeySize);
	  if (cmox_retval != CMOX_MAC_SUCCESS)
	  {
	    retval = AES_ERR_BAD_CONTEXT;
	    goto error;
	  }

	  retval = AES_SUCCESS;
	error:
	  return retval;
}


/* AES-CMAC Authentication TAG generation */
cmox_cmac_retval_t AES_CMAC_Encrypt(AESCMACctx_stt *P_pAESCMACctx, const uint8_t *P_pInputBuffer,  int32_t P_inputSize, uint8_t *P_pOutputBuffer, int32_t *P_pOutputSize) {

	  cmox_mac_retval_t cmox_retval;
	  int32_t retval;

	  if ((P_pAESCMACctx == NULL) || (P_inputSize < 0) || (P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
	  {
	    retval = AES_ERR_BAD_PARAMETER;
	    goto error;
	  }

	  /* If there is no plaintext, exit without doing nothing */
	  if ((P_pInputBuffer == NULL) || (P_inputSize == 0))
	  {
	    retval = AES_SUCCESS;
	    goto error;
	  }

	  cmox_retval = cmox_mac_append(P_pAESCMACctx->mac_handle, P_pInputBuffer, (size_t)P_inputSize);

	  if (cmox_retval == CMOX_MAC_ERR_BAD_OPERATION)
	  {
	    retval = AES_ERR_BAD_OPERATION;
	    goto error;
	  }

	  if (cmox_retval != CMOX_MAC_SUCCESS)
	  {
	    retval = AES_ERR_BAD_PARAMETER;
	    goto error;
	  }

	  cmox_retval = cmox_mac_generateTag(P_pAESCMACctx->mac_handle, P_pOutputBuffer, P_pOutputSize);

	  if (cmox_retval != CMOX_MAC_SUCCESS)
	  {
	    retval = AES_ERR_BAD_PARAMETER;
	    goto error;
	  }

	  cmox_retval = cmox_mac_cleanup(P_pAESCMACctx->mac_handle);
	  if (cmox_retval != CMOX_MAC_SUCCESS)
	  {
	    retval = AES_ERR_BAD_PARAMETER;
	    goto error;
	  }

	  retval = AES_SUCCESS;

	error:
	  return retval;
}
