
FlashBootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f0  080202a0  080202a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0802a990  0802a990  0000b990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000500  0802aec0  0802aec0  0000bec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802b3c0  0802b3c0  0000e098  2**0
                  CONTENTS
  5 .ARM          00000008  0802b3c0  0802b3c0  0000c3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802b3c8  0802b3c8  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0802b3c8  0802b3c8  0000c3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0802b3cc  0802b3cc  0000c3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000084  24000000  0802b3d0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000554  24000084  0802b454  0000f084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  240005d8  0802b454  0000e5d8  2**0
                  ALLOC
 12 .firmware_buffer 00040100  30000000  30000000  0000f000  2**2
                  ALLOC
 13 .itcm_code    00000098  00000000  0802b454  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .ARM.attributes 00000032  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 15 .debug_info   00018f35  00000000  00000000  0000e0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000032c0  00000000  00000000  00026fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000011c0  00000000  00000000  0002a2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000d90  00000000  00000000  0002b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003d77a  00000000  00000000  0002c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00019ff6  00000000  00000000  0006998a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018a97e  00000000  00000000  00083980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0020e2fe  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000064  00000000  00000000  0020e344  2**2
                  CONTENTS, READONLY
 24 .debug_frame  00004eb8  00000000  00000000  0020e3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000005a  00000000  00000000  00213260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	@ (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	@ (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	@ (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000084 	.word	0x24000084
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0802a96c 	.word	0x0802a96c

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	@ (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	@ (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	@ (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	24000088 	.word	0x24000088
 80202dc:	0802a96c 	.word	0x0802a96c

080202e0 <CMOX_CMAC_AESFAST_TABLE>:
 80202e0:	0802ad1c                                ....

080202e4 <cmox_cmac_aesfast_compute>:
 80202e4:	b570      	push	{r4, r5, r6, lr}
 80202e6:	b084      	sub	sp, #16
 80202e8:	9300      	str	r3, [sp, #0]
 80202ea:	4613      	mov	r3, r2
 80202ec:	460a      	mov	r2, r1
 80202ee:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80202f0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80202f2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80202f4:	4601      	mov	r1, r0
 80202f6:	9403      	str	r4, [sp, #12]
 80202f8:	9502      	str	r5, [sp, #8]
 80202fa:	4803      	ldr	r0, [pc, #12]	@ (8020308 <cmox_cmac_aesfast_compute+0x24>)
 80202fc:	9601      	str	r6, [sp, #4]
 80202fe:	f001 fbdf 	bl	8021ac0 <cmox_cmac_compute>
 8020302:	b004      	add	sp, #16
 8020304:	bd70      	pop	{r4, r5, r6, pc}
 8020306:	bf00      	nop
 8020308:	080202e0 	.word	0x080202e0

0802030c <cmox_cmac_aesfast_verify>:
 802030c:	b530      	push	{r4, r5, lr}
 802030e:	b083      	sub	sp, #12
 8020310:	9300      	str	r3, [sp, #0]
 8020312:	4613      	mov	r3, r2
 8020314:	460a      	mov	r2, r1
 8020316:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020318:	9d08      	ldr	r5, [sp, #32]
 802031a:	4601      	mov	r1, r0
 802031c:	9402      	str	r4, [sp, #8]
 802031e:	4803      	ldr	r0, [pc, #12]	@ (802032c <cmox_cmac_aesfast_verify+0x20>)
 8020320:	9501      	str	r5, [sp, #4]
 8020322:	f001 fbe8 	bl	8021af6 <cmox_cmac_verify>
 8020326:	b003      	add	sp, #12
 8020328:	bd30      	pop	{r4, r5, pc}
 802032a:	bf00      	nop
 802032c:	080202e0 	.word	0x080202e0

08020330 <cmox_hash_compute>:
 8020330:	2800      	cmp	r0, #0
 8020332:	b538      	push	{r3, r4, r5, lr}
 8020334:	460c      	mov	r4, r1
 8020336:	4611      	mov	r1, r2
 8020338:	bf1c      	itt	ne
 802033a:	6805      	ldrne	r5, [r0, #0]
 802033c:	2d00      	cmpne	r5, #0
 802033e:	461a      	mov	r2, r3
 8020340:	4b07      	ldr	r3, [pc, #28]	@ (8020360 <cmox_hash_compute+0x30>)
 8020342:	d00a      	beq.n	802035a <cmox_hash_compute+0x2a>
 8020344:	b14a      	cbz	r2, 802035a <cmox_hash_compute+0x2a>
 8020346:	b904      	cbnz	r4, 802034a <cmox_hash_compute+0x1a>
 8020348:	b939      	cbnz	r1, 802035a <cmox_hash_compute+0x2a>
 802034a:	9804      	ldr	r0, [sp, #16]
 802034c:	b128      	cbz	r0, 802035a <cmox_hash_compute+0x2a>
 802034e:	9b05      	ldr	r3, [sp, #20]
 8020350:	9300      	str	r3, [sp, #0]
 8020352:	4603      	mov	r3, r0
 8020354:	4620      	mov	r0, r4
 8020356:	47a8      	blx	r5
 8020358:	4603      	mov	r3, r0
 802035a:	4618      	mov	r0, r3
 802035c:	bd32      	pop	{r1, r4, r5, pc}
 802035e:	bf00      	nop
 8020360:	00020003 	.word	0x00020003

08020364 <cmox_hash_common_compute>:
 8020364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020368:	4604      	mov	r4, r0
 802036a:	460e      	mov	r6, r1
 802036c:	6821      	ldr	r1, [r4, #0]
 802036e:	4617      	mov	r7, r2
 8020370:	461d      	mov	r5, r3
 8020372:	684a      	ldr	r2, [r1, #4]
 8020374:	4790      	blx	r2
 8020376:	4680      	mov	r8, r0
 8020378:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 802037c:	d119      	bne.n	80203b2 <cmox_hash_common_compute+0x4e>
 802037e:	6822      	ldr	r2, [r4, #0]
 8020380:	9906      	ldr	r1, [sp, #24]
 8020382:	4620      	mov	r0, r4
 8020384:	6893      	ldr	r3, [r2, #8]
 8020386:	4798      	blx	r3
 8020388:	4680      	mov	r8, r0
 802038a:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 802038e:	d110      	bne.n	80203b2 <cmox_hash_common_compute+0x4e>
 8020390:	4631      	mov	r1, r6
 8020392:	6826      	ldr	r6, [r4, #0]
 8020394:	463a      	mov	r2, r7
 8020396:	4620      	mov	r0, r4
 8020398:	68f3      	ldr	r3, [r6, #12]
 802039a:	4798      	blx	r3
 802039c:	4680      	mov	r8, r0
 802039e:	f5b8 3f00 	cmp.w	r8, #131072	@ 0x20000
 80203a2:	d106      	bne.n	80203b2 <cmox_hash_common_compute+0x4e>
 80203a4:	6823      	ldr	r3, [r4, #0]
 80203a6:	4629      	mov	r1, r5
 80203a8:	9a07      	ldr	r2, [sp, #28]
 80203aa:	4620      	mov	r0, r4
 80203ac:	691d      	ldr	r5, [r3, #16]
 80203ae:	47a8      	blx	r5
 80203b0:	4680      	mov	r8, r0
 80203b2:	6821      	ldr	r1, [r4, #0]
 80203b4:	4620      	mov	r0, r4
 80203b6:	680a      	ldr	r2, [r1, #0]
 80203b8:	4790      	blx	r2
 80203ba:	4640      	mov	r0, r8
 80203bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080203c0 <cmox_initialize>:
 80203c0:	2800      	cmp	r0, #0
 80203c2:	4a1a      	ldr	r2, [pc, #104]	@ (802042c <cmox_initialize+0x6c>)
 80203c4:	b570      	push	{r4, r5, r6, lr}
 80203c6:	bf1c      	itt	ne
 80203c8:	6801      	ldrne	r1, [r0, #0]
 80203ca:	2900      	cmpne	r1, #0
 80203cc:	d123      	bne.n	8020416 <cmox_initialize+0x56>
 80203ce:	4b18      	ldr	r3, [pc, #96]	@ (8020430 <cmox_initialize+0x70>)
 80203d0:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 80203d4:	681c      	ldr	r4, [r3, #0]
 80203d6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80203da:	400c      	ands	r4, r1
 80203dc:	42ac      	cmp	r4, r5
 80203de:	bf1f      	itttt	ne
 80203e0:	681b      	ldrne	r3, [r3, #0]
 80203e2:	4019      	andne	r1, r3
 80203e4:	f24c 2670 	movwne	r6, #49776	@ 0xc270
 80203e8:	42b1      	cmpne	r1, r6
 80203ea:	d112      	bne.n	8020412 <cmox_initialize+0x52>
 80203ec:	4c11      	ldr	r4, [pc, #68]	@ (8020434 <cmox_initialize+0x74>)
 80203ee:	6821      	ldr	r1, [r4, #0]
 80203f0:	b979      	cbnz	r1, 8020412 <cmox_initialize+0x52>
 80203f2:	4911      	ldr	r1, [pc, #68]	@ (8020438 <cmox_initialize+0x78>)
 80203f4:	680b      	ldr	r3, [r1, #0]
 80203f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80203fa:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80203fe:	bf1f      	itttt	ne
 8020400:	6809      	ldrne	r1, [r1, #0]
 8020402:	f3c1 010b 	ubfxne	r1, r1, #0, #12
 8020406:	f240 4383 	movwne	r3, #1155	@ 0x483
 802040a:	4299      	cmpne	r1, r3
 802040c:	bf04      	itt	eq
 802040e:	2401      	moveq	r4, #1
 8020410:	7014      	strbeq	r4, [r2, #0]
 8020412:	b928      	cbnz	r0, 8020420 <cmox_initialize+0x60>
 8020414:	e005      	b.n	8020422 <cmox_initialize+0x62>
 8020416:	4b09      	ldr	r3, [pc, #36]	@ (802043c <cmox_initialize+0x7c>)
 8020418:	4299      	cmp	r1, r3
 802041a:	bf04      	itt	eq
 802041c:	2101      	moveq	r1, #1
 802041e:	7011      	strbeq	r1, [r2, #0]
 8020420:	6840      	ldr	r0, [r0, #4]
 8020422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020426:	f003 b8bf 	b.w	80235a8 <cmox_ll_init>
 802042a:	bf00      	nop
 802042c:	240000a0 	.word	0x240000a0
 8020430:	e000ed00 	.word	0xe000ed00
 8020434:	e0042000 	.word	0xe0042000
 8020438:	5c001000 	.word	0x5c001000
 802043c:	48370000 	.word	0x48370000

08020440 <cmox_mac_innerCompute>:
 8020440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020444:	4604      	mov	r4, r0
 8020446:	460d      	mov	r5, r1
 8020448:	6821      	ldr	r1, [r4, #0]
 802044a:	4616      	mov	r6, r2
 802044c:	461f      	mov	r7, r3
 802044e:	684a      	ldr	r2, [r1, #4]
 8020450:	4790      	blx	r2
 8020452:	4680      	mov	r8, r0
 8020454:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8020458:	d12e      	bne.n	80204b8 <cmox_mac_innerCompute+0x78>
 802045a:	6822      	ldr	r2, [r4, #0]
 802045c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802045e:	4620      	mov	r0, r4
 8020460:	6893      	ldr	r3, [r2, #8]
 8020462:	4798      	blx	r3
 8020464:	4680      	mov	r8, r0
 8020466:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 802046a:	d125      	bne.n	80204b8 <cmox_mac_innerCompute+0x78>
 802046c:	6823      	ldr	r3, [r4, #0]
 802046e:	9a08      	ldr	r2, [sp, #32]
 8020470:	9907      	ldr	r1, [sp, #28]
 8020472:	4620      	mov	r0, r4
 8020474:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8020478:	47e0      	blx	ip
 802047a:	4680      	mov	r8, r0
 802047c:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8020480:	d11a      	bne.n	80204b8 <cmox_mac_innerCompute+0x78>
 8020482:	6823      	ldr	r3, [r4, #0]
 8020484:	4639      	mov	r1, r7
 8020486:	9a06      	ldr	r2, [sp, #24]
 8020488:	4620      	mov	r0, r4
 802048a:	691f      	ldr	r7, [r3, #16]
 802048c:	47b8      	blx	r7
 802048e:	4680      	mov	r8, r0
 8020490:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8020494:	d110      	bne.n	80204b8 <cmox_mac_innerCompute+0x78>
 8020496:	6823      	ldr	r3, [r4, #0]
 8020498:	4629      	mov	r1, r5
 802049a:	4632      	mov	r2, r6
 802049c:	4620      	mov	r0, r4
 802049e:	695d      	ldr	r5, [r3, #20]
 80204a0:	47a8      	blx	r5
 80204a2:	4680      	mov	r8, r0
 80204a4:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80204a8:	d106      	bne.n	80204b8 <cmox_mac_innerCompute+0x78>
 80204aa:	6823      	ldr	r3, [r4, #0]
 80204ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80204ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80204b0:	4620      	mov	r0, r4
 80204b2:	699d      	ldr	r5, [r3, #24]
 80204b4:	47a8      	blx	r5
 80204b6:	4680      	mov	r8, r0
 80204b8:	6821      	ldr	r1, [r4, #0]
 80204ba:	4620      	mov	r0, r4
 80204bc:	680a      	ldr	r2, [r1, #0]
 80204be:	4790      	blx	r2
 80204c0:	4640      	mov	r0, r8
 80204c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080204c6 <cmox_mac_innerVerify>:
 80204c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204ca:	4604      	mov	r4, r0
 80204cc:	460d      	mov	r5, r1
 80204ce:	6821      	ldr	r1, [r4, #0]
 80204d0:	4616      	mov	r6, r2
 80204d2:	461f      	mov	r7, r3
 80204d4:	684a      	ldr	r2, [r1, #4]
 80204d6:	4790      	blx	r2
 80204d8:	4680      	mov	r8, r0
 80204da:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80204de:	d12e      	bne.n	802053e <cmox_mac_innerVerify+0x78>
 80204e0:	6822      	ldr	r2, [r4, #0]
 80204e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80204e4:	4620      	mov	r0, r4
 80204e6:	6893      	ldr	r3, [r2, #8]
 80204e8:	4798      	blx	r3
 80204ea:	4680      	mov	r8, r0
 80204ec:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80204f0:	d125      	bne.n	802053e <cmox_mac_innerVerify+0x78>
 80204f2:	6823      	ldr	r3, [r4, #0]
 80204f4:	9a08      	ldr	r2, [sp, #32]
 80204f6:	9907      	ldr	r1, [sp, #28]
 80204f8:	4620      	mov	r0, r4
 80204fa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80204fe:	47e0      	blx	ip
 8020500:	4680      	mov	r8, r0
 8020502:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8020506:	d11a      	bne.n	802053e <cmox_mac_innerVerify+0x78>
 8020508:	6823      	ldr	r3, [r4, #0]
 802050a:	4639      	mov	r1, r7
 802050c:	9a06      	ldr	r2, [sp, #24]
 802050e:	4620      	mov	r0, r4
 8020510:	691f      	ldr	r7, [r3, #16]
 8020512:	47b8      	blx	r7
 8020514:	4680      	mov	r8, r0
 8020516:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 802051a:	d110      	bne.n	802053e <cmox_mac_innerVerify+0x78>
 802051c:	6823      	ldr	r3, [r4, #0]
 802051e:	4629      	mov	r1, r5
 8020520:	4632      	mov	r2, r6
 8020522:	4620      	mov	r0, r4
 8020524:	695d      	ldr	r5, [r3, #20]
 8020526:	47a8      	blx	r5
 8020528:	4680      	mov	r8, r0
 802052a:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 802052e:	d106      	bne.n	802053e <cmox_mac_innerVerify+0x78>
 8020530:	6823      	ldr	r3, [r4, #0]
 8020532:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020534:	2200      	movs	r2, #0
 8020536:	4620      	mov	r0, r4
 8020538:	69dd      	ldr	r5, [r3, #28]
 802053a:	47a8      	blx	r5
 802053c:	4680      	mov	r8, r0
 802053e:	6821      	ldr	r1, [r4, #0]
 8020540:	4620      	mov	r0, r4
 8020542:	680a      	ldr	r2, [r1, #0]
 8020544:	4790      	blx	r2
 8020546:	4640      	mov	r0, r8
 8020548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802054c <cmox_mac_setCustomData_empty>:
 802054c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8020550:	4770      	bx	lr
	...

08020554 <cmox_mac_compute>:
 8020554:	2800      	cmp	r0, #0
 8020556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020558:	b085      	sub	sp, #20
 802055a:	460c      	mov	r4, r1
 802055c:	4611      	mov	r1, r2
 802055e:	461a      	mov	r2, r3
 8020560:	bf1c      	itt	ne
 8020562:	6805      	ldrne	r5, [r0, #0]
 8020564:	2d00      	cmpne	r5, #0
 8020566:	4b0b      	ldr	r3, [pc, #44]	@ (8020594 <cmox_mac_compute+0x40>)
 8020568:	d011      	beq.n	802058e <cmox_mac_compute+0x3a>
 802056a:	b182      	cbz	r2, 802058e <cmox_mac_compute+0x3a>
 802056c:	b904      	cbnz	r4, 8020570 <cmox_mac_compute+0x1c>
 802056e:	b971      	cbnz	r1, 802058e <cmox_mac_compute+0x3a>
 8020570:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020572:	b160      	cbz	r0, 802058e <cmox_mac_compute+0x3a>
 8020574:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8020576:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8020578:	9604      	str	r6, [sp, #16]
 802057a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802057c:	9703      	str	r7, [sp, #12]
 802057e:	9002      	str	r0, [sp, #8]
 8020580:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8020582:	9001      	str	r0, [sp, #4]
 8020584:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020586:	9000      	str	r0, [sp, #0]
 8020588:	4620      	mov	r0, r4
 802058a:	47a8      	blx	r5
 802058c:	4603      	mov	r3, r0
 802058e:	4618      	mov	r0, r3
 8020590:	b005      	add	sp, #20
 8020592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020594:	00030002 	.word	0x00030002

08020598 <cmox_asm_montymul_x128__sqr>:
 8020598:	b510      	push	{r4, lr}
 802059a:	b082      	sub	sp, #8
 802059c:	9300      	str	r3, [sp, #0]
 802059e:	4613      	mov	r3, r2
 80205a0:	9c04      	ldr	r4, [sp, #16]
 80205a2:	460a      	mov	r2, r1
 80205a4:	9401      	str	r4, [sp, #4]
 80205a6:	4601      	mov	r1, r0
 80205a8:	f001 fd24 	bl	8021ff4 <cmox_asm_montymul_x128>
 80205ac:	b002      	add	sp, #8
 80205ae:	bd10      	pop	{r4, pc}

080205b0 <cmox_ModExpBN>:
 80205b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205b4:	b08a      	sub	sp, #40	@ 0x28
 80205b6:	4681      	mov	r9, r0
 80205b8:	468a      	mov	sl, r1
 80205ba:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80205bc:	4610      	mov	r0, r2
 80205be:	4698      	mov	r8, r3
 80205c0:	f8cd a00c 	str.w	sl, [sp, #12]
 80205c4:	a905      	add	r1, sp, #20
 80205c6:	f8cd 9010 	str.w	r9, [sp, #16]
 80205ca:	462a      	mov	r2, r5
 80205cc:	f001 fc32 	bl	8021e34 <cmox_ModularBN_Init>
 80205d0:	0004      	movs	r4, r0
 80205d2:	d154      	bne.n	802067e <cmox_ModExpBN+0xce>
 80205d4:	492c      	ldr	r1, [pc, #176]	@ (8020688 <cmox_ModExpBN+0xd8>)
 80205d6:	4a2d      	ldr	r2, [pc, #180]	@ (802068c <cmox_ModExpBN+0xdc>)
 80205d8:	e9d1 3400 	ldrd	r3, r4, [r1]
 80205dc:	e9cd 3400 	strd	r3, r4, [sp]
 80205e0:	492b      	ldr	r1, [pc, #172]	@ (8020690 <cmox_ModExpBN+0xe0>)
 80205e2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80205e4:	7808      	ldrb	r0, [r1, #0]
 80205e6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80205e8:	2800      	cmp	r0, #0
 80205ea:	bf0e      	itee	eq
 80205ec:	2100      	moveq	r1, #0
 80205ee:	2004      	movne	r0, #4
 80205f0:	2104      	movne	r1, #4
 80205f2:	5813      	ldr	r3, [r2, r0]
 80205f4:	f85d 0001 	ldr.w	r0, [sp, r1]
 80205f8:	2701      	movs	r7, #1
 80205fa:	18c3      	adds	r3, r0, r3
 80205fc:	4825      	ldr	r0, [pc, #148]	@ (8020694 <cmox_ModExpBN+0xe4>)
 80205fe:	6018      	str	r0, [r3, #0]
 8020600:	6818      	ldr	r0, [r3, #0]
 8020602:	609f      	str	r7, [r3, #8]
 8020604:	6851      	ldr	r1, [r2, #4]
 8020606:	6817      	ldr	r7, [r2, #0]
 8020608:	9a01      	ldr	r2, [sp, #4]
 802060a:	4b23      	ldr	r3, [pc, #140]	@ (8020698 <cmox_ModExpBN+0xe8>)
 802060c:	4041      	eors	r1, r0
 802060e:	9800      	ldr	r0, [sp, #0]
 8020610:	4057      	eors	r7, r2
 8020612:	4632      	mov	r2, r6
 8020614:	4048      	eors	r0, r1
 8020616:	4921      	ldr	r1, [pc, #132]	@ (802069c <cmox_ModExpBN+0xec>)
 8020618:	ea83 0c00 	eor.w	ip, r3, r0
 802061c:	404f      	eors	r7, r1
 802061e:	44bc      	add	ip, r7
 8020620:	481f      	ldr	r0, [pc, #124]	@ (80206a0 <cmox_ModExpBN+0xf0>)
 8020622:	ea90 010c 	eors.w	r1, r0, ip
 8020626:	4608      	mov	r0, r1
 8020628:	ab04      	add	r3, sp, #16
 802062a:	a905      	add	r1, sp, #20
 802062c:	bf18      	it	ne
 802062e:	2001      	movne	r0, #1
 8020630:	b2c0      	uxtb	r0, r0
 8020632:	4240      	negs	r0, r0
 8020634:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8020638:	f001 fc51 	bl	8021ede <cmox_ModularBN_Enter>
 802063c:	9602      	str	r6, [sp, #8]
 802063e:	aa05      	add	r2, sp, #20
 8020640:	9501      	str	r5, [sp, #4]
 8020642:	4651      	mov	r1, sl
 8020644:	f8cd 8000 	str.w	r8, [sp]
 8020648:	6863      	ldr	r3, [r4, #4]
 802064a:	6824      	ldr	r4, [r4, #0]
 802064c:	4648      	mov	r0, r9
 802064e:	47a0      	blx	r4
 8020650:	0004      	movs	r4, r0
 8020652:	d110      	bne.n	8020676 <cmox_ModExpBN+0xc6>
 8020654:	4633      	mov	r3, r6
 8020656:	462a      	mov	r2, r5
 8020658:	a905      	add	r1, sp, #20
 802065a:	4648      	mov	r0, r9
 802065c:	f001 fc47 	bl	8021eee <cmox_ModularBN_Exit>
 8020660:	0004      	movs	r4, r0
 8020662:	d108      	bne.n	8020676 <cmox_ModExpBN+0xc6>
 8020664:	45c1      	cmp	r9, r8
 8020666:	d006      	beq.n	8020676 <cmox_ModExpBN+0xc6>
 8020668:	4633      	mov	r3, r6
 802066a:	462a      	mov	r2, r5
 802066c:	a905      	add	r1, sp, #20
 802066e:	4640      	mov	r0, r8
 8020670:	f001 fc3d 	bl	8021eee <cmox_ModularBN_Exit>
 8020674:	4604      	mov	r4, r0
 8020676:	4629      	mov	r1, r5
 8020678:	a805      	add	r0, sp, #20
 802067a:	f001 fcad 	bl	8021fd8 <cmox_ModularBN_Deinit>
 802067e:	4620      	mov	r0, r4
 8020680:	b00a      	add	sp, #40	@ 0x28
 8020682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020686:	bf00      	nop
 8020688:	080206a4 	.word	0x080206a4
 802068c:	0802ab98 	.word	0x0802ab98
 8020690:	240000a0 	.word	0x240000a0
 8020694:	75814507 	.word	0x75814507
 8020698:	12008504 	.word	0x12008504
 802069c:	7a0168fc 	.word	0x7a0168fc
 80206a0:	8ec0c3f5 	.word	0x8ec0c3f5
 80206a4:	0101b004 	.word	0x0101b004
 80206a8:	45011700 	.word	0x45011700

080206ac <.text_19>:
	...

080206b4 <cmox_ModExpBN_SW>:
 80206b4:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206b8:	b08a      	sub	sp, #40	@ 0x28
 80206ba:	2101      	movs	r1, #1
 80206bc:	4683      	mov	fp, r0
 80206be:	f88d 1008 	strb.w	r1, [sp, #8]
 80206c2:	4617      	mov	r7, r2
 80206c4:	2400      	movs	r4, #0
 80206c6:	2601      	movs	r6, #1
 80206c8:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 80206cc:	a901      	add	r1, sp, #4
 80206ce:	2500      	movs	r5, #0
 80206d0:	9507      	str	r5, [sp, #28]
 80206d2:	46aa      	mov	sl, r5
 80206d4:	9501      	str	r5, [sp, #4]
 80206d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80206d8:	6802      	ldr	r2, [r0, #0]
 80206da:	2a01      	cmp	r2, #1
 80206dc:	bf88      	it	hi
 80206de:	b2de      	uxtbhi	r6, r3
 80206e0:	2001      	movs	r0, #1
 80206e2:	1e73      	subs	r3, r6, #1
 80206e4:	4098      	lsls	r0, r3
 80206e6:	0080      	lsls	r0, r0, #2
 80206e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80206ea:	4602      	mov	r2, r0
 80206ec:	4648      	mov	r0, r9
 80206ee:	f001 ffdf 	bl	80226b0 <cmox_membuf_alloc>
 80206f2:	2800      	cmp	r0, #0
 80206f4:	9004      	str	r0, [sp, #16]
 80206f6:	f040 80ee 	bne.w	80208d6 <cmox_ModExpBN_SW+0x222>
 80206fa:	46a8      	mov	r8, r5
 80206fc:	e00c      	b.n	8020718 <cmox_ModExpBN_SW+0x64>
 80206fe:	6838      	ldr	r0, [r7, #0]
 8020700:	9901      	ldr	r1, [sp, #4]
 8020702:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8020706:	6802      	ldr	r2, [r0, #0]
 8020708:	4648      	mov	r0, r9
 802070a:	f000 fe87 	bl	802141c <cmox_bn_alloc>
 802070e:	2800      	cmp	r0, #0
 8020710:	9004      	str	r0, [sp, #16]
 8020712:	d174      	bne.n	80207fe <cmox_ModExpBN_SW+0x14a>
 8020714:	f108 0801 	add.w	r8, r8, #1
 8020718:	2101      	movs	r1, #1
 802071a:	1e73      	subs	r3, r6, #1
 802071c:	4099      	lsls	r1, r3
 802071e:	4588      	cmp	r8, r1
 8020720:	9106      	str	r1, [sp, #24]
 8020722:	d3ec      	bcc.n	80206fe <cmox_ModExpBN_SW+0x4a>
 8020724:	9a01      	ldr	r2, [sp, #4]
 8020726:	f8cd b00c 	str.w	fp, [sp, #12]
 802072a:	2100      	movs	r1, #0
 802072c:	6810      	ldr	r0, [r2, #0]
 802072e:	f000 fe8b 	bl	8021448 <cmox_bn_init>
 8020732:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8020734:	2100      	movs	r1, #0
 8020736:	f000 fe87 	bl	8021448 <cmox_bn_init>
 802073a:	9801      	ldr	r0, [sp, #4]
 802073c:	9903      	ldr	r1, [sp, #12]
 802073e:	6802      	ldr	r2, [r0, #0]
 8020740:	2001      	movs	r0, #1
 8020742:	f000 fe91 	bl	8021468 <cmox_bn_cCopy>
 8020746:	f8dd b058 	ldr.w	fp, [sp, #88]	@ 0x58
 802074a:	9700      	str	r7, [sp, #0]
 802074c:	2700      	movs	r7, #0
 802074e:	e007      	b.n	8020760 <cmox_ModExpBN_SW+0xac>
 8020750:	9801      	ldr	r0, [sp, #4]
 8020752:	9a00      	ldr	r2, [sp, #0]
 8020754:	465b      	mov	r3, fp
 8020756:	1c7f      	adds	r7, r7, #1
 8020758:	6800      	ldr	r0, [r0, #0]
 802075a:	4601      	mov	r1, r0
 802075c:	f001 fc0f 	bl	8021f7e <cmox_ModularBN_Sqr>
 8020760:	1e70      	subs	r0, r6, #1
 8020762:	4287      	cmp	r7, r0
 8020764:	d3f4      	bcc.n	8020750 <cmox_ModExpBN_SW+0x9c>
 8020766:	9900      	ldr	r1, [sp, #0]
 8020768:	4658      	mov	r0, fp
 802076a:	9605      	str	r6, [sp, #20]
 802076c:	1e72      	subs	r2, r6, #1
 802076e:	2701      	movs	r7, #1
 8020770:	f88d 2009 	strb.w	r2, [sp, #9]
 8020774:	468b      	mov	fp, r1
 8020776:	4606      	mov	r6, r0
 8020778:	e00c      	b.n	8020794 <cmox_ModExpBN_SW+0xe0>
 802077a:	9600      	str	r6, [sp, #0]
 802077c:	9801      	ldr	r0, [sp, #4]
 802077e:	9903      	ldr	r1, [sp, #12]
 8020780:	465b      	mov	r3, fp
 8020782:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8020786:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
 802078a:	1c7f      	adds	r7, r7, #1
 802078c:	f85c 0c04 	ldr.w	r0, [ip, #-4]
 8020790:	f001 fbcf 	bl	8021f32 <cmox_ModularBN_Mul>
 8020794:	9806      	ldr	r0, [sp, #24]
 8020796:	4287      	cmp	r7, r0
 8020798:	d3ef      	bcc.n	802077a <cmox_ModExpBN_SW+0xc6>
 802079a:	9616      	str	r6, [sp, #88]	@ 0x58
 802079c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802079e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80207a0:	680a      	ldr	r2, [r1, #0]
 80207a2:	2100      	movs	r1, #0
 80207a4:	9206      	str	r2, [sp, #24]
 80207a6:	f000 fe4f 	bl	8021448 <cmox_bn_init>
 80207aa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80207ac:	9903      	ldr	r1, [sp, #12]
 80207ae:	2001      	movs	r0, #1
 80207b0:	f000 fe5a 	bl	8021468 <cmox_bn_cCopy>
 80207b4:	2001      	movs	r0, #1
 80207b6:	9008      	str	r0, [sp, #32]
 80207b8:	e014      	b.n	80207e4 <cmox_ModExpBN_SW+0x130>
 80207ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80207bc:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 80207c0:	9906      	ldr	r1, [sp, #24]
 80207c2:	9207      	str	r2, [sp, #28]
 80207c4:	2220      	movs	r2, #32
 80207c6:	f88d 2008 	strb.w	r2, [sp, #8]
 80207ca:	1e49      	subs	r1, r1, #1
 80207cc:	9106      	str	r1, [sp, #24]
 80207ce:	9807      	ldr	r0, [sp, #28]
 80207d0:	9907      	ldr	r1, [sp, #28]
 80207d2:	0fc0      	lsrs	r0, r0, #31
 80207d4:	0049      	lsls	r1, r1, #1
 80207d6:	002a      	movs	r2, r5
 80207d8:	9107      	str	r1, [sp, #28]
 80207da:	d13b      	bne.n	8020854 <cmox_ModExpBN_SW+0x1a0>
 80207dc:	2800      	cmp	r0, #0
 80207de:	d001      	beq.n	80207e4 <cmox_ModExpBN_SW+0x130>
 80207e0:	d043      	beq.n	802086a <cmox_ModExpBN_SW+0x1b6>
 80207e2:	2501      	movs	r5, #1
 80207e4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80207e8:	1e42      	subs	r2, r0, #1
 80207ea:	f88d 2008 	strb.w	r2, [sp, #8]
 80207ee:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80207f2:	2900      	cmp	r1, #0
 80207f4:	d1eb      	bne.n	80207ce <cmox_ModExpBN_SW+0x11a>
 80207f6:	9806      	ldr	r0, [sp, #24]
 80207f8:	2800      	cmp	r0, #0
 80207fa:	d1de      	bne.n	80207ba <cmox_ModExpBN_SW+0x106>
 80207fc:	2d02      	cmp	r5, #2
 80207fe:	d11c      	bne.n	802083a <cmox_ModExpBN_SW+0x186>
 8020800:	b2e0      	uxtb	r0, r4
 8020802:	b1d0      	cbz	r0, 802083a <cmox_ModExpBN_SW+0x186>
 8020804:	b2e5      	uxtb	r5, r4
 8020806:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020808:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 802080a:	9f05      	ldr	r7, [sp, #20]
 802080c:	4633      	mov	r3, r6
 802080e:	465a      	mov	r2, fp
 8020810:	4621      	mov	r1, r4
 8020812:	4620      	mov	r0, r4
 8020814:	f001 fbb3 	bl	8021f7e <cmox_ModularBN_Sqr>
 8020818:	9908      	ldr	r1, [sp, #32]
 802081a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 802081e:	fa5f f08a 	uxtb.w	r0, sl
 8020822:	40b9      	lsls	r1, r7
 8020824:	4208      	tst	r0, r1
 8020826:	d006      	beq.n	8020836 <cmox_ModExpBN_SW+0x182>
 8020828:	9600      	str	r6, [sp, #0]
 802082a:	9903      	ldr	r1, [sp, #12]
 802082c:	465b      	mov	r3, fp
 802082e:	4622      	mov	r2, r4
 8020830:	4620      	mov	r0, r4
 8020832:	f001 fb7e 	bl	8021f32 <cmox_ModularBN_Mul>
 8020836:	1e6d      	subs	r5, r5, #1
 8020838:	d1e8      	bne.n	802080c <cmox_ModExpBN_SW+0x158>
 802083a:	f1b8 0f00 	cmp.w	r8, #0
 802083e:	d045      	beq.n	80208cc <cmox_ModExpBN_SW+0x218>
 8020840:	9801      	ldr	r0, [sp, #4]
 8020842:	eb00 0188 	add.w	r1, r0, r8, lsl #2
 8020846:	4648      	mov	r0, r9
 8020848:	f1a8 0801 	sub.w	r8, r8, #1
 802084c:	1f09      	subs	r1, r1, #4
 802084e:	f000 fdf0 	bl	8021432 <cmox_bn_free>
 8020852:	e7f2      	b.n	802083a <cmox_ModExpBN_SW+0x186>
 8020854:	2d01      	cmp	r5, #1
 8020856:	bf08      	it	eq
 8020858:	2800      	cmpeq	r0, #0
 802085a:	d106      	bne.n	802086a <cmox_ModExpBN_SW+0x1b6>
 802085c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802085e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020860:	465a      	mov	r2, fp
 8020862:	4608      	mov	r0, r1
 8020864:	f001 fb8b 	bl	8021f7e <cmox_ModularBN_Sqr>
 8020868:	e7bc      	b.n	80207e4 <cmox_ModExpBN_SW+0x130>
 802086a:	9905      	ldr	r1, [sp, #20]
 802086c:	1c64      	adds	r4, r4, #1
 802086e:	9a05      	ldr	r2, [sp, #20]
 8020870:	2502      	movs	r5, #2
 8020872:	1b09      	subs	r1, r1, r4
 8020874:	4088      	lsls	r0, r1
 8020876:	ea40 0a0a 	orr.w	sl, r0, sl
 802087a:	b2e0      	uxtb	r0, r4
 802087c:	4290      	cmp	r0, r2
 802087e:	d1b1      	bne.n	80207e4 <cmox_ModExpBN_SW+0x130>
 8020880:	2700      	movs	r7, #0
 8020882:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020884:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020886:	4616      	mov	r6, r2
 8020888:	e006      	b.n	8020898 <cmox_ModExpBN_SW+0x1e4>
 802088a:	4623      	mov	r3, r4
 802088c:	465a      	mov	r2, fp
 802088e:	4629      	mov	r1, r5
 8020890:	4628      	mov	r0, r5
 8020892:	f001 fb74 	bl	8021f7e <cmox_ModularBN_Sqr>
 8020896:	1c7f      	adds	r7, r7, #1
 8020898:	42b7      	cmp	r7, r6
 802089a:	d3f6      	bcc.n	802088a <cmox_ModExpBN_SW+0x1d6>
 802089c:	9514      	str	r5, [sp, #80]	@ 0x50
 802089e:	465b      	mov	r3, fp
 80208a0:	9416      	str	r4, [sp, #88]	@ 0x58
 80208a2:	fa5f f48a 	uxtb.w	r4, sl
 80208a6:	9605      	str	r6, [sp, #20]
 80208a8:	f99d 0009 	ldrsb.w	r0, [sp, #9]
 80208ac:	9d08      	ldr	r5, [sp, #32]
 80208ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80208b0:	9901      	ldr	r1, [sp, #4]
 80208b2:	9200      	str	r2, [sp, #0]
 80208b4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80208b6:	4085      	lsls	r5, r0
 80208b8:	ea24 0a05 	bic.w	sl, r4, r5
 80208bc:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 80208c0:	2400      	movs	r4, #0
 80208c2:	4610      	mov	r0, r2
 80208c4:	46a2      	mov	sl, r4
 80208c6:	f001 fb34 	bl	8021f32 <cmox_ModularBN_Mul>
 80208ca:	e78a      	b.n	80207e2 <cmox_ModExpBN_SW+0x12e>
 80208cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80208ce:	a901      	add	r1, sp, #4
 80208d0:	4648      	mov	r0, r9
 80208d2:	f001 ff0c 	bl	80226ee <cmox_membuf_free>
 80208d6:	9804      	ldr	r0, [sp, #16]
 80208d8:	b00b      	add	sp, #44	@ 0x2c
 80208da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080208e0 <cmox_rsa_construct>:
 80208e0:	b510      	push	{r4, lr}
 80208e2:	0004      	movs	r4, r0
 80208e4:	4608      	mov	r0, r1
 80208e6:	4619      	mov	r1, r3
 80208e8:	bf18      	it	ne
 80208ea:	2800      	cmpne	r0, #0
 80208ec:	d00d      	beq.n	802090a <cmox_rsa_construct+0x2a>
 80208ee:	2a00      	cmp	r2, #0
 80208f0:	bf18      	it	ne
 80208f2:	2900      	cmpne	r1, #0
 80208f4:	d009      	beq.n	802090a <cmox_rsa_construct+0x2a>
 80208f6:	9b02      	ldr	r3, [sp, #8]
 80208f8:	b13b      	cbz	r3, 802090a <cmox_rsa_construct+0x2a>
 80208fa:	6160      	str	r0, [r4, #20]
 80208fc:	4620      	mov	r0, r4
 80208fe:	6122      	str	r2, [r4, #16]
 8020900:	461a      	mov	r2, r3
 8020902:	f001 fec5 	bl	8022690 <cmox_membuf_init>
 8020906:	4b01      	ldr	r3, [pc, #4]	@ (802090c <cmox_rsa_construct+0x2c>)
 8020908:	61a3      	str	r3, [r4, #24]
 802090a:	bd10      	pop	{r4, pc}
 802090c:	deadf0ca 	.word	0xdeadf0ca

08020910 <cmox_rsa_cleanup>:
 8020910:	b510      	push	{r4, lr}
 8020912:	0004      	movs	r4, r0
 8020914:	d007      	beq.n	8020926 <cmox_rsa_cleanup+0x16>
 8020916:	f001 feff 	bl	8022718 <cmox_membuf_cleanup>
 802091a:	4620      	mov	r0, r4
 802091c:	211c      	movs	r1, #28
 802091e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020922:	f009 bbd3 	b.w	802a0cc <__aeabi_memclr>
 8020926:	bd10      	pop	{r4, pc}

08020928 <cmox_rsa_setKey>:
 8020928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802092c:	0006      	movs	r6, r0
 802092e:	460f      	mov	r7, r1
 8020930:	4690      	mov	r8, r2
 8020932:	461d      	mov	r5, r3
 8020934:	bf18      	it	ne
 8020936:	2f00      	cmpne	r7, #0
 8020938:	d006      	beq.n	8020948 <cmox_rsa_setKey+0x20>
 802093a:	f1b8 0f00 	cmp.w	r8, #0
 802093e:	bf18      	it	ne
 8020940:	2d00      	cmpne	r5, #0
 8020942:	d001      	beq.n	8020948 <cmox_rsa_setKey+0x20>
 8020944:	9c06      	ldr	r4, [sp, #24]
 8020946:	b90c      	cbnz	r4, 802094c <cmox_rsa_setKey+0x24>
 8020948:	480a      	ldr	r0, [pc, #40]	@ (8020974 <cmox_rsa_setKey+0x4c>)
 802094a:	e011      	b.n	8020970 <cmox_rsa_setKey+0x48>
 802094c:	213c      	movs	r1, #60	@ 0x3c
 802094e:	f1a8 0801 	sub.w	r8, r8, #1
 8020952:	f009 fbbb 	bl	802a0cc <__aeabi_memclr>
 8020956:	4a08      	ldr	r2, [pc, #32]	@ (8020978 <cmox_rsa_setKey+0x50>)
 8020958:	6032      	str	r2, [r6, #0]
 802095a:	60b7      	str	r7, [r6, #8]
 802095c:	7838      	ldrb	r0, [r7, #0]
 802095e:	f001 fd0c 	bl	802237a <cmox_mathUtils_bitLength>
 8020962:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8020966:	6070      	str	r0, [r6, #4]
 8020968:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 802096c:	60f5      	str	r5, [r6, #12]
 802096e:	6134      	str	r4, [r6, #16]
 8020970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020974:	00050003 	.word	0x00050003
 8020978:	24000000 	.word	0x24000000

0802097c <cmox_modexp_std>:
 802097c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020980:	b087      	sub	sp, #28
 8020982:	2600      	movs	r6, #0
 8020984:	9604      	str	r6, [sp, #16]
 8020986:	4605      	mov	r5, r0
 8020988:	9606      	str	r6, [sp, #24]
 802098a:	f44f 2ba0 	mov.w	fp, #327680	@ 0x50000
 802098e:	9603      	str	r6, [sp, #12]
 8020990:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8020aa8 <cmox_modexp_std+0x12c>
 8020994:	9605      	str	r6, [sp, #20]
 8020996:	b1c5      	cbz	r5, 80209ca <cmox_modexp_std+0x4e>
 8020998:	0008      	movs	r0, r1
 802099a:	9101      	str	r1, [sp, #4]
 802099c:	d015      	beq.n	80209ca <cmox_modexp_std+0x4e>
 802099e:	0011      	movs	r1, r2
 80209a0:	9200      	str	r2, [sp, #0]
 80209a2:	bf18      	it	ne
 80209a4:	ea5f 0903 	movsne.w	r9, r3
 80209a8:	d00f      	beq.n	80209ca <cmox_modexp_std+0x4e>
 80209aa:	686e      	ldr	r6, [r5, #4]
 80209ac:	6829      	ldr	r1, [r5, #0]
 80209ae:	1df6      	adds	r6, r6, #7
 80209b0:	08f6      	lsrs	r6, r6, #3
 80209b2:	2900      	cmp	r1, #0
 80209b4:	bf1c      	itt	ne
 80209b6:	68a8      	ldrne	r0, [r5, #8]
 80209b8:	2800      	cmpne	r0, #0
 80209ba:	d006      	beq.n	80209ca <cmox_modexp_std+0x4e>
 80209bc:	2e00      	cmp	r6, #0
 80209be:	bf1c      	itt	ne
 80209c0:	68e9      	ldrne	r1, [r5, #12]
 80209c2:	2900      	cmpne	r1, #0
 80209c4:	d001      	beq.n	80209ca <cmox_modexp_std+0x4e>
 80209c6:	6928      	ldr	r0, [r5, #16]
 80209c8:	b908      	cbnz	r0, 80209ce <cmox_modexp_std+0x52>
 80209ca:	46c3      	mov	fp, r8
 80209cc:	e067      	b.n	8020a9e <cmox_modexp_std+0x122>
 80209ce:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80209d0:	1cf7      	adds	r7, r6, #3
 80209d2:	08ba      	lsrs	r2, r7, #2
 80209d4:	a904      	add	r1, sp, #16
 80209d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020aac <cmox_modexp_std+0x130>
 80209da:	4620      	mov	r0, r4
 80209dc:	f000 fd1e 	bl	802141c <cmox_bn_alloc>
 80209e0:	b108      	cbz	r0, 80209e6 <cmox_modexp_std+0x6a>
 80209e2:	46d3      	mov	fp, sl
 80209e4:	e05b      	b.n	8020a9e <cmox_modexp_std+0x122>
 80209e6:	08ba      	lsrs	r2, r7, #2
 80209e8:	a903      	add	r1, sp, #12
 80209ea:	4620      	mov	r0, r4
 80209ec:	f000 fd16 	bl	802141c <cmox_bn_alloc>
 80209f0:	b108      	cbz	r0, 80209f6 <cmox_modexp_std+0x7a>
 80209f2:	46d3      	mov	fp, sl
 80209f4:	e04f      	b.n	8020a96 <cmox_modexp_std+0x11a>
 80209f6:	9a03      	ldr	r2, [sp, #12]
 80209f8:	68a8      	ldr	r0, [r5, #8]
 80209fa:	4631      	mov	r1, r6
 80209fc:	f000 fdad 	bl	802155a <cmox_bn_fromU8BE>
 8020a00:	9a04      	ldr	r2, [sp, #16]
 8020a02:	9900      	ldr	r1, [sp, #0]
 8020a04:	9801      	ldr	r0, [sp, #4]
 8020a06:	f000 fda8 	bl	802155a <cmox_bn_fromU8BE>
 8020a0a:	9903      	ldr	r1, [sp, #12]
 8020a0c:	9804      	ldr	r0, [sp, #16]
 8020a0e:	f000 fd63 	bl	80214d8 <cmox_bn_cmp>
 8020a12:	2800      	cmp	r0, #0
 8020a14:	bf58      	it	pl
 8020a16:	f8df b098 	ldrpl.w	fp, [pc, #152]	@ 8020ab0 <cmox_modexp_std+0x134>
 8020a1a:	d538      	bpl.n	8020a8e <cmox_modexp_std+0x112>
 8020a1c:	692a      	ldr	r2, [r5, #16]
 8020a1e:	a905      	add	r1, sp, #20
 8020a20:	4620      	mov	r0, r4
 8020a22:	1cd2      	adds	r2, r2, #3
 8020a24:	0892      	lsrs	r2, r2, #2
 8020a26:	f000 fcf9 	bl	802141c <cmox_bn_alloc>
 8020a2a:	b108      	cbz	r0, 8020a30 <cmox_modexp_std+0xb4>
 8020a2c:	46d3      	mov	fp, sl
 8020a2e:	e02e      	b.n	8020a8e <cmox_modexp_std+0x112>
 8020a30:	9a05      	ldr	r2, [sp, #20]
 8020a32:	6929      	ldr	r1, [r5, #16]
 8020a34:	68e8      	ldr	r0, [r5, #12]
 8020a36:	f000 fd90 	bl	802155a <cmox_bn_fromU8BE>
 8020a3a:	9803      	ldr	r0, [sp, #12]
 8020a3c:	a906      	add	r1, sp, #24
 8020a3e:	6802      	ldr	r2, [r0, #0]
 8020a40:	4620      	mov	r0, r4
 8020a42:	f000 fceb 	bl	802141c <cmox_bn_alloc>
 8020a46:	b108      	cbz	r0, 8020a4c <cmox_modexp_std+0xd0>
 8020a48:	46d3      	mov	fp, sl
 8020a4a:	e01c      	b.n	8020a86 <cmox_modexp_std+0x10a>
 8020a4c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8020a4e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020a50:	9002      	str	r0, [sp, #8]
 8020a52:	9101      	str	r1, [sp, #4]
 8020a54:	9400      	str	r4, [sp, #0]
 8020a56:	9b06      	ldr	r3, [sp, #24]
 8020a58:	9a03      	ldr	r2, [sp, #12]
 8020a5a:	9905      	ldr	r1, [sp, #20]
 8020a5c:	9804      	ldr	r0, [sp, #16]
 8020a5e:	f7ff fda7 	bl	80205b0 <cmox_ModExpBN>
 8020a62:	b120      	cbz	r0, 8020a6e <cmox_modexp_std+0xf2>
 8020a64:	2802      	cmp	r0, #2
 8020a66:	bf14      	ite	ne
 8020a68:	46c3      	movne	fp, r8
 8020a6a:	46d3      	moveq	fp, sl
 8020a6c:	e007      	b.n	8020a7e <cmox_modexp_std+0x102>
 8020a6e:	9806      	ldr	r0, [sp, #24]
 8020a70:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8020a72:	4632      	mov	r2, r6
 8020a74:	4649      	mov	r1, r9
 8020a76:	f000 fdb3 	bl	80215e0 <cmox_bn_toU8BE>
 8020a7a:	b105      	cbz	r5, 8020a7e <cmox_modexp_std+0x102>
 8020a7c:	602e      	str	r6, [r5, #0]
 8020a7e:	a906      	add	r1, sp, #24
 8020a80:	4620      	mov	r0, r4
 8020a82:	f000 fcd6 	bl	8021432 <cmox_bn_free>
 8020a86:	a905      	add	r1, sp, #20
 8020a88:	4620      	mov	r0, r4
 8020a8a:	f000 fcd2 	bl	8021432 <cmox_bn_free>
 8020a8e:	a903      	add	r1, sp, #12
 8020a90:	4620      	mov	r0, r4
 8020a92:	f000 fcce 	bl	8021432 <cmox_bn_free>
 8020a96:	a904      	add	r1, sp, #16
 8020a98:	4620      	mov	r0, r4
 8020a9a:	f000 fcca 	bl	8021432 <cmox_bn_free>
 8020a9e:	4658      	mov	r0, fp
 8020aa0:	b007      	add	sp, #28
 8020aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020aa6:	bf00      	nop
 8020aa8:	00050003 	.word	0x00050003
 8020aac:	0005000c 	.word	0x0005000c
 8020ab0:	00050007 	.word	0x00050007

08020ab4 <cmox_rsa_pkcs1v15_verify>:
 8020ab4:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020ab8:	460e      	mov	r6, r1
 8020aba:	b087      	sub	sp, #28
 8020abc:	2100      	movs	r1, #0
 8020abe:	2e00      	cmp	r6, #0
 8020ac0:	9104      	str	r1, [sp, #16]
 8020ac2:	9105      	str	r1, [sp, #20]
 8020ac4:	bf1e      	ittt	ne
 8020ac6:	6831      	ldrne	r1, [r6, #0]
 8020ac8:	2900      	cmpne	r1, #0
 8020aca:	ea5f 0802 	movsne.w	r8, r2
 8020ace:	d007      	beq.n	8020ae0 <cmox_rsa_pkcs1v15_verify+0x2c>
 8020ad0:	001d      	movs	r5, r3
 8020ad2:	d005      	beq.n	8020ae0 <cmox_rsa_pkcs1v15_verify+0x2c>
 8020ad4:	0004      	movs	r4, r0
 8020ad6:	d003      	beq.n	8020ae0 <cmox_rsa_pkcs1v15_verify+0x2c>
 8020ad8:	69a0      	ldr	r0, [r4, #24]
 8020ada:	494f      	ldr	r1, [pc, #316]	@ (8020c18 <cmox_rsa_pkcs1v15_verify+0x164>)
 8020adc:	4288      	cmp	r0, r1
 8020ade:	d001      	beq.n	8020ae4 <cmox_rsa_pkcs1v15_verify+0x30>
 8020ae0:	4f4e      	ldr	r7, [pc, #312]	@ (8020c1c <cmox_rsa_pkcs1v15_verify+0x168>)
 8020ae2:	e094      	b.n	8020c0e <cmox_rsa_pkcs1v15_verify+0x15a>
 8020ae4:	6960      	ldr	r0, [r4, #20]
 8020ae6:	7f01      	ldrb	r1, [r0, #28]
 8020ae8:	f011 0f09 	tst.w	r1, #9
 8020aec:	bf08      	it	eq
 8020aee:	4f4c      	ldreq	r7, [pc, #304]	@ (8020c20 <cmox_rsa_pkcs1v15_verify+0x16c>)
 8020af0:	d0f7      	beq.n	8020ae2 <cmox_rsa_pkcs1v15_verify+0x2e>
 8020af2:	6920      	ldr	r0, [r4, #16]
 8020af4:	7a01      	ldrb	r1, [r0, #8]
 8020af6:	078a      	lsls	r2, r1, #30
 8020af8:	bf58      	it	pl
 8020afa:	4f4a      	ldrpl	r7, [pc, #296]	@ (8020c24 <cmox_rsa_pkcs1v15_verify+0x170>)
 8020afc:	d5f1      	bpl.n	8020ae2 <cmox_rsa_pkcs1v15_verify+0x2e>
 8020afe:	6870      	ldr	r0, [r6, #4]
 8020b00:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8020b04:	1dc0      	adds	r0, r0, #7
 8020b06:	08c0      	lsrs	r0, r0, #3
 8020b08:	9006      	str	r0, [sp, #24]
 8020b0a:	9906      	ldr	r1, [sp, #24]
 8020b0c:	458a      	cmp	sl, r1
 8020b0e:	d101      	bne.n	8020b14 <cmox_rsa_pkcs1v15_verify+0x60>
 8020b10:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020b12:	b90f      	cbnz	r7, 8020b18 <cmox_rsa_pkcs1v15_verify+0x64>
 8020b14:	4f44      	ldr	r7, [pc, #272]	@ (8020c28 <cmox_rsa_pkcs1v15_verify+0x174>)
 8020b16:	e07a      	b.n	8020c0e <cmox_rsa_pkcs1v15_verify+0x15a>
 8020b18:	9a06      	ldr	r2, [sp, #24]
 8020b1a:	a905      	add	r1, sp, #20
 8020b1c:	4620      	mov	r0, r4
 8020b1e:	f8df 910c 	ldr.w	r9, [pc, #268]	@ 8020c2c <cmox_rsa_pkcs1v15_verify+0x178>
 8020b22:	f001 fdc5 	bl	80226b0 <cmox_membuf_alloc>
 8020b26:	b108      	cbz	r0, 8020b2c <cmox_rsa_pkcs1v15_verify+0x78>
 8020b28:	464f      	mov	r7, r9
 8020b2a:	e070      	b.n	8020c0e <cmox_rsa_pkcs1v15_verify+0x15a>
 8020b2c:	6960      	ldr	r0, [r4, #20]
 8020b2e:	2200      	movs	r2, #0
 8020b30:	9003      	str	r0, [sp, #12]
 8020b32:	6921      	ldr	r1, [r4, #16]
 8020b34:	9401      	str	r4, [sp, #4]
 8020b36:	9b05      	ldr	r3, [sp, #20]
 8020b38:	9102      	str	r1, [sp, #8]
 8020b3a:	4639      	mov	r1, r7
 8020b3c:	9200      	str	r2, [sp, #0]
 8020b3e:	f8d6 c000 	ldr.w	ip, [r6]
 8020b42:	4652      	mov	r2, sl
 8020b44:	4630      	mov	r0, r6
 8020b46:	f8dc 7000 	ldr.w	r7, [ip]
 8020b4a:	47b8      	blx	r7
 8020b4c:	4607      	mov	r7, r0
 8020b4e:	f5b7 2fa0 	cmp.w	r7, #327680	@ 0x50000
 8020b52:	d157      	bne.n	8020c04 <cmox_rsa_pkcs1v15_verify+0x150>
 8020b54:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8020b58:	68a8      	ldr	r0, [r5, #8]
 8020b5a:	9f06      	ldr	r7, [sp, #24]
 8020b5c:	9a06      	ldr	r2, [sp, #24]
 8020b5e:	a904      	add	r1, sp, #16
 8020b60:	4482      	add	sl, r0
 8020b62:	4620      	mov	r0, r4
 8020b64:	eba7 070a 	sub.w	r7, r7, sl
 8020b68:	1eff      	subs	r7, r7, #3
 8020b6a:	f001 fda1 	bl	80226b0 <cmox_membuf_alloc>
 8020b6e:	b108      	cbz	r0, 8020b74 <cmox_rsa_pkcs1v15_verify+0xc0>
 8020b70:	464f      	mov	r7, r9
 8020b72:	e047      	b.n	8020c04 <cmox_rsa_pkcs1v15_verify+0x150>
 8020b74:	9806      	ldr	r0, [sp, #24]
 8020b76:	f10a 010b 	add.w	r1, sl, #11
 8020b7a:	4288      	cmp	r0, r1
 8020b7c:	bf38      	it	cc
 8020b7e:	4f2c      	ldrcc	r7, [pc, #176]	@ (8020c30 <cmox_rsa_pkcs1v15_verify+0x17c>)
 8020b80:	d33b      	bcc.n	8020bfa <cmox_rsa_pkcs1v15_verify+0x146>
 8020b82:	9804      	ldr	r0, [sp, #16]
 8020b84:	2100      	movs	r1, #0
 8020b86:	2201      	movs	r2, #1
 8020b88:	7001      	strb	r1, [r0, #0]
 8020b8a:	9b04      	ldr	r3, [sp, #16]
 8020b8c:	2000      	movs	r0, #0
 8020b8e:	705a      	strb	r2, [r3, #1]
 8020b90:	22ff      	movs	r2, #255	@ 0xff
 8020b92:	e001      	b.n	8020b98 <cmox_rsa_pkcs1v15_verify+0xe4>
 8020b94:	708a      	strb	r2, [r1, #2]
 8020b96:	1c40      	adds	r0, r0, #1
 8020b98:	9904      	ldr	r1, [sp, #16]
 8020b9a:	42b8      	cmp	r0, r7
 8020b9c:	4401      	add	r1, r0
 8020b9e:	d3f9      	bcc.n	8020b94 <cmox_rsa_pkcs1v15_verify+0xe0>
 8020ba0:	2000      	movs	r0, #0
 8020ba2:	7088      	strb	r0, [r1, #2]
 8020ba4:	e006      	b.n	8020bb4 <cmox_rsa_pkcs1v15_verify+0x100>
 8020ba6:	6829      	ldr	r1, [r5, #0]
 8020ba8:	9b04      	ldr	r3, [sp, #16]
 8020baa:	5c0a      	ldrb	r2, [r1, r0]
 8020bac:	19c1      	adds	r1, r0, r7
 8020bae:	1c40      	adds	r0, r0, #1
 8020bb0:	440b      	add	r3, r1
 8020bb2:	70da      	strb	r2, [r3, #3]
 8020bb4:	6869      	ldr	r1, [r5, #4]
 8020bb6:	4288      	cmp	r0, r1
 8020bb8:	d3f5      	bcc.n	8020ba6 <cmox_rsa_pkcs1v15_verify+0xf2>
 8020bba:	2000      	movs	r0, #0
 8020bbc:	e008      	b.n	8020bd0 <cmox_rsa_pkcs1v15_verify+0x11c>
 8020bbe:	6869      	ldr	r1, [r5, #4]
 8020bc0:	9a04      	ldr	r2, [sp, #16]
 8020bc2:	f818 3000 	ldrb.w	r3, [r8, r0]
 8020bc6:	19c9      	adds	r1, r1, r7
 8020bc8:	1841      	adds	r1, r0, r1
 8020bca:	4411      	add	r1, r2
 8020bcc:	1c40      	adds	r0, r0, #1
 8020bce:	70cb      	strb	r3, [r1, #3]
 8020bd0:	68a9      	ldr	r1, [r5, #8]
 8020bd2:	4288      	cmp	r0, r1
 8020bd4:	d3f3      	bcc.n	8020bbe <cmox_rsa_pkcs1v15_verify+0x10a>
 8020bd6:	4917      	ldr	r1, [pc, #92]	@ (8020c34 <cmox_rsa_pkcs1v15_verify+0x180>)
 8020bd8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020bda:	4a17      	ldr	r2, [pc, #92]	@ (8020c38 <cmox_rsa_pkcs1v15_verify+0x184>)
 8020bdc:	4b17      	ldr	r3, [pc, #92]	@ (8020c3c <cmox_rsa_pkcs1v15_verify+0x188>)
 8020bde:	680d      	ldr	r5, [r1, #0]
 8020be0:	9003      	str	r0, [sp, #12]
 8020be2:	9202      	str	r2, [sp, #8]
 8020be4:	9301      	str	r3, [sp, #4]
 8020be6:	9500      	str	r5, [sp, #0]
 8020be8:	9b06      	ldr	r3, [sp, #24]
 8020bea:	6871      	ldr	r1, [r6, #4]
 8020bec:	9a05      	ldr	r2, [sp, #20]
 8020bee:	9804      	ldr	r0, [sp, #16]
 8020bf0:	1dc9      	adds	r1, r1, #7
 8020bf2:	08c9      	lsrs	r1, r1, #3
 8020bf4:	f000 fa08 	bl	8021008 <cmox_utils_robustCmp>
 8020bf8:	4607      	mov	r7, r0
 8020bfa:	9a06      	ldr	r2, [sp, #24]
 8020bfc:	a904      	add	r1, sp, #16
 8020bfe:	4620      	mov	r0, r4
 8020c00:	f001 fd75 	bl	80226ee <cmox_membuf_free>
 8020c04:	9a06      	ldr	r2, [sp, #24]
 8020c06:	a905      	add	r1, sp, #20
 8020c08:	4620      	mov	r0, r4
 8020c0a:	f001 fd70 	bl	80226ee <cmox_membuf_free>
 8020c0e:	4638      	mov	r0, r7
 8020c10:	b008      	add	sp, #32
 8020c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c16:	bf00      	nop
 8020c18:	deadf0ca 	.word	0xdeadf0ca
 8020c1c:	00050003 	.word	0x00050003
 8020c20:	00050010 	.word	0x00050010
 8020c24:	00050011 	.word	0x00050011
 8020c28:	00050009 	.word	0x00050009
 8020c2c:	0005000c 	.word	0x0005000c
 8020c30:	00050007 	.word	0x00050007
 8020c34:	0802ad10 	.word	0x0802ad10
 8020c38:	00056e93 	.word	0x00056e93
 8020c3c:	0005c726 	.word	0x0005c726

08020c40 <cmox_sha256_cleanup>:
 8020c40:	b500      	push	{lr}
 8020c42:	b081      	sub	sp, #4
 8020c44:	6801      	ldr	r1, [r0, #0]
 8020c46:	4a07      	ldr	r2, [pc, #28]	@ (8020c64 <cmox_sha256_cleanup+0x24>)
 8020c48:	4291      	cmp	r1, r2
 8020c4a:	d100      	bne.n	8020c4e <cmox_sha256_cleanup+0xe>
 8020c4c:	b910      	cbnz	r0, 8020c54 <cmox_sha256_cleanup+0x14>
 8020c4e:	4806      	ldr	r0, [pc, #24]	@ (8020c68 <cmox_sha256_cleanup+0x28>)
 8020c50:	b001      	add	sp, #4
 8020c52:	bd00      	pop	{pc}
 8020c54:	217c      	movs	r1, #124	@ 0x7c
 8020c56:	f009 fa39 	bl	802a0cc <__aeabi_memclr>
 8020c5a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8020c5e:	b001      	add	sp, #4
 8020c60:	bd00      	pop	{pc}
 8020c62:	bf00      	nop
 8020c64:	08020d50 	.word	0x08020d50
 8020c68:	00020003 	.word	0x00020003

08020c6c <cmox_sha256_init>:
 8020c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020c70:	b088      	sub	sp, #32
 8020c72:	4a0c      	ldr	r2, [pc, #48]	@ (8020ca4 <cmox_sha256_init+0x38>)
 8020c74:	4669      	mov	r1, sp
 8020c76:	f8df a030 	ldr.w	sl, [pc, #48]	@ 8020ca8 <cmox_sha256_init+0x3c>
 8020c7a:	e892 51f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, ip, lr}
 8020c7e:	e881 51f8 	stmia.w	r1, {r3, r4, r5, r6, r7, r8, ip, lr}
 8020c82:	f8d0 9000 	ldr.w	r9, [r0]
 8020c86:	45d1      	cmp	r9, sl
 8020c88:	d100      	bne.n	8020c8c <cmox_sha256_init+0x20>
 8020c8a:	b918      	cbnz	r0, 8020c94 <cmox_sha256_init+0x28>
 8020c8c:	4807      	ldr	r0, [pc, #28]	@ (8020cac <cmox_sha256_init+0x40>)
 8020c8e:	b008      	add	sp, #32
 8020c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c94:	2220      	movs	r2, #32
 8020c96:	3008      	adds	r0, #8
 8020c98:	f001 fbb8 	bl	802240c <cmox_md_init>
 8020c9c:	b008      	add	sp, #32
 8020c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ca2:	bf00      	nop
 8020ca4:	08020d30 	.word	0x08020d30
 8020ca8:	08020d50 	.word	0x08020d50
 8020cac:	00020003 	.word	0x00020003

08020cb0 <cmox_sha256_setTagLen>:
 8020cb0:	2921      	cmp	r1, #33	@ 0x21
 8020cb2:	d204      	bcs.n	8020cbe <cmox_sha256_setTagLen+0xe>
 8020cb4:	6802      	ldr	r2, [r0, #0]
 8020cb6:	4b04      	ldr	r3, [pc, #16]	@ (8020cc8 <cmox_sha256_setTagLen+0x18>)
 8020cb8:	429a      	cmp	r2, r3
 8020cba:	d100      	bne.n	8020cbe <cmox_sha256_setTagLen+0xe>
 8020cbc:	b908      	cbnz	r0, 8020cc2 <cmox_sha256_setTagLen+0x12>
 8020cbe:	4803      	ldr	r0, [pc, #12]	@ (8020ccc <cmox_sha256_setTagLen+0x1c>)
 8020cc0:	4770      	bx	lr
 8020cc2:	3008      	adds	r0, #8
 8020cc4:	f001 bbb1 	b.w	802242a <cmox_md_setTagSize>
 8020cc8:	08020d50 	.word	0x08020d50
 8020ccc:	00020003 	.word	0x00020003

08020cd0 <cmox_sha256_append>:
 8020cd0:	b410      	push	{r4}
 8020cd2:	b081      	sub	sp, #4
 8020cd4:	4613      	mov	r3, r2
 8020cd6:	6802      	ldr	r2, [r0, #0]
 8020cd8:	4c07      	ldr	r4, [pc, #28]	@ (8020cf8 <cmox_sha256_append+0x28>)
 8020cda:	42a2      	cmp	r2, r4
 8020cdc:	d100      	bne.n	8020ce0 <cmox_sha256_append+0x10>
 8020cde:	b918      	cbnz	r0, 8020ce8 <cmox_sha256_append+0x18>
 8020ce0:	b001      	add	sp, #4
 8020ce2:	4806      	ldr	r0, [pc, #24]	@ (8020cfc <cmox_sha256_append+0x2c>)
 8020ce4:	bc10      	pop	{r4}
 8020ce6:	4770      	bx	lr
 8020ce8:	f100 0224 	add.w	r2, r0, #36	@ 0x24
 8020cec:	b001      	add	sp, #4
 8020cee:	3008      	adds	r0, #8
 8020cf0:	bc10      	pop	{r4}
 8020cf2:	f001 bb9f 	b.w	8022434 <cmox_md_append>
 8020cf6:	bf00      	nop
 8020cf8:	08020d50 	.word	0x08020d50
 8020cfc:	00020003 	.word	0x00020003

08020d00 <cmox_sha256_generateTag>:
 8020d00:	b410      	push	{r4}
 8020d02:	b081      	sub	sp, #4
 8020d04:	4613      	mov	r3, r2
 8020d06:	6802      	ldr	r2, [r0, #0]
 8020d08:	4c07      	ldr	r4, [pc, #28]	@ (8020d28 <cmox_sha256_generateTag+0x28>)
 8020d0a:	42a2      	cmp	r2, r4
 8020d0c:	d100      	bne.n	8020d10 <cmox_sha256_generateTag+0x10>
 8020d0e:	b918      	cbnz	r0, 8020d18 <cmox_sha256_generateTag+0x18>
 8020d10:	b001      	add	sp, #4
 8020d12:	4806      	ldr	r0, [pc, #24]	@ (8020d2c <cmox_sha256_generateTag+0x2c>)
 8020d14:	bc10      	pop	{r4}
 8020d16:	4770      	bx	lr
 8020d18:	460a      	mov	r2, r1
 8020d1a:	f100 0124 	add.w	r1, r0, #36	@ 0x24
 8020d1e:	b001      	add	sp, #4
 8020d20:	3008      	adds	r0, #8
 8020d22:	bc10      	pop	{r4}
 8020d24:	f001 bbda 	b.w	80224dc <cmox_md_generateTag>
 8020d28:	08020d50 	.word	0x08020d50
 8020d2c:	00020003 	.word	0x00020003
 8020d30:	6a09e667 	.word	0x6a09e667
 8020d34:	bb67ae85 	.word	0xbb67ae85
 8020d38:	3c6ef372 	.word	0x3c6ef372
 8020d3c:	a54ff53a 	.word	0xa54ff53a
 8020d40:	510e527f 	.word	0x510e527f
 8020d44:	9b05688c 	.word	0x9b05688c
 8020d48:	1f83d9ab 	.word	0x1f83d9ab
 8020d4c:	5be0cd19 	.word	0x5be0cd19

08020d50 <CMOX_SHA256_VTABLE>:
 8020d50:	08020c41 08020c6d 08020cb1 08020cd1     A...m...........
 8020d60:	08020d01                                ....

08020d64 <cmox_sha256_compute>:
 8020d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d66:	4604      	mov	r4, r0
 8020d68:	480b      	ldr	r0, [pc, #44]	@ (8020d98 <cmox_sha256_compute+0x34>)
 8020d6a:	b0a3      	sub	sp, #140	@ 0x8c
 8020d6c:	460d      	mov	r5, r1
 8020d6e:	4616      	mov	r6, r2
 8020d70:	461f      	mov	r7, r3
 8020d72:	9002      	str	r0, [sp, #8]
 8020d74:	4b09      	ldr	r3, [pc, #36]	@ (8020d9c <cmox_sha256_compute+0x38>)
 8020d76:	2208      	movs	r2, #8
 8020d78:	2140      	movs	r1, #64	@ 0x40
 8020d7a:	a804      	add	r0, sp, #16
 8020d7c:	f001 fb42 	bl	8022404 <cmox_md_construct>
 8020d80:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8020d82:	9700      	str	r7, [sp, #0]
 8020d84:	9101      	str	r1, [sp, #4]
 8020d86:	4633      	mov	r3, r6
 8020d88:	462a      	mov	r2, r5
 8020d8a:	4621      	mov	r1, r4
 8020d8c:	a802      	add	r0, sp, #8
 8020d8e:	f7ff fae9 	bl	8020364 <cmox_hash_common_compute>
 8020d92:	b023      	add	sp, #140	@ 0x8c
 8020d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d96:	bf00      	nop
 8020d98:	08020d50 	.word	0x08020d50
 8020d9c:	0802ad00 	.word	0x0802ad00

08020da0 <cmox_sha256_transform>:
 8020da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020da4:	b0c1      	sub	sp, #260	@ 0x104
 8020da6:	680b      	ldr	r3, [r1, #0]
 8020da8:	4602      	mov	r2, r0
 8020daa:	a801      	add	r0, sp, #4
 8020dac:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8020db0:	ba1b      	rev	r3, r3
 8020db2:	9301      	str	r3, [sp, #4]
 8020db4:	684c      	ldr	r4, [r1, #4]
 8020db6:	ba23      	rev	r3, r4
 8020db8:	6043      	str	r3, [r0, #4]
 8020dba:	688b      	ldr	r3, [r1, #8]
 8020dbc:	ba1b      	rev	r3, r3
 8020dbe:	6083      	str	r3, [r0, #8]
 8020dc0:	68cc      	ldr	r4, [r1, #12]
 8020dc2:	ba23      	rev	r3, r4
 8020dc4:	60c3      	str	r3, [r0, #12]
 8020dc6:	690b      	ldr	r3, [r1, #16]
 8020dc8:	ba1b      	rev	r3, r3
 8020dca:	6103      	str	r3, [r0, #16]
 8020dcc:	694c      	ldr	r4, [r1, #20]
 8020dce:	ba23      	rev	r3, r4
 8020dd0:	6143      	str	r3, [r0, #20]
 8020dd2:	698b      	ldr	r3, [r1, #24]
 8020dd4:	ba1b      	rev	r3, r3
 8020dd6:	6183      	str	r3, [r0, #24]
 8020dd8:	69cc      	ldr	r4, [r1, #28]
 8020dda:	ba23      	rev	r3, r4
 8020ddc:	61c3      	str	r3, [r0, #28]
 8020dde:	6a0b      	ldr	r3, [r1, #32]
 8020de0:	ba1b      	rev	r3, r3
 8020de2:	6203      	str	r3, [r0, #32]
 8020de4:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8020de6:	ba23      	rev	r3, r4
 8020de8:	6243      	str	r3, [r0, #36]	@ 0x24
 8020dea:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8020dec:	ba1b      	rev	r3, r3
 8020dee:	6283      	str	r3, [r0, #40]	@ 0x28
 8020df0:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8020df2:	ba23      	rev	r3, r4
 8020df4:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8020df6:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8020df8:	ba1b      	rev	r3, r3
 8020dfa:	6303      	str	r3, [r0, #48]	@ 0x30
 8020dfc:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8020dfe:	ba23      	rev	r3, r4
 8020e00:	6343      	str	r3, [r0, #52]	@ 0x34
 8020e02:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8020e04:	ba1b      	rev	r3, r3
 8020e06:	6383      	str	r3, [r0, #56]	@ 0x38
 8020e08:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8020e0a:	ba09      	rev	r1, r1
 8020e0c:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8020e0e:	2018      	movs	r0, #24
 8020e10:	f85c ec08 	ldr.w	lr, [ip, #-8]
 8020e14:	ea4f 41fe 	mov.w	r1, lr, ror #19
 8020e18:	ea91 437e 	eors.w	r3, r1, lr, ror #17
 8020e1c:	f85c 1c3c 	ldr.w	r1, [ip, #-60]
 8020e20:	ea4f 47b1 	mov.w	r7, r1, ror #18
 8020e24:	ea83 239e 	eor.w	r3, r3, lr, lsr #10
 8020e28:	f85c ec1c 	ldr.w	lr, [ip, #-28]
 8020e2c:	ea97 16f1 	eors.w	r6, r7, r1, ror #7
 8020e30:	ea86 06d1 	eor.w	r6, r6, r1, lsr #3
 8020e34:	4473      	add	r3, lr
 8020e36:	18f3      	adds	r3, r6, r3
 8020e38:	f85c 6c40 	ldr.w	r6, [ip, #-64]
 8020e3c:	18f3      	adds	r3, r6, r3
 8020e3e:	f8cc 3000 	str.w	r3, [ip]
 8020e42:	f85c ec04 	ldr.w	lr, [ip, #-4]
 8020e46:	ea4f 46fe 	mov.w	r6, lr, ror #19
 8020e4a:	ea96 437e 	eors.w	r3, r6, lr, ror #17
 8020e4e:	f85c 6c38 	ldr.w	r6, [ip, #-56]
 8020e52:	ea4f 4ab6 	mov.w	sl, r6, ror #18
 8020e56:	ea83 239e 	eor.w	r3, r3, lr, lsr #10
 8020e5a:	f85c ec18 	ldr.w	lr, [ip, #-24]
 8020e5e:	ea8a 17f6 	eor.w	r7, sl, r6, ror #7
 8020e62:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 8020e66:	4473      	add	r3, lr
 8020e68:	18fb      	adds	r3, r7, r3
 8020e6a:	18c9      	adds	r1, r1, r3
 8020e6c:	1e40      	subs	r0, r0, #1
 8020e6e:	f8cc 1004 	str.w	r1, [ip, #4]
 8020e72:	f10c 0c08 	add.w	ip, ip, #8
 8020e76:	d1cb      	bne.n	8020e10 <cmox_sha256_transform+0x70>
 8020e78:	9200      	str	r2, [sp, #0]
 8020e7a:	4610      	mov	r0, r2
 8020e7c:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 8020e7e:	f8d2 8070 	ldr.w	r8, [r2, #112]	@ 0x70
 8020e82:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8020e84:	f8d0 e060 	ldr.w	lr, [r0, #96]	@ 0x60
 8020e88:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8020e8a:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 8020e8c:	f8d0 a068 	ldr.w	sl, [r0, #104]	@ 0x68
 8020e90:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 8020e92:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8020f90 <cmox_sha256_transform+0x1f0>
 8020e96:	f10d 0c04 	add.w	ip, sp, #4
 8020e9a:	2020      	movs	r0, #32
 8020e9c:	ea4f 16b3 	mov.w	r6, r3, ror #6
 8020ea0:	f85c 7b04 	ldr.w	r7, [ip], #4
 8020ea4:	ea86 26f3 	eor.w	r6, r6, r3, ror #11
 8020ea8:	ea4e 0b01 	orr.w	fp, lr, r1
 8020eac:	ea0b 0b02 	and.w	fp, fp, r2
 8020eb0:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 8020eb4:	1975      	adds	r5, r6, r5
 8020eb6:	ea84 0608 	eor.w	r6, r4, r8
 8020eba:	401e      	ands	r6, r3
 8020ebc:	4066      	eors	r6, r4
 8020ebe:	1975      	adds	r5, r6, r5
 8020ec0:	f859 6b04 	ldr.w	r6, [r9], #4
 8020ec4:	1975      	adds	r5, r6, r5
 8020ec6:	197e      	adds	r6, r7, r5
 8020ec8:	ea4f 07b1 	mov.w	r7, r1, ror #2
 8020ecc:	ea0e 0501 	and.w	r5, lr, r1
 8020ed0:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 8020ed4:	ea4b 0505 	orr.w	r5, fp, r5
 8020ed8:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
 8020edc:	19ef      	adds	r7, r5, r7
 8020ede:	4645      	mov	r5, r8
 8020ee0:	eb06 080a 	add.w	r8, r6, sl
 8020ee4:	4692      	mov	sl, r2
 8020ee6:	4672      	mov	r2, lr
 8020ee8:	eb07 0e06 	add.w	lr, r7, r6
 8020eec:	ea4f 16b8 	mov.w	r6, r8, ror #6
 8020ef0:	f85c 7b04 	ldr.w	r7, [ip], #4
 8020ef4:	ea86 26f8 	eor.w	r6, r6, r8, ror #11
 8020ef8:	ea41 0b0e 	orr.w	fp, r1, lr
 8020efc:	ea0b 0b02 	and.w	fp, fp, r2
 8020f00:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8020f04:	1934      	adds	r4, r6, r4
 8020f06:	ea85 0603 	eor.w	r6, r5, r3
 8020f0a:	ea06 0608 	and.w	r6, r6, r8
 8020f0e:	406e      	eors	r6, r5
 8020f10:	1934      	adds	r4, r6, r4
 8020f12:	f859 6b04 	ldr.w	r6, [r9], #4
 8020f16:	1934      	adds	r4, r6, r4
 8020f18:	193e      	adds	r6, r7, r4
 8020f1a:	ea4f 07be 	mov.w	r7, lr, ror #2
 8020f1e:	ea01 040e 	and.w	r4, r1, lr
 8020f22:	ea87 377e 	eor.w	r7, r7, lr, ror #13
 8020f26:	ea4b 0404 	orr.w	r4, fp, r4
 8020f2a:	ea87 57be 	eor.w	r7, r7, lr, ror #22
 8020f2e:	19e7      	adds	r7, r4, r7
 8020f30:	461c      	mov	r4, r3
 8020f32:	eb06 030a 	add.w	r3, r6, sl
 8020f36:	4692      	mov	sl, r2
 8020f38:	460a      	mov	r2, r1
 8020f3a:	19b9      	adds	r1, r7, r6
 8020f3c:	1e40      	subs	r0, r0, #1
 8020f3e:	d1ad      	bne.n	8020e9c <cmox_sha256_transform+0xfc>
 8020f40:	9800      	ldr	r0, [sp, #0]
 8020f42:	f8d0 905c 	ldr.w	r9, [r0, #92]	@ 0x5c
 8020f46:	4449      	add	r1, r9
 8020f48:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8020f4a:	9800      	ldr	r0, [sp, #0]
 8020f4c:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 8020f4e:	448e      	add	lr, r1
 8020f50:	f8c0 e060 	str.w	lr, [r0, #96]	@ 0x60
 8020f54:	9800      	ldr	r0, [sp, #0]
 8020f56:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8020f58:	1852      	adds	r2, r2, r1
 8020f5a:	6642      	str	r2, [r0, #100]	@ 0x64
 8020f5c:	9800      	ldr	r0, [sp, #0]
 8020f5e:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8020f60:	448a      	add	sl, r1
 8020f62:	f8c0 a068 	str.w	sl, [r0, #104]	@ 0x68
 8020f66:	9800      	ldr	r0, [sp, #0]
 8020f68:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 8020f6a:	185b      	adds	r3, r3, r1
 8020f6c:	66c3      	str	r3, [r0, #108]	@ 0x6c
 8020f6e:	9800      	ldr	r0, [sp, #0]
 8020f70:	6f01      	ldr	r1, [r0, #112]	@ 0x70
 8020f72:	4488      	add	r8, r1
 8020f74:	f8c0 8070 	str.w	r8, [r0, #112]	@ 0x70
 8020f78:	9800      	ldr	r0, [sp, #0]
 8020f7a:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 8020f7c:	1864      	adds	r4, r4, r1
 8020f7e:	6744      	str	r4, [r0, #116]	@ 0x74
 8020f80:	9800      	ldr	r0, [sp, #0]
 8020f82:	6f81      	ldr	r1, [r0, #120]	@ 0x78
 8020f84:	186d      	adds	r5, r5, r1
 8020f86:	6785      	str	r5, [r0, #120]	@ 0x78
 8020f88:	b041      	add	sp, #260	@ 0x104
 8020f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f8e:	bf00      	nop
 8020f90:	0802ac00 	.word	0x0802ac00

08020f94 <firstloop_bb_cmp>:
 8020f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f96:	2401      	movs	r4, #1
 8020f98:	2300      	movs	r3, #0
 8020f9a:	9400      	str	r4, [sp, #0]
 8020f9c:	2400      	movs	r4, #0
 8020f9e:	e00d      	b.n	8020fbc <firstloop_bb_cmp+0x28>
 8020fa0:	9d00      	ldr	r5, [sp, #0]
 8020fa2:	5d06      	ldrb	r6, [r0, r4]
 8020fa4:	5d0f      	ldrb	r7, [r1, r4]
 8020fa6:	1c64      	adds	r4, r4, #1
 8020fa8:	407e      	eors	r6, r7
 8020faa:	43f6      	mvns	r6, r6
 8020fac:	1c76      	adds	r6, r6, #1
 8020fae:	0ff6      	lsrs	r6, r6, #31
 8020fb0:	f086 0601 	eor.w	r6, r6, #1
 8020fb4:	4035      	ands	r5, r6
 8020fb6:	9500      	str	r5, [sp, #0]
 8020fb8:	9d00      	ldr	r5, [sp, #0]
 8020fba:	18eb      	adds	r3, r5, r3
 8020fbc:	4294      	cmp	r4, r2
 8020fbe:	d3ef      	bcc.n	8020fa0 <firstloop_bb_cmp+0xc>
 8020fc0:	4618      	mov	r0, r3
 8020fc2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08020fc4 <secondloop_bb_cmp>:
 8020fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fc6:	2300      	movs	r3, #0
 8020fc8:	2401      	movs	r4, #1
 8020fca:	9400      	str	r4, [sp, #0]
 8020fcc:	2a00      	cmp	r2, #0
 8020fce:	e011      	b.n	8020ff4 <secondloop_bb_cmp+0x30>
 8020fd0:	9d00      	ldr	r5, [sp, #0]
 8020fd2:	1886      	adds	r6, r0, r2
 8020fd4:	f816 4c01 	ldrb.w	r4, [r6, #-1]
 8020fd8:	188f      	adds	r7, r1, r2
 8020fda:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8020fde:	4074      	eors	r4, r6
 8020fe0:	43e4      	mvns	r4, r4
 8020fe2:	1c64      	adds	r4, r4, #1
 8020fe4:	0fe4      	lsrs	r4, r4, #31
 8020fe6:	f084 0401 	eor.w	r4, r4, #1
 8020fea:	4025      	ands	r5, r4
 8020fec:	9500      	str	r5, [sp, #0]
 8020fee:	9c00      	ldr	r4, [sp, #0]
 8020ff0:	18e3      	adds	r3, r4, r3
 8020ff2:	1e52      	subs	r2, r2, #1
 8020ff4:	d1ec      	bne.n	8020fd0 <secondloop_bb_cmp+0xc>
 8020ff6:	4618      	mov	r0, r3
 8020ff8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08020ffc <bufType_bb>:
 8020ffc:	0f95 0802 0fc5 0802 0001 0000               ............

08021008 <cmox_utils_robustCmp>:
 8021008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802100c:	461c      	mov	r4, r3
 802100e:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8021012:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021014:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 8021018:	f04f 33ff 	mov.w	r3, #4294967295
 802101c:	460e      	mov	r6, r1
 802101e:	9300      	str	r3, [sp, #0]
 8021020:	f8d9 b000 	ldr.w	fp, [r9]
 8021024:	4692      	mov	sl, r2
 8021026:	4605      	mov	r5, r0
 8021028:	4632      	mov	r2, r6
 802102a:	4651      	mov	r1, sl
 802102c:	47d8      	blx	fp
 802102e:	f1b8 0f00 	cmp.w	r8, #0
 8021032:	4683      	mov	fp, r0
 8021034:	d02d      	beq.n	8021092 <cmox_utils_robustCmp+0x8a>
 8021036:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802103a:	4632      	mov	r2, r6
 802103c:	4651      	mov	r1, sl
 802103e:	4628      	mov	r0, r5
 8021040:	4798      	blx	r3
 8021042:	ea6f 020b 	mvn.w	r2, fp
 8021046:	1c52      	adds	r2, r2, #1
 8021048:	ea42 020b 	orr.w	r2, r2, fp
 802104c:	9900      	ldr	r1, [sp, #0]
 802104e:	ea6f 75d2 	mvn.w	r5, r2, lsr #31
 8021052:	43c3      	mvns	r3, r0
 8021054:	1c5b      	adds	r3, r3, #1
 8021056:	4303      	orrs	r3, r0
 8021058:	1c6d      	adds	r5, r5, #1
 802105a:	4029      	ands	r1, r5
 802105c:	9100      	str	r1, [sp, #0]
 802105e:	ea6f 75d3 	mvn.w	r5, r3, lsr #31
 8021062:	9a00      	ldr	r2, [sp, #0]
 8021064:	f086 3155 	eor.w	r1, r6, #1431655765	@ 0x55555555
 8021068:	4048      	eors	r0, r1
 802106a:	f080 3355 	eor.w	r3, r0, #1431655765	@ 0x55555555
 802106e:	1c6d      	adds	r5, r5, #1
 8021070:	43db      	mvns	r3, r3
 8021072:	402a      	ands	r2, r5
 8021074:	ea87 0100 	eor.w	r1, r7, r0
 8021078:	1c5b      	adds	r3, r3, #1
 802107a:	9200      	str	r2, [sp, #0]
 802107c:	f081 3155 	eor.w	r1, r1, #1431655765	@ 0x55555555
 8021080:	4318      	orrs	r0, r3
 8021082:	f8c8 1000 	str.w	r1, [r8]
 8021086:	ea6f 70d0 	mvn.w	r0, r0, lsr #31
 802108a:	9a00      	ldr	r2, [sp, #0]
 802108c:	1c40      	adds	r0, r0, #1
 802108e:	4382      	bics	r2, r0
 8021090:	9200      	str	r2, [sp, #0]
 8021092:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8021096:	2901      	cmp	r1, #1
 8021098:	d109      	bne.n	80210ae <cmox_utils_robustCmp+0xa6>
 802109a:	4074      	eors	r4, r6
 802109c:	43e2      	mvns	r2, r4
 802109e:	1c52      	adds	r2, r2, #1
 80210a0:	4314      	orrs	r4, r2
 80210a2:	ea6f 71d4 	mvn.w	r1, r4, lsr #31
 80210a6:	9800      	ldr	r0, [sp, #0]
 80210a8:	1c49      	adds	r1, r1, #1
 80210aa:	4388      	bics	r0, r1
 80210ac:	e00a      	b.n	80210c4 <cmox_utils_robustCmp+0xbc>
 80210ae:	1cf1      	adds	r1, r6, #3
 80210b0:	9800      	ldr	r0, [sp, #0]
 80210b2:	ea84 0291 	eor.w	r2, r4, r1, lsr #2
 80210b6:	43d2      	mvns	r2, r2
 80210b8:	1c52      	adds	r2, r2, #1
 80210ba:	4314      	orrs	r4, r2
 80210bc:	ea6f 73d4 	mvn.w	r3, r4, lsr #31
 80210c0:	1c5b      	adds	r3, r3, #1
 80210c2:	4398      	bics	r0, r3
 80210c4:	f086 36aa 	eor.w	r6, r6, #2863311530	@ 0xaaaaaaaa
 80210c8:	ea86 060b 	eor.w	r6, r6, fp
 80210cc:	f086 33aa 	eor.w	r3, r6, #2863311530	@ 0xaaaaaaaa
 80210d0:	43f2      	mvns	r2, r6
 80210d2:	43db      	mvns	r3, r3
 80210d4:	f3c2 72c0 	ubfx	r2, r2, #31, #1
 80210d8:	1c5b      	adds	r3, r3, #1
 80210da:	9000      	str	r0, [sp, #0]
 80210dc:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 80210e0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80210e2:	9900      	ldr	r1, [sp, #0]
 80210e4:	4077      	eors	r7, r6
 80210e6:	f087 37aa 	eor.w	r7, r7, #2863311530	@ 0xaaaaaaaa
 80210ea:	43d2      	mvns	r2, r2
 80210ec:	1c52      	adds	r2, r2, #1
 80210ee:	4391      	bics	r1, r2
 80210f0:	9100      	str	r1, [sp, #0]
 80210f2:	9900      	ldr	r1, [sp, #0]
 80210f4:	4388      	bics	r0, r1
 80210f6:	9900      	ldr	r1, [sp, #0]
 80210f8:	400f      	ands	r7, r1
 80210fa:	4338      	orrs	r0, r7
 80210fc:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021100 <cmox_aesFast_encrypt>:
 8021100:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021104:	f100 040c 	add.w	r4, r0, #12
 8021108:	b08c      	sub	sp, #48	@ 0x30
 802110a:	6822      	ldr	r2, [r4, #0]
 802110c:	6846      	ldr	r6, [r0, #4]
 802110e:	6808      	ldr	r0, [r1, #0]
 8021110:	68cd      	ldr	r5, [r1, #12]
 8021112:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8021116:	68a3      	ldr	r3, [r4, #8]
 8021118:	f8d4 8004 	ldr.w	r8, [r4, #4]
 802111c:	08f6      	lsrs	r6, r6, #3
 802111e:	4050      	eors	r0, r2
 8021120:	684a      	ldr	r2, [r1, #4]
 8021122:	68e1      	ldr	r1, [r4, #12]
 8021124:	1cf6      	adds	r6, r6, #3
 8021126:	ea83 0e0e 	eor.w	lr, r3, lr
 802112a:	4bba      	ldr	r3, [pc, #744]	@ (8021414 <cmox_aesFast_encrypt+0x314>)
 802112c:	ea88 0202 	eor.w	r2, r8, r2
 8021130:	9600      	str	r6, [sp, #0]
 8021132:	404d      	eors	r5, r1
 8021134:	4601      	mov	r1, r0
 8021136:	e057      	b.n	80211e8 <cmox_aesFast_encrypt+0xe8>
 8021138:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802113a:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 802113e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8021142:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8021146:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 802114a:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 802114e:	f853 a020 	ldr.w	sl, [r3, r0, lsl #2]
 8021152:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
 8021156:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 802115a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802115e:	9e02      	ldr	r6, [sp, #8]
 8021160:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8021164:	ea4f 203a 	mov.w	r0, sl, ror #8
 8021168:	4078      	eors	r0, r7
 802116a:	ea80 403b 	eor.w	r0, r0, fp, ror #16
 802116e:	f853 a02c 	ldr.w	sl, [r3, ip, lsl #2]
 8021172:	ea4f 4c35 	mov.w	ip, r5, ror #16
 8021176:	9d06      	ldr	r5, [sp, #24]
 8021178:	ea80 6131 	eor.w	r1, r0, r1, ror #24
 802117c:	6820      	ldr	r0, [r4, #0]
 802117e:	4041      	eors	r1, r0
 8021180:	ea8e 203a 	eor.w	r0, lr, sl, ror #8
 8021184:	f8dd a014 	ldr.w	sl, [sp, #20]
 8021188:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
 802118c:	ea8c 0000 	eor.w	r0, ip, r0
 8021190:	f8dd c020 	ldr.w	ip, [sp, #32]
 8021194:	ea80 6232 	eor.w	r2, r0, r2, ror #24
 8021198:	6860      	ldr	r0, [r4, #4]
 802119a:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
 802119e:	f853 e02c 	ldr.w	lr, [r3, ip, lsl #2]
 80211a2:	4042      	eors	r2, r0
 80211a4:	9807      	ldr	r0, [sp, #28]
 80211a6:	ea85 2e3e 	eor.w	lr, r5, lr, ror #8
 80211aa:	f853 c020 	ldr.w	ip, [r3, r0, lsl #2]
 80211ae:	ea4f 403c 	mov.w	r0, ip, ror #16
 80211b2:	f8dd c010 	ldr.w	ip, [sp, #16]
 80211b6:	ea80 0e0e 	eor.w	lr, r0, lr
 80211ba:	68a0      	ldr	r0, [r4, #8]
 80211bc:	ea8e 6e37 	eor.w	lr, lr, r7, ror #24
 80211c0:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 80211c4:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
 80211c8:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 80211cc:	ea80 0e0e 	eor.w	lr, r0, lr
 80211d0:	9803      	ldr	r0, [sp, #12]
 80211d2:	ea96 2535 	eors.w	r5, r6, r5, ror #8
 80211d6:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
 80211da:	ea4f 4038 	mov.w	r0, r8, ror #16
 80211de:	4045      	eors	r5, r0
 80211e0:	68e0      	ldr	r0, [r4, #12]
 80211e2:	ea85 653c 	eor.w	r5, r5, ip, ror #24
 80211e6:	4045      	eors	r5, r0
 80211e8:	b2ef      	uxtb	r7, r5
 80211ea:	ea4f 6b11 	mov.w	fp, r1, lsr #24
 80211ee:	f853 a027 	ldr.w	sl, [r3, r7, lsl #2]
 80211f2:	ea4f 2902 	mov.w	r9, r2, lsl #8
 80211f6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80211fa:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80211fe:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 8021202:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8021206:	ea4f 673a 	mov.w	r7, sl, ror #24
 802120a:	f853 902c 	ldr.w	r9, [r3, ip, lsl #2]
 802120e:	f853 a02b 	ldr.w	sl, [r3, fp, lsl #2]
 8021212:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8021216:	ea8a 2036 	eor.w	r0, sl, r6, ror #8
 802121a:	ea80 4039 	eor.w	r0, r0, r9, ror #16
 802121e:	4078      	eors	r0, r7
 8021220:	ea8c 0000 	eor.w	r0, ip, r0
 8021224:	ea4f 4c05 	mov.w	ip, r5, lsl #16
 8021228:	ea4f 270e 	mov.w	r7, lr, lsl #8
 802122c:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8021230:	0e3f      	lsrs	r7, r7, #24
 8021232:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
 8021236:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 802123a:	ea4f 4c37 	mov.w	ip, r7, ror #16
 802123e:	b2cf      	uxtb	r7, r1
 8021240:	ea4f 2a3b 	mov.w	sl, fp, ror #8
 8021244:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
 8021248:	ea4f 673b 	mov.w	r7, fp, ror #24
 802124c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021250:	f853 b02b 	ldr.w	fp, [r3, fp, lsl #2]
 8021254:	ea8a 0a0b 	eor.w	sl, sl, fp
 8021258:	ea8c 0a0a 	eor.w	sl, ip, sl
 802125c:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8021260:	ea87 0a0a 	eor.w	sl, r7, sl
 8021264:	022f      	lsls	r7, r5, #8
 8021266:	0e3f      	lsrs	r7, r7, #24
 8021268:	0e2d      	lsrs	r5, r5, #24
 802126a:	ea8c 0a0a 	eor.w	sl, ip, sl
 802126e:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
 8021272:	ea4f 2b3c 	mov.w	fp, ip, ror #8
 8021276:	ea4f 4c01 	mov.w	ip, r1, lsl #16
 802127a:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 802127e:	0209      	lsls	r1, r1, #8
 8021280:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8021284:	fa5f fc82 	uxtb.w	ip, r2
 8021288:	0e09      	lsrs	r1, r1, #24
 802128a:	0412      	lsls	r2, r2, #16
 802128c:	0e12      	lsrs	r2, r2, #24
 802128e:	ea4f 4737 	mov.w	r7, r7, ror #16
 8021292:	9701      	str	r7, [sp, #4]
 8021294:	ea4f 671e 	mov.w	r7, lr, lsr #24
 8021298:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 802129c:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80212a0:	fa5f fe8e 	uxtb.w	lr, lr
 80212a4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80212a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80212ac:	ea8b 0b07 	eor.w	fp, fp, r7
 80212b0:	9f01      	ldr	r7, [sp, #4]
 80212b2:	ea87 0b0b 	eor.w	fp, r7, fp
 80212b6:	ea8b 6b3c 	eor.w	fp, fp, ip, ror #24
 80212ba:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80212be:	ea8c 0b0b 	eor.w	fp, ip, fp
 80212c2:	f853 c02e 	ldr.w	ip, [r3, lr, lsl #2]
 80212c6:	f853 e025 	ldr.w	lr, [r3, r5, lsl #2]
 80212ca:	9d00      	ldr	r5, [sp, #0]
 80212cc:	ea8e 2131 	eor.w	r1, lr, r1, ror #8
 80212d0:	ea4f 6e1a 	mov.w	lr, sl, lsr #24
 80212d4:	ea91 4132 	eors.w	r1, r1, r2, ror #16
 80212d8:	69e2      	ldr	r2, [r4, #28]
 80212da:	1e6d      	subs	r5, r5, #1
 80212dc:	3420      	adds	r4, #32
 80212de:	ea81 613c 	eor.w	r1, r1, ip, ror #24
 80212e2:	9500      	str	r5, [sp, #0]
 80212e4:	ea4f 4c0a 	mov.w	ip, sl, lsl #16
 80212e8:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 80212ec:	0205      	lsls	r5, r0, #8
 80212ee:	0e2d      	lsrs	r5, r5, #24
 80212f0:	4051      	eors	r1, r2
 80212f2:	ea4f 220b 	mov.w	r2, fp, lsl #8
 80212f6:	0e0f      	lsrs	r7, r1, #24
 80212f8:	0e12      	lsrs	r2, r2, #24
 80212fa:	9701      	str	r7, [sp, #4]
 80212fc:	ea4f 671b 	mov.w	r7, fp, lsr #24
 8021300:	f8cd c00c 	str.w	ip, [sp, #12]
 8021304:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 8021308:	9504      	str	r5, [sp, #16]
 802130a:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 802130e:	9705      	str	r7, [sp, #20]
 8021310:	020d      	lsls	r5, r1, #8
 8021312:	f8cd c01c 	str.w	ip, [sp, #28]
 8021316:	0e2d      	lsrs	r5, r5, #24
 8021318:	0e07      	lsrs	r7, r0, #24
 802131a:	9508      	str	r5, [sp, #32]
 802131c:	9209      	str	r2, [sp, #36]	@ 0x24
 802131e:	ea4f 420b 	mov.w	r2, fp, lsl #16
 8021322:	0e12      	lsrs	r2, r2, #24
 8021324:	040d      	lsls	r5, r1, #16
 8021326:	920a      	str	r2, [sp, #40]	@ 0x28
 8021328:	b2c2      	uxtb	r2, r0
 802132a:	9800      	ldr	r0, [sp, #0]
 802132c:	ea4f 2c0a 	mov.w	ip, sl, lsl #8
 8021330:	0e2d      	lsrs	r5, r5, #24
 8021332:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8021336:	fa5f fb8b 	uxtb.w	fp, fp
 802133a:	fa5f fa8a 	uxtb.w	sl, sl
 802133e:	2800      	cmp	r0, #0
 8021340:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8021344:	f8cd b008 	str.w	fp, [sp, #8]
 8021348:	b2c9      	uxtb	r1, r1
 802134a:	f8cd a018 	str.w	sl, [sp, #24]
 802134e:	f47f aef3 	bne.w	8021138 <cmox_aesFast_encrypt+0x38>
 8021352:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021354:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8021418 <cmox_aesFast_encrypt+0x318>
 8021358:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 802135c:	f818 0007 	ldrb.w	r0, [r8, r7]
 8021360:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021366:	f818 9006 	ldrb.w	r9, [r8, r6]
 802136a:	f818 700c 	ldrb.w	r7, [r8, ip]
 802136e:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8021372:	ea49 6900 	orr.w	r9, r9, r0, lsl #24
 8021376:	6820      	ldr	r0, [r4, #0]
 8021378:	ea49 2907 	orr.w	r9, r9, r7, lsl #8
 802137c:	ea41 0909 	orr.w	r9, r1, r9
 8021380:	ea80 0909 	eor.w	r9, r0, r9
 8021384:	f8c3 9000 	str.w	r9, [r3]
 8021388:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 802138c:	f818 600e 	ldrb.w	r6, [r8, lr]
 8021390:	f818 1002 	ldrb.w	r1, [r8, r2]
 8021394:	6860      	ldr	r0, [r4, #4]
 8021396:	f818 c009 	ldrb.w	ip, [r8, r9]
 802139a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 802139e:	ea4c 6c06 	orr.w	ip, ip, r6, lsl #24
 80213a2:	f818 6005 	ldrb.w	r6, [r8, r5]
 80213a6:	ea4c 2c06 	orr.w	ip, ip, r6, lsl #8
 80213aa:	ea41 0c0c 	orr.w	ip, r1, ip
 80213ae:	ea80 0c0c 	eor.w	ip, r0, ip
 80213b2:	f8c3 c004 	str.w	ip, [r3, #4]
 80213b6:	9808      	ldr	r0, [sp, #32]
 80213b8:	9a05      	ldr	r2, [sp, #20]
 80213ba:	f8dd c018 	ldr.w	ip, [sp, #24]
 80213be:	f818 6000 	ldrb.w	r6, [r8, r0]
 80213c2:	68a0      	ldr	r0, [r4, #8]
 80213c4:	f818 1002 	ldrb.w	r1, [r8, r2]
 80213c8:	9a07      	ldr	r2, [sp, #28]
 80213ca:	0436      	lsls	r6, r6, #16
 80213cc:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 80213d0:	f818 100c 	ldrb.w	r1, [r8, ip]
 80213d4:	f818 9002 	ldrb.w	r9, [r8, r2]
 80213d8:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 80213dc:	430e      	orrs	r6, r1
 80213de:	4046      	eors	r6, r0
 80213e0:	609e      	str	r6, [r3, #8]
 80213e2:	9804      	ldr	r0, [sp, #16]
 80213e4:	9a01      	ldr	r2, [sp, #4]
 80213e6:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80213ea:	f818 6000 	ldrb.w	r6, [r8, r0]
 80213ee:	f818 1002 	ldrb.w	r1, [r8, r2]
 80213f2:	f818 0009 	ldrb.w	r0, [r8, r9]
 80213f6:	0436      	lsls	r6, r6, #16
 80213f8:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 80213fc:	9903      	ldr	r1, [sp, #12]
 80213fe:	f818 2001 	ldrb.w	r2, [r8, r1]
 8021402:	68e1      	ldr	r1, [r4, #12]
 8021404:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8021408:	4306      	orrs	r6, r0
 802140a:	404e      	eors	r6, r1
 802140c:	60de      	str	r6, [r3, #12]
 802140e:	b00d      	add	sp, #52	@ 0x34
 8021410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021414:	0802aec0 	.word	0x0802aec0
 8021418:	0802b2c0 	.word	0x0802b2c0

0802141c <cmox_bn_alloc>:
 802141c:	b538      	push	{r3, r4, r5, lr}
 802141e:	4615      	mov	r5, r2
 8021420:	00aa      	lsls	r2, r5, #2
 8021422:	460c      	mov	r4, r1
 8021424:	1d12      	adds	r2, r2, #4
 8021426:	f001 f943 	bl	80226b0 <cmox_membuf_alloc>
 802142a:	b908      	cbnz	r0, 8021430 <cmox_bn_alloc+0x14>
 802142c:	6823      	ldr	r3, [r4, #0]
 802142e:	601d      	str	r5, [r3, #0]
 8021430:	bd32      	pop	{r1, r4, r5, pc}

08021432 <cmox_bn_free>:
 8021432:	b510      	push	{r4, lr}
 8021434:	460c      	mov	r4, r1
 8021436:	6823      	ldr	r3, [r4, #0]
 8021438:	681a      	ldr	r2, [r3, #0]
 802143a:	0092      	lsls	r2, r2, #2
 802143c:	1d12      	adds	r2, r2, #4
 802143e:	f001 f956 	bl	80226ee <cmox_membuf_free>
 8021442:	2300      	movs	r3, #0
 8021444:	6023      	str	r3, [r4, #0]
 8021446:	bd10      	pop	{r4, pc}

08021448 <cmox_bn_init>:
 8021448:	4602      	mov	r2, r0
 802144a:	2000      	movs	r0, #0
 802144c:	b510      	push	{r4, lr}
 802144e:	b90a      	cbnz	r2, 8021454 <cmox_bn_init+0xc>
 8021450:	2001      	movs	r0, #1
 8021452:	bd10      	pop	{r4, pc}
 8021454:	6051      	str	r1, [r2, #4]
 8021456:	2102      	movs	r1, #2
 8021458:	e002      	b.n	8021460 <cmox_bn_init+0x18>
 802145a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
 802145e:	1c49      	adds	r1, r1, #1
 8021460:	6814      	ldr	r4, [r2, #0]
 8021462:	428c      	cmp	r4, r1
 8021464:	d2f9      	bcs.n	802145a <cmox_bn_init+0x12>
 8021466:	bd10      	pop	{r4, pc}

08021468 <cmox_bn_cCopy>:
 8021468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802146c:	4607      	mov	r7, r0
 802146e:	4616      	mov	r6, r2
 8021470:	6830      	ldr	r0, [r6, #0]
 8021472:	4688      	mov	r8, r1
 8021474:	2500      	movs	r5, #0
 8021476:	427a      	negs	r2, r7
 8021478:	f8d8 4000 	ldr.w	r4, [r8]
 802147c:	1c40      	adds	r0, r0, #1
 802147e:	e004      	b.n	802148a <cmox_bn_cCopy+0x22>
 8021480:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 8021484:	1c40      	adds	r0, r0, #1
 8021486:	4011      	ands	r1, r2
 8021488:	430d      	orrs	r5, r1
 802148a:	4284      	cmp	r4, r0
 802148c:	d2f8      	bcs.n	8021480 <cmox_bn_cCopy+0x18>
 802148e:	6830      	ldr	r0, [r6, #0]
 8021490:	42a0      	cmp	r0, r4
 8021492:	bf38      	it	cc
 8021494:	4604      	movcc	r4, r0
 8021496:	ea5f 0904 	movs.w	r9, r4
 802149a:	e00a      	b.n	80214b2 <cmox_bn_cCopy+0x4a>
 802149c:	f856 2029 	ldr.w	r2, [r6, r9, lsl #2]
 80214a0:	f858 1029 	ldr.w	r1, [r8, r9, lsl #2]
 80214a4:	4638      	mov	r0, r7
 80214a6:	f000 ff54 	bl	8022352 <cmox_mathUtils_mux>
 80214aa:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 80214ae:	f1b9 0901 	subs.w	r9, r9, #1
 80214b2:	d1f3      	bne.n	802149c <cmox_bn_cCopy+0x34>
 80214b4:	1c64      	adds	r4, r4, #1
 80214b6:	1e79      	subs	r1, r7, #1
 80214b8:	e005      	b.n	80214c6 <cmox_bn_cCopy+0x5e>
 80214ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80214be:	4008      	ands	r0, r1
 80214c0:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 80214c4:	1c64      	adds	r4, r4, #1
 80214c6:	6832      	ldr	r2, [r6, #0]
 80214c8:	42a2      	cmp	r2, r4
 80214ca:	d2f6      	bcs.n	80214ba <cmox_bn_cCopy+0x52>
 80214cc:	2d00      	cmp	r5, #0
 80214ce:	bf14      	ite	ne
 80214d0:	2003      	movne	r0, #3
 80214d2:	2000      	moveq	r0, #0
 80214d4:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

080214d8 <cmox_bn_cmp>:
 80214d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80214dc:	4684      	mov	ip, r0
 80214de:	468e      	mov	lr, r1
 80214e0:	f8de 5000 	ldr.w	r5, [lr]
 80214e4:	f8dc 1000 	ldr.w	r1, [ip]
 80214e8:	2601      	movs	r6, #1
 80214ea:	2700      	movs	r7, #0
 80214ec:	46ba      	mov	sl, r7
 80214ee:	42a9      	cmp	r1, r5
 80214f0:	d30f      	bcc.n	8021512 <cmox_bn_cmp+0x3a>
 80214f2:	4608      	mov	r0, r1
 80214f4:	4664      	mov	r4, ip
 80214f6:	2101      	movs	r1, #1
 80214f8:	4285      	cmp	r5, r0
 80214fa:	d224      	bcs.n	8021546 <cmox_bn_cmp+0x6e>
 80214fc:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 8021500:	2300      	movs	r3, #0
 8021502:	4252      	negs	r2, r2
 8021504:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8021508:	1e40      	subs	r0, r0, #1
 802150a:	f003 0301 	and.w	r3, r3, #1
 802150e:	431f      	orrs	r7, r3
 8021510:	e7f2      	b.n	80214f8 <cmox_bn_cmp+0x20>
 8021512:	4628      	mov	r0, r5
 8021514:	460d      	mov	r5, r1
 8021516:	4674      	mov	r4, lr
 8021518:	f04f 31ff 	mov.w	r1, #4294967295
 802151c:	e7ee      	b.n	80214fc <cmox_bn_cmp+0x24>
 802151e:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 8021522:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8021526:	2500      	movs	r5, #0
 8021528:	2300      	movs	r3, #0
 802152a:	ebb4 0802 	subs.w	r8, r4, r2
 802152e:	eb65 0903 	sbc.w	r9, r5, r3
 8021532:	4062      	eors	r2, r4
 8021534:	1e52      	subs	r2, r2, #1
 8021536:	ea06 0509 	and.w	r5, r6, r9
 802153a:	f163 0300 	sbc.w	r3, r3, #0
 802153e:	ea45 0a0a 	orr.w	sl, r5, sl
 8021542:	401e      	ands	r6, r3
 8021544:	1e40      	subs	r0, r0, #1
 8021546:	2800      	cmp	r0, #0
 8021548:	d1e9      	bne.n	802151e <cmox_bn_cmp+0x46>
 802154a:	eb06 024a 	add.w	r2, r6, sl, lsl #1
 802154e:	4638      	mov	r0, r7
 8021550:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021554:	1e52      	subs	r2, r2, #1
 8021556:	f000 befc 	b.w	8022352 <cmox_mathUtils_mux>

0802155a <cmox_bn_fromU8BE>:
 802155a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802155c:	b10a      	cbz	r2, 8021562 <cmox_bn_fromU8BE+0x8>
 802155e:	b910      	cbnz	r0, 8021566 <cmox_bn_fromU8BE+0xc>
 8021560:	b109      	cbz	r1, 8021566 <cmox_bn_fromU8BE+0xc>
 8021562:	2001      	movs	r0, #1
 8021564:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8021566:	6813      	ldr	r3, [r2, #0]
 8021568:	1ccc      	adds	r4, r1, #3
 802156a:	ebb3 0f94 	cmp.w	r3, r4, lsr #2
 802156e:	d201      	bcs.n	8021574 <cmox_bn_fromU8BE+0x1a>
 8021570:	2003      	movs	r0, #3
 8021572:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8021574:	b379      	cbz	r1, 80215d6 <cmox_bn_fromU8BE+0x7c>
 8021576:	088b      	lsrs	r3, r1, #2
 8021578:	1c5b      	adds	r3, r3, #1
 802157a:	2401      	movs	r4, #1
 802157c:	e00f      	b.n	802159e <cmox_bn_fromU8BE+0x44>
 802157e:	eba1 0584 	sub.w	r5, r1, r4, lsl #2
 8021582:	4405      	add	r5, r0
 8021584:	786f      	ldrb	r7, [r5, #1]
 8021586:	782e      	ldrb	r6, [r5, #0]
 8021588:	043f      	lsls	r7, r7, #16
 802158a:	ea47 6706 	orr.w	r7, r7, r6, lsl #24
 802158e:	78ae      	ldrb	r6, [r5, #2]
 8021590:	78ed      	ldrb	r5, [r5, #3]
 8021592:	ea47 2706 	orr.w	r7, r7, r6, lsl #8
 8021596:	432f      	orrs	r7, r5
 8021598:	f842 7024 	str.w	r7, [r2, r4, lsl #2]
 802159c:	1c64      	adds	r4, r4, #1
 802159e:	429c      	cmp	r4, r3
 80215a0:	d3ed      	bcc.n	802157e <cmox_bn_fromU8BE+0x24>
 80215a2:	6816      	ldr	r6, [r2, #0]
 80215a4:	42a6      	cmp	r6, r4
 80215a6:	bf22      	ittt	cs
 80215a8:	2500      	movcs	r5, #0
 80215aa:	f842 5024 	strcs.w	r5, [r2, r4, lsl #2]
 80215ae:	1c64      	addcs	r4, r4, #1
 80215b0:	d2f7      	bcs.n	80215a2 <cmox_bn_fromU8BE+0x48>
 80215b2:	f011 0103 	ands.w	r1, r1, #3
 80215b6:	d011      	beq.n	80215dc <cmox_bn_fromU8BE+0x82>
 80215b8:	7804      	ldrb	r4, [r0, #0]
 80215ba:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 80215be:	2401      	movs	r4, #1
 80215c0:	428c      	cmp	r4, r1
 80215c2:	d20b      	bcs.n	80215dc <cmox_bn_fromU8BE+0x82>
 80215c4:	5d06      	ldrb	r6, [r0, r4]
 80215c6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80215ca:	1c64      	adds	r4, r4, #1
 80215cc:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 80215d0:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 80215d4:	e7f4      	b.n	80215c0 <cmox_bn_fromU8BE+0x66>
 80215d6:	4610      	mov	r0, r2
 80215d8:	f7ff ff36 	bl	8021448 <cmox_bn_init>
 80215dc:	2000      	movs	r0, #0
 80215de:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080215e0 <cmox_bn_toU8BE>:
 80215e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215e4:	4605      	mov	r5, r0
 80215e6:	4617      	mov	r7, r2
 80215e8:	6828      	ldr	r0, [r5, #0]
 80215ea:	463c      	mov	r4, r7
 80215ec:	4688      	mov	r8, r1
 80215ee:	0080      	lsls	r0, r0, #2
 80215f0:	1a3e      	subs	r6, r7, r0
 80215f2:	42a0      	cmp	r0, r4
 80215f4:	d206      	bcs.n	8021604 <cmox_bn_toU8BE+0x24>
 80215f6:	1e64      	subs	r4, r4, #1
 80215f8:	4631      	mov	r1, r6
 80215fa:	4640      	mov	r0, r8
 80215fc:	1ba4      	subs	r4, r4, r6
 80215fe:	f008 fd65 	bl	802a0cc <__aeabi_memclr>
 8021602:	1c64      	adds	r4, r4, #1
 8021604:	f014 0003 	ands.w	r0, r4, #3
 8021608:	d021      	beq.n	802164e <cmox_bn_toU8BE+0x6e>
 802160a:	08a1      	lsrs	r1, r4, #2
 802160c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8021610:	6851      	ldr	r1, [r2, #4]
 8021612:	1e43      	subs	r3, r0, #1
 8021614:	00db      	lsls	r3, r3, #3
 8021616:	fa21 f203 	lsr.w	r2, r1, r3
 802161a:	1b3b      	subs	r3, r7, r4
 802161c:	1e64      	subs	r4, r4, #1
 802161e:	1e40      	subs	r0, r0, #1
 8021620:	f808 2003 	strb.w	r2, [r8, r3]
 8021624:	d1f5      	bne.n	8021612 <cmox_bn_toU8BE+0x32>
 8021626:	e012      	b.n	802164e <cmox_bn_toU8BE+0x6e>
 8021628:	08a1      	lsrs	r1, r4, #2
 802162a:	1b38      	subs	r0, r7, r4
 802162c:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8021630:	4440      	add	r0, r8
 8021632:	1f24      	subs	r4, r4, #4
 8021634:	0e12      	lsrs	r2, r2, #24
 8021636:	7002      	strb	r2, [r0, #0]
 8021638:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 802163c:	0c1b      	lsrs	r3, r3, #16
 802163e:	7043      	strb	r3, [r0, #1]
 8021640:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 8021644:	0a12      	lsrs	r2, r2, #8
 8021646:	7082      	strb	r2, [r0, #2]
 8021648:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802164c:	70c1      	strb	r1, [r0, #3]
 802164e:	2c00      	cmp	r4, #0
 8021650:	d1ea      	bne.n	8021628 <cmox_bn_toU8BE+0x48>
 8021652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08021658 <cmox_cmac_cleanup>:
 8021658:	b510      	push	{r4, lr}
 802165a:	f000 fa1f 	bl	8021a9c <cmox_cmac_getByMAC>
 802165e:	f44f 3440 	mov.w	r4, #196608	@ 0x30000
 8021662:	2800      	cmp	r0, #0
 8021664:	bf0e      	itee	eq
 8021666:	4c03      	ldreq	r4, [pc, #12]	@ (8021674 <cmox_cmac_cleanup+0x1c>)
 8021668:	f44f 7196 	movne.w	r1, #300	@ 0x12c
 802166c:	f008 fd2e 	blne	802a0cc <__aeabi_memclr>
 8021670:	4620      	mov	r0, r4
 8021672:	bd10      	pop	{r4, pc}
 8021674:	00030002 	.word	0x00030002

08021678 <cmox_cmac_init>:
 8021678:	b510      	push	{r4, lr}
 802167a:	4604      	mov	r4, r0
 802167c:	f000 fa0e 	bl	8021a9c <cmox_cmac_getByMAC>
 8021680:	b908      	cbnz	r0, 8021686 <cmox_cmac_init+0xe>
 8021682:	480a      	ldr	r0, [pc, #40]	@ (80216ac <cmox_cmac_init+0x34>)
 8021684:	bd10      	pop	{r4, pc}
 8021686:	2100      	movs	r1, #0
 8021688:	2210      	movs	r2, #16
 802168a:	60a1      	str	r1, [r4, #8]
 802168c:	2300      	movs	r3, #0
 802168e:	6062      	str	r2, [r4, #4]
 8021690:	2101      	movs	r1, #1
 8021692:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
 8021696:	2200      	movs	r2, #0
 8021698:	6141      	str	r1, [r0, #20]
 802169a:	f500 7084 	add.w	r0, r0, #264	@ 0x108
 802169e:	2100      	movs	r1, #0
 80216a0:	2400      	movs	r4, #0
 80216a2:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
 80216a6:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80216aa:	bd10      	pop	{r4, pc}
 80216ac:	00030002 	.word	0x00030002

080216b0 <cmox_cmac_setTagLen>:
 80216b0:	b570      	push	{r4, r5, r6, lr}
 80216b2:	4605      	mov	r5, r0
 80216b4:	460c      	mov	r4, r1
 80216b6:	f000 f9f1 	bl	8021a9c <cmox_cmac_getByMAC>
 80216ba:	2800      	cmp	r0, #0
 80216bc:	4e05      	ldr	r6, [pc, #20]	@ (80216d4 <cmox_cmac_setTagLen+0x24>)
 80216be:	bf18      	it	ne
 80216c0:	2c00      	cmpne	r4, #0
 80216c2:	d004      	beq.n	80216ce <cmox_cmac_setTagLen+0x1e>
 80216c4:	2c11      	cmp	r4, #17
 80216c6:	bf3c      	itt	cc
 80216c8:	606c      	strcc	r4, [r5, #4]
 80216ca:	f44f 3640 	movcc.w	r6, #196608	@ 0x30000
 80216ce:	4630      	mov	r0, r6
 80216d0:	bd70      	pop	{r4, r5, r6, pc}
 80216d2:	bf00      	nop
 80216d4:	00030002 	.word	0x00030002

080216d8 <cmox_cmac_setKey>:
 80216d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216da:	4604      	mov	r4, r0
 80216dc:	460d      	mov	r5, r1
 80216de:	4616      	mov	r6, r2
 80216e0:	4f09      	ldr	r7, [pc, #36]	@ (8021708 <cmox_cmac_setKey+0x30>)
 80216e2:	f000 f9db 	bl	8021a9c <cmox_cmac_getByMAC>
 80216e6:	b168      	cbz	r0, 8021704 <cmox_cmac_setKey+0x2c>
 80216e8:	4632      	mov	r2, r6
 80216ea:	4629      	mov	r1, r5
 80216ec:	300c      	adds	r0, #12
 80216ee:	f001 f8ab 	bl	8022848 <cmox_cipherMode_setKey>
 80216f2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80216f6:	d105      	bne.n	8021704 <cmox_cmac_setKey+0x2c>
 80216f8:	68a0      	ldr	r0, [r4, #8]
 80216fa:	f44f 3740 	mov.w	r7, #196608	@ 0x30000
 80216fe:	f040 0001 	orr.w	r0, r0, #1
 8021702:	60a0      	str	r0, [r4, #8]
 8021704:	4638      	mov	r0, r7
 8021706:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8021708:	00030002 	.word	0x00030002

0802170c <cmox_cmac_encryptBlock>:
 802170c:	b538      	push	{r3, r4, r5, lr}
 802170e:	4604      	mov	r4, r0
 8021710:	b084      	sub	sp, #16
 8021712:	4608      	mov	r0, r1
 8021714:	4615      	mov	r5, r2
 8021716:	4669      	mov	r1, sp
 8021718:	f001 fa7e 	bl	8022c18 <convert_block_2_words>
 802171c:	4629      	mov	r1, r5
 802171e:	4668      	mov	r0, sp
 8021720:	f001 fa8e 	bl	8022c40 <xor_blocks>
 8021724:	6823      	ldr	r3, [r4, #0]
 8021726:	4620      	mov	r0, r4
 8021728:	462a      	mov	r2, r5
 802172a:	4669      	mov	r1, sp
 802172c:	681c      	ldr	r4, [r3, #0]
 802172e:	47a0      	blx	r4
 8021730:	b005      	add	sp, #20
 8021732:	bd30      	pop	{r4, r5, pc}

08021734 <cmox_cmac_append>:
 8021734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021738:	4617      	mov	r7, r2
 802173a:	2600      	movs	r6, #0
 802173c:	2f00      	cmp	r7, #0
 802173e:	460d      	mov	r5, r1
 8021740:	f44f 3a40 	mov.w	sl, #196608	@ 0x30000
 8021744:	d053      	beq.n	80217ee <cmox_cmac_append+0xba>
 8021746:	7a01      	ldrb	r1, [r0, #8]
 8021748:	07ca      	lsls	r2, r1, #31
 802174a:	d504      	bpl.n	8021756 <cmox_cmac_append+0x22>
 802174c:	f000 f9a6 	bl	8021a9c <cmox_cmac_getByMAC>
 8021750:	ea5f 0800 	movs.w	r8, r0
 8021754:	d101      	bne.n	802175a <cmox_cmac_append+0x26>
 8021756:	4827      	ldr	r0, [pc, #156]	@ (80217f4 <cmox_cmac_append+0xc0>)
 8021758:	e04a      	b.n	80217f0 <cmox_cmac_append+0xbc>
 802175a:	f8d8 0128 	ldr.w	r0, [r8, #296]	@ 0x128
 802175e:	f508 748c 	add.w	r4, r8, #280	@ 0x118
 8021762:	f508 7984 	add.w	r9, r8, #264	@ 0x108
 8021766:	2810      	cmp	r0, #16
 8021768:	d107      	bne.n	802177a <cmox_cmac_append+0x46>
 802176a:	464a      	mov	r2, r9
 802176c:	4621      	mov	r1, r4
 802176e:	f108 000c 	add.w	r0, r8, #12
 8021772:	f7ff ffcb 	bl	802170c <cmox_cmac_encryptBlock>
 8021776:	f8c8 6128 	str.w	r6, [r8, #296]	@ 0x128
 802177a:	f8d8 0128 	ldr.w	r0, [r8, #296]	@ 0x128
 802177e:	b1c0      	cbz	r0, 80217b2 <cmox_cmac_append+0x7e>
 8021780:	2000      	movs	r0, #0
 8021782:	e003      	b.n	802178c <cmox_cmac_append+0x58>
 8021784:	5c2a      	ldrb	r2, [r5, r0]
 8021786:	1841      	adds	r1, r0, r1
 8021788:	1c40      	adds	r0, r0, #1
 802178a:	5462      	strb	r2, [r4, r1]
 802178c:	f8d8 1128 	ldr.w	r1, [r8, #296]	@ 0x128
 8021790:	f1c1 0310 	rsb	r3, r1, #16
 8021794:	4298      	cmp	r0, r3
 8021796:	d3f5      	bcc.n	8021784 <cmox_cmac_append+0x50>
 8021798:	464a      	mov	r2, r9
 802179a:	4621      	mov	r1, r4
 802179c:	f108 000c 	add.w	r0, r8, #12
 80217a0:	f7ff ffb4 	bl	802170c <cmox_cmac_encryptBlock>
 80217a4:	f8d8 6128 	ldr.w	r6, [r8, #296]	@ 0x128
 80217a8:	2000      	movs	r0, #0
 80217aa:	f8c8 0128 	str.w	r0, [r8, #296]	@ 0x128
 80217ae:	f1c6 0610 	rsb	r6, r6, #16
 80217b2:	1bb9      	subs	r1, r7, r6
 80217b4:	f011 070f 	ands.w	r7, r1, #15
 80217b8:	46b3      	mov	fp, r6
 80217ba:	bf08      	it	eq
 80217bc:	2710      	moveq	r7, #16
 80217be:	1bc9      	subs	r1, r1, r7
 80217c0:	198e      	adds	r6, r1, r6
 80217c2:	e008      	b.n	80217d6 <cmox_cmac_append+0xa2>
 80217c4:	464a      	mov	r2, r9
 80217c6:	eb05 010b 	add.w	r1, r5, fp
 80217ca:	f108 000c 	add.w	r0, r8, #12
 80217ce:	f10b 0b10 	add.w	fp, fp, #16
 80217d2:	f7ff ff9b 	bl	802170c <cmox_cmac_encryptBlock>
 80217d6:	45b3      	cmp	fp, r6
 80217d8:	d3f4      	bcc.n	80217c4 <cmox_cmac_append+0x90>
 80217da:	2000      	movs	r0, #0
 80217dc:	e003      	b.n	80217e6 <cmox_cmac_append+0xb2>
 80217de:	1981      	adds	r1, r0, r6
 80217e0:	5c69      	ldrb	r1, [r5, r1]
 80217e2:	5421      	strb	r1, [r4, r0]
 80217e4:	1c40      	adds	r0, r0, #1
 80217e6:	42b8      	cmp	r0, r7
 80217e8:	d3f9      	bcc.n	80217de <cmox_cmac_append+0xaa>
 80217ea:	f8c8 7128 	str.w	r7, [r8, #296]	@ 0x128
 80217ee:	4650      	mov	r0, sl
 80217f0:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217f4:	00030002 	.word	0x00030002

080217f8 <cmox_cmac_generateTag>:
 80217f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217fc:	b084      	sub	sp, #16
 80217fe:	4606      	mov	r6, r0
 8021800:	4688      	mov	r8, r1
 8021802:	4614      	mov	r4, r2
 8021804:	4668      	mov	r0, sp
 8021806:	2100      	movs	r1, #0
 8021808:	2200      	movs	r2, #0
 802180a:	2300      	movs	r3, #0
 802180c:	2500      	movs	r5, #0
 802180e:	e880 002e 	stmia.w	r0, {r1, r2, r3, r5}
 8021812:	7a31      	ldrb	r1, [r6, #8]
 8021814:	07ca      	lsls	r2, r1, #31
 8021816:	d504      	bpl.n	8021822 <cmox_cmac_generateTag+0x2a>
 8021818:	4630      	mov	r0, r6
 802181a:	f000 f93f 	bl	8021a9c <cmox_cmac_getByMAC>
 802181e:	0005      	movs	r5, r0
 8021820:	d101      	bne.n	8021826 <cmox_cmac_generateTag+0x2e>
 8021822:	4840      	ldr	r0, [pc, #256]	@ (8021924 <cmox_cmac_generateTag+0x12c>)
 8021824:	e07a      	b.n	802191c <cmox_cmac_generateTag+0x124>
 8021826:	b10c      	cbz	r4, 802182c <cmox_cmac_generateTag+0x34>
 8021828:	2000      	movs	r0, #0
 802182a:	6020      	str	r0, [r4, #0]
 802182c:	68eb      	ldr	r3, [r5, #12]
 802182e:	466a      	mov	r2, sp
 8021830:	4669      	mov	r1, sp
 8021832:	f105 000c 	add.w	r0, r5, #12
 8021836:	f505 798c 	add.w	r9, r5, #280	@ 0x118
 802183a:	681f      	ldr	r7, [r3, #0]
 802183c:	47b8      	blx	r7
 802183e:	9f01      	ldr	r7, [sp, #4]
 8021840:	9b00      	ldr	r3, [sp, #0]
 8021842:	9900      	ldr	r1, [sp, #0]
 8021844:	2087      	movs	r0, #135	@ 0x87
 8021846:	0ffa      	lsrs	r2, r7, #31
 8021848:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 802184c:	9200      	str	r2, [sp, #0]
 802184e:	0fc9      	lsrs	r1, r1, #31
 8021850:	9a02      	ldr	r2, [sp, #8]
 8021852:	4341      	muls	r1, r0
 8021854:	0fd3      	lsrs	r3, r2, #31
 8021856:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 802185a:	9f03      	ldr	r7, [sp, #12]
 802185c:	9301      	str	r3, [sp, #4]
 802185e:	ea81 0147 	eor.w	r1, r1, r7, lsl #1
 8021862:	ea4f 7ed7 	mov.w	lr, r7, lsr #31
 8021866:	f505 7784 	add.w	r7, r5, #264	@ 0x108
 802186a:	ea4e 0242 	orr.w	r2, lr, r2, lsl #1
 802186e:	9202      	str	r2, [sp, #8]
 8021870:	9103      	str	r1, [sp, #12]
 8021872:	f8d5 c128 	ldr.w	ip, [r5, #296]	@ 0x128
 8021876:	f1bc 0f10 	cmp.w	ip, #16
 802187a:	d104      	bne.n	8021886 <cmox_cmac_generateTag+0x8e>
 802187c:	4669      	mov	r1, sp
 802187e:	4638      	mov	r0, r7
 8021880:	f001 f9de 	bl	8022c40 <xor_blocks>
 8021884:	e02c      	b.n	80218e0 <cmox_cmac_generateTag+0xe8>
 8021886:	f8dd c000 	ldr.w	ip, [sp]
 802188a:	f8dd a000 	ldr.w	sl, [sp]
 802188e:	ea4f 7bd3 	mov.w	fp, r3, lsr #31
 8021892:	ea4b 0b4a 	orr.w	fp, fp, sl, lsl #1
 8021896:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 802189a:	f8cd b000 	str.w	fp, [sp]
 802189e:	fb10 f00c 	smulbb	r0, r0, ip
 80218a2:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
 80218a6:	ea4c 0343 	orr.w	r3, ip, r3, lsl #1
 80218aa:	9301      	str	r3, [sp, #4]
 80218ac:	0fcb      	lsrs	r3, r1, #31
 80218ae:	ea80 0041 	eor.w	r0, r0, r1, lsl #1
 80218b2:	4669      	mov	r1, sp
 80218b4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80218b8:	9003      	str	r0, [sp, #12]
 80218ba:	9302      	str	r3, [sp, #8]
 80218bc:	4638      	mov	r0, r7
 80218be:	f001 f9bf 	bl	8022c40 <xor_blocks>
 80218c2:	f8d5 1128 	ldr.w	r1, [r5, #296]	@ 0x128
 80218c6:	2080      	movs	r0, #128	@ 0x80
 80218c8:	f809 0001 	strb.w	r0, [r9, r1]
 80218cc:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 80218d0:	1c40      	adds	r0, r0, #1
 80218d2:	2810      	cmp	r0, #16
 80218d4:	d204      	bcs.n	80218e0 <cmox_cmac_generateTag+0xe8>
 80218d6:	f1c0 0110 	rsb	r1, r0, #16
 80218da:	4448      	add	r0, r9
 80218dc:	f008 fbf6 	bl	802a0cc <__aeabi_memclr>
 80218e0:	463a      	mov	r2, r7
 80218e2:	4649      	mov	r1, r9
 80218e4:	f105 000c 	add.w	r0, r5, #12
 80218e8:	f7ff ff10 	bl	802170c <cmox_cmac_encryptBlock>
 80218ec:	2100      	movs	r1, #0
 80218ee:	4620      	mov	r0, r4
 80218f0:	e00f      	b.n	8021912 <cmox_cmac_generateTag+0x11a>
 80218f2:	088a      	lsrs	r2, r1, #2
 80218f4:	00cc      	lsls	r4, r1, #3
 80218f6:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 80218fa:	f004 0418 	and.w	r4, r4, #24
 80218fe:	f1c4 0418 	rsb	r4, r4, #24
 8021902:	40e3      	lsrs	r3, r4
 8021904:	f808 3001 	strb.w	r3, [r8, r1]
 8021908:	b110      	cbz	r0, 8021910 <cmox_cmac_generateTag+0x118>
 802190a:	6802      	ldr	r2, [r0, #0]
 802190c:	1c52      	adds	r2, r2, #1
 802190e:	6002      	str	r2, [r0, #0]
 8021910:	1c49      	adds	r1, r1, #1
 8021912:	6872      	ldr	r2, [r6, #4]
 8021914:	4291      	cmp	r1, r2
 8021916:	d3ec      	bcc.n	80218f2 <cmox_cmac_generateTag+0xfa>
 8021918:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 802191c:	b005      	add	sp, #20
 802191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021922:	bf00      	nop
 8021924:	00030002 	.word	0x00030002

08021928 <cmox_cmac_verifyTag>:
 8021928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802192c:	b088      	sub	sp, #32
 802192e:	4606      	mov	r6, r0
 8021930:	460f      	mov	r7, r1
 8021932:	4690      	mov	r8, r2
 8021934:	a804      	add	r0, sp, #16
 8021936:	2100      	movs	r1, #0
 8021938:	2200      	movs	r2, #0
 802193a:	2300      	movs	r3, #0
 802193c:	2400      	movs	r4, #0
 802193e:	2500      	movs	r5, #0
 8021940:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
 8021944:	4669      	mov	r1, sp
 8021946:	2000      	movs	r0, #0
 8021948:	e881 002d 	stmia.w	r1, {r0, r2, r3, r5}
 802194c:	7a30      	ldrb	r0, [r6, #8]
 802194e:	07c2      	lsls	r2, r0, #31
 8021950:	f140 8087 	bpl.w	8021a62 <cmox_cmac_verifyTag+0x13a>
 8021954:	4630      	mov	r0, r6
 8021956:	f000 f8a1 	bl	8021a9c <cmox_cmac_getByMAC>
 802195a:	0005      	movs	r5, r0
 802195c:	f000 8081 	beq.w	8021a62 <cmox_cmac_verifyTag+0x13a>
 8021960:	68eb      	ldr	r3, [r5, #12]
 8021962:	466a      	mov	r2, sp
 8021964:	4669      	mov	r1, sp
 8021966:	f105 000c 	add.w	r0, r5, #12
 802196a:	f505 7a8c 	add.w	sl, r5, #280	@ 0x118
 802196e:	f8d3 c000 	ldr.w	ip, [r3]
 8021972:	47e0      	blx	ip
 8021974:	9801      	ldr	r0, [sp, #4]
 8021976:	9b00      	ldr	r3, [sp, #0]
 8021978:	9a00      	ldr	r2, [sp, #0]
 802197a:	2187      	movs	r1, #135	@ 0x87
 802197c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8021980:	ea49 0343 	orr.w	r3, r9, r3, lsl #1
 8021984:	f505 7984 	add.w	r9, r5, #264	@ 0x108
 8021988:	9300      	str	r3, [sp, #0]
 802198a:	0fd2      	lsrs	r2, r2, #31
 802198c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8021990:	434a      	muls	r2, r1
 8021992:	ea4f 73dc 	mov.w	r3, ip, lsr #31
 8021996:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 802199a:	9301      	str	r3, [sp, #4]
 802199c:	9803      	ldr	r0, [sp, #12]
 802199e:	ea82 0240 	eor.w	r2, r2, r0, lsl #1
 80219a2:	9203      	str	r2, [sp, #12]
 80219a4:	ea4f 7ed0 	mov.w	lr, r0, lsr #31
 80219a8:	ea4e 0e4c 	orr.w	lr, lr, ip, lsl #1
 80219ac:	f8cd e008 	str.w	lr, [sp, #8]
 80219b0:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 80219b4:	2810      	cmp	r0, #16
 80219b6:	d104      	bne.n	80219c2 <cmox_cmac_verifyTag+0x9a>
 80219b8:	4669      	mov	r1, sp
 80219ba:	4648      	mov	r0, r9
 80219bc:	f001 f940 	bl	8022c40 <xor_blocks>
 80219c0:	e028      	b.n	8021a14 <cmox_cmac_verifyTag+0xec>
 80219c2:	9800      	ldr	r0, [sp, #0]
 80219c4:	ea4f 7bd3 	mov.w	fp, r3, lsr #31
 80219c8:	0fc0      	lsrs	r0, r0, #31
 80219ca:	fb11 f100 	smulbb	r1, r1, r0
 80219ce:	9800      	ldr	r0, [sp, #0]
 80219d0:	ea4b 0040 	orr.w	r0, fp, r0, lsl #1
 80219d4:	9000      	str	r0, [sp, #0]
 80219d6:	ea4f 70de 	mov.w	r0, lr, lsr #31
 80219da:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80219de:	0fd3      	lsrs	r3, r2, #31
 80219e0:	ea81 0142 	eor.w	r1, r1, r2, lsl #1
 80219e4:	9001      	str	r0, [sp, #4]
 80219e6:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 80219ea:	9103      	str	r1, [sp, #12]
 80219ec:	9302      	str	r3, [sp, #8]
 80219ee:	4669      	mov	r1, sp
 80219f0:	4648      	mov	r0, r9
 80219f2:	f001 f925 	bl	8022c40 <xor_blocks>
 80219f6:	f8d5 1128 	ldr.w	r1, [r5, #296]	@ 0x128
 80219fa:	2080      	movs	r0, #128	@ 0x80
 80219fc:	f80a 0001 	strb.w	r0, [sl, r1]
 8021a00:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 8021a04:	1c40      	adds	r0, r0, #1
 8021a06:	2810      	cmp	r0, #16
 8021a08:	d204      	bcs.n	8021a14 <cmox_cmac_verifyTag+0xec>
 8021a0a:	f1c0 0110 	rsb	r1, r0, #16
 8021a0e:	4450      	add	r0, sl
 8021a10:	f008 fb5c 	bl	802a0cc <__aeabi_memclr>
 8021a14:	464a      	mov	r2, r9
 8021a16:	4651      	mov	r1, sl
 8021a18:	f105 000c 	add.w	r0, r5, #12
 8021a1c:	f7ff fe76 	bl	802170c <cmox_cmac_encryptBlock>
 8021a20:	2000      	movs	r0, #0
 8021a22:	2300      	movs	r3, #0
 8021a24:	e00c      	b.n	8021a40 <cmox_cmac_verifyTag+0x118>
 8021a26:	0881      	lsrs	r1, r0, #2
 8021a28:	00c4      	lsls	r4, r0, #3
 8021a2a:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 8021a2e:	f004 0418 	and.w	r4, r4, #24
 8021a32:	f1c4 0418 	rsb	r4, r4, #24
 8021a36:	a904      	add	r1, sp, #16
 8021a38:	1c5b      	adds	r3, r3, #1
 8021a3a:	40e2      	lsrs	r2, r4
 8021a3c:	540a      	strb	r2, [r1, r0]
 8021a3e:	1c40      	adds	r0, r0, #1
 8021a40:	6871      	ldr	r1, [r6, #4]
 8021a42:	4288      	cmp	r0, r1
 8021a44:	d3ef      	bcc.n	8021a26 <cmox_cmac_verifyTag+0xfe>
 8021a46:	4a09      	ldr	r2, [pc, #36]	@ (8021a6c <cmox_cmac_verifyTag+0x144>)
 8021a48:	4d09      	ldr	r5, [pc, #36]	@ (8021a70 <cmox_cmac_verifyTag+0x148>)
 8021a4a:	9202      	str	r2, [sp, #8]
 8021a4c:	4c09      	ldr	r4, [pc, #36]	@ (8021a74 <cmox_cmac_verifyTag+0x14c>)
 8021a4e:	682e      	ldr	r6, [r5, #0]
 8021a50:	4638      	mov	r0, r7
 8021a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8021a56:	aa04      	add	r2, sp, #16
 8021a58:	9401      	str	r4, [sp, #4]
 8021a5a:	9600      	str	r6, [sp, #0]
 8021a5c:	f7ff fad4 	bl	8021008 <cmox_utils_robustCmp>
 8021a60:	e000      	b.n	8021a64 <cmox_cmac_verifyTag+0x13c>
 8021a62:	4805      	ldr	r0, [pc, #20]	@ (8021a78 <cmox_cmac_verifyTag+0x150>)
 8021a64:	b009      	add	sp, #36	@ 0x24
 8021a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a6a:	bf00      	nop
 8021a6c:	00036e93 	.word	0x00036e93
 8021a70:	0802ad10 	.word	0x0802ad10
 8021a74:	0003c726 	.word	0x0003c726
 8021a78:	00030002 	.word	0x00030002

08021a7c <cmac_table>:
 8021a7c:	08021659 08021679 080216b1 0802054d     Y...y.......M...
 8021a8c:	080216d9 08021735 080217f9 08021929     ....5.......)...

08021a9c <cmox_cmac_getByMAC>:
 8021a9c:	6801      	ldr	r1, [r0, #0]
 8021a9e:	4a02      	ldr	r2, [pc, #8]	@ (8021aa8 <cmox_cmac_getByMAC+0xc>)
 8021aa0:	4291      	cmp	r1, r2
 8021aa2:	bf18      	it	ne
 8021aa4:	2000      	movne	r0, #0
 8021aa6:	4770      	bx	lr
 8021aa8:	08021a7c 	.word	0x08021a7c

08021aac <cmox_cmac_construct>:
 8021aac:	b120      	cbz	r0, 8021ab8 <cmox_cmac_construct+0xc>
 8021aae:	4a03      	ldr	r2, [pc, #12]	@ (8021abc <cmox_cmac_construct+0x10>)
 8021ab0:	6002      	str	r2, [r0, #0]
 8021ab2:	6809      	ldr	r1, [r1, #0]
 8021ab4:	680b      	ldr	r3, [r1, #0]
 8021ab6:	60c3      	str	r3, [r0, #12]
 8021ab8:	4770      	bx	lr
 8021aba:	bf00      	nop
 8021abc:	08021a7c 	.word	0x08021a7c

08021ac0 <cmox_cmac_compute>:
 8021ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ac2:	460c      	mov	r4, r1
 8021ac4:	b0d1      	sub	sp, #324	@ 0x144
 8021ac6:	4601      	mov	r1, r0
 8021ac8:	4615      	mov	r5, r2
 8021aca:	461e      	mov	r6, r3
 8021acc:	a806      	add	r0, sp, #24
 8021ace:	f7ff ffed 	bl	8021aac <cmox_cmac_construct>
 8021ad2:	9a58      	ldr	r2, [sp, #352]	@ 0x160
 8021ad4:	9959      	ldr	r1, [sp, #356]	@ 0x164
 8021ad6:	9204      	str	r2, [sp, #16]
 8021ad8:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 8021ada:	9a56      	ldr	r2, [sp, #344]	@ 0x158
 8021adc:	9105      	str	r1, [sp, #20]
 8021ade:	9303      	str	r3, [sp, #12]
 8021ae0:	2700      	movs	r7, #0
 8021ae2:	9200      	str	r2, [sp, #0]
 8021ae4:	4633      	mov	r3, r6
 8021ae6:	9702      	str	r7, [sp, #8]
 8021ae8:	462a      	mov	r2, r5
 8021aea:	9701      	str	r7, [sp, #4]
 8021aec:	4621      	mov	r1, r4
 8021aee:	f7fe fca7 	bl	8020440 <cmox_mac_innerCompute>
 8021af2:	b051      	add	sp, #324	@ 0x144
 8021af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021af6 <cmox_cmac_verify>:
 8021af6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8021af8:	460c      	mov	r4, r1
 8021afa:	b0d0      	sub	sp, #320	@ 0x140
 8021afc:	4601      	mov	r1, r0
 8021afe:	4615      	mov	r5, r2
 8021b00:	461e      	mov	r6, r3
 8021b02:	a805      	add	r0, sp, #20
 8021b04:	f7ff ffd2 	bl	8021aac <cmox_cmac_construct>
 8021b08:	9958      	ldr	r1, [sp, #352]	@ 0x160
 8021b0a:	9a57      	ldr	r2, [sp, #348]	@ 0x15c
 8021b0c:	9104      	str	r1, [sp, #16]
 8021b0e:	2300      	movs	r3, #0
 8021b10:	9956      	ldr	r1, [sp, #344]	@ 0x158
 8021b12:	9203      	str	r2, [sp, #12]
 8021b14:	9302      	str	r3, [sp, #8]
 8021b16:	462a      	mov	r2, r5
 8021b18:	9301      	str	r3, [sp, #4]
 8021b1a:	4633      	mov	r3, r6
 8021b1c:	9100      	str	r1, [sp, #0]
 8021b1e:	4621      	mov	r1, r4
 8021b20:	f7fe fcd1 	bl	80204c6 <cmox_mac_innerVerify>
 8021b24:	b052      	add	sp, #328	@ 0x148
 8021b26:	bd70      	pop	{r4, r5, r6, pc}

08021b28 <cmox_red_fake_copy_in_to_out>:
 8021b28:	b510      	push	{r4, lr}
 8021b2a:	2200      	movs	r2, #0
 8021b2c:	e004      	b.n	8021b38 <cmox_red_fake_copy_in_to_out+0x10>
 8021b2e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8021b32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021b36:	1c52      	adds	r2, r2, #1
 8021b38:	428a      	cmp	r2, r1
 8021b3a:	d3f8      	bcc.n	8021b2e <cmox_red_fake_copy_in_to_out+0x6>
 8021b3c:	bd10      	pop	{r4, pc}

08021b3e <basic_type_modinv>:
 8021b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021b40:	4603      	mov	r3, r0
 8021b42:	460e      	mov	r6, r1
 8021b44:	2701      	movs	r7, #1
 8021b46:	f04f 0c03 	mov.w	ip, #3
 8021b4a:	2402      	movs	r4, #2
 8021b4c:	221f      	movs	r2, #31
 8021b4e:	2500      	movs	r5, #0
 8021b50:	fb07 f003 	mul.w	r0, r7, r3
 8021b54:	2100      	movs	r1, #0
 8021b56:	ea0c 0000 	and.w	r0, ip, r0
 8021b5a:	1b00      	subs	r0, r0, r4
 8021b5c:	41a9      	sbcs	r1, r5
 8021b5e:	ea24 0101 	bic.w	r1, r4, r1
 8021b62:	19cf      	adds	r7, r1, r7
 8021b64:	0064      	lsls	r4, r4, #1
 8021b66:	1e52      	subs	r2, r2, #1
 8021b68:	ea4f 004c 	mov.w	r0, ip, lsl #1
 8021b6c:	f080 0c01 	eor.w	ip, r0, #1
 8021b70:	d1ee      	bne.n	8021b50 <basic_type_modinv+0x12>
 8021b72:	6037      	str	r7, [r6, #0]
 8021b74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021b76 <cmox_ModRedBN>:
 8021b76:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b7a:	b08a      	sub	sp, #40	@ 0x28
 8021b7c:	460c      	mov	r4, r1
 8021b7e:	6821      	ldr	r1, [r4, #0]
 8021b80:	4605      	mov	r5, r0
 8021b82:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8021b86:	f000 fbf8 	bl	802237a <cmox_mathUtils_bitLength>
 8021b8a:	2200      	movs	r2, #0
 8021b8c:	9006      	str	r0, [sp, #24]
 8021b8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021b90:	6822      	ldr	r2, [r4, #0]
 8021b92:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021b94:	4669      	mov	r1, sp
 8021b96:	f7ff fc41 	bl	802141c <cmox_bn_alloc>
 8021b9a:	b110      	cbz	r0, 8021ba2 <cmox_ModRedBN+0x2c>
 8021b9c:	2202      	movs	r2, #2
 8021b9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021ba0:	e144      	b.n	8021e2c <cmox_ModRedBN+0x2b6>
 8021ba2:	2101      	movs	r1, #1
 8021ba4:	9504      	str	r5, [sp, #16]
 8021ba6:	9402      	str	r4, [sp, #8]
 8021ba8:	e00a      	b.n	8021bc0 <cmox_ModRedBN+0x4a>
 8021baa:	9a04      	ldr	r2, [sp, #16]
 8021bac:	9b00      	ldr	r3, [sp, #0]
 8021bae:	6814      	ldr	r4, [r2, #0]
 8021bb0:	1a20      	subs	r0, r4, r0
 8021bb2:	1808      	adds	r0, r1, r0
 8021bb4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8021bb8:	6842      	ldr	r2, [r0, #4]
 8021bba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8021bbe:	1c49      	adds	r1, r1, #1
 8021bc0:	9802      	ldr	r0, [sp, #8]
 8021bc2:	6800      	ldr	r0, [r0, #0]
 8021bc4:	4281      	cmp	r1, r0
 8021bc6:	d3f0      	bcc.n	8021baa <cmox_ModRedBN+0x34>
 8021bc8:	9b00      	ldr	r3, [sp, #0]
 8021bca:	2200      	movs	r2, #0
 8021bcc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8021bd0:	9804      	ldr	r0, [sp, #16]
 8021bd2:	9b02      	ldr	r3, [sp, #8]
 8021bd4:	9c06      	ldr	r4, [sp, #24]
 8021bd6:	6802      	ldr	r2, [r0, #0]
 8021bd8:	6819      	ldr	r1, [r3, #0]
 8021bda:	f1c4 0420 	rsb	r4, r4, #32
 8021bde:	f88d 4004 	strb.w	r4, [sp, #4]
 8021be2:	1a52      	subs	r2, r2, r1
 8021be4:	1c52      	adds	r2, r2, #1
 8021be6:	9205      	str	r2, [sp, #20]
 8021be8:	e01a      	b.n	8021c20 <cmox_ModRedBN+0xaa>
 8021bea:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8021bee:	2300      	movs	r3, #0
 8021bf0:	1882      	adds	r2, r0, r2
 8021bf2:	414b      	adcs	r3, r1
 8021bf4:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 8021bf8:	4279      	negs	r1, r7
 8021bfa:	4008      	ands	r0, r1
 8021bfc:	2100      	movs	r1, #0
 8021bfe:	1a10      	subs	r0, r2, r0
 8021c00:	eb63 0101 	sbc.w	r1, r3, r1
 8021c04:	f848 0026 	str.w	r0, [r8, r6, lsl #2]
 8021c08:	4608      	mov	r0, r1
 8021c0a:	17c9      	asrs	r1, r1, #31
 8021c0c:	1c76      	adds	r6, r6, #1
 8021c0e:	f8da 2000 	ldr.w	r2, [sl]
 8021c12:	42b2      	cmp	r2, r6
 8021c14:	d2e9      	bcs.n	8021bea <cmox_ModRedBN+0x74>
 8021c16:	9b05      	ldr	r3, [sp, #20]
 8021c18:	f8cd a008 	str.w	sl, [sp, #8]
 8021c1c:	1e5b      	subs	r3, r3, #1
 8021c1e:	9305      	str	r3, [sp, #20]
 8021c20:	9805      	ldr	r0, [sp, #20]
 8021c22:	2800      	cmp	r0, #0
 8021c24:	f000 80f4 	beq.w	8021e10 <cmox_ModRedBN+0x29a>
 8021c28:	9904      	ldr	r1, [sp, #16]
 8021c2a:	9c00      	ldr	r4, [sp, #0]
 8021c2c:	6823      	ldr	r3, [r4, #0]
 8021c2e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8021c32:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8021c36:	1f21      	subs	r1, r4, #4
 8021c38:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8021c3c:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 8021c40:	4085      	lsls	r5, r0
 8021c42:	9806      	ldr	r0, [sp, #24]
 8021c44:	40c6      	lsrs	r6, r0
 8021c46:	4335      	orrs	r5, r6
 8021c48:	9507      	str	r5, [sp, #28]
 8021c4a:	9d02      	ldr	r5, [sp, #8]
 8021c4c:	682e      	ldr	r6, [r5, #0]
 8021c4e:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8021c52:	9008      	str	r0, [sp, #32]
 8021c54:	9403      	str	r4, [sp, #12]
 8021c56:	e005      	b.n	8021c64 <cmox_ModRedBN+0xee>
 8021c58:	9803      	ldr	r0, [sp, #12]
 8021c5a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8021c5e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8021c62:	1e5b      	subs	r3, r3, #1
 8021c64:	2b01      	cmp	r3, #1
 8021c66:	d8f7      	bhi.n	8021c58 <cmox_ModRedBN+0xe2>
 8021c68:	9803      	ldr	r0, [sp, #12]
 8021c6a:	2700      	movs	r7, #0
 8021c6c:	6042      	str	r2, [r0, #4]
 8021c6e:	9a02      	ldr	r2, [sp, #8]
 8021c70:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8021c74:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8021c78:	6810      	ldr	r0, [r2, #0]
 8021c7a:	1f13      	subs	r3, r2, #4
 8021c7c:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8021c80:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8021c84:	9a03      	ldr	r2, [sp, #12]
 8021c86:	fa04 f505 	lsl.w	r5, r4, r5
 8021c8a:	9c06      	ldr	r4, [sp, #24]
 8021c8c:	40e0      	lsrs	r0, r4
 8021c8e:	4305      	orrs	r5, r0
 8021c90:	6810      	ldr	r0, [r2, #0]
 8021c92:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8021c96:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8021c9a:	9906      	ldr	r1, [sp, #24]
 8021c9c:	fa04 f606 	lsl.w	r6, r4, r6
 8021ca0:	241f      	movs	r4, #31
 8021ca2:	40c8      	lsrs	r0, r1
 8021ca4:	4306      	orrs	r6, r0
 8021ca6:	9807      	ldr	r0, [sp, #28]
 8021ca8:	4629      	mov	r1, r5
 8021caa:	f000 fb5a 	bl	8022362 <cmox_mathUtils_neq>
 8021cae:	f000 fb55 	bl	802235c <cmox_mathUtils_not>
 8021cb2:	9a07      	ldr	r2, [sp, #28]
 8021cb4:	2100      	movs	r1, #0
 8021cb6:	f000 fb4c 	bl	8022352 <cmox_mathUtils_mux>
 8021cba:	4680      	mov	r8, r0
 8021cbc:	f1c4 0920 	rsb	r9, r4, #32
 8021cc0:	fa08 f109 	lsl.w	r1, r8, r9
 8021cc4:	fa26 f004 	lsr.w	r0, r6, r4
 8021cc8:	ea40 0a01 	orr.w	sl, r0, r1
 8021ccc:	4651      	mov	r1, sl
 8021cce:	4628      	mov	r0, r5
 8021cd0:	f000 fb4c 	bl	802236c <cmox_mathUtils_gt>
 8021cd4:	f000 fb42 	bl	802235c <cmox_mathUtils_not>
 8021cd8:	4601      	mov	r1, r0
 8021cda:	fa28 f004 	lsr.w	r0, r8, r4
 8021cde:	ea40 0b01 	orr.w	fp, r0, r1
 8021ce2:	ebaa 0005 	sub.w	r0, sl, r5
 8021ce6:	fa20 f109 	lsr.w	r1, r0, r9
 8021cea:	4642      	mov	r2, r8
 8021cec:	4658      	mov	r0, fp
 8021cee:	f000 fb30 	bl	8022352 <cmox_mathUtils_mux>
 8021cf2:	4680      	mov	r8, r0
 8021cf4:	fa05 f004 	lsl.w	r0, r5, r4
 8021cf8:	1a31      	subs	r1, r6, r0
 8021cfa:	4632      	mov	r2, r6
 8021cfc:	4658      	mov	r0, fp
 8021cfe:	f000 fb28 	bl	8022352 <cmox_mathUtils_mux>
 8021d02:	4606      	mov	r6, r0
 8021d04:	fa0b f004 	lsl.w	r0, fp, r4
 8021d08:	4307      	orrs	r7, r0
 8021d0a:	1e64      	subs	r4, r4, #1
 8021d0c:	d1d6      	bne.n	8021cbc <cmox_ModRedBN+0x146>
 8021d0e:	4631      	mov	r1, r6
 8021d10:	4628      	mov	r0, r5
 8021d12:	f000 fb2b 	bl	802236c <cmox_mathUtils_gt>
 8021d16:	f000 fb21 	bl	802235c <cmox_mathUtils_not>
 8021d1a:	4307      	orrs	r7, r0
 8021d1c:	ea48 0707 	orr.w	r7, r8, r7
 8021d20:	2100      	movs	r1, #0
 8021d22:	4638      	mov	r0, r7
 8021d24:	f000 fb1d 	bl	8022362 <cmox_mathUtils_neq>
 8021d28:	f000 fb18 	bl	802235c <cmox_mathUtils_not>
 8021d2c:	1e7a      	subs	r2, r7, #1
 8021d2e:	2100      	movs	r1, #0
 8021d30:	f000 fb0f 	bl	8022352 <cmox_mathUtils_mux>
 8021d34:	4604      	mov	r4, r0
 8021d36:	9807      	ldr	r0, [sp, #28]
 8021d38:	4629      	mov	r1, r5
 8021d3a:	2701      	movs	r7, #1
 8021d3c:	2500      	movs	r5, #0
 8021d3e:	46b8      	mov	r8, r7
 8021d40:	f000 fb0f 	bl	8022362 <cmox_mathUtils_neq>
 8021d44:	f000 fb0a 	bl	802235c <cmox_mathUtils_not>
 8021d48:	4622      	mov	r2, r4
 8021d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8021d4e:	f000 fb00 	bl	8022352 <cmox_mathUtils_mux>
 8021d52:	9e03      	ldr	r6, [sp, #12]
 8021d54:	2400      	movs	r4, #0
 8021d56:	f8dd a008 	ldr.w	sl, [sp, #8]
 8021d5a:	9003      	str	r0, [sp, #12]
 8021d5c:	e024      	b.n	8021da8 <cmox_ModRedBN+0x232>
 8021d5e:	9b03      	ldr	r3, [sp, #12]
 8021d60:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 8021d64:	9102      	str	r1, [sp, #8]
 8021d66:	fbe3 4501 	umlal	r4, r5, r3, r1
 8021d6a:	f856 1028 	ldr.w	r1, [r6, r8, lsl #2]
 8021d6e:	eba1 0904 	sub.w	r9, r1, r4
 8021d72:	462c      	mov	r4, r5
 8021d74:	4648      	mov	r0, r9
 8021d76:	2500      	movs	r5, #0
 8021d78:	f000 faf8 	bl	802236c <cmox_mathUtils_gt>
 8021d7c:	f846 9028 	str.w	r9, [r6, r8, lsl #2]
 8021d80:	9902      	ldr	r1, [sp, #8]
 8021d82:	1824      	adds	r4, r4, r0
 8021d84:	416d      	adcs	r5, r5
 8021d86:	4648      	mov	r0, r9
 8021d88:	f108 0801 	add.w	r8, r8, #1
 8021d8c:	f000 faee 	bl	802236c <cmox_mathUtils_gt>
 8021d90:	9902      	ldr	r1, [sp, #8]
 8021d92:	4683      	mov	fp, r0
 8021d94:	4648      	mov	r0, r9
 8021d96:	f000 fae4 	bl	8022362 <cmox_mathUtils_neq>
 8021d9a:	f000 fadf 	bl	802235c <cmox_mathUtils_not>
 8021d9e:	465a      	mov	r2, fp
 8021da0:	4639      	mov	r1, r7
 8021da2:	f000 fad6 	bl	8022352 <cmox_mathUtils_mux>
 8021da6:	4607      	mov	r7, r0
 8021da8:	f8da 0000 	ldr.w	r0, [sl]
 8021dac:	4540      	cmp	r0, r8
 8021dae:	d2d6      	bcs.n	8021d5e <cmox_ModRedBN+0x1e8>
 8021db0:	46b0      	mov	r8, r6
 8021db2:	4626      	mov	r6, r4
 8021db4:	9908      	ldr	r1, [sp, #32]
 8021db6:	4630      	mov	r0, r6
 8021db8:	f000 fad8 	bl	802236c <cmox_mathUtils_gt>
 8021dbc:	ea40 0405 	orr.w	r4, r0, r5
 8021dc0:	4631      	mov	r1, r6
 8021dc2:	9808      	ldr	r0, [sp, #32]
 8021dc4:	4626      	mov	r6, r4
 8021dc6:	f000 fad1 	bl	802236c <cmox_mathUtils_gt>
 8021dca:	ea20 0505 	bic.w	r5, r0, r5
 8021dce:	432f      	orrs	r7, r5
 8021dd0:	43a7      	bics	r7, r4
 8021dd2:	2000      	movs	r0, #0
 8021dd4:	2100      	movs	r1, #0
 8021dd6:	f04f 0c01 	mov.w	ip, #1
 8021dda:	2500      	movs	r5, #0
 8021ddc:	e010      	b.n	8021e00 <cmox_ModRedBN+0x28a>
 8021dde:	f85a 202c 	ldr.w	r2, [sl, ip, lsl #2]
 8021de2:	f858 402c 	ldr.w	r4, [r8, ip, lsl #2]
 8021de6:	4273      	negs	r3, r6
 8021de8:	401a      	ands	r2, r3
 8021dea:	2300      	movs	r3, #0
 8021dec:	18a2      	adds	r2, r4, r2
 8021dee:	416b      	adcs	r3, r5
 8021df0:	1880      	adds	r0, r0, r2
 8021df2:	4159      	adcs	r1, r3
 8021df4:	f848 002c 	str.w	r0, [r8, ip, lsl #2]
 8021df8:	4608      	mov	r0, r1
 8021dfa:	17c9      	asrs	r1, r1, #31
 8021dfc:	f10c 0c01 	add.w	ip, ip, #1
 8021e00:	f8da 2000 	ldr.w	r2, [sl]
 8021e04:	4562      	cmp	r2, ip
 8021e06:	d2ea      	bcs.n	8021dde <cmox_ModRedBN+0x268>
 8021e08:	2000      	movs	r0, #0
 8021e0a:	2100      	movs	r1, #0
 8021e0c:	2601      	movs	r6, #1
 8021e0e:	e6fe      	b.n	8021c0e <cmox_ModRedBN+0x98>
 8021e10:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021e12:	2100      	movs	r1, #0
 8021e14:	4620      	mov	r0, r4
 8021e16:	f7ff fb17 	bl	8021448 <cmox_bn_init>
 8021e1a:	9900      	ldr	r1, [sp, #0]
 8021e1c:	4622      	mov	r2, r4
 8021e1e:	2001      	movs	r0, #1
 8021e20:	f7ff fb22 	bl	8021468 <cmox_bn_cCopy>
 8021e24:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021e26:	4669      	mov	r1, sp
 8021e28:	f7ff fb03 	bl	8021432 <cmox_bn_free>
 8021e2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021e2e:	b00d      	add	sp, #52	@ 0x34
 8021e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021e34 <cmox_ModularBN_Init>:
 8021e34:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e38:	4607      	mov	r7, r0
 8021e3a:	460d      	mov	r5, r1
 8021e3c:	683e      	ldr	r6, [r7, #0]
 8021e3e:	9800      	ldr	r0, [sp, #0]
 8021e40:	f105 0108 	add.w	r1, r5, #8
 8021e44:	0072      	lsls	r2, r6, #1
 8021e46:	f7ff fae9 	bl	802141c <cmox_bn_alloc>
 8021e4a:	2800      	cmp	r0, #0
 8021e4c:	d144      	bne.n	8021ed8 <cmox_ModularBN_Init+0xa4>
 8021e4e:	68a8      	ldr	r0, [r5, #8]
 8021e50:	2100      	movs	r1, #0
 8021e52:	2400      	movs	r4, #0
 8021e54:	46a0      	mov	r8, r4
 8021e56:	f7ff faf7 	bl	8021448 <cmox_bn_init>
 8021e5a:	f04f 0e01 	mov.w	lr, #1
 8021e5e:	4629      	mov	r1, r5
 8021e60:	46b4      	mov	ip, r6
 8021e62:	2300      	movs	r3, #0
 8021e64:	e012      	b.n	8021e8c <cmox_ModularBN_Init+0x58>
 8021e66:	eb0e 0a0c 	add.w	sl, lr, ip
 8021e6a:	f857 602e 	ldr.w	r6, [r7, lr, lsl #2]
 8021e6e:	f850 202a 	ldr.w	r2, [r0, sl, lsl #2]
 8021e72:	f10e 0e01 	add.w	lr, lr, #1
 8021e76:	18a5      	adds	r5, r4, r2
 8021e78:	eb48 0903 	adc.w	r9, r8, r3
 8021e7c:	1bac      	subs	r4, r5, r6
 8021e7e:	eb69 0803 	sbc.w	r8, r9, r3
 8021e82:	f840 402a 	str.w	r4, [r0, sl, lsl #2]
 8021e86:	4644      	mov	r4, r8
 8021e88:	ea4f 78e8 	mov.w	r8, r8, asr #31
 8021e8c:	45f4      	cmp	ip, lr
 8021e8e:	6888      	ldr	r0, [r1, #8]
 8021e90:	d2e9      	bcs.n	8021e66 <cmox_ModularBN_Init+0x32>
 8021e92:	9b00      	ldr	r3, [sp, #0]
 8021e94:	460c      	mov	r4, r1
 8021e96:	4665      	mov	r5, ip
 8021e98:	4602      	mov	r2, r0
 8021e9a:	4639      	mov	r1, r7
 8021e9c:	f7ff fe6b 	bl	8021b76 <cmox_ModRedBN>
 8021ea0:	b9a8      	cbnz	r0, 8021ece <cmox_ModularBN_Init+0x9a>
 8021ea2:	9800      	ldr	r0, [sp, #0]
 8021ea4:	462a      	mov	r2, r5
 8021ea6:	1d21      	adds	r1, r4, #4
 8021ea8:	f7ff fab8 	bl	802141c <cmox_bn_alloc>
 8021eac:	b978      	cbnz	r0, 8021ece <cmox_ModularBN_Init+0x9a>
 8021eae:	6862      	ldr	r2, [r4, #4]
 8021eb0:	68a1      	ldr	r1, [r4, #8]
 8021eb2:	2001      	movs	r0, #1
 8021eb4:	f7ff fad8 	bl	8021468 <cmox_bn_cCopy>
 8021eb8:	6027      	str	r7, [r4, #0]
 8021eba:	6878      	ldr	r0, [r7, #4]
 8021ebc:	f104 010c 	add.w	r1, r4, #12
 8021ec0:	f7ff fe3d 	bl	8021b3e <basic_type_modinv>
 8021ec4:	68e0      	ldr	r0, [r4, #12]
 8021ec6:	4240      	negs	r0, r0
 8021ec8:	60e0      	str	r0, [r4, #12]
 8021eca:	2000      	movs	r0, #0
 8021ecc:	e005      	b.n	8021eda <cmox_ModularBN_Init+0xa6>
 8021ece:	9800      	ldr	r0, [sp, #0]
 8021ed0:	f104 0108 	add.w	r1, r4, #8
 8021ed4:	f7ff faad 	bl	8021432 <cmox_bn_free>
 8021ed8:	2002      	movs	r0, #2
 8021eda:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021ede <cmox_ModularBN_Enter>:
 8021ede:	460b      	mov	r3, r1
 8021ee0:	b580      	push	{r7, lr}
 8021ee2:	9200      	str	r2, [sp, #0]
 8021ee4:	6859      	ldr	r1, [r3, #4]
 8021ee6:	4602      	mov	r2, r0
 8021ee8:	f000 f823 	bl	8021f32 <cmox_ModularBN_Mul>
 8021eec:	bd02      	pop	{r1, pc}

08021eee <cmox_ModularBN_Exit>:
 8021eee:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8021ef2:	461f      	mov	r7, r3
 8021ef4:	2300      	movs	r3, #0
 8021ef6:	4605      	mov	r5, r0
 8021ef8:	4690      	mov	r8, r2
 8021efa:	9301      	str	r3, [sp, #4]
 8021efc:	682a      	ldr	r2, [r5, #0]
 8021efe:	460e      	mov	r6, r1
 8021f00:	a901      	add	r1, sp, #4
 8021f02:	4640      	mov	r0, r8
 8021f04:	f7ff fa8a 	bl	802141c <cmox_bn_alloc>
 8021f08:	0004      	movs	r4, r0
 8021f0a:	d10f      	bne.n	8021f2c <cmox_ModularBN_Exit+0x3e>
 8021f0c:	9801      	ldr	r0, [sp, #4]
 8021f0e:	2101      	movs	r1, #1
 8021f10:	f7ff fa9a 	bl	8021448 <cmox_bn_init>
 8021f14:	9700      	str	r7, [sp, #0]
 8021f16:	9901      	ldr	r1, [sp, #4]
 8021f18:	4633      	mov	r3, r6
 8021f1a:	462a      	mov	r2, r5
 8021f1c:	4628      	mov	r0, r5
 8021f1e:	f000 f808 	bl	8021f32 <cmox_ModularBN_Mul>
 8021f22:	4604      	mov	r4, r0
 8021f24:	a901      	add	r1, sp, #4
 8021f26:	4640      	mov	r0, r8
 8021f28:	f7ff fa83 	bl	8021432 <cmox_bn_free>
 8021f2c:	4620      	mov	r0, r4
 8021f2e:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08021f32 <cmox_ModularBN_Mul>:
 8021f32:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8021f36:	4614      	mov	r4, r2
 8021f38:	461d      	mov	r5, r3
 8021f3a:	682a      	ldr	r2, [r5, #0]
 8021f3c:	6823      	ldr	r3, [r4, #0]
 8021f3e:	f8d2 8000 	ldr.w	r8, [r2]
 8021f42:	4543      	cmp	r3, r8
 8021f44:	bf38      	it	cc
 8021f46:	2003      	movcc	r0, #3
 8021f48:	d317      	bcc.n	8021f7a <cmox_ModularBN_Mul+0x48>
 8021f4a:	9f08      	ldr	r7, [sp, #32]
 8021f4c:	68eb      	ldr	r3, [r5, #12]
 8021f4e:	9301      	str	r3, [sp, #4]
 8021f50:	1d12      	adds	r2, r2, #4
 8021f52:	9200      	str	r2, [sp, #0]
 8021f54:	68ae      	ldr	r6, [r5, #8]
 8021f56:	f8d7 c000 	ldr.w	ip, [r7]
 8021f5a:	4642      	mov	r2, r8
 8021f5c:	1d09      	adds	r1, r1, #4
 8021f5e:	1d00      	adds	r0, r0, #4
 8021f60:	1d33      	adds	r3, r6, #4
 8021f62:	47e0      	blx	ip
 8021f64:	68e8      	ldr	r0, [r5, #12]
 8021f66:	1d23      	adds	r3, r4, #4
 8021f68:	9000      	str	r0, [sp, #0]
 8021f6a:	6829      	ldr	r1, [r5, #0]
 8021f6c:	68ac      	ldr	r4, [r5, #8]
 8021f6e:	687d      	ldr	r5, [r7, #4]
 8021f70:	1d0a      	adds	r2, r1, #4
 8021f72:	4641      	mov	r1, r8
 8021f74:	1d20      	adds	r0, r4, #4
 8021f76:	47a8      	blx	r5
 8021f78:	2000      	movs	r0, #0
 8021f7a:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08021f7e <cmox_ModularBN_Sqr>:
 8021f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f80:	460c      	mov	r4, r1
 8021f82:	4615      	mov	r5, r2
 8021f84:	6829      	ldr	r1, [r5, #0]
 8021f86:	6822      	ldr	r2, [r4, #0]
 8021f88:	461f      	mov	r7, r3
 8021f8a:	680e      	ldr	r6, [r1, #0]
 8021f8c:	42b2      	cmp	r2, r6
 8021f8e:	d201      	bcs.n	8021f94 <cmox_ModularBN_Sqr+0x16>
 8021f90:	2003      	movs	r0, #3
 8021f92:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8021f94:	68ea      	ldr	r2, [r5, #12]
 8021f96:	1d0b      	adds	r3, r1, #4
 8021f98:	9200      	str	r2, [sp, #0]
 8021f9a:	68a9      	ldr	r1, [r5, #8]
 8021f9c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8021fa0:	1d00      	adds	r0, r0, #4
 8021fa2:	1d0a      	adds	r2, r1, #4
 8021fa4:	4631      	mov	r1, r6
 8021fa6:	47e0      	blx	ip
 8021fa8:	68e8      	ldr	r0, [r5, #12]
 8021faa:	1d23      	adds	r3, r4, #4
 8021fac:	9000      	str	r0, [sp, #0]
 8021fae:	6829      	ldr	r1, [r5, #0]
 8021fb0:	68ac      	ldr	r4, [r5, #8]
 8021fb2:	68fd      	ldr	r5, [r7, #12]
 8021fb4:	1d0a      	adds	r2, r1, #4
 8021fb6:	4631      	mov	r1, r6
 8021fb8:	1d20      	adds	r0, r4, #4
 8021fba:	47a8      	blx	r5
 8021fbc:	2000      	movs	r0, #0
 8021fbe:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08021fc0 <cmox_ModularBN_DeinitWithR2>:
 8021fc0:	460a      	mov	r2, r1
 8021fc2:	2300      	movs	r3, #0
 8021fc4:	6003      	str	r3, [r0, #0]
 8021fc6:	6881      	ldr	r1, [r0, #8]
 8021fc8:	60c3      	str	r3, [r0, #12]
 8021fca:	b121      	cbz	r1, 8021fd6 <cmox_ModularBN_DeinitWithR2+0x16>
 8021fcc:	f100 0108 	add.w	r1, r0, #8
 8021fd0:	4610      	mov	r0, r2
 8021fd2:	f7ff ba2e 	b.w	8021432 <cmox_bn_free>
 8021fd6:	4770      	bx	lr

08021fd8 <cmox_ModularBN_Deinit>:
 8021fd8:	b538      	push	{r3, r4, r5, lr}
 8021fda:	4604      	mov	r4, r0
 8021fdc:	460d      	mov	r5, r1
 8021fde:	f7ff ffef 	bl	8021fc0 <cmox_ModularBN_DeinitWithR2>
 8021fe2:	6860      	ldr	r0, [r4, #4]
 8021fe4:	b128      	cbz	r0, 8021ff2 <cmox_ModularBN_Deinit+0x1a>
 8021fe6:	1d21      	adds	r1, r4, #4
 8021fe8:	4628      	mov	r0, r5
 8021fea:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 8021fee:	f7ff ba20 	b.w	8021432 <cmox_bn_free>
 8021ff2:	bd31      	pop	{r0, r4, r5, pc}

08021ff4 <cmox_asm_montymul_x128>:
 8021ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ff8:	b086      	sub	sp, #24
 8021ffa:	f851 4b04 	ldr.w	r4, [r1], #4
 8021ffe:	e9cd 0100 	strd	r0, r1, [sp]
 8022002:	9202      	str	r2, [sp, #8]
 8022004:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8022008:	fba4 9a05 	umull	r9, sl, r4, r5
 802200c:	f04f 0e00 	mov.w	lr, #0
 8022010:	fbae bc0e 	umull	fp, ip, lr, lr
 8022014:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8022018:	fbe4 bc67 	umaal	fp, ip, r4, r7
 802201c:	fbe4 ce68 	umaal	ip, lr, r4, r8
 8022020:	e8a3 1e00 	stmia.w	r3!, {r9, sl, fp, ip}
 8022024:	1f12      	subs	r2, r2, #4
 8022026:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 802202a:	46f1      	mov	r9, lr
 802202c:	f04f 0e00 	mov.w	lr, #0
 8022030:	fbae ab0e 	umull	sl, fp, lr, lr
 8022034:	46f4      	mov	ip, lr
 8022036:	fbe4 9a65 	umaal	r9, sl, r4, r5
 802203a:	fbe4 ab66 	umaal	sl, fp, r4, r6
 802203e:	fbe4 bc67 	umaal	fp, ip, r4, r7
 8022042:	fbe4 ce68 	umaal	ip, lr, r4, r8
 8022046:	e8a3 1e00 	stmia.w	r3!, {r9, sl, fp, ip}
 802204a:	1f12      	subs	r2, r2, #4
 802204c:	d1eb      	bne.n	8022026 <cmox_asm_montymul_x128+0x32>
 802204e:	9a02      	ldr	r2, [sp, #8]
 8022050:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8022054:	f8cd e00c 	str.w	lr, [sp, #12]
 8022058:	e9dd 040f 	ldrd	r0, r4, [sp, #60]	@ 0x3c
 802205c:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8022060:	f04f 0900 	mov.w	r9, #0
 8022064:	4619      	mov	r1, r3
 8022066:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 802206a:	fb04 f40a 	mul.w	r4, r4, sl
 802206e:	fbe4 9a65 	umaal	r9, sl, r4, r5
 8022072:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8022076:	fbe4 bc67 	umaal	fp, ip, r4, r7
 802207a:	fbe4 ce68 	umaal	ip, lr, r4, r8
 802207e:	e8a1 1c00 	stmia.w	r1!, {sl, fp, ip}
 8022082:	f1b2 0204 	subs.w	r2, r2, #4
 8022086:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 802208a:	46f1      	mov	r9, lr
 802208c:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 8022090:	fbe4 9a65 	umaal	r9, sl, r4, r5
 8022094:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8022098:	fbe4 bc67 	umaal	fp, ip, r4, r7
 802209c:	fbe4 ce68 	umaal	ip, lr, r4, r8
 80220a0:	e8a1 1e00 	stmia.w	r1!, {r9, sl, fp, ip}
 80220a4:	1f12      	subs	r2, r2, #4
 80220a6:	d1ee      	bne.n	8022086 <cmox_asm_montymul_x128+0x92>
 80220a8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80220ac:	f04f 0a00 	mov.w	sl, #0
 80220b0:	eb1c 0c0e 	adds.w	ip, ip, lr
 80220b4:	f14a 0b00 	adc.w	fp, sl, #0
 80220b8:	f8c1 c000 	str.w	ip, [r1]
 80220bc:	f8cd b00c 	str.w	fp, [sp, #12]
 80220c0:	9a02      	ldr	r2, [sp, #8]
 80220c2:	f1a2 0a01 	sub.w	sl, r2, #1
 80220c6:	f8cd a014 	str.w	sl, [sp, #20]
 80220ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80220ce:	f851 4b04 	ldr.w	r4, [r1], #4
 80220d2:	f8cd 1004 	str.w	r1, [sp, #4]
 80220d6:	f04f 0e00 	mov.w	lr, #0
 80220da:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80220de:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 80220e2:	46f1      	mov	r9, lr
 80220e4:	e893 5c00 	ldmia.w	r3, {sl, fp, ip, lr}
 80220e8:	fbe4 9a65 	umaal	r9, sl, r4, r5
 80220ec:	fbe4 ab66 	umaal	sl, fp, r4, r6
 80220f0:	fbe4 bc67 	umaal	fp, ip, r4, r7
 80220f4:	fbe4 ce68 	umaal	ip, lr, r4, r8
 80220f8:	e8a3 1e00 	stmia.w	r3!, {r9, sl, fp, ip}
 80220fc:	1f12      	subs	r2, r2, #4
 80220fe:	d1ee      	bne.n	80220de <cmox_asm_montymul_x128+0xea>
 8022100:	9a02      	ldr	r2, [sp, #8]
 8022102:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8022106:	9d03      	ldr	r5, [sp, #12]
 8022108:	f04f 0900 	mov.w	r9, #0
 802210c:	eb1e 0505 	adds.w	r5, lr, r5
 8022110:	eb49 0609 	adc.w	r6, r9, r9
 8022114:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8022118:	e9dd 040f 	ldrd	r0, r4, [sp, #60]	@ 0x3c
 802211c:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8022120:	4619      	mov	r1, r3
 8022122:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 8022126:	fb04 f40a 	mul.w	r4, r4, sl
 802212a:	fbe4 9a65 	umaal	r9, sl, r4, r5
 802212e:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8022132:	fbe4 bc67 	umaal	fp, ip, r4, r7
 8022136:	fbe4 ce68 	umaal	ip, lr, r4, r8
 802213a:	e8a1 1c00 	stmia.w	r1!, {sl, fp, ip}
 802213e:	1f12      	subs	r2, r2, #4
 8022140:	e8b0 01e0 	ldmia.w	r0!, {r5, r6, r7, r8}
 8022144:	46f1      	mov	r9, lr
 8022146:	e8b3 5c00 	ldmia.w	r3!, {sl, fp, ip, lr}
 802214a:	fbe4 9a65 	umaal	r9, sl, r4, r5
 802214e:	fbe4 ab66 	umaal	sl, fp, r4, r6
 8022152:	fbe4 bc67 	umaal	fp, ip, r4, r7
 8022156:	fbe4 ce68 	umaal	ip, lr, r4, r8
 802215a:	e8a1 1e00 	stmia.w	r1!, {r9, sl, fp, ip}
 802215e:	1f12      	subs	r2, r2, #4
 8022160:	d1ee      	bne.n	8022140 <cmox_asm_montymul_x128+0x14c>
 8022162:	e9dd bc03 	ldrd	fp, ip, [sp, #12]
 8022166:	eb1b 0b0e 	adds.w	fp, fp, lr
 802216a:	f15c 0c00 	adcs.w	ip, ip, #0
 802216e:	f8c1 b000 	str.w	fp, [r1]
 8022172:	f8cd c00c 	str.w	ip, [sp, #12]
 8022176:	f8dd a014 	ldr.w	sl, [sp, #20]
 802217a:	f1ba 0a01 	subs.w	sl, sl, #1
 802217e:	f8cd a014 	str.w	sl, [sp, #20]
 8022182:	9a02      	ldr	r2, [sp, #8]
 8022184:	d1a1      	bne.n	80220ca <cmox_asm_montymul_x128+0xd6>
 8022186:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 802218a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802218c:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
 802218e:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 8022192:	ebb4 0408 	subs.w	r4, r4, r8
 8022196:	eb75 0509 	sbcs.w	r5, r5, r9
 802219a:	eb76 060a 	sbcs.w	r6, r6, sl
 802219e:	eb77 070b 	sbcs.w	r7, r7, fp
 80221a2:	f1a2 0204 	sub.w	r2, r2, #4
 80221a6:	b16a      	cbz	r2, 80221c4 <cmox_asm_montymul_x128+0x1d0>
 80221a8:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
 80221aa:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 80221ae:	eb74 0408 	sbcs.w	r4, r4, r8
 80221b2:	eb75 0509 	sbcs.w	r5, r5, r9
 80221b6:	eb76 060a 	sbcs.w	r6, r6, sl
 80221ba:	eb77 070b 	sbcs.w	r7, r7, fp
 80221be:	f1a2 0204 	sub.w	r2, r2, #4
 80221c2:	e7f0      	b.n	80221a6 <cmox_asm_montymul_x128+0x1b2>
 80221c4:	f17c 0c00 	sbcs.w	ip, ip, #0
 80221c8:	ea6f 0c0c 	mvn.w	ip, ip
 80221cc:	9a02      	ldr	r2, [sp, #8]
 80221ce:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80221d2:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 80221d6:	e893 00f0 	ldmia.w	r3, {r4, r5, r6, r7}
 80221da:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 80221de:	ea08 080c 	and.w	r8, r8, ip
 80221e2:	ea09 090c 	and.w	r9, r9, ip
 80221e6:	ea0a 0a0c 	and.w	sl, sl, ip
 80221ea:	ea0b 0b0c 	and.w	fp, fp, ip
 80221ee:	ebb4 0408 	subs.w	r4, r4, r8
 80221f2:	eb75 0509 	sbcs.w	r5, r5, r9
 80221f6:	eb76 060a 	sbcs.w	r6, r6, sl
 80221fa:	eb77 070b 	sbcs.w	r7, r7, fp
 80221fe:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
 8022200:	f1a2 0204 	sub.w	r2, r2, #4
 8022204:	b1ba      	cbz	r2, 8022236 <cmox_asm_montymul_x128+0x242>
 8022206:	e893 00f0 	ldmia.w	r3, {r4, r5, r6, r7}
 802220a:	e8b0 0f00 	ldmia.w	r0!, {r8, r9, sl, fp}
 802220e:	ea08 080c 	and.w	r8, r8, ip
 8022212:	ea09 090c 	and.w	r9, r9, ip
 8022216:	ea0a 0a0c 	and.w	sl, sl, ip
 802221a:	ea0b 0b0c 	and.w	fp, fp, ip
 802221e:	eb74 0408 	sbcs.w	r4, r4, r8
 8022222:	eb75 0509 	sbcs.w	r5, r5, r9
 8022226:	eb76 060a 	sbcs.w	r6, r6, sl
 802222a:	eb77 070b 	sbcs.w	r7, r7, fp
 802222e:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
 8022230:	f1a2 0204 	sub.w	r2, r2, #4
 8022234:	e7e6      	b.n	8022204 <cmox_asm_montymul_x128+0x210>
 8022236:	b006      	add	sp, #24
 8022238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802223c <cmox_asm_montyred>:
 802223c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022240:	f8dd 4024 	ldr.w	r4, [sp, #36]	@ 0x24
 8022244:	9209      	str	r2, [sp, #36]	@ 0x24
 8022246:	ea4f 0181 	mov.w	r1, r1, lsl #2
 802224a:	f04f 0b00 	mov.w	fp, #0
 802224e:	fbab a50b 	umull	sl, r5, fp, fp
 8022252:	468c      	mov	ip, r1
 8022254:	f1bc 0c04 	subs.w	ip, ip, #4
 8022258:	f850 e00c 	ldr.w	lr, [r0, ip]
 802225c:	f843 e00c 	str.w	lr, [r3, ip]
 8022260:	d000      	beq.n	8022264 <cmox_asm_montyred+0x28>
 8022262:	e7f7      	b.n	8022254 <cmox_asm_montyred+0x18>
 8022264:	4408      	add	r0, r1
 8022266:	f8d3 9000 	ldr.w	r9, [r3]
 802226a:	fbab 780b 	umull	r7, r8, fp, fp
 802226e:	fb09 f904 	mul.w	r9, r9, r4
 8022272:	460e      	mov	r6, r1
 8022274:	469e      	mov	lr, r3
 8022276:	f8de 7000 	ldr.w	r7, [lr]
 802227a:	f852 cb04 	ldr.w	ip, [r2], #4
 802227e:	f1a6 0604 	sub.w	r6, r6, #4
 8022282:	fbe9 786c 	umaal	r7, r8, r9, ip
 8022286:	b156      	cbz	r6, 802229e <cmox_asm_montyred+0x62>
 8022288:	f8de 7004 	ldr.w	r7, [lr, #4]
 802228c:	f852 cb04 	ldr.w	ip, [r2], #4
 8022290:	f1a6 0604 	sub.w	r6, r6, #4
 8022294:	fbe9 786c 	umaal	r7, r8, r9, ip
 8022298:	f84e 7b04 	str.w	r7, [lr], #4
 802229c:	e7f3      	b.n	8022286 <cmox_asm_montyred+0x4a>
 802229e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80222a0:	c880      	ldmia	r0!, {r7}
 80222a2:	f04f 0c01 	mov.w	ip, #1
 80222a6:	fbea 786c 	umaal	r7, r8, sl, ip
 80222aa:	f8ce 7000 	str.w	r7, [lr]
 80222ae:	46c2      	mov	sl, r8
 80222b0:	f105 0504 	add.w	r5, r5, #4
 80222b4:	428d      	cmp	r5, r1
 80222b6:	dbd6      	blt.n	8022266 <cmox_asm_montyred+0x2a>
 80222b8:	469c      	mov	ip, r3
 80222ba:	4693      	mov	fp, r2
 80222bc:	1e0d      	subs	r5, r1, #0
 80222be:	b135      	cbz	r5, 80222ce <cmox_asm_montyred+0x92>
 80222c0:	f85c 6b04 	ldr.w	r6, [ip], #4
 80222c4:	ca80      	ldmia	r2!, {r7}
 80222c6:	41be      	sbcs	r6, r7
 80222c8:	f1a5 0504 	sub.w	r5, r5, #4
 80222cc:	e7f7      	b.n	80222be <cmox_asm_montyred+0x82>
 80222ce:	eb66 0606 	sbc.w	r6, r6, r6
 80222d2:	eb0a 0c06 	add.w	ip, sl, r6
 80222d6:	ea6f 0c0c 	mvn.w	ip, ip
 80222da:	469a      	mov	sl, r3
 80222dc:	465a      	mov	r2, fp
 80222de:	1e0d      	subs	r5, r1, #0
 80222e0:	b14d      	cbz	r5, 80222f6 <cmox_asm_montyred+0xba>
 80222e2:	ca80      	ldmia	r2!, {r7}
 80222e4:	f85a 6b04 	ldr.w	r6, [sl], #4
 80222e8:	ea07 070c 	and.w	r7, r7, ip
 80222ec:	41be      	sbcs	r6, r7
 80222ee:	c340      	stmia	r3!, {r6}
 80222f0:	f1a5 0504 	sub.w	r5, r5, #4
 80222f4:	e7f4      	b.n	80222e0 <cmox_asm_montyred+0xa4>
 80222f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080222fa <cmox_asm_mul>:
 80222fa:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80222fe:	0092      	lsls	r2, r2, #2
 8022300:	f05f 0900 	movs.w	r9, #0
 8022304:	ea5f 0b42 	movs.w	fp, r2, lsl #1
 8022308:	f1ab 0b04 	sub.w	fp, fp, #4
 802230c:	d004      	beq.n	8022318 <cmox_asm_mul+0x1e>
 802230e:	f1bb 0b04 	subs.w	fp, fp, #4
 8022312:	f843 900b 	str.w	r9, [r3, fp]
 8022316:	d1fa      	bne.n	802230e <cmox_asm_mul+0x14>
 8022318:	ea5f 0b02 	movs.w	fp, r2
 802231c:	d017      	beq.n	802234e <cmox_asm_mul+0x54>
 802231e:	2400      	movs	r4, #0
 8022320:	f850 cb04 	ldr.w	ip, [r0], #4
 8022324:	469e      	mov	lr, r3
 8022326:	4692      	mov	sl, r2
 8022328:	460e      	mov	r6, r1
 802232a:	f8de 5000 	ldr.w	r5, [lr]
 802232e:	f856 8b04 	ldr.w	r8, [r6], #4
 8022332:	fbec 5468 	umaal	r5, r4, ip, r8
 8022336:	f84e 5b04 	str.w	r5, [lr], #4
 802233a:	f1ba 0a04 	subs.w	sl, sl, #4
 802233e:	d1f4      	bne.n	802232a <cmox_asm_mul+0x30>
 8022340:	f8ce 4000 	str.w	r4, [lr]
 8022344:	f103 0304 	add.w	r3, r3, #4
 8022348:	f1bb 0b04 	subs.w	fp, fp, #4
 802234c:	d1e7      	bne.n	802231e <cmox_asm_mul+0x24>
 802234e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08022352 <cmox_mathUtils_mux>:
 8022352:	4240      	negs	r0, r0
 8022354:	4051      	eors	r1, r2
 8022356:	4008      	ands	r0, r1
 8022358:	4050      	eors	r0, r2
 802235a:	4770      	bx	lr

0802235c <cmox_mathUtils_not>:
 802235c:	f080 0001 	eor.w	r0, r0, #1
 8022360:	4770      	bx	lr

08022362 <cmox_mathUtils_neq>:
 8022362:	4048      	eors	r0, r1
 8022364:	4241      	negs	r1, r0
 8022366:	4308      	orrs	r0, r1
 8022368:	0fc0      	lsrs	r0, r0, #31
 802236a:	4770      	bx	lr

0802236c <cmox_mathUtils_gt>:
 802236c:	1a0a      	subs	r2, r1, r0
 802236e:	4041      	eors	r1, r0
 8022370:	4050      	eors	r0, r2
 8022372:	4008      	ands	r0, r1
 8022374:	4050      	eors	r0, r2
 8022376:	0fc0      	lsrs	r0, r0, #31
 8022378:	4770      	bx	lr

0802237a <cmox_mathUtils_bitLength>:
 802237a:	4601      	mov	r1, r0
 802237c:	2020      	movs	r0, #32
 802237e:	b510      	push	{r4, lr}
 8022380:	2201      	movs	r2, #1
 8022382:	231f      	movs	r3, #31
 8022384:	fa21 f403 	lsr.w	r4, r1, r3
 8022388:	f004 0401 	and.w	r4, r4, #1
 802238c:	f084 0401 	eor.w	r4, r4, #1
 8022390:	4022      	ands	r2, r4
 8022392:	1a80      	subs	r0, r0, r2
 8022394:	1e5b      	subs	r3, r3, #1
 8022396:	f113 0f01 	cmn.w	r3, #1
 802239a:	d1f3      	bne.n	8022384 <cmox_mathUtils_bitLength+0xa>
 802239c:	bd10      	pop	{r4, pc}

0802239e <cmox_md_updateState_small>:
 802239e:	2220      	movs	r2, #32
 80223a0:	305c      	adds	r0, #92	@ 0x5c
 80223a2:	f007 be91 	b.w	802a0c8 <__aeabi_memcpy>

080223a6 <cmox_md_copyLastState_small>:
 80223a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223a8:	6884      	ldr	r4, [r0, #8]
 80223aa:	2200      	movs	r2, #0
 80223ac:	08a3      	lsrs	r3, r4, #2
 80223ae:	f004 0403 	and.w	r4, r4, #3
 80223b2:	e007      	b.n	80223c4 <cmox_md_copyLastState_small+0x1e>
 80223b4:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 80223b8:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 80223bc:	ba35      	rev	r5, r6
 80223be:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 80223c2:	1c52      	adds	r2, r2, #1
 80223c4:	429a      	cmp	r2, r3
 80223c6:	d3f5      	bcc.n	80223b4 <cmox_md_copyLastState_small+0xe>
 80223c8:	2200      	movs	r2, #0
 80223ca:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 80223ce:	e009      	b.n	80223e4 <cmox_md_copyLastState_small+0x3e>
 80223d0:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
 80223d4:	00d7      	lsls	r7, r2, #3
 80223d6:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 80223da:	f1c7 0718 	rsb	r7, r7, #24
 80223de:	1c52      	adds	r2, r2, #1
 80223e0:	40fe      	lsrs	r6, r7
 80223e2:	540e      	strb	r6, [r1, r0]
 80223e4:	42a2      	cmp	r2, r4
 80223e6:	d3f3      	bcc.n	80223d0 <cmox_md_copyLastState_small+0x2a>
 80223e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080223ea <cmox_md_padMsgLen_small>:
 80223ea:	b570      	push	{r4, r5, r6, lr}
 80223ec:	68c4      	ldr	r4, [r0, #12]
 80223ee:	6903      	ldr	r3, [r0, #16]
 80223f0:	2200      	movs	r2, #0
 80223f2:	1ae3      	subs	r3, r4, r3
 80223f4:	5c8d      	ldrb	r5, [r1, r2]
 80223f6:	18d6      	adds	r6, r2, r3
 80223f8:	1c52      	adds	r2, r2, #1
 80223fa:	4406      	add	r6, r0
 80223fc:	2a08      	cmp	r2, #8
 80223fe:	7735      	strb	r5, [r6, #28]
 8022400:	d3f8      	bcc.n	80223f4 <cmox_md_padMsgLen_small+0xa>
 8022402:	bd70      	pop	{r4, r5, r6, pc}

08022404 <cmox_md_construct>:
 8022404:	6003      	str	r3, [r0, #0]
 8022406:	60c1      	str	r1, [r0, #12]
 8022408:	6102      	str	r2, [r0, #16]
 802240a:	4770      	bx	lr

0802240c <cmox_md_init>:
 802240c:	b570      	push	{r4, r5, r6, lr}
 802240e:	4615      	mov	r5, r2
 8022410:	4604      	mov	r4, r0
 8022412:	2200      	movs	r2, #0
 8022414:	6062      	str	r2, [r4, #4]
 8022416:	6823      	ldr	r3, [r4, #0]
 8022418:	685e      	ldr	r6, [r3, #4]
 802241a:	47b0      	blx	r6
 802241c:	2200      	movs	r2, #0
 802241e:	60a5      	str	r5, [r4, #8]
 8022420:	6162      	str	r2, [r4, #20]
 8022422:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8022426:	61a2      	str	r2, [r4, #24]
 8022428:	bd70      	pop	{r4, r5, r6, pc}

0802242a <cmox_md_setTagSize>:
 802242a:	6081      	str	r1, [r0, #8]
 802242c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8022430:	4770      	bx	lr
	...

08022434 <cmox_md_append>:
 8022434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022438:	4604      	mov	r4, r0
 802243a:	7920      	ldrb	r0, [r4, #4]
 802243c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8022440:	0745      	lsls	r5, r0, #29
 8022442:	bf48      	it	mi
 8022444:	4824      	ldrmi	r0, [pc, #144]	@ (80224d8 <cmox_md_append+0xa4>)
 8022446:	d445      	bmi.n	80224d4 <cmox_md_append+0xa0>
 8022448:	461d      	mov	r5, r3
 802244a:	6966      	ldr	r6, [r4, #20]
 802244c:	f1a8 0001 	sub.w	r0, r8, #1
 8022450:	ea00 03d6 	and.w	r3, r0, r6, lsr #3
 8022454:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8022458:	6166      	str	r6, [r4, #20]
 802245a:	ebb6 0fc5 	cmp.w	r6, r5, lsl #3
 802245e:	d202      	bcs.n	8022466 <cmox_md_append+0x32>
 8022460:	69a6      	ldr	r6, [r4, #24]
 8022462:	1c76      	adds	r6, r6, #1
 8022464:	61a6      	str	r6, [r4, #24]
 8022466:	69a7      	ldr	r7, [r4, #24]
 8022468:	460e      	mov	r6, r1
 802246a:	18e9      	adds	r1, r5, r3
 802246c:	4288      	cmp	r0, r1
 802246e:	eb07 7755 	add.w	r7, r7, r5, lsr #29
 8022472:	61a7      	str	r7, [r4, #24]
 8022474:	4617      	mov	r7, r2
 8022476:	d225      	bcs.n	80224c4 <cmox_md_append+0x90>
 8022478:	eba8 0903 	sub.w	r9, r8, r3
 802247c:	464a      	mov	r2, r9
 802247e:	4631      	mov	r1, r6
 8022480:	18f8      	adds	r0, r7, r3
 8022482:	f007 fe21 	bl	802a0c8 <__aeabi_memcpy>
 8022486:	6822      	ldr	r2, [r4, #0]
 8022488:	4639      	mov	r1, r7
 802248a:	e00f      	b.n	80224ac <cmox_md_append+0x78>
 802248c:	4642      	mov	r2, r8
 802248e:	4638      	mov	r0, r7
 8022490:	f007 fe1a 	bl	802a0c8 <__aeabi_memcpy>
 8022494:	6822      	ldr	r2, [r4, #0]
 8022496:	4639      	mov	r1, r7
 8022498:	4620      	mov	r0, r4
 802249a:	f8d2 a000 	ldr.w	sl, [r2]
 802249e:	47d0      	blx	sl
 80224a0:	e007      	b.n	80224b2 <cmox_md_append+0x7e>
 80224a2:	1831      	adds	r1, r6, r0
 80224a4:	f011 0003 	ands.w	r0, r1, #3
 80224a8:	d1f0      	bne.n	802248c <cmox_md_append+0x58>
 80224aa:	6822      	ldr	r2, [r4, #0]
 80224ac:	4620      	mov	r0, r4
 80224ae:	6813      	ldr	r3, [r2, #0]
 80224b0:	4798      	blx	r3
 80224b2:	4648      	mov	r0, r9
 80224b4:	eb00 0908 	add.w	r9, r0, r8
 80224b8:	f1a9 0101 	sub.w	r1, r9, #1
 80224bc:	42a9      	cmp	r1, r5
 80224be:	d3f0      	bcc.n	80224a2 <cmox_md_append+0x6e>
 80224c0:	2300      	movs	r3, #0
 80224c2:	e000      	b.n	80224c6 <cmox_md_append+0x92>
 80224c4:	2000      	movs	r0, #0
 80224c6:	1a2a      	subs	r2, r5, r0
 80224c8:	1831      	adds	r1, r6, r0
 80224ca:	18f8      	adds	r0, r7, r3
 80224cc:	f007 fdfc 	bl	802a0c8 <__aeabi_memcpy>
 80224d0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80224d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224d8:	00020004 	.word	0x00020004

080224dc <cmox_md_generateTag>:
 80224dc:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224e0:	b085      	sub	sp, #20
 80224e2:	4602      	mov	r2, r0
 80224e4:	68d0      	ldr	r0, [r2, #12]
 80224e6:	6913      	ldr	r3, [r2, #16]
 80224e8:	2700      	movs	r7, #0
 80224ea:	f8df c178 	ldr.w	ip, [pc, #376]	@ 8022664 <cmox_md_generateTag+0x188>
 80224ee:	f10d 0e0c 	add.w	lr, sp, #12
 80224f2:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 8022668 <cmox_md_generateTag+0x18c>
 80224f6:	eba0 0903 	sub.w	r9, r0, r3
 80224fa:	6853      	ldr	r3, [r2, #4]
 80224fc:	a803      	add	r0, sp, #12
 80224fe:	f043 0304 	orr.w	r3, r3, #4
 8022502:	6053      	str	r3, [r2, #4]
 8022504:	9002      	str	r0, [sp, #8]
 8022506:	a803      	add	r0, sp, #12
 8022508:	4d58      	ldr	r5, [pc, #352]	@ (802266c <cmox_md_generateTag+0x190>)
 802250a:	e9d8 3400 	ldrd	r3, r4, [r8]
 802250e:	e9c0 3400 	strd	r3, r4, [r0]
 8022512:	7828      	ldrb	r0, [r5, #0]
 8022514:	4d56      	ldr	r5, [pc, #344]	@ (8022670 <cmox_md_generateTag+0x194>)
 8022516:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 8022674 <cmox_md_generateTag+0x198>
 802251a:	2800      	cmp	r0, #0
 802251c:	bf0c      	ite	eq
 802251e:	2300      	moveq	r3, #0
 8022520:	2304      	movne	r3, #4
 8022522:	461c      	mov	r4, r3
 8022524:	f85c 3003 	ldr.w	r3, [ip, r3]
 8022528:	f85e 4004 	ldr.w	r4, [lr, r4]
 802252c:	18e3      	adds	r3, r4, r3
 802252e:	2401      	movs	r4, #1
 8022530:	601d      	str	r5, [r3, #0]
 8022532:	681e      	ldr	r6, [r3, #0]
 8022534:	609c      	str	r4, [r3, #8]
 8022536:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802253a:	9d03      	ldr	r5, [sp, #12]
 802253c:	f8dc 4000 	ldr.w	r4, [ip]
 8022540:	405d      	eors	r5, r3
 8022542:	4075      	eors	r5, r6
 8022544:	4e4c      	ldr	r6, [pc, #304]	@ (8022678 <cmox_md_generateTag+0x19c>)
 8022546:	4075      	eors	r5, r6
 8022548:	f8de 6004 	ldr.w	r6, [lr, #4]
 802254c:	4066      	eors	r6, r4
 802254e:	ea8b 0606 	eor.w	r6, fp, r6
 8022552:	4435      	add	r5, r6
 8022554:	4e49      	ldr	r6, [pc, #292]	@ (802267c <cmox_md_generateTag+0x1a0>)
 8022556:	4075      	eors	r5, r6
 8022558:	2800      	cmp	r0, #0
 802255a:	ae03      	add	r6, sp, #12
 802255c:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8022560:	e9c6 ab00 	strd	sl, fp, [r6]
 8022564:	f8dd a008 	ldr.w	sl, [sp, #8]
 8022568:	bf0e      	itee	eq
 802256a:	2600      	moveq	r6, #0
 802256c:	2004      	movne	r0, #4
 802256e:	2604      	movne	r6, #4
 8022570:	f85c 0000 	ldr.w	r0, [ip, r0]
 8022574:	f85a 6006 	ldr.w	r6, [sl, r6]
 8022578:	f04f 0a01 	mov.w	sl, #1
 802257c:	1830      	adds	r0, r6, r0
 802257e:	4e40      	ldr	r6, [pc, #256]	@ (8022680 <cmox_md_generateTag+0x1a4>)
 8022580:	6006      	str	r6, [r0, #0]
 8022582:	6806      	ldr	r6, [r0, #0]
 8022584:	f8c0 a008 	str.w	sl, [r0, #8]
 8022588:	9803      	ldr	r0, [sp, #12]
 802258a:	4043      	eors	r3, r0
 802258c:	4073      	eors	r3, r6
 802258e:	9802      	ldr	r0, [sp, #8]
 8022590:	4e39      	ldr	r6, [pc, #228]	@ (8022678 <cmox_md_generateTag+0x19c>)
 8022592:	4073      	eors	r3, r6
 8022594:	6840      	ldr	r0, [r0, #4]
 8022596:	4044      	eors	r4, r0
 8022598:	4836      	ldr	r0, [pc, #216]	@ (8022674 <cmox_md_generateTag+0x198>)
 802259a:	4044      	eors	r4, r0
 802259c:	18e3      	adds	r3, r4, r3
 802259e:	4c39      	ldr	r4, [pc, #228]	@ (8022684 <cmox_md_generateTag+0x1a8>)
 80225a0:	4063      	eors	r3, r4
 80225a2:	0028      	movs	r0, r5
 80225a4:	f007 0403 	and.w	r4, r7, #3
 80225a8:	f1c4 0403 	rsb	r4, r4, #3
 80225ac:	bf18      	it	ne
 80225ae:	2001      	movne	r0, #1
 80225b0:	1e5b      	subs	r3, r3, #1
 80225b2:	419b      	sbcs	r3, r3
 80225b4:	2f04      	cmp	r7, #4
 80225b6:	bf2c      	ite	cs
 80225b8:	b2c0      	uxtbcs	r0, r0
 80225ba:	0fd8      	lsrcc	r0, r3, #31
 80225bc:	f102 0314 	add.w	r3, r2, #20
 80225c0:	00e4      	lsls	r4, r4, #3
 80225c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80225c6:	40e0      	lsrs	r0, r4
 80225c8:	f80d 0007 	strb.w	r0, [sp, r7]
 80225cc:	1c7f      	adds	r7, r7, #1
 80225ce:	2f08      	cmp	r7, #8
 80225d0:	d399      	bcc.n	8022506 <cmox_md_generateTag+0x2a>
 80225d2:	4615      	mov	r5, r2
 80225d4:	2600      	movs	r6, #0
 80225d6:	696a      	ldr	r2, [r5, #20]
 80225d8:	69ab      	ldr	r3, [r5, #24]
 80225da:	68e8      	ldr	r0, [r5, #12]
 80225dc:	460c      	mov	r4, r1
 80225de:	08d2      	lsrs	r2, r2, #3
 80225e0:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
 80225e4:	1e40      	subs	r0, r0, #1
 80225e6:	ea00 0702 	and.w	r7, r0, r2
 80225ea:	4010      	ands	r0, r2
 80225ec:	42b6      	cmp	r6, r6
 80225ee:	d80a      	bhi.n	8022606 <cmox_md_generateTag+0x12a>
 80225f0:	4548      	cmp	r0, r9
 80225f2:	d208      	bcs.n	8022606 <cmox_md_generateTag+0x12a>
 80225f4:	2280      	movs	r2, #128	@ 0x80
 80225f6:	55e2      	strb	r2, [r4, r7]
 80225f8:	1c7f      	adds	r7, r7, #1
 80225fa:	454f      	cmp	r7, r9
 80225fc:	d217      	bcs.n	802262e <cmox_md_generateTag+0x152>
 80225fe:	eba9 0107 	sub.w	r1, r9, r7
 8022602:	19e0      	adds	r0, r4, r7
 8022604:	e011      	b.n	802262a <cmox_md_generateTag+0x14e>
 8022606:	2380      	movs	r3, #128	@ 0x80
 8022608:	55e3      	strb	r3, [r4, r7]
 802260a:	e000      	b.n	802260e <cmox_md_generateTag+0x132>
 802260c:	55e6      	strb	r6, [r4, r7]
 802260e:	68e9      	ldr	r1, [r5, #12]
 8022610:	1c7f      	adds	r7, r7, #1
 8022612:	428f      	cmp	r7, r1
 8022614:	d3fa      	bcc.n	802260c <cmox_md_generateTag+0x130>
 8022616:	682a      	ldr	r2, [r5, #0]
 8022618:	4621      	mov	r1, r4
 802261a:	4628      	mov	r0, r5
 802261c:	6813      	ldr	r3, [r2, #0]
 802261e:	4798      	blx	r3
 8022620:	f1b9 0f00 	cmp.w	r9, #0
 8022624:	d003      	beq.n	802262e <cmox_md_generateTag+0x152>
 8022626:	4649      	mov	r1, r9
 8022628:	4620      	mov	r0, r4
 802262a:	f007 fd4f 	bl	802a0cc <__aeabi_memclr>
 802262e:	682a      	ldr	r2, [r5, #0]
 8022630:	9e06      	ldr	r6, [sp, #24]
 8022632:	9f05      	ldr	r7, [sp, #20]
 8022634:	4669      	mov	r1, sp
 8022636:	4628      	mov	r0, r5
 8022638:	6893      	ldr	r3, [r2, #8]
 802263a:	4798      	blx	r3
 802263c:	4621      	mov	r1, r4
 802263e:	682c      	ldr	r4, [r5, #0]
 8022640:	4628      	mov	r0, r5
 8022642:	f8d4 c000 	ldr.w	ip, [r4]
 8022646:	47e0      	blx	ip
 8022648:	682a      	ldr	r2, [r5, #0]
 802264a:	4639      	mov	r1, r7
 802264c:	4628      	mov	r0, r5
 802264e:	68d3      	ldr	r3, [r2, #12]
 8022650:	4798      	blx	r3
 8022652:	b10e      	cbz	r6, 8022658 <cmox_md_generateTag+0x17c>
 8022654:	68a8      	ldr	r0, [r5, #8]
 8022656:	6030      	str	r0, [r6, #0]
 8022658:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 802265c:	b007      	add	sp, #28
 802265e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022662:	bf00      	nop
 8022664:	0802ab98 	.word	0x0802ab98
 8022668:	08022688 	.word	0x08022688
 802266c:	240000a0 	.word	0x240000a0
 8022670:	9310c55f 	.word	0x9310c55f
 8022674:	7a0168fc 	.word	0x7a0168fc
 8022678:	12008504 	.word	0x12008504
 802267c:	ff24f5c0 	.word	0xff24f5c0
 8022680:	d433af24 	.word	0xd433af24
 8022684:	8b69af26 	.word	0x8b69af26
 8022688:	0101b004 	.word	0x0101b004
 802268c:	45011700 	.word	0x45011700

08022690 <cmox_membuf_init>:
 8022690:	2300      	movs	r3, #0

08022692 <cmox_membuf_set>:
 8022692:	2900      	cmp	r1, #0
 8022694:	bf18      	it	ne
 8022696:	2a00      	cmpne	r2, #0
 8022698:	d004      	beq.n	80226a4 <cmox_membuf_set+0x12>
 802269a:	6001      	str	r1, [r0, #0]
 802269c:	2100      	movs	r1, #0
 802269e:	6042      	str	r2, [r0, #4]
 80226a0:	6083      	str	r3, [r0, #8]
 80226a2:	60c1      	str	r1, [r0, #12]
 80226a4:	4770      	bx	lr

080226a6 <cmox_membuf_getFree>:
 80226a6:	4601      	mov	r1, r0
 80226a8:	6848      	ldr	r0, [r1, #4]
 80226aa:	6889      	ldr	r1, [r1, #8]
 80226ac:	1a40      	subs	r0, r0, r1
 80226ae:	4770      	bx	lr

080226b0 <cmox_membuf_alloc>:
 80226b0:	b560      	push	{r5, r6, lr}
 80226b2:	b111      	cbz	r1, 80226ba <cmox_membuf_alloc+0xa>
 80226b4:	b91a      	cbnz	r2, 80226be <cmox_membuf_alloc+0xe>
 80226b6:	2000      	movs	r0, #0
 80226b8:	6008      	str	r0, [r1, #0]
 80226ba:	2001      	movs	r0, #1
 80226bc:	bd60      	pop	{r5, r6, pc}
 80226be:	6883      	ldr	r3, [r0, #8]
 80226c0:	1cd2      	adds	r2, r2, #3
 80226c2:	0892      	lsrs	r2, r2, #2
 80226c4:	6845      	ldr	r5, [r0, #4]
 80226c6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80226ca:	4295      	cmp	r5, r2
 80226cc:	d203      	bcs.n	80226d6 <cmox_membuf_alloc+0x26>
 80226ce:	2000      	movs	r0, #0
 80226d0:	6008      	str	r0, [r1, #0]
 80226d2:	2002      	movs	r0, #2
 80226d4:	bd60      	pop	{r5, r6, pc}
 80226d6:	6806      	ldr	r6, [r0, #0]
 80226d8:	4433      	add	r3, r6
 80226da:	600b      	str	r3, [r1, #0]
 80226dc:	4611      	mov	r1, r2
 80226de:	6082      	str	r2, [r0, #8]
 80226e0:	68c2      	ldr	r2, [r0, #12]
 80226e2:	4291      	cmp	r1, r2
 80226e4:	bf38      	it	cc
 80226e6:	4611      	movcc	r1, r2
 80226e8:	60c1      	str	r1, [r0, #12]
 80226ea:	2000      	movs	r0, #0
 80226ec:	bd60      	pop	{r5, r6, pc}

080226ee <cmox_membuf_free>:
 80226ee:	b510      	push	{r4, lr}
 80226f0:	4604      	mov	r4, r0
 80226f2:	2000      	movs	r0, #0
 80226f4:	2900      	cmp	r1, #0
 80226f6:	bf1c      	itt	ne
 80226f8:	680b      	ldrne	r3, [r1, #0]
 80226fa:	2b00      	cmpne	r3, #0
 80226fc:	d003      	beq.n	8022706 <cmox_membuf_free+0x18>
 80226fe:	b112      	cbz	r2, 8022706 <cmox_membuf_free+0x18>
 8022700:	68a3      	ldr	r3, [r4, #8]
 8022702:	4293      	cmp	r3, r2
 8022704:	d201      	bcs.n	802270a <cmox_membuf_free+0x1c>
 8022706:	2001      	movs	r0, #1
 8022708:	bd10      	pop	{r4, pc}
 802270a:	1cd2      	adds	r2, r2, #3
 802270c:	0892      	lsrs	r2, r2, #2
 802270e:	6008      	str	r0, [r1, #0]
 8022710:	eba3 0282 	sub.w	r2, r3, r2, lsl #2
 8022714:	60a2      	str	r2, [r4, #8]
 8022716:	bd10      	pop	{r4, pc}

08022718 <cmox_membuf_cleanup>:
 8022718:	b510      	push	{r4, lr}
 802271a:	4604      	mov	r4, r0
 802271c:	6861      	ldr	r1, [r4, #4]
 802271e:	6820      	ldr	r0, [r4, #0]
 8022720:	f007 fcd4 	bl	802a0cc <__aeabi_memclr>
 8022724:	2000      	movs	r0, #0
 8022726:	2100      	movs	r1, #0
 8022728:	2200      	movs	r2, #0
 802272a:	2300      	movs	r3, #0
 802272c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8022730:	bd10      	pop	{r4, pc}
	...

08022734 <cmox_aesSmall_keySchedule>:
 8022734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022738:	f100 050c 	add.w	r5, r0, #12
 802273c:	f04f 0800 	mov.w	r8, #0
 8022740:	0892      	lsrs	r2, r2, #2
 8022742:	4b3e      	ldr	r3, [pc, #248]	@ (802283c <cmox_aesSmall_keySchedule+0x108>)
 8022744:	2000      	movs	r0, #0
 8022746:	e005      	b.n	8022754 <cmox_aesSmall_keySchedule+0x20>
 8022748:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 802274c:	ba24      	rev	r4, r4
 802274e:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
 8022752:	1c40      	adds	r0, r0, #1
 8022754:	4290      	cmp	r0, r2
 8022756:	d3f7      	bcc.n	8022748 <cmox_aesSmall_keySchedule+0x14>
 8022758:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 802275c:	4f38      	ldr	r7, [pc, #224]	@ (8022840 <cmox_aesSmall_keySchedule+0x10c>)
 802275e:	f8d5 c000 	ldr.w	ip, [r5]
 8022762:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8022766:	0404      	lsls	r4, r0, #16
 8022768:	0e24      	lsrs	r4, r4, #24
 802276a:	5d3e      	ldrb	r6, [r7, r4]
 802276c:	4c35      	ldr	r4, [pc, #212]	@ (8022844 <cmox_aesSmall_keySchedule+0x110>)
 802276e:	0201      	lsls	r1, r0, #8
 8022770:	0e09      	lsrs	r1, r1, #24
 8022772:	5c79      	ldrb	r1, [r7, r1]
 8022774:	0436      	lsls	r6, r6, #16
 8022776:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 802277a:	b2c1      	uxtb	r1, r0
 802277c:	5c79      	ldrb	r1, [r7, r1]
 802277e:	0e00      	lsrs	r0, r0, #24
 8022780:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 8022784:	5c39      	ldrb	r1, [r7, r0]
 8022786:	f854 0028 	ldr.w	r0, [r4, r8, lsl #2]
 802278a:	f108 0801 	add.w	r8, r8, #1
 802278e:	430e      	orrs	r6, r1
 8022790:	ea86 010c 	eor.w	r1, r6, ip
 8022794:	1f2e      	subs	r6, r5, #4
 8022796:	4048      	eors	r0, r1
 8022798:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 802279c:	2001      	movs	r0, #1
 802279e:	1881      	adds	r1, r0, r2
 80227a0:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80227a4:	f856 e021 	ldr.w	lr, [r6, r1, lsl #2]
 80227a8:	1c40      	adds	r0, r0, #1
 80227aa:	2804      	cmp	r0, #4
 80227ac:	ea84 040e 	eor.w	r4, r4, lr
 80227b0:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
 80227b4:	d3f3      	bcc.n	802279e <cmox_aesSmall_keySchedule+0x6a>
 80227b6:	2a04      	cmp	r2, #4
 80227b8:	d004      	beq.n	80227c4 <cmox_aesSmall_keySchedule+0x90>
 80227ba:	2a06      	cmp	r2, #6
 80227bc:	d00c      	beq.n	80227d8 <cmox_aesSmall_keySchedule+0xa4>
 80227be:	2a08      	cmp	r2, #8
 80227c0:	d016      	beq.n	80227f0 <cmox_aesSmall_keySchedule+0xbc>
 80227c2:	e038      	b.n	8022836 <cmox_aesSmall_keySchedule+0x102>
 80227c4:	f1b8 0f0a 	cmp.w	r8, #10
 80227c8:	d204      	bcs.n	80227d4 <cmox_aesSmall_keySchedule+0xa0>
 80227ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80227ce:	d001      	beq.n	80227d4 <cmox_aesSmall_keySchedule+0xa0>
 80227d0:	464d      	mov	r5, r9
 80227d2:	e7c1      	b.n	8022758 <cmox_aesSmall_keySchedule+0x24>
 80227d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80227d8:	f1b8 0f07 	cmp.w	r8, #7
 80227dc:	d8fa      	bhi.n	80227d4 <cmox_aesSmall_keySchedule+0xa0>
 80227de:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 80227e0:	6928      	ldr	r0, [r5, #16]
 80227e2:	4047      	eors	r7, r0
 80227e4:	62af      	str	r7, [r5, #40]	@ 0x28
 80227e6:	6968      	ldr	r0, [r5, #20]
 80227e8:	ea80 0107 	eor.w	r1, r0, r7
 80227ec:	62e9      	str	r1, [r5, #44]	@ 0x2c
 80227ee:	e7ec      	b.n	80227ca <cmox_aesSmall_keySchedule+0x96>
 80227f0:	f1b8 0f07 	cmp.w	r8, #7
 80227f4:	d2ee      	bcs.n	80227d4 <cmox_aesSmall_keySchedule+0xa0>
 80227f6:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80227f8:	6929      	ldr	r1, [r5, #16]
 80227fa:	0e04      	lsrs	r4, r0, #24
 80227fc:	f817 e004 	ldrb.w	lr, [r7, r4]
 8022800:	0204      	lsls	r4, r0, #8
 8022802:	0e24      	lsrs	r4, r4, #24
 8022804:	5d3e      	ldrb	r6, [r7, r4]
 8022806:	0404      	lsls	r4, r0, #16
 8022808:	0e24      	lsrs	r4, r4, #24
 802280a:	b2c0      	uxtb	r0, r0
 802280c:	5d3c      	ldrb	r4, [r7, r4]
 802280e:	5c38      	ldrb	r0, [r7, r0]
 8022810:	0436      	lsls	r6, r6, #16
 8022812:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8022816:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
 802281a:	4306      	orrs	r6, r0
 802281c:	4071      	eors	r1, r6
 802281e:	6329      	str	r1, [r5, #48]	@ 0x30
 8022820:	2005      	movs	r0, #5
 8022822:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8022826:	1c40      	adds	r0, r0, #1
 8022828:	69cf      	ldr	r7, [r1, #28]
 802282a:	680c      	ldr	r4, [r1, #0]
 802282c:	4067      	eors	r7, r4
 802282e:	2807      	cmp	r0, #7
 8022830:	620f      	str	r7, [r1, #32]
 8022832:	d9f6      	bls.n	8022822 <cmox_aesSmall_keySchedule+0xee>
 8022834:	e7c9      	b.n	80227ca <cmox_aesSmall_keySchedule+0x96>
 8022836:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 802283a:	e7c9      	b.n	80227d0 <cmox_aesSmall_keySchedule+0x9c>
 802283c:	00010004 	.word	0x00010004
 8022840:	0802b2c0 	.word	0x0802b2c0
 8022844:	0802ad20 	.word	0x0802ad20

08022848 <cmox_cipherMode_setKey>:
 8022848:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802284c:	b08c      	sub	sp, #48	@ 0x30
 802284e:	4692      	mov	sl, r2
 8022850:	f1ba 0f10 	cmp.w	sl, #16
 8022854:	4ae7      	ldr	r2, [pc, #924]	@ (8022bf4 <cmox_cipherMode_setKey+0x3ac>)
 8022856:	4be8      	ldr	r3, [pc, #928]	@ (8022bf8 <cmox_cipherMode_setKey+0x3b0>)
 8022858:	4de8      	ldr	r5, [pc, #928]	@ (8022bfc <cmox_cipherMode_setKey+0x3b4>)
 802285a:	f8df 83a4 	ldr.w	r8, [pc, #932]	@ 8022c00 <cmox_cipherMode_setKey+0x3b8>
 802285e:	4ee9      	ldr	r6, [pc, #932]	@ (8022c04 <cmox_cipherMode_setKey+0x3bc>)
 8022860:	f8df b3a4 	ldr.w	fp, [pc, #932]	@ 8022c08 <cmox_cipherMode_setKey+0x3c0>
 8022864:	f10d 0c04 	add.w	ip, sp, #4
 8022868:	d008      	beq.n	802287c <cmox_cipherMode_setKey+0x34>
 802286a:	f1ba 0f18 	cmp.w	sl, #24
 802286e:	f000 8092 	beq.w	8022996 <cmox_cipherMode_setKey+0x14e>
 8022872:	f1ba 0f20 	cmp.w	sl, #32
 8022876:	f000 8118 	beq.w	8022aaa <cmox_cipherMode_setKey+0x262>
 802287a:	e1a8      	b.n	8022bce <cmox_cipherMode_setKey+0x386>
 802287c:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8022880:	4fe2      	ldr	r7, [pc, #904]	@ (8022c0c <cmox_cipherMode_setKey+0x3c4>)
 8022882:	e9db 0400 	ldrd	r0, r4, [fp]
 8022886:	e9ce 0400 	strd	r0, r4, [lr]
 802288a:	7838      	ldrb	r0, [r7, #0]
 802288c:	2800      	cmp	r0, #0
 802288e:	bf0c      	ite	eq
 8022890:	f04f 0900 	moveq.w	r9, #0
 8022894:	f04f 0904 	movne.w	r9, #4
 8022898:	f856 4009 	ldr.w	r4, [r6, r9]
 802289c:	f85e 7009 	ldr.w	r7, [lr, r9]
 80228a0:	443c      	add	r4, r7
 80228a2:	6023      	str	r3, [r4, #0]
 80228a4:	6827      	ldr	r7, [r4, #0]
 80228a6:	2301      	movs	r3, #1
 80228a8:	60a3      	str	r3, [r4, #8]
 80228aa:	7b8c      	ldrb	r4, [r1, #14]
 80228ac:	6873      	ldr	r3, [r6, #4]
 80228ae:	f8d6 9000 	ldr.w	r9, [r6]
 80228b2:	9400      	str	r4, [sp, #0]
 80228b4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80228b6:	405f      	eors	r7, r3
 80228b8:	407c      	eors	r4, r7
 80228ba:	f8de 7004 	ldr.w	r7, [lr, #4]
 80228be:	f084 0404 	eor.w	r4, r4, #4
 80228c2:	ea87 0709 	eor.w	r7, r7, r9
 80228c6:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 80228ca:	4474      	add	r4, lr
 80228cc:	f084 0e52 	eor.w	lr, r4, #82	@ 0x52
 80228d0:	9c00      	ldr	r4, [sp, #0]
 80228d2:	4474      	add	r4, lr
 80228d4:	f04f 0e01 	mov.w	lr, #1
 80228d8:	f88c 400e 	strb.w	r4, [ip, #14]
 80228dc:	f811 700e 	ldrb.w	r7, [r1, lr]
 80228e0:	f80c 700e 	strb.w	r7, [ip, lr]
 80228e4:	f10e 0e01 	add.w	lr, lr, #1
 80228e8:	f1be 0f0e 	cmp.w	lr, #14
 80228ec:	d3f6      	bcc.n	80228dc <cmox_cipherMode_setKey+0x94>
 80228ee:	2800      	cmp	r0, #0
 80228f0:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80228f4:	e9db 4700 	ldrd	r4, r7, [fp]
 80228f8:	e9ce 4700 	strd	r4, r7, [lr]
 80228fc:	bf0c      	ite	eq
 80228fe:	2700      	moveq	r7, #0
 8022900:	2704      	movne	r7, #4
 8022902:	463c      	mov	r4, r7
 8022904:	59f7      	ldr	r7, [r6, r7]
 8022906:	f85e 4004 	ldr.w	r4, [lr, r4]
 802290a:	19e4      	adds	r4, r4, r7
 802290c:	2701      	movs	r7, #1
 802290e:	f8c4 8000 	str.w	r8, [r4]
 8022912:	f8d4 8000 	ldr.w	r8, [r4]
 8022916:	60a7      	str	r7, [r4, #8]
 8022918:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802291a:	780f      	ldrb	r7, [r1, #0]
 802291c:	2800      	cmp	r0, #0
 802291e:	ea83 0808 	eor.w	r8, r3, r8
 8022922:	ea84 0408 	eor.w	r4, r4, r8
 8022926:	f084 0804 	eor.w	r8, r4, #4
 802292a:	f8de 4004 	ldr.w	r4, [lr, #4]
 802292e:	ea84 0409 	eor.w	r4, r4, r9
 8022932:	f084 04fc 	eor.w	r4, r4, #252	@ 0xfc
 8022936:	4444      	add	r4, r8
 8022938:	f084 080b 	eor.w	r8, r4, #11
 802293c:	e9db 4e00 	ldrd	r4, lr, [fp]
 8022940:	44b8      	add	r8, r7
 8022942:	af09      	add	r7, sp, #36	@ 0x24
 8022944:	e9c7 4e00 	strd	r4, lr, [r7]
 8022948:	f88d 8004 	strb.w	r8, [sp, #4]
 802294c:	ac09      	add	r4, sp, #36	@ 0x24
 802294e:	bf0e      	itee	eq
 8022950:	f04f 0e00 	moveq.w	lr, #0
 8022954:	2004      	movne	r0, #4
 8022956:	4686      	movne	lr, r0
 8022958:	5836      	ldr	r6, [r6, r0]
 802295a:	f854 000e 	ldr.w	r0, [r4, lr]
 802295e:	1986      	adds	r6, r0, r6
 8022960:	6035      	str	r5, [r6, #0]
 8022962:	6830      	ldr	r0, [r6, #0]
 8022964:	2501      	movs	r5, #1
 8022966:	60b5      	str	r5, [r6, #8]
 8022968:	7bce      	ldrb	r6, [r1, #15]
 802296a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802296c:	4043      	eors	r3, r0
 802296e:	6860      	ldr	r0, [r4, #4]
 8022970:	404b      	eors	r3, r1
 8022972:	f083 0304 	eor.w	r3, r3, #4
 8022976:	ea80 0009 	eor.w	r0, r0, r9
 802297a:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 802297e:	4403      	add	r3, r0
 8022980:	f083 0385 	eor.w	r3, r3, #133	@ 0x85
 8022984:	199b      	adds	r3, r3, r6
 8022986:	f88c 300f 	strb.w	r3, [ip, #15]
 802298a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802298c:	7a28      	ldrb	r0, [r5, #8]
 802298e:	07c1      	lsls	r1, r0, #31
 8022990:	f100 811f 	bmi.w	8022bd2 <cmox_cipherMode_setKey+0x38a>
 8022994:	e11b      	b.n	8022bce <cmox_cipherMode_setKey+0x386>
 8022996:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 802299a:	4f9c      	ldr	r7, [pc, #624]	@ (8022c0c <cmox_cipherMode_setKey+0x3c4>)
 802299c:	e9db 0400 	ldrd	r0, r4, [fp]
 80229a0:	e9ce 0400 	strd	r0, r4, [lr]
 80229a4:	7838      	ldrb	r0, [r7, #0]
 80229a6:	2800      	cmp	r0, #0
 80229a8:	bf0c      	ite	eq
 80229aa:	f04f 0900 	moveq.w	r9, #0
 80229ae:	f04f 0904 	movne.w	r9, #4
 80229b2:	f856 4009 	ldr.w	r4, [r6, r9]
 80229b6:	f85e 7009 	ldr.w	r7, [lr, r9]
 80229ba:	443c      	add	r4, r7
 80229bc:	6025      	str	r5, [r4, #0]
 80229be:	6827      	ldr	r7, [r4, #0]
 80229c0:	2501      	movs	r5, #1
 80229c2:	60a5      	str	r5, [r4, #8]
 80229c4:	7b8c      	ldrb	r4, [r1, #14]
 80229c6:	6875      	ldr	r5, [r6, #4]
 80229c8:	f8d6 9000 	ldr.w	r9, [r6]
 80229cc:	9400      	str	r4, [sp, #0]
 80229ce:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80229d0:	406f      	eors	r7, r5
 80229d2:	407c      	eors	r4, r7
 80229d4:	f8de 7004 	ldr.w	r7, [lr, #4]
 80229d8:	f084 0404 	eor.w	r4, r4, #4
 80229dc:	ea87 0709 	eor.w	r7, r7, r9
 80229e0:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 80229e4:	4474      	add	r4, lr
 80229e6:	f084 0e85 	eor.w	lr, r4, #133	@ 0x85
 80229ea:	9c00      	ldr	r4, [sp, #0]
 80229ec:	4474      	add	r4, lr
 80229ee:	f04f 0e01 	mov.w	lr, #1
 80229f2:	f88c 400e 	strb.w	r4, [ip, #14]
 80229f6:	f811 700e 	ldrb.w	r7, [r1, lr]
 80229fa:	f80c 700e 	strb.w	r7, [ip, lr]
 80229fe:	f10e 0e01 	add.w	lr, lr, #1
 8022a02:	f1be 0f0e 	cmp.w	lr, #14
 8022a06:	d3f6      	bcc.n	80229f6 <cmox_cipherMode_setKey+0x1ae>
 8022a08:	2800      	cmp	r0, #0
 8022a0a:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8022a0e:	e9db 4700 	ldrd	r4, r7, [fp]
 8022a12:	e9ce 4700 	strd	r4, r7, [lr]
 8022a16:	bf0c      	ite	eq
 8022a18:	2700      	moveq	r7, #0
 8022a1a:	2704      	movne	r7, #4
 8022a1c:	463c      	mov	r4, r7
 8022a1e:	59f7      	ldr	r7, [r6, r7]
 8022a20:	f85e 4004 	ldr.w	r4, [lr, r4]
 8022a24:	19e4      	adds	r4, r4, r7
 8022a26:	6023      	str	r3, [r4, #0]
 8022a28:	6827      	ldr	r7, [r4, #0]
 8022a2a:	2301      	movs	r3, #1
 8022a2c:	60a3      	str	r3, [r4, #8]
 8022a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a30:	406f      	eors	r7, r5
 8022a32:	780c      	ldrb	r4, [r1, #0]
 8022a34:	405f      	eors	r7, r3
 8022a36:	f8de 3004 	ldr.w	r3, [lr, #4]
 8022a3a:	f087 0704 	eor.w	r7, r7, #4
 8022a3e:	ea83 0309 	eor.w	r3, r3, r9
 8022a42:	f083 03fc 	eor.w	r3, r3, #252	@ 0xfc
 8022a46:	441f      	add	r7, r3
 8022a48:	f087 0752 	eor.w	r7, r7, #82	@ 0x52
 8022a4c:	193f      	adds	r7, r7, r4
 8022a4e:	2800      	cmp	r0, #0
 8022a50:	f88d 7004 	strb.w	r7, [sp, #4]
 8022a54:	af09      	add	r7, sp, #36	@ 0x24
 8022a56:	e9db 3400 	ldrd	r3, r4, [fp]
 8022a5a:	e9c7 3400 	strd	r3, r4, [r7]
 8022a5e:	ac09      	add	r4, sp, #36	@ 0x24
 8022a60:	bf0e      	itee	eq
 8022a62:	2300      	moveq	r3, #0
 8022a64:	2004      	movne	r0, #4
 8022a66:	2304      	movne	r3, #4
 8022a68:	5836      	ldr	r6, [r6, r0]
 8022a6a:	58e0      	ldr	r0, [r4, r3]
 8022a6c:	2301      	movs	r3, #1
 8022a6e:	1986      	adds	r6, r0, r6
 8022a70:	f8c6 8000 	str.w	r8, [r6]
 8022a74:	6830      	ldr	r0, [r6, #0]
 8022a76:	60b3      	str	r3, [r6, #8]
 8022a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a7a:	7bce      	ldrb	r6, [r1, #15]
 8022a7c:	4045      	eors	r5, r0
 8022a7e:	6860      	ldr	r0, [r4, #4]
 8022a80:	405d      	eors	r5, r3
 8022a82:	f085 0504 	eor.w	r5, r5, #4
 8022a86:	ea80 0009 	eor.w	r0, r0, r9
 8022a8a:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8022a8e:	4405      	add	r5, r0
 8022a90:	f085 050b 	eor.w	r5, r5, #11
 8022a94:	19ad      	adds	r5, r5, r6
 8022a96:	2010      	movs	r0, #16
 8022a98:	f88c 500f 	strb.w	r5, [ip, #15]
 8022a9c:	5c0b      	ldrb	r3, [r1, r0]
 8022a9e:	f80c 3000 	strb.w	r3, [ip, r0]
 8022aa2:	1c40      	adds	r0, r0, #1
 8022aa4:	2818      	cmp	r0, #24
 8022aa6:	d3f9      	bcc.n	8022a9c <cmox_cipherMode_setKey+0x254>
 8022aa8:	e76f      	b.n	802298a <cmox_cipherMode_setKey+0x142>
 8022aaa:	a809      	add	r0, sp, #36	@ 0x24
 8022aac:	4c57      	ldr	r4, [pc, #348]	@ (8022c0c <cmox_cipherMode_setKey+0x3c4>)
 8022aae:	e9db e900 	ldrd	lr, r9, [fp]
 8022ab2:	e9c0 e900 	strd	lr, r9, [r0]
 8022ab6:	7820      	ldrb	r0, [r4, #0]
 8022ab8:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8022abc:	2800      	cmp	r0, #0
 8022abe:	bf0c      	ite	eq
 8022ac0:	f04f 0900 	moveq.w	r9, #0
 8022ac4:	f04f 0904 	movne.w	r9, #4
 8022ac8:	f856 4009 	ldr.w	r4, [r6, r9]
 8022acc:	f85e 7009 	ldr.w	r7, [lr, r9]
 8022ad0:	443c      	add	r4, r7
 8022ad2:	f8c4 8000 	str.w	r8, [r4]
 8022ad6:	6827      	ldr	r7, [r4, #0]
 8022ad8:	f04f 0801 	mov.w	r8, #1
 8022adc:	f8c4 8008 	str.w	r8, [r4, #8]
 8022ae0:	7fcc      	ldrb	r4, [r1, #31]
 8022ae2:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8022ae6:	f8d6 9000 	ldr.w	r9, [r6]
 8022aea:	9400      	str	r4, [sp, #0]
 8022aec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022aee:	ea88 0707 	eor.w	r7, r8, r7
 8022af2:	407c      	eors	r4, r7
 8022af4:	f8de 7004 	ldr.w	r7, [lr, #4]
 8022af8:	f084 0404 	eor.w	r4, r4, #4
 8022afc:	ea87 0709 	eor.w	r7, r7, r9
 8022b00:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8022b04:	4474      	add	r4, lr
 8022b06:	f084 0e0b 	eor.w	lr, r4, #11
 8022b0a:	9c00      	ldr	r4, [sp, #0]
 8022b0c:	4474      	add	r4, lr
 8022b0e:	f04f 0e00 	mov.w	lr, #0
 8022b12:	f88c 401f 	strb.w	r4, [ip, #31]
 8022b16:	f811 700e 	ldrb.w	r7, [r1, lr]
 8022b1a:	f80c 700e 	strb.w	r7, [ip, lr]
 8022b1e:	f10e 0e01 	add.w	lr, lr, #1
 8022b22:	f1be 0f10 	cmp.w	lr, #16
 8022b26:	d3f6      	bcc.n	8022b16 <cmox_cipherMode_setKey+0x2ce>
 8022b28:	2800      	cmp	r0, #0
 8022b2a:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8022b2e:	e9db 4700 	ldrd	r4, r7, [fp]
 8022b32:	e9ce 4700 	strd	r4, r7, [lr]
 8022b36:	bf0c      	ite	eq
 8022b38:	2700      	moveq	r7, #0
 8022b3a:	2704      	movne	r7, #4
 8022b3c:	463c      	mov	r4, r7
 8022b3e:	59f7      	ldr	r7, [r6, r7]
 8022b40:	f85e 4004 	ldr.w	r4, [lr, r4]
 8022b44:	19e4      	adds	r4, r4, r7
 8022b46:	6025      	str	r5, [r4, #0]
 8022b48:	6827      	ldr	r7, [r4, #0]
 8022b4a:	2501      	movs	r5, #1
 8022b4c:	60a5      	str	r5, [r4, #8]
 8022b4e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022b50:	ea88 0707 	eor.w	r7, r8, r7
 8022b54:	7c4c      	ldrb	r4, [r1, #17]
 8022b56:	406f      	eors	r7, r5
 8022b58:	f8de 5004 	ldr.w	r5, [lr, #4]
 8022b5c:	f087 0704 	eor.w	r7, r7, #4
 8022b60:	ea85 0509 	eor.w	r5, r5, r9
 8022b64:	f085 05fc 	eor.w	r5, r5, #252	@ 0xfc
 8022b68:	442f      	add	r7, r5
 8022b6a:	f087 0785 	eor.w	r7, r7, #133	@ 0x85
 8022b6e:	193f      	adds	r7, r7, r4
 8022b70:	2800      	cmp	r0, #0
 8022b72:	f88c 7011 	strb.w	r7, [ip, #17]
 8022b76:	ad09      	add	r5, sp, #36	@ 0x24
 8022b78:	e9db 7400 	ldrd	r7, r4, [fp]
 8022b7c:	e9c5 7400 	strd	r7, r4, [r5]
 8022b80:	bf0e      	itee	eq
 8022b82:	f04f 0b00 	moveq.w	fp, #0
 8022b86:	2004      	movne	r0, #4
 8022b88:	4683      	movne	fp, r0
 8022b8a:	5836      	ldr	r6, [r6, r0]
 8022b8c:	f855 000b 	ldr.w	r0, [r5, fp]
 8022b90:	1986      	adds	r6, r0, r6
 8022b92:	6033      	str	r3, [r6, #0]
 8022b94:	6830      	ldr	r0, [r6, #0]
 8022b96:	2301      	movs	r3, #1
 8022b98:	60b3      	str	r3, [r6, #8]
 8022b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b9c:	ea88 0000 	eor.w	r0, r8, r0
 8022ba0:	7c0e      	ldrb	r6, [r1, #16]
 8022ba2:	4058      	eors	r0, r3
 8022ba4:	f080 0804 	eor.w	r8, r0, #4
 8022ba8:	6868      	ldr	r0, [r5, #4]
 8022baa:	ea80 0009 	eor.w	r0, r0, r9
 8022bae:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 8022bb2:	4440      	add	r0, r8
 8022bb4:	f080 0852 	eor.w	r8, r0, #82	@ 0x52
 8022bb8:	44b0      	add	r8, r6
 8022bba:	2012      	movs	r0, #18
 8022bbc:	f88c 8010 	strb.w	r8, [ip, #16]
 8022bc0:	5c0b      	ldrb	r3, [r1, r0]
 8022bc2:	f80c 3000 	strb.w	r3, [ip, r0]
 8022bc6:	1c40      	adds	r0, r0, #1
 8022bc8:	281f      	cmp	r0, #31
 8022bca:	d3f9      	bcc.n	8022bc0 <cmox_cipherMode_setKey+0x378>
 8022bcc:	e6dd      	b.n	802298a <cmox_cipherMode_setKey+0x142>
 8022bce:	4610      	mov	r0, r2
 8022bd0:	e00d      	b.n	8022bee <cmox_cipherMode_setKey+0x3a6>
 8022bd2:	682e      	ldr	r6, [r5, #0]
 8022bd4:	4652      	mov	r2, sl
 8022bd6:	a901      	add	r1, sp, #4
 8022bd8:	4628      	mov	r0, r5
 8022bda:	6873      	ldr	r3, [r6, #4]
 8022bdc:	4798      	blx	r3
 8022bde:	68a8      	ldr	r0, [r5, #8]
 8022be0:	f8c5 a004 	str.w	sl, [r5, #4]
 8022be4:	f040 0004 	orr.w	r0, r0, #4
 8022be8:	60a8      	str	r0, [r5, #8]
 8022bea:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8022bee:	b00d      	add	sp, #52	@ 0x34
 8022bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bf4:	00010003 	.word	0x00010003
 8022bf8:	f78e2254 	.word	0xf78e2254
 8022bfc:	2e8f137d 	.word	0x2e8f137d
 8022c00:	910e0ba4 	.word	0x910e0ba4
 8022c04:	0802ab98 	.word	0x0802ab98
 8022c08:	08022c10 	.word	0x08022c10
 8022c0c:	240000a0 	.word	0x240000a0
 8022c10:	0101b004 	.word	0x0101b004
 8022c14:	45011700 	.word	0x45011700

08022c18 <convert_block_2_words>:
 8022c18:	b530      	push	{r4, r5, lr}
 8022c1a:	2200      	movs	r2, #0
 8022c1c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8022c20:	785d      	ldrb	r5, [r3, #1]
 8022c22:	781c      	ldrb	r4, [r3, #0]
 8022c24:	042d      	lsls	r5, r5, #16
 8022c26:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
 8022c2a:	789c      	ldrb	r4, [r3, #2]
 8022c2c:	78db      	ldrb	r3, [r3, #3]
 8022c2e:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
 8022c32:	431d      	orrs	r5, r3
 8022c34:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 8022c38:	1c52      	adds	r2, r2, #1
 8022c3a:	2a04      	cmp	r2, #4
 8022c3c:	d3ee      	bcc.n	8022c1c <convert_block_2_words+0x4>
 8022c3e:	bd30      	pop	{r4, r5, pc}

08022c40 <xor_blocks>:
 8022c40:	b510      	push	{r4, lr}
 8022c42:	2200      	movs	r2, #0
 8022c44:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8022c48:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8022c4c:	4063      	eors	r3, r4
 8022c4e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8022c52:	1c52      	adds	r2, r2, #1
 8022c54:	2a04      	cmp	r2, #4
 8022c56:	d3f5      	bcc.n	8022c44 <xor_blocks+0x4>
 8022c58:	bd10      	pop	{r4, pc}

08022c5a <strlen>:
 8022c5a:	4603      	mov	r3, r0
 8022c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022c60:	2a00      	cmp	r2, #0
 8022c62:	d1fb      	bne.n	8022c5c <strlen+0x2>
 8022c64:	1a18      	subs	r0, r3, r0
 8022c66:	3801      	subs	r0, #1
 8022c68:	4770      	bx	lr

08022c6a <__aeabi_memset>:
 8022c6a:	b470      	push	{r4, r5, r6}
 8022c6c:	0784      	lsls	r4, r0, #30
 8022c6e:	d046      	beq.n	8022cfe <__aeabi_memset+0x94>
 8022c70:	1e4c      	subs	r4, r1, #1
 8022c72:	2900      	cmp	r1, #0
 8022c74:	d041      	beq.n	8022cfa <__aeabi_memset+0x90>
 8022c76:	b2d5      	uxtb	r5, r2
 8022c78:	4603      	mov	r3, r0
 8022c7a:	e002      	b.n	8022c82 <__aeabi_memset+0x18>
 8022c7c:	1e61      	subs	r1, r4, #1
 8022c7e:	b3e4      	cbz	r4, 8022cfa <__aeabi_memset+0x90>
 8022c80:	460c      	mov	r4, r1
 8022c82:	f803 5b01 	strb.w	r5, [r3], #1
 8022c86:	0799      	lsls	r1, r3, #30
 8022c88:	d1f8      	bne.n	8022c7c <__aeabi_memset+0x12>
 8022c8a:	2c03      	cmp	r4, #3
 8022c8c:	d92e      	bls.n	8022cec <__aeabi_memset+0x82>
 8022c8e:	b2d5      	uxtb	r5, r2
 8022c90:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8022c94:	2c0f      	cmp	r4, #15
 8022c96:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8022c9a:	d919      	bls.n	8022cd0 <__aeabi_memset+0x66>
 8022c9c:	4626      	mov	r6, r4
 8022c9e:	f103 0110 	add.w	r1, r3, #16
 8022ca2:	3e10      	subs	r6, #16
 8022ca4:	2e0f      	cmp	r6, #15
 8022ca6:	f841 5c10 	str.w	r5, [r1, #-16]
 8022caa:	f841 5c0c 	str.w	r5, [r1, #-12]
 8022cae:	f841 5c08 	str.w	r5, [r1, #-8]
 8022cb2:	f841 5c04 	str.w	r5, [r1, #-4]
 8022cb6:	f101 0110 	add.w	r1, r1, #16
 8022cba:	d8f2      	bhi.n	8022ca2 <__aeabi_memset+0x38>
 8022cbc:	f1a4 0110 	sub.w	r1, r4, #16
 8022cc0:	f021 010f 	bic.w	r1, r1, #15
 8022cc4:	f004 040f 	and.w	r4, r4, #15
 8022cc8:	3110      	adds	r1, #16
 8022cca:	2c03      	cmp	r4, #3
 8022ccc:	440b      	add	r3, r1
 8022cce:	d90d      	bls.n	8022cec <__aeabi_memset+0x82>
 8022cd0:	461e      	mov	r6, r3
 8022cd2:	4621      	mov	r1, r4
 8022cd4:	3904      	subs	r1, #4
 8022cd6:	2903      	cmp	r1, #3
 8022cd8:	f846 5b04 	str.w	r5, [r6], #4
 8022cdc:	d8fa      	bhi.n	8022cd4 <__aeabi_memset+0x6a>
 8022cde:	1f21      	subs	r1, r4, #4
 8022ce0:	f021 0103 	bic.w	r1, r1, #3
 8022ce4:	3104      	adds	r1, #4
 8022ce6:	440b      	add	r3, r1
 8022ce8:	f004 0403 	and.w	r4, r4, #3
 8022cec:	b12c      	cbz	r4, 8022cfa <__aeabi_memset+0x90>
 8022cee:	b2d2      	uxtb	r2, r2
 8022cf0:	441c      	add	r4, r3
 8022cf2:	f803 2b01 	strb.w	r2, [r3], #1
 8022cf6:	42a3      	cmp	r3, r4
 8022cf8:	d1fb      	bne.n	8022cf2 <__aeabi_memset+0x88>
 8022cfa:	bc70      	pop	{r4, r5, r6}
 8022cfc:	4770      	bx	lr
 8022cfe:	460c      	mov	r4, r1
 8022d00:	4603      	mov	r3, r0
 8022d02:	e7c2      	b.n	8022c8a <__aeabi_memset+0x20>
	...

08022d10 <memchr>:
 8022d10:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8022d14:	2a10      	cmp	r2, #16
 8022d16:	db2b      	blt.n	8022d70 <memchr+0x60>
 8022d18:	f010 0f07 	tst.w	r0, #7
 8022d1c:	d008      	beq.n	8022d30 <memchr+0x20>
 8022d1e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022d22:	3a01      	subs	r2, #1
 8022d24:	428b      	cmp	r3, r1
 8022d26:	d02d      	beq.n	8022d84 <memchr+0x74>
 8022d28:	f010 0f07 	tst.w	r0, #7
 8022d2c:	b342      	cbz	r2, 8022d80 <memchr+0x70>
 8022d2e:	d1f6      	bne.n	8022d1e <memchr+0xe>
 8022d30:	b4f0      	push	{r4, r5, r6, r7}
 8022d32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8022d36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8022d3a:	f022 0407 	bic.w	r4, r2, #7
 8022d3e:	f07f 0700 	mvns.w	r7, #0
 8022d42:	2300      	movs	r3, #0
 8022d44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8022d48:	3c08      	subs	r4, #8
 8022d4a:	ea85 0501 	eor.w	r5, r5, r1
 8022d4e:	ea86 0601 	eor.w	r6, r6, r1
 8022d52:	fa85 f547 	uadd8	r5, r5, r7
 8022d56:	faa3 f587 	sel	r5, r3, r7
 8022d5a:	fa86 f647 	uadd8	r6, r6, r7
 8022d5e:	faa5 f687 	sel	r6, r5, r7
 8022d62:	b98e      	cbnz	r6, 8022d88 <memchr+0x78>
 8022d64:	d1ee      	bne.n	8022d44 <memchr+0x34>
 8022d66:	bcf0      	pop	{r4, r5, r6, r7}
 8022d68:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8022d6c:	f002 0207 	and.w	r2, r2, #7
 8022d70:	b132      	cbz	r2, 8022d80 <memchr+0x70>
 8022d72:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022d76:	3a01      	subs	r2, #1
 8022d78:	ea83 0301 	eor.w	r3, r3, r1
 8022d7c:	b113      	cbz	r3, 8022d84 <memchr+0x74>
 8022d7e:	d1f8      	bne.n	8022d72 <memchr+0x62>
 8022d80:	2000      	movs	r0, #0
 8022d82:	4770      	bx	lr
 8022d84:	3801      	subs	r0, #1
 8022d86:	4770      	bx	lr
 8022d88:	2d00      	cmp	r5, #0
 8022d8a:	bf06      	itte	eq
 8022d8c:	4635      	moveq	r5, r6
 8022d8e:	3803      	subeq	r0, #3
 8022d90:	3807      	subne	r0, #7
 8022d92:	f015 0f01 	tst.w	r5, #1
 8022d96:	d107      	bne.n	8022da8 <memchr+0x98>
 8022d98:	3001      	adds	r0, #1
 8022d9a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8022d9e:	bf02      	ittt	eq
 8022da0:	3001      	addeq	r0, #1
 8022da2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8022da6:	3001      	addeq	r0, #1
 8022da8:	bcf0      	pop	{r4, r5, r6, r7}
 8022daa:	3801      	subs	r0, #1
 8022dac:	4770      	bx	lr
 8022dae:	bf00      	nop

08022db0 <__aeabi_uldivmod>:
 8022db0:	b953      	cbnz	r3, 8022dc8 <__aeabi_uldivmod+0x18>
 8022db2:	b94a      	cbnz	r2, 8022dc8 <__aeabi_uldivmod+0x18>
 8022db4:	2900      	cmp	r1, #0
 8022db6:	bf08      	it	eq
 8022db8:	2800      	cmpeq	r0, #0
 8022dba:	bf1c      	itt	ne
 8022dbc:	f04f 31ff 	movne.w	r1, #4294967295
 8022dc0:	f04f 30ff 	movne.w	r0, #4294967295
 8022dc4:	f000 b96a 	b.w	802309c <__aeabi_idiv0>
 8022dc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8022dcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8022dd0:	f000 f806 	bl	8022de0 <__udivmoddi4>
 8022dd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8022dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022ddc:	b004      	add	sp, #16
 8022dde:	4770      	bx	lr

08022de0 <__udivmoddi4>:
 8022de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022de4:	9d08      	ldr	r5, [sp, #32]
 8022de6:	460c      	mov	r4, r1
 8022de8:	2b00      	cmp	r3, #0
 8022dea:	d14e      	bne.n	8022e8a <__udivmoddi4+0xaa>
 8022dec:	4694      	mov	ip, r2
 8022dee:	458c      	cmp	ip, r1
 8022df0:	4686      	mov	lr, r0
 8022df2:	fab2 f282 	clz	r2, r2
 8022df6:	d962      	bls.n	8022ebe <__udivmoddi4+0xde>
 8022df8:	b14a      	cbz	r2, 8022e0e <__udivmoddi4+0x2e>
 8022dfa:	f1c2 0320 	rsb	r3, r2, #32
 8022dfe:	4091      	lsls	r1, r2
 8022e00:	fa20 f303 	lsr.w	r3, r0, r3
 8022e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8022e08:	4319      	orrs	r1, r3
 8022e0a:	fa00 fe02 	lsl.w	lr, r0, r2
 8022e0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8022e12:	fa1f f68c 	uxth.w	r6, ip
 8022e16:	fbb1 f4f7 	udiv	r4, r1, r7
 8022e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8022e1e:	fb07 1114 	mls	r1, r7, r4, r1
 8022e22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8022e26:	fb04 f106 	mul.w	r1, r4, r6
 8022e2a:	4299      	cmp	r1, r3
 8022e2c:	d90a      	bls.n	8022e44 <__udivmoddi4+0x64>
 8022e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8022e32:	f104 30ff 	add.w	r0, r4, #4294967295
 8022e36:	f080 8112 	bcs.w	802305e <__udivmoddi4+0x27e>
 8022e3a:	4299      	cmp	r1, r3
 8022e3c:	f240 810f 	bls.w	802305e <__udivmoddi4+0x27e>
 8022e40:	3c02      	subs	r4, #2
 8022e42:	4463      	add	r3, ip
 8022e44:	1a59      	subs	r1, r3, r1
 8022e46:	fa1f f38e 	uxth.w	r3, lr
 8022e4a:	fbb1 f0f7 	udiv	r0, r1, r7
 8022e4e:	fb07 1110 	mls	r1, r7, r0, r1
 8022e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8022e56:	fb00 f606 	mul.w	r6, r0, r6
 8022e5a:	429e      	cmp	r6, r3
 8022e5c:	d90a      	bls.n	8022e74 <__udivmoddi4+0x94>
 8022e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8022e62:	f100 31ff 	add.w	r1, r0, #4294967295
 8022e66:	f080 80fc 	bcs.w	8023062 <__udivmoddi4+0x282>
 8022e6a:	429e      	cmp	r6, r3
 8022e6c:	f240 80f9 	bls.w	8023062 <__udivmoddi4+0x282>
 8022e70:	4463      	add	r3, ip
 8022e72:	3802      	subs	r0, #2
 8022e74:	1b9b      	subs	r3, r3, r6
 8022e76:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8022e7a:	2100      	movs	r1, #0
 8022e7c:	b11d      	cbz	r5, 8022e86 <__udivmoddi4+0xa6>
 8022e7e:	40d3      	lsrs	r3, r2
 8022e80:	2200      	movs	r2, #0
 8022e82:	e9c5 3200 	strd	r3, r2, [r5]
 8022e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e8a:	428b      	cmp	r3, r1
 8022e8c:	d905      	bls.n	8022e9a <__udivmoddi4+0xba>
 8022e8e:	b10d      	cbz	r5, 8022e94 <__udivmoddi4+0xb4>
 8022e90:	e9c5 0100 	strd	r0, r1, [r5]
 8022e94:	2100      	movs	r1, #0
 8022e96:	4608      	mov	r0, r1
 8022e98:	e7f5      	b.n	8022e86 <__udivmoddi4+0xa6>
 8022e9a:	fab3 f183 	clz	r1, r3
 8022e9e:	2900      	cmp	r1, #0
 8022ea0:	d146      	bne.n	8022f30 <__udivmoddi4+0x150>
 8022ea2:	42a3      	cmp	r3, r4
 8022ea4:	d302      	bcc.n	8022eac <__udivmoddi4+0xcc>
 8022ea6:	4290      	cmp	r0, r2
 8022ea8:	f0c0 80f0 	bcc.w	802308c <__udivmoddi4+0x2ac>
 8022eac:	1a86      	subs	r6, r0, r2
 8022eae:	eb64 0303 	sbc.w	r3, r4, r3
 8022eb2:	2001      	movs	r0, #1
 8022eb4:	2d00      	cmp	r5, #0
 8022eb6:	d0e6      	beq.n	8022e86 <__udivmoddi4+0xa6>
 8022eb8:	e9c5 6300 	strd	r6, r3, [r5]
 8022ebc:	e7e3      	b.n	8022e86 <__udivmoddi4+0xa6>
 8022ebe:	2a00      	cmp	r2, #0
 8022ec0:	f040 8090 	bne.w	8022fe4 <__udivmoddi4+0x204>
 8022ec4:	eba1 040c 	sub.w	r4, r1, ip
 8022ec8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8022ecc:	fa1f f78c 	uxth.w	r7, ip
 8022ed0:	2101      	movs	r1, #1
 8022ed2:	fbb4 f6f8 	udiv	r6, r4, r8
 8022ed6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8022eda:	fb08 4416 	mls	r4, r8, r6, r4
 8022ede:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8022ee2:	fb07 f006 	mul.w	r0, r7, r6
 8022ee6:	4298      	cmp	r0, r3
 8022ee8:	d908      	bls.n	8022efc <__udivmoddi4+0x11c>
 8022eea:	eb1c 0303 	adds.w	r3, ip, r3
 8022eee:	f106 34ff 	add.w	r4, r6, #4294967295
 8022ef2:	d202      	bcs.n	8022efa <__udivmoddi4+0x11a>
 8022ef4:	4298      	cmp	r0, r3
 8022ef6:	f200 80cd 	bhi.w	8023094 <__udivmoddi4+0x2b4>
 8022efa:	4626      	mov	r6, r4
 8022efc:	1a1c      	subs	r4, r3, r0
 8022efe:	fa1f f38e 	uxth.w	r3, lr
 8022f02:	fbb4 f0f8 	udiv	r0, r4, r8
 8022f06:	fb08 4410 	mls	r4, r8, r0, r4
 8022f0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8022f0e:	fb00 f707 	mul.w	r7, r0, r7
 8022f12:	429f      	cmp	r7, r3
 8022f14:	d908      	bls.n	8022f28 <__udivmoddi4+0x148>
 8022f16:	eb1c 0303 	adds.w	r3, ip, r3
 8022f1a:	f100 34ff 	add.w	r4, r0, #4294967295
 8022f1e:	d202      	bcs.n	8022f26 <__udivmoddi4+0x146>
 8022f20:	429f      	cmp	r7, r3
 8022f22:	f200 80b0 	bhi.w	8023086 <__udivmoddi4+0x2a6>
 8022f26:	4620      	mov	r0, r4
 8022f28:	1bdb      	subs	r3, r3, r7
 8022f2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8022f2e:	e7a5      	b.n	8022e7c <__udivmoddi4+0x9c>
 8022f30:	f1c1 0620 	rsb	r6, r1, #32
 8022f34:	408b      	lsls	r3, r1
 8022f36:	fa22 f706 	lsr.w	r7, r2, r6
 8022f3a:	431f      	orrs	r7, r3
 8022f3c:	fa20 fc06 	lsr.w	ip, r0, r6
 8022f40:	fa04 f301 	lsl.w	r3, r4, r1
 8022f44:	ea43 030c 	orr.w	r3, r3, ip
 8022f48:	40f4      	lsrs	r4, r6
 8022f4a:	fa00 f801 	lsl.w	r8, r0, r1
 8022f4e:	0c38      	lsrs	r0, r7, #16
 8022f50:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8022f54:	fbb4 fef0 	udiv	lr, r4, r0
 8022f58:	fa1f fc87 	uxth.w	ip, r7
 8022f5c:	fb00 441e 	mls	r4, r0, lr, r4
 8022f60:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8022f64:	fb0e f90c 	mul.w	r9, lr, ip
 8022f68:	45a1      	cmp	r9, r4
 8022f6a:	fa02 f201 	lsl.w	r2, r2, r1
 8022f6e:	d90a      	bls.n	8022f86 <__udivmoddi4+0x1a6>
 8022f70:	193c      	adds	r4, r7, r4
 8022f72:	f10e 3aff 	add.w	sl, lr, #4294967295
 8022f76:	f080 8084 	bcs.w	8023082 <__udivmoddi4+0x2a2>
 8022f7a:	45a1      	cmp	r9, r4
 8022f7c:	f240 8081 	bls.w	8023082 <__udivmoddi4+0x2a2>
 8022f80:	f1ae 0e02 	sub.w	lr, lr, #2
 8022f84:	443c      	add	r4, r7
 8022f86:	eba4 0409 	sub.w	r4, r4, r9
 8022f8a:	fa1f f983 	uxth.w	r9, r3
 8022f8e:	fbb4 f3f0 	udiv	r3, r4, r0
 8022f92:	fb00 4413 	mls	r4, r0, r3, r4
 8022f96:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8022f9a:	fb03 fc0c 	mul.w	ip, r3, ip
 8022f9e:	45a4      	cmp	ip, r4
 8022fa0:	d907      	bls.n	8022fb2 <__udivmoddi4+0x1d2>
 8022fa2:	193c      	adds	r4, r7, r4
 8022fa4:	f103 30ff 	add.w	r0, r3, #4294967295
 8022fa8:	d267      	bcs.n	802307a <__udivmoddi4+0x29a>
 8022faa:	45a4      	cmp	ip, r4
 8022fac:	d965      	bls.n	802307a <__udivmoddi4+0x29a>
 8022fae:	3b02      	subs	r3, #2
 8022fb0:	443c      	add	r4, r7
 8022fb2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8022fb6:	fba0 9302 	umull	r9, r3, r0, r2
 8022fba:	eba4 040c 	sub.w	r4, r4, ip
 8022fbe:	429c      	cmp	r4, r3
 8022fc0:	46ce      	mov	lr, r9
 8022fc2:	469c      	mov	ip, r3
 8022fc4:	d351      	bcc.n	802306a <__udivmoddi4+0x28a>
 8022fc6:	d04e      	beq.n	8023066 <__udivmoddi4+0x286>
 8022fc8:	b155      	cbz	r5, 8022fe0 <__udivmoddi4+0x200>
 8022fca:	ebb8 030e 	subs.w	r3, r8, lr
 8022fce:	eb64 040c 	sbc.w	r4, r4, ip
 8022fd2:	fa04 f606 	lsl.w	r6, r4, r6
 8022fd6:	40cb      	lsrs	r3, r1
 8022fd8:	431e      	orrs	r6, r3
 8022fda:	40cc      	lsrs	r4, r1
 8022fdc:	e9c5 6400 	strd	r6, r4, [r5]
 8022fe0:	2100      	movs	r1, #0
 8022fe2:	e750      	b.n	8022e86 <__udivmoddi4+0xa6>
 8022fe4:	f1c2 0320 	rsb	r3, r2, #32
 8022fe8:	fa20 f103 	lsr.w	r1, r0, r3
 8022fec:	fa0c fc02 	lsl.w	ip, ip, r2
 8022ff0:	fa24 f303 	lsr.w	r3, r4, r3
 8022ff4:	4094      	lsls	r4, r2
 8022ff6:	430c      	orrs	r4, r1
 8022ff8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8022ffc:	fa00 fe02 	lsl.w	lr, r0, r2
 8023000:	fa1f f78c 	uxth.w	r7, ip
 8023004:	fbb3 f0f8 	udiv	r0, r3, r8
 8023008:	fb08 3110 	mls	r1, r8, r0, r3
 802300c:	0c23      	lsrs	r3, r4, #16
 802300e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8023012:	fb00 f107 	mul.w	r1, r0, r7
 8023016:	4299      	cmp	r1, r3
 8023018:	d908      	bls.n	802302c <__udivmoddi4+0x24c>
 802301a:	eb1c 0303 	adds.w	r3, ip, r3
 802301e:	f100 36ff 	add.w	r6, r0, #4294967295
 8023022:	d22c      	bcs.n	802307e <__udivmoddi4+0x29e>
 8023024:	4299      	cmp	r1, r3
 8023026:	d92a      	bls.n	802307e <__udivmoddi4+0x29e>
 8023028:	3802      	subs	r0, #2
 802302a:	4463      	add	r3, ip
 802302c:	1a5b      	subs	r3, r3, r1
 802302e:	b2a4      	uxth	r4, r4
 8023030:	fbb3 f1f8 	udiv	r1, r3, r8
 8023034:	fb08 3311 	mls	r3, r8, r1, r3
 8023038:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 802303c:	fb01 f307 	mul.w	r3, r1, r7
 8023040:	42a3      	cmp	r3, r4
 8023042:	d908      	bls.n	8023056 <__udivmoddi4+0x276>
 8023044:	eb1c 0404 	adds.w	r4, ip, r4
 8023048:	f101 36ff 	add.w	r6, r1, #4294967295
 802304c:	d213      	bcs.n	8023076 <__udivmoddi4+0x296>
 802304e:	42a3      	cmp	r3, r4
 8023050:	d911      	bls.n	8023076 <__udivmoddi4+0x296>
 8023052:	3902      	subs	r1, #2
 8023054:	4464      	add	r4, ip
 8023056:	1ae4      	subs	r4, r4, r3
 8023058:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802305c:	e739      	b.n	8022ed2 <__udivmoddi4+0xf2>
 802305e:	4604      	mov	r4, r0
 8023060:	e6f0      	b.n	8022e44 <__udivmoddi4+0x64>
 8023062:	4608      	mov	r0, r1
 8023064:	e706      	b.n	8022e74 <__udivmoddi4+0x94>
 8023066:	45c8      	cmp	r8, r9
 8023068:	d2ae      	bcs.n	8022fc8 <__udivmoddi4+0x1e8>
 802306a:	ebb9 0e02 	subs.w	lr, r9, r2
 802306e:	eb63 0c07 	sbc.w	ip, r3, r7
 8023072:	3801      	subs	r0, #1
 8023074:	e7a8      	b.n	8022fc8 <__udivmoddi4+0x1e8>
 8023076:	4631      	mov	r1, r6
 8023078:	e7ed      	b.n	8023056 <__udivmoddi4+0x276>
 802307a:	4603      	mov	r3, r0
 802307c:	e799      	b.n	8022fb2 <__udivmoddi4+0x1d2>
 802307e:	4630      	mov	r0, r6
 8023080:	e7d4      	b.n	802302c <__udivmoddi4+0x24c>
 8023082:	46d6      	mov	lr, sl
 8023084:	e77f      	b.n	8022f86 <__udivmoddi4+0x1a6>
 8023086:	4463      	add	r3, ip
 8023088:	3802      	subs	r0, #2
 802308a:	e74d      	b.n	8022f28 <__udivmoddi4+0x148>
 802308c:	4606      	mov	r6, r0
 802308e:	4623      	mov	r3, r4
 8023090:	4608      	mov	r0, r1
 8023092:	e70f      	b.n	8022eb4 <__udivmoddi4+0xd4>
 8023094:	3e02      	subs	r6, #2
 8023096:	4463      	add	r3, ip
 8023098:	e730      	b.n	8022efc <__udivmoddi4+0x11c>
 802309a:	bf00      	nop

0802309c <__aeabi_idiv0>:
 802309c:	4770      	bx	lr
 802309e:	bf00      	nop

080230a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80230a0:	b480      	push	{r7}
 80230a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80230a4:	4b3d      	ldr	r3, [pc, #244]	@ (802319c <SystemInit+0xfc>)
 80230a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80230aa:	4a3c      	ldr	r2, [pc, #240]	@ (802319c <SystemInit+0xfc>)
 80230ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80230b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80230b4:	4b39      	ldr	r3, [pc, #228]	@ (802319c <SystemInit+0xfc>)
 80230b6:	691b      	ldr	r3, [r3, #16]
 80230b8:	4a38      	ldr	r2, [pc, #224]	@ (802319c <SystemInit+0xfc>)
 80230ba:	f043 0310 	orr.w	r3, r3, #16
 80230be:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80230c0:	4b37      	ldr	r3, [pc, #220]	@ (80231a0 <SystemInit+0x100>)
 80230c2:	681b      	ldr	r3, [r3, #0]
 80230c4:	f003 030f 	and.w	r3, r3, #15
 80230c8:	2b06      	cmp	r3, #6
 80230ca:	d807      	bhi.n	80230dc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80230cc:	4b34      	ldr	r3, [pc, #208]	@ (80231a0 <SystemInit+0x100>)
 80230ce:	681b      	ldr	r3, [r3, #0]
 80230d0:	f023 030f 	bic.w	r3, r3, #15
 80230d4:	4a32      	ldr	r2, [pc, #200]	@ (80231a0 <SystemInit+0x100>)
 80230d6:	f043 0307 	orr.w	r3, r3, #7
 80230da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80230dc:	4b31      	ldr	r3, [pc, #196]	@ (80231a4 <SystemInit+0x104>)
 80230de:	681b      	ldr	r3, [r3, #0]
 80230e0:	4a30      	ldr	r2, [pc, #192]	@ (80231a4 <SystemInit+0x104>)
 80230e2:	f043 0301 	orr.w	r3, r3, #1
 80230e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80230e8:	4b2e      	ldr	r3, [pc, #184]	@ (80231a4 <SystemInit+0x104>)
 80230ea:	2200      	movs	r2, #0
 80230ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80230ee:	4b2d      	ldr	r3, [pc, #180]	@ (80231a4 <SystemInit+0x104>)
 80230f0:	681a      	ldr	r2, [r3, #0]
 80230f2:	492c      	ldr	r1, [pc, #176]	@ (80231a4 <SystemInit+0x104>)
 80230f4:	4b2c      	ldr	r3, [pc, #176]	@ (80231a8 <SystemInit+0x108>)
 80230f6:	4013      	ands	r3, r2
 80230f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80230fa:	4b29      	ldr	r3, [pc, #164]	@ (80231a0 <SystemInit+0x100>)
 80230fc:	681b      	ldr	r3, [r3, #0]
 80230fe:	f003 0308 	and.w	r3, r3, #8
 8023102:	2b00      	cmp	r3, #0
 8023104:	d007      	beq.n	8023116 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8023106:	4b26      	ldr	r3, [pc, #152]	@ (80231a0 <SystemInit+0x100>)
 8023108:	681b      	ldr	r3, [r3, #0]
 802310a:	f023 030f 	bic.w	r3, r3, #15
 802310e:	4a24      	ldr	r2, [pc, #144]	@ (80231a0 <SystemInit+0x100>)
 8023110:	f043 0307 	orr.w	r3, r3, #7
 8023114:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8023116:	4b23      	ldr	r3, [pc, #140]	@ (80231a4 <SystemInit+0x104>)
 8023118:	2200      	movs	r2, #0
 802311a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802311c:	4b21      	ldr	r3, [pc, #132]	@ (80231a4 <SystemInit+0x104>)
 802311e:	2200      	movs	r2, #0
 8023120:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8023122:	4b20      	ldr	r3, [pc, #128]	@ (80231a4 <SystemInit+0x104>)
 8023124:	2200      	movs	r2, #0
 8023126:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8023128:	4b1e      	ldr	r3, [pc, #120]	@ (80231a4 <SystemInit+0x104>)
 802312a:	4a20      	ldr	r2, [pc, #128]	@ (80231ac <SystemInit+0x10c>)
 802312c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802312e:	4b1d      	ldr	r3, [pc, #116]	@ (80231a4 <SystemInit+0x104>)
 8023130:	4a1f      	ldr	r2, [pc, #124]	@ (80231b0 <SystemInit+0x110>)
 8023132:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8023134:	4b1b      	ldr	r3, [pc, #108]	@ (80231a4 <SystemInit+0x104>)
 8023136:	4a1f      	ldr	r2, [pc, #124]	@ (80231b4 <SystemInit+0x114>)
 8023138:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802313a:	4b1a      	ldr	r3, [pc, #104]	@ (80231a4 <SystemInit+0x104>)
 802313c:	2200      	movs	r2, #0
 802313e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8023140:	4b18      	ldr	r3, [pc, #96]	@ (80231a4 <SystemInit+0x104>)
 8023142:	4a1c      	ldr	r2, [pc, #112]	@ (80231b4 <SystemInit+0x114>)
 8023144:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8023146:	4b17      	ldr	r3, [pc, #92]	@ (80231a4 <SystemInit+0x104>)
 8023148:	2200      	movs	r2, #0
 802314a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802314c:	4b15      	ldr	r3, [pc, #84]	@ (80231a4 <SystemInit+0x104>)
 802314e:	4a19      	ldr	r2, [pc, #100]	@ (80231b4 <SystemInit+0x114>)
 8023150:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8023152:	4b14      	ldr	r3, [pc, #80]	@ (80231a4 <SystemInit+0x104>)
 8023154:	2200      	movs	r2, #0
 8023156:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8023158:	4b12      	ldr	r3, [pc, #72]	@ (80231a4 <SystemInit+0x104>)
 802315a:	681b      	ldr	r3, [r3, #0]
 802315c:	4a11      	ldr	r2, [pc, #68]	@ (80231a4 <SystemInit+0x104>)
 802315e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8023162:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8023164:	4b0f      	ldr	r3, [pc, #60]	@ (80231a4 <SystemInit+0x104>)
 8023166:	2200      	movs	r2, #0
 8023168:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 802316a:	4b13      	ldr	r3, [pc, #76]	@ (80231b8 <SystemInit+0x118>)
 802316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802316e:	4a12      	ldr	r2, [pc, #72]	@ (80231b8 <SystemInit+0x118>)
 8023170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8023174:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8023176:	4b11      	ldr	r3, [pc, #68]	@ (80231bc <SystemInit+0x11c>)
 8023178:	681a      	ldr	r2, [r3, #0]
 802317a:	4b11      	ldr	r3, [pc, #68]	@ (80231c0 <SystemInit+0x120>)
 802317c:	4013      	ands	r3, r2
 802317e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8023182:	d202      	bcs.n	802318a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8023184:	4b0f      	ldr	r3, [pc, #60]	@ (80231c4 <SystemInit+0x124>)
 8023186:	2201      	movs	r2, #1
 8023188:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802318a:	4b0f      	ldr	r3, [pc, #60]	@ (80231c8 <SystemInit+0x128>)
 802318c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8023190:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8023192:	bf00      	nop
 8023194:	46bd      	mov	sp, r7
 8023196:	f85d 7b04 	ldr.w	r7, [sp], #4
 802319a:	4770      	bx	lr
 802319c:	e000ed00 	.word	0xe000ed00
 80231a0:	52002000 	.word	0x52002000
 80231a4:	58024400 	.word	0x58024400
 80231a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80231ac:	02020200 	.word	0x02020200
 80231b0:	01ff0000 	.word	0x01ff0000
 80231b4:	01010280 	.word	0x01010280
 80231b8:	580000c0 	.word	0x580000c0
 80231bc:	5c001000 	.word	0x5c001000
 80231c0:	ffff0000 	.word	0xffff0000
 80231c4:	51008108 	.word	0x51008108
 80231c8:	52004000 	.word	0x52004000

080231cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80231cc:	b480      	push	{r7}
 80231ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80231d0:	f3bf 8f4f 	dsb	sy
}
 80231d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80231d6:	4b06      	ldr	r3, [pc, #24]	@ (80231f0 <__NVIC_SystemReset+0x24>)
 80231d8:	68db      	ldr	r3, [r3, #12]
 80231da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80231de:	4904      	ldr	r1, [pc, #16]	@ (80231f0 <__NVIC_SystemReset+0x24>)
 80231e0:	4b04      	ldr	r3, [pc, #16]	@ (80231f4 <__NVIC_SystemReset+0x28>)
 80231e2:	4313      	orrs	r3, r2
 80231e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80231e6:	f3bf 8f4f 	dsb	sy
}
 80231ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80231ec:	bf00      	nop
 80231ee:	e7fd      	b.n	80231ec <__NVIC_SystemReset+0x20>
 80231f0:	e000ed00 	.word	0xe000ed00
 80231f4:	05fa0004 	.word	0x05fa0004

080231f8 <FlashBootloader_Main>:
uint8_t Signature[SIGNATURE_LEN] = {0x0};
size_t Signature_Len = SIGNATURE_LEN;
uint8_t Msg_Digest[HASH_SIZE] = {0x0};
int32_t Msg_Digest_Len = 0;

void FlashBootloader_Main(void) {
 80231f8:	b580      	push	{r7, lr}
 80231fa:	af00      	add	r7, sp, #0
	// Initialize nedeed peripherals
	if (FBL_Periph_Init() != HAL_OK) {
 80231fc:	f000 f87e 	bl	80232fc <FBL_Periph_Init>
 8023200:	4603      	mov	r3, r0
 8023202:	2b00      	cmp	r3, #0
 8023204:	d007      	beq.n	8023216 <FlashBootloader_Main+0x1e>
		BSP_LED_Toggle(LED_RED);
 8023206:	2002      	movs	r0, #2
 8023208:	f000 ffde 	bl	80241c8 <BSP_LED_Toggle>
		printmsg("Peripheral initialization has failed!!\n");
 802320c:	4834      	ldr	r0, [pc, #208]	@ (80232e0 <FlashBootloader_Main+0xe8>)
 802320e:	f000 fcd3 	bl	8023bb8 <printmsg>
		Error_Handler();
 8023212:	f000 fd1d 	bl	8023c50 <Error_Handler>
	}
	BSP_LED_Toggle(LED_GREEN);
 8023216:	2000      	movs	r0, #0
 8023218:	f000 ffd6 	bl	80241c8 <BSP_LED_Toggle>

	// Erase the app section
	if (App_Sector_Erase() != HAL_OK) {
 802321c:	f000 f8aa 	bl	8023374 <App_Sector_Erase>
 8023220:	4603      	mov	r3, r0
 8023222:	2b00      	cmp	r3, #0
 8023224:	d007      	beq.n	8023236 <FlashBootloader_Main+0x3e>
		BSP_LED_Toggle(LED_RED);
 8023226:	2002      	movs	r0, #2
 8023228:	f000 ffce 	bl	80241c8 <BSP_LED_Toggle>
		printmsg("Application erase has failed!!\n");
 802322c:	482d      	ldr	r0, [pc, #180]	@ (80232e4 <FlashBootloader_Main+0xec>)
 802322e:	f000 fcc3 	bl	8023bb8 <printmsg>
		Error_Handler();
 8023232:	f000 fd0d 	bl	8023c50 <Error_Handler>
	}

	BSP_LED_Toggle(LED_GREEN);
 8023236:	2000      	movs	r0, #0
 8023238:	f000 ffc6 	bl	80241c8 <BSP_LED_Toggle>

	// Receive the new firmware application and store it a RAM buffer
	if (Receive_FW() != HAL_OK) {
 802323c:	f000 f8e8 	bl	8023410 <Receive_FW>
 8023240:	4603      	mov	r3, r0
 8023242:	2b00      	cmp	r3, #0
 8023244:	d007      	beq.n	8023256 <FlashBootloader_Main+0x5e>
		BSP_LED_Toggle(LED_RED);
 8023246:	2002      	movs	r0, #2
 8023248:	f000 ffbe 	bl	80241c8 <BSP_LED_Toggle>
		printmsg("Firmware reception has failed!!\n");
 802324c:	4826      	ldr	r0, [pc, #152]	@ (80232e8 <FlashBootloader_Main+0xf0>)
 802324e:	f000 fcb3 	bl	8023bb8 <printmsg>
		Error_Handler();
 8023252:	f000 fcfd 	bl	8023c50 <Error_Handler>
	}

	BSP_LED_Toggle(LED_GREEN);
 8023256:	2000      	movs	r0, #0
 8023258:	f000 ffb6 	bl	80241c8 <BSP_LED_Toggle>

	// Extract The signature from the firmware buffer.
	if (Extract_Sig() != HAL_OK) {
 802325c:	f000 f8be 	bl	80233dc <Extract_Sig>
 8023260:	4603      	mov	r3, r0
 8023262:	2b00      	cmp	r3, #0
 8023264:	d007      	beq.n	8023276 <FlashBootloader_Main+0x7e>
		BSP_LED_Toggle(LED_RED);
 8023266:	2002      	movs	r0, #2
 8023268:	f000 ffae 	bl	80241c8 <BSP_LED_Toggle>
		printmsg("Signature extraction has failed!!\n");
 802326c:	481f      	ldr	r0, [pc, #124]	@ (80232ec <FlashBootloader_Main+0xf4>)
 802326e:	f000 fca3 	bl	8023bb8 <printmsg>
		Error_Handler();
 8023272:	f000 fced 	bl	8023c50 <Error_Handler>
	}

	BSP_LED_Toggle(LED_GREEN);
 8023276:	2000      	movs	r0, #0
 8023278:	f000 ffa6 	bl	80241c8 <BSP_LED_Toggle>

	// Copy the Firmware from the RAM buffer to the FLASH
	if (Copy_FW_To_Flash() != HAL_OK) {
 802327c:	f007 fb84 	bl	802a988 <__Copy_FW_To_Flash_veneer>
 8023280:	4603      	mov	r3, r0
 8023282:	2b00      	cmp	r3, #0
 8023284:	d007      	beq.n	8023296 <FlashBootloader_Main+0x9e>
		BSP_LED_Toggle(LED_RED);
 8023286:	2002      	movs	r0, #2
 8023288:	f000 ff9e 	bl	80241c8 <BSP_LED_Toggle>
		printmsg("Firmware copy to FLASH has failed!!\n");
 802328c:	4818      	ldr	r0, [pc, #96]	@ (80232f0 <FlashBootloader_Main+0xf8>)
 802328e:	f000 fc93 	bl	8023bb8 <printmsg>
		Error_Handler();
 8023292:	f000 fcdd 	bl	8023c50 <Error_Handler>
	}

	BSP_LED_Toggle(LED_GREEN);
 8023296:	2000      	movs	r0, #0
 8023298:	f000 ff96 	bl	80241c8 <BSP_LED_Toggle>

	// Calculate and verify the authenticity for the received firnware
	if (FW_Auth_Verify() != HAL_OK) {
 802329c:	f000 f8e0 	bl	8023460 <FW_Auth_Verify>
 80232a0:	4603      	mov	r3, r0
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	d007      	beq.n	80232b6 <FlashBootloader_Main+0xbe>
		BSP_LED_Toggle(LED_RED);
 80232a6:	2002      	movs	r0, #2
 80232a8:	f000 ff8e 	bl	80241c8 <BSP_LED_Toggle>
		printmsg("Firmware authentication has failed !!");
 80232ac:	4811      	ldr	r0, [pc, #68]	@ (80232f4 <FlashBootloader_Main+0xfc>)
 80232ae:	f000 fc83 	bl	8023bb8 <printmsg>
		Error_Handler();
 80232b2:	f000 fccd 	bl	8023c50 <Error_Handler>
	}

	BSP_LED_Toggle(LED_GREEN);
 80232b6:	2000      	movs	r0, #0
 80232b8:	f000 ff86 	bl	80241c8 <BSP_LED_Toggle>

	// Calculate the MAC and store it in the last 32Bytes of the app
	if (Calculate_And_Store_MAC() != HAL_OK) {
 80232bc:	f000 f900 	bl	80234c0 <Calculate_And_Store_MAC>
 80232c0:	4603      	mov	r3, r0
 80232c2:	2b00      	cmp	r3, #0
 80232c4:	d007      	beq.n	80232d6 <FlashBootloader_Main+0xde>
		BSP_LED_Toggle(LED_RED);
 80232c6:	2002      	movs	r0, #2
 80232c8:	f000 ff7e 	bl	80241c8 <BSP_LED_Toggle>
		printmsg("Mac Storing has failed.");
 80232cc:	480a      	ldr	r0, [pc, #40]	@ (80232f8 <FlashBootloader_Main+0x100>)
 80232ce:	f000 fc73 	bl	8023bb8 <printmsg>
		Error_Handler();
 80232d2:	f000 fcbd 	bl	8023c50 <Error_Handler>
	}

	BSP_LED_Toggle(LED_GREEN);
 80232d6:	2000      	movs	r0, #0
 80232d8:	f000 ff76 	bl	80241c8 <BSP_LED_Toggle>

	// Sw reset to enter BootManager
	__NVIC_SystemReset();
 80232dc:	f7ff ff76 	bl	80231cc <__NVIC_SystemReset>
 80232e0:	0802a9d0 	.word	0x0802a9d0
 80232e4:	0802a9f8 	.word	0x0802a9f8
 80232e8:	0802aa18 	.word	0x0802aa18
 80232ec:	0802aa3c 	.word	0x0802aa3c
 80232f0:	0802aa60 	.word	0x0802aa60
 80232f4:	0802aa88 	.word	0x0802aa88
 80232f8:	0802aab0 	.word	0x0802aab0

080232fc <FBL_Periph_Init>:

}
HAL_StatusTypeDef FBL_Periph_Init(void) {
 80232fc:	b580      	push	{r7, lr}
 80232fe:	b082      	sub	sp, #8
 8023300:	af00      	add	r7, sp, #0

	  /* MCU Configuration--------------------------------------------------------*/
	  HAL_StatusTypeDef retVal;
	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  if ( HAL_Init() != HAL_OK) {
 8023302:	f000 ff8b 	bl	802421c <HAL_Init>
 8023306:	4603      	mov	r3, r0
 8023308:	2b00      	cmp	r3, #0
 802330a:	d002      	beq.n	8023312 <FBL_Periph_Init+0x16>
		  retVal = HAL_ERROR;
 802330c:	2301      	movs	r3, #1
 802330e:	71fb      	strb	r3, [r7, #7]
		  goto error;
 8023310:	e02a      	b.n	8023368 <FBL_Periph_Init+0x6c>
	  }

	  /* Configure the system clock */
	  SystemClock_Config();
 8023312:	f000 fa15 	bl	8023740 <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8023316:	f000 fc71 	bl	8023bfc <MX_GPIO_Init>
#ifdef USE_CAN_BUS
	  MX_FDCAN1_Init();
 802331a:	f000 faaf 	bl	802387c <MX_FDCAN1_Init>
	  MX_FDCAN2_Init();
 802331e:	f000 fb2f 	bl	8023980 <MX_FDCAN2_Init>
#endif
	  MX_CRC_Init();
 8023322:	f000 fa89 	bl	8023838 <MX_CRC_Init>
#ifdef USE_UART
	  MX_USART3_UART_Init();
 8023326:	f000 fbad 	bl	8023a84 <MX_USART3_UART_Init>
	  MX_USART2_UART_Init();
 802332a:	f000 fbf7 	bl	8023b1c <MX_USART2_UART_Init>
#endif
	  /* Initialize leds */
	  /* Initialize leds */
	  if (BSP_LED_Init(LED_GREEN) != HAL_OK) {
 802332e:	2000      	movs	r0, #0
 8023330:	f000 fed4 	bl	80240dc <BSP_LED_Init>
 8023334:	4603      	mov	r3, r0
 8023336:	2b00      	cmp	r3, #0
 8023338:	d002      	beq.n	8023340 <FBL_Periph_Init+0x44>
		  retVal = HAL_ERROR;
 802333a:	2301      	movs	r3, #1
 802333c:	71fb      	strb	r3, [r7, #7]
		  goto error;
 802333e:	e013      	b.n	8023368 <FBL_Periph_Init+0x6c>
	  }
	  if (BSP_LED_Init(LED_RED) != HAL_OK) {
 8023340:	2002      	movs	r0, #2
 8023342:	f000 fecb 	bl	80240dc <BSP_LED_Init>
 8023346:	4603      	mov	r3, r0
 8023348:	2b00      	cmp	r3, #0
 802334a:	d002      	beq.n	8023352 <FBL_Periph_Init+0x56>
		  retVal = HAL_ERROR;
 802334c:	2301      	movs	r3, #1
 802334e:	71fb      	strb	r3, [r7, #7]
		  goto error;
 8023350:	e00a      	b.n	8023368 <FBL_Periph_Init+0x6c>
	  }

	  //Initilize the cmox library
	  if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS) {
 8023352:	2000      	movs	r0, #0
 8023354:	f7fd f834 	bl	80203c0 <cmox_initialize>
 8023358:	4603      	mov	r3, r0
 802335a:	2b00      	cmp	r3, #0
 802335c:	d002      	beq.n	8023364 <FBL_Periph_Init+0x68>
		  retVal = HAL_ERROR;
 802335e:	2301      	movs	r3, #1
 8023360:	71fb      	strb	r3, [r7, #7]
		  goto error;
 8023362:	e001      	b.n	8023368 <FBL_Periph_Init+0x6c>
	  }

	  retVal = HAL_OK;
 8023364:	2300      	movs	r3, #0
 8023366:	71fb      	strb	r3, [r7, #7]

error :
	 return retVal;
 8023368:	79fb      	ldrb	r3, [r7, #7]
}
 802336a:	4618      	mov	r0, r3
 802336c:	3708      	adds	r7, #8
 802336e:	46bd      	mov	sp, r7
 8023370:	bd80      	pop	{r7, pc}
	...

08023374 <App_Sector_Erase>:

HAL_StatusTypeDef App_Sector_Erase(void) {
 8023374:	b580      	push	{r7, lr}
 8023376:	b082      	sub	sp, #8
 8023378:	af00      	add	r7, sp, #0
	uint32_t Erase_Result;
	if (HAL_FLASH_Unlock() != HAL_OK) {
 802337a:	f002 f95d 	bl	8025638 <HAL_FLASH_Unlock>
 802337e:	4603      	mov	r3, r0
 8023380:	2b00      	cmp	r3, #0
 8023382:	d004      	beq.n	802338e <App_Sector_Erase+0x1a>
		printmsg("Unable to unlock the flash.!!\n");
 8023384:	4812      	ldr	r0, [pc, #72]	@ (80233d0 <App_Sector_Erase+0x5c>)
 8023386:	f000 fc17 	bl	8023bb8 <printmsg>
		return HAL_ERROR;
 802338a:	2301      	movs	r3, #1
 802338c:	e01b      	b.n	80233c6 <App_Sector_Erase+0x52>
	}

	// Initialize the EraseInitTypeDef Structure
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 802338e:	4b11      	ldr	r3, [pc, #68]	@ (80233d4 <App_Sector_Erase+0x60>)
 8023390:	2200      	movs	r2, #0
 8023392:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8023394:	4b0f      	ldr	r3, [pc, #60]	@ (80233d4 <App_Sector_Erase+0x60>)
 8023396:	2220      	movs	r2, #32
 8023398:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_5;
 802339a:	4b0e      	ldr	r3, [pc, #56]	@ (80233d4 <App_Sector_Erase+0x60>)
 802339c:	2205      	movs	r2, #5
 802339e:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 2;
 80233a0:	4b0c      	ldr	r3, [pc, #48]	@ (80233d4 <App_Sector_Erase+0x60>)
 80233a2:	2202      	movs	r2, #2
 80233a4:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &Erase_Result) != HAL_OK) {
 80233a6:	1d3b      	adds	r3, r7, #4
 80233a8:	4619      	mov	r1, r3
 80233aa:	480a      	ldr	r0, [pc, #40]	@ (80233d4 <App_Sector_Erase+0x60>)
 80233ac:	f002 fa44 	bl	8025838 <HAL_FLASHEx_Erase>
 80233b0:	4603      	mov	r3, r0
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d004      	beq.n	80233c0 <App_Sector_Erase+0x4c>
		printmsg("Unable to erase the app sectors!!!\n");
 80233b6:	4808      	ldr	r0, [pc, #32]	@ (80233d8 <App_Sector_Erase+0x64>)
 80233b8:	f000 fbfe 	bl	8023bb8 <printmsg>
		return HAL_ERROR;
 80233bc:	2301      	movs	r3, #1
 80233be:	e002      	b.n	80233c6 <App_Sector_Erase+0x52>
	}

	return HAL_FLASH_Lock();
 80233c0:	f002 f974 	bl	80256ac <HAL_FLASH_Lock>
 80233c4:	4603      	mov	r3, r0
}
 80233c6:	4618      	mov	r0, r3
 80233c8:	3708      	adds	r7, #8
 80233ca:	46bd      	mov	sp, r7
 80233cc:	bd80      	pop	{r7, pc}
 80233ce:	bf00      	nop
 80233d0:	0802a990 	.word	0x0802a990
 80233d4:	240000a4 	.word	0x240000a4
 80233d8:	0802aac8 	.word	0x0802aac8

080233dc <Extract_Sig>:

HAL_StatusTypeDef Extract_Sig(void) {
 80233dc:	b580      	push	{r7, lr}
 80233de:	af00      	add	r7, sp, #0
	if (memcpy((void*)Signature, (void*)&firmware_buffer[APP_SECTION_SIZE],SIGNATURE_LEN) != 0) {
 80233e0:	4a09      	ldr	r2, [pc, #36]	@ (8023408 <Extract_Sig+0x2c>)
 80233e2:	4b0a      	ldr	r3, [pc, #40]	@ (802340c <Extract_Sig+0x30>)
 80233e4:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 80233e8:	4610      	mov	r0, r2
 80233ea:	4619      	mov	r1, r3
 80233ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80233f0:	461a      	mov	r2, r3
 80233f2:	f006 fe6e 	bl	802a0d2 <memcpy>
 80233f6:	4b04      	ldr	r3, [pc, #16]	@ (8023408 <Extract_Sig+0x2c>)
 80233f8:	2b00      	cmp	r3, #0
 80233fa:	d001      	beq.n	8023400 <Extract_Sig+0x24>
		return HAL_ERROR;
 80233fc:	2301      	movs	r3, #1
 80233fe:	e000      	b.n	8023402 <Extract_Sig+0x26>
	}

	return HAL_OK;
 8023400:	2300      	movs	r3, #0
}
 8023402:	4618      	mov	r0, r3
 8023404:	bd80      	pop	{r7, pc}
 8023406:	bf00      	nop
 8023408:	240000b8 	.word	0x240000b8
 802340c:	30000000 	.word	0x30000000

08023410 <Receive_FW>:

HAL_StatusTypeDef Receive_FW(void) {
 8023410:	b580      	push	{r7, lr}
 8023412:	b082      	sub	sp, #8
 8023414:	af00      	add	r7, sp, #0
	uint32_t counter = fw_len;
 8023416:	4b0f      	ldr	r3, [pc, #60]	@ (8023454 <Receive_FW+0x44>)
 8023418:	607b      	str	r3, [r7, #4]
	while (counter > 0) {
 802341a:	e012      	b.n	8023442 <Receive_FW+0x32>
		if (HAL_UART_Receive(&huart3, &firmware_buffer[fw_len - counter], 1, HAL_MAX_DELAY) != HAL_OK) {
 802341c:	4a0d      	ldr	r2, [pc, #52]	@ (8023454 <Receive_FW+0x44>)
 802341e:	687b      	ldr	r3, [r7, #4]
 8023420:	1ad3      	subs	r3, r2, r3
 8023422:	4a0d      	ldr	r2, [pc, #52]	@ (8023458 <Receive_FW+0x48>)
 8023424:	1899      	adds	r1, r3, r2
 8023426:	f04f 33ff 	mov.w	r3, #4294967295
 802342a:	2201      	movs	r2, #1
 802342c:	480b      	ldr	r0, [pc, #44]	@ (802345c <Receive_FW+0x4c>)
 802342e:	f005 fca3 	bl	8028d78 <HAL_UART_Receive>
 8023432:	4603      	mov	r3, r0
 8023434:	2b00      	cmp	r3, #0
 8023436:	d001      	beq.n	802343c <Receive_FW+0x2c>
			return HAL_ERROR;
 8023438:	2301      	movs	r3, #1
 802343a:	e006      	b.n	802344a <Receive_FW+0x3a>
		}
		counter--;
 802343c:	687b      	ldr	r3, [r7, #4]
 802343e:	3b01      	subs	r3, #1
 8023440:	607b      	str	r3, [r7, #4]
	while (counter > 0) {
 8023442:	687b      	ldr	r3, [r7, #4]
 8023444:	2b00      	cmp	r3, #0
 8023446:	d1e9      	bne.n	802341c <Receive_FW+0xc>
	}
	return HAL_OK;
 8023448:	2300      	movs	r3, #0
}
 802344a:	4618      	mov	r0, r3
 802344c:	3708      	adds	r7, #8
 802344e:	46bd      	mov	sp, r7
 8023450:	bd80      	pop	{r7, pc}
 8023452:	bf00      	nop
 8023454:	00040100 	.word	0x00040100
 8023458:	30000000 	.word	0x30000000
 802345c:	24000270 	.word	0x24000270

08023460 <FW_Auth_Verify>:
		counter += 32;
	}
	return HAL_FLASH_Lock();;
}

HAL_StatusTypeDef FW_Auth_Verify(void) {
 8023460:	b580      	push	{r7, lr}
 8023462:	b082      	sub	sp, #8
 8023464:	af00      	add	r7, sp, #0
    // Calculate the digest:
    int32_t retVal = SHA256_HASH_DigestCompute((uint8_t*)APP_START_ADDR, APP_SECTION_SIZE, Msg_Digest, &Msg_Digest_Len);
 8023466:	4b10      	ldr	r3, [pc, #64]	@ (80234a8 <FW_Auth_Verify+0x48>)
 8023468:	4a10      	ldr	r2, [pc, #64]	@ (80234ac <FW_Auth_Verify+0x4c>)
 802346a:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 802346e:	4810      	ldr	r0, [pc, #64]	@ (80234b0 <FW_Auth_Verify+0x50>)
 8023470:	f000 f8be 	bl	80235f0 <SHA256_HASH_DigestCompute>
 8023474:	6078      	str	r0, [r7, #4]
    if (retVal != HASH_SUCCESS) {
 8023476:	687b      	ldr	r3, [r7, #4]
 8023478:	2b00      	cmp	r3, #0
 802347a:	d001      	beq.n	8023480 <FW_Auth_Verify+0x20>
    	return HAL_ERROR;
 802347c:	2301      	movs	r3, #1
 802347e:	e00e      	b.n	802349e <FW_Auth_Verify+0x3e>
    }

    int32_t RetVal = FW_Signature_Verify(Msg_Digest, Signature, Signature_Len);
 8023480:	4b0c      	ldr	r3, [pc, #48]	@ (80234b4 <FW_Auth_Verify+0x54>)
 8023482:	681b      	ldr	r3, [r3, #0]
 8023484:	461a      	mov	r2, r3
 8023486:	490c      	ldr	r1, [pc, #48]	@ (80234b8 <FW_Auth_Verify+0x58>)
 8023488:	4808      	ldr	r0, [pc, #32]	@ (80234ac <FW_Auth_Verify+0x4c>)
 802348a:	f000 f8df 	bl	802364c <FW_Signature_Verify>
 802348e:	6038      	str	r0, [r7, #0]
    if (RetVal != CMOX_RSA_AUTH_SUCCESS) {
 8023490:	683b      	ldr	r3, [r7, #0]
 8023492:	4a0a      	ldr	r2, [pc, #40]	@ (80234bc <FW_Auth_Verify+0x5c>)
 8023494:	4293      	cmp	r3, r2
 8023496:	d001      	beq.n	802349c <FW_Auth_Verify+0x3c>
    	return HAL_ERROR;
 8023498:	2301      	movs	r3, #1
 802349a:	e000      	b.n	802349e <FW_Auth_Verify+0x3e>
    }
    return HAL_OK;
 802349c:	2300      	movs	r3, #0
}
 802349e:	4618      	mov	r0, r3
 80234a0:	3708      	adds	r7, #8
 80234a2:	46bd      	mov	sp, r7
 80234a4:	bd80      	pop	{r7, pc}
 80234a6:	bf00      	nop
 80234a8:	240001d8 	.word	0x240001d8
 80234ac:	240001b8 	.word	0x240001b8
 80234b0:	080a0000 	.word	0x080a0000
 80234b4:	2400000c 	.word	0x2400000c
 80234b8:	240000b8 	.word	0x240000b8
 80234bc:	0005c726 	.word	0x0005c726

080234c0 <Calculate_And_Store_MAC>:


HAL_StatusTypeDef Calculate_And_Store_MAC(void) {
 80234c0:	b580      	push	{r7, lr}
 80234c2:	b08c      	sub	sp, #48	@ 0x30
 80234c4:	af00      	add	r7, sp, #0
	uint8_t mac_result[MAC_SIZE*2] = {0x0};
 80234c6:	2300      	movs	r3, #0
 80234c8:	607b      	str	r3, [r7, #4]
 80234ca:	f107 0308 	add.w	r3, r7, #8
 80234ce:	2200      	movs	r2, #0
 80234d0:	601a      	str	r2, [r3, #0]
 80234d2:	605a      	str	r2, [r3, #4]
 80234d4:	609a      	str	r2, [r3, #8]
 80234d6:	60da      	str	r2, [r3, #12]
 80234d8:	611a      	str	r2, [r3, #16]
 80234da:	615a      	str	r2, [r3, #20]
 80234dc:	619a      	str	r2, [r3, #24]
	int32_t inputSize = 0x40000 - 0x20;
 80234de:	4b14      	ldr	r3, [pc, #80]	@ (8023530 <Calculate_And_Store_MAC+0x70>)
 80234e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t outputSize = 0;
 80234e2:	2300      	movs	r3, #0
 80234e4:	603b      	str	r3, [r7, #0]
	uint8_t *buffer = (uint8_t*)(APP_START_ADDR);
 80234e6:	4b13      	ldr	r3, [pc, #76]	@ (8023534 <Calculate_And_Store_MAC+0x74>)
 80234e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t address = APP_START_ADDR + inputSize;
 80234ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80234ec:	4b11      	ldr	r3, [pc, #68]	@ (8023534 <Calculate_And_Store_MAC+0x74>)
 80234ee:	4413      	add	r3, r2
 80234f0:	627b      	str	r3, [r7, #36]	@ 0x24

	// Calculate the mac
	AES_CMAC_Encrypt(buffer, inputSize, mac_result, &outputSize);
 80234f2:	463b      	mov	r3, r7
 80234f4:	1d3a      	adds	r2, r7, #4
 80234f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80234f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80234fa:	f000 f81d 	bl	8023538 <AES_CMAC_Encrypt>
	if (HAL_FLASH_Unlock() != HAL_OK) {
 80234fe:	f002 f89b 	bl	8025638 <HAL_FLASH_Unlock>
 8023502:	4603      	mov	r3, r0
 8023504:	2b00      	cmp	r3, #0
 8023506:	d001      	beq.n	802350c <Calculate_And_Store_MAC+0x4c>
		return HAL_ERROR;
 8023508:	2301      	movs	r3, #1
 802350a:	e00d      	b.n	8023528 <Calculate_And_Store_MAC+0x68>
	}

	// write the MAC to the FLASH
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, address, (uint32_t)&mac_result) != HAL_OK ) {
 802350c:	1d3b      	adds	r3, r7, #4
 802350e:	461a      	mov	r2, r3
 8023510:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8023512:	2001      	movs	r0, #1
 8023514:	f001 fffe 	bl	8025514 <HAL_FLASH_Program>
 8023518:	4603      	mov	r3, r0
 802351a:	2b00      	cmp	r3, #0
 802351c:	d001      	beq.n	8023522 <Calculate_And_Store_MAC+0x62>
		return HAL_ERROR;
 802351e:	2301      	movs	r3, #1
 8023520:	e002      	b.n	8023528 <Calculate_And_Store_MAC+0x68>
	}

	return HAL_FLASH_Lock();
 8023522:	f002 f8c3 	bl	80256ac <HAL_FLASH_Lock>
 8023526:	4603      	mov	r3, r0
}
 8023528:	4618      	mov	r0, r3
 802352a:	3730      	adds	r7, #48	@ 0x30
 802352c:	46bd      	mov	sp, r7
 802352e:	bd80      	pop	{r7, pc}
 8023530:	0003ffe0 	.word	0x0003ffe0
 8023534:	080a0000 	.word	0x080a0000

08023538 <AES_CMAC_Encrypt>:
	  return retval;
}


/* AES-CMAC Authentication TAG generation */
cmox_cmac_retval_t AES_CMAC_Encrypt(const uint8_t *P_pInputBuffer,  int32_t P_inputSize, uint8_t *P_pOutputBuffer, int32_t *P_pOutputSize) {
 8023538:	b580      	push	{r7, lr}
 802353a:	b08c      	sub	sp, #48	@ 0x30
 802353c:	af06      	add	r7, sp, #24
 802353e:	60f8      	str	r0, [r7, #12]
 8023540:	60b9      	str	r1, [r7, #8]
 8023542:	607a      	str	r2, [r7, #4]
 8023544:	603b      	str	r3, [r7, #0]

	  int32_t retval;
	  size_t computed_size;
	  retval = cmox_mac_compute(CMOX_CMAC_AES_ALGO, P_pInputBuffer, P_inputSize, crypt_key, CRL_AES128_KEY, NULL, 0, P_pOutputBuffer, MAC_SIZE, &computed_size);
 8023546:	4b16      	ldr	r3, [pc, #88]	@ (80235a0 <AES_CMAC_Encrypt+0x68>)
 8023548:	6818      	ldr	r0, [r3, #0]
 802354a:	68ba      	ldr	r2, [r7, #8]
 802354c:	f107 0310 	add.w	r3, r7, #16
 8023550:	9305      	str	r3, [sp, #20]
 8023552:	2310      	movs	r3, #16
 8023554:	9304      	str	r3, [sp, #16]
 8023556:	687b      	ldr	r3, [r7, #4]
 8023558:	9303      	str	r3, [sp, #12]
 802355a:	2300      	movs	r3, #0
 802355c:	9302      	str	r3, [sp, #8]
 802355e:	2300      	movs	r3, #0
 8023560:	9301      	str	r3, [sp, #4]
 8023562:	2310      	movs	r3, #16
 8023564:	9300      	str	r3, [sp, #0]
 8023566:	4b0f      	ldr	r3, [pc, #60]	@ (80235a4 <AES_CMAC_Encrypt+0x6c>)
 8023568:	68f9      	ldr	r1, [r7, #12]
 802356a:	f7fc fff3 	bl	8020554 <cmox_mac_compute>
 802356e:	4603      	mov	r3, r0
 8023570:	617b      	str	r3, [r7, #20]
	  /* Verify API returned value */
	  if (retval != CMOX_MAC_SUCCESS)
 8023572:	697b      	ldr	r3, [r7, #20]
 8023574:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8023578:	d002      	beq.n	8023580 <AES_CMAC_Encrypt+0x48>
	  {
		  retval = AES_ERR_BAD_OPERATION;
 802357a:	f640 431e 	movw	r3, #3102	@ 0xc1e
 802357e:	617b      	str	r3, [r7, #20]
	  }

	  /* Verify generated data size is the expected one */
	  if (computed_size != MAC_SIZE)
 8023580:	693b      	ldr	r3, [r7, #16]
 8023582:	2b10      	cmp	r3, #16
 8023584:	d002      	beq.n	802358c <AES_CMAC_Encrypt+0x54>
	  {
		  retval = AES_ERR_BAD_OPERATION;
 8023586:	f640 431e 	movw	r3, #3102	@ 0xc1e
 802358a:	617b      	str	r3, [r7, #20]
	  }
	  *P_pOutputSize = computed_size;
 802358c:	693b      	ldr	r3, [r7, #16]
 802358e:	461a      	mov	r2, r3
 8023590:	683b      	ldr	r3, [r7, #0]
 8023592:	601a      	str	r2, [r3, #0]
	  return retval;
 8023594:	697b      	ldr	r3, [r7, #20]
}
 8023596:	4618      	mov	r0, r3
 8023598:	3718      	adds	r7, #24
 802359a:	46bd      	mov	sp, r7
 802359c:	bd80      	pop	{r7, pc}
 802359e:	bf00      	nop
 80235a0:	0802ab94 	.word	0x0802ab94
 80235a4:	24000010 	.word	0x24000010

080235a8 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 80235a8:	b480      	push	{r7}
 80235aa:	b085      	sub	sp, #20
 80235ac:	af00      	add	r7, sp, #0
 80235ae:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 80235b0:	4b0e      	ldr	r3, [pc, #56]	@ (80235ec <cmox_ll_init+0x44>)
 80235b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80235b6:	4a0d      	ldr	r2, [pc, #52]	@ (80235ec <cmox_ll_init+0x44>)
 80235b8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80235bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  __HAL_RCC_CRC_CLK_ENABLE();
 80235c0:	4b0a      	ldr	r3, [pc, #40]	@ (80235ec <cmox_ll_init+0x44>)
 80235c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80235c6:	4a09      	ldr	r2, [pc, #36]	@ (80235ec <cmox_ll_init+0x44>)
 80235c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80235cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80235d0:	4b06      	ldr	r3, [pc, #24]	@ (80235ec <cmox_ll_init+0x44>)
 80235d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80235d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80235da:	60fb      	str	r3, [r7, #12]
 80235dc:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 80235de:	2300      	movs	r3, #0
}
 80235e0:	4618      	mov	r0, r3
 80235e2:	3714      	adds	r7, #20
 80235e4:	46bd      	mov	sp, r7
 80235e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235ea:	4770      	bx	lr
 80235ec:	58024400 	.word	0x58024400

080235f0 <SHA256_HASH_DigestCompute>:
		  retval = HASH_ERR_BAD_OPERATION;
	  }
	  return retval;
}
int32_t SHA256_HASH_DigestCompute(uint8_t* InputMessage, uint32_t InputMessageLength,
                                        uint8_t *MessageDigest, int32_t* MessageDigestLength) {
 80235f0:	b580      	push	{r7, lr}
 80235f2:	b088      	sub	sp, #32
 80235f4:	af02      	add	r7, sp, #8
 80235f6:	60f8      	str	r0, [r7, #12]
 80235f8:	60b9      	str	r1, [r7, #8]
 80235fa:	607a      	str	r2, [r7, #4]
 80235fc:	603b      	str	r3, [r7, #0]
	int32_t retval;
	size_t computed_size;
	retval = cmox_hash_compute(CMOX_SHA256_ALGO, InputMessage, InputMessageLength, MessageDigest, CMOX_SHA256_SIZE, &computed_size);
 80235fe:	4b12      	ldr	r3, [pc, #72]	@ (8023648 <SHA256_HASH_DigestCompute+0x58>)
 8023600:	6818      	ldr	r0, [r3, #0]
 8023602:	f107 0310 	add.w	r3, r7, #16
 8023606:	9301      	str	r3, [sp, #4]
 8023608:	2320      	movs	r3, #32
 802360a:	9300      	str	r3, [sp, #0]
 802360c:	687b      	ldr	r3, [r7, #4]
 802360e:	68ba      	ldr	r2, [r7, #8]
 8023610:	68f9      	ldr	r1, [r7, #12]
 8023612:	f7fc fe8d 	bl	8020330 <cmox_hash_compute>
 8023616:	4603      	mov	r3, r0
 8023618:	617b      	str	r3, [r7, #20]
	if (retval != CMOX_HASH_SUCCESS) {
 802361a:	697b      	ldr	r3, [r7, #20]
 802361c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8023620:	d002      	beq.n	8023628 <SHA256_HASH_DigestCompute+0x38>
		return HASH_ERR_BAD_OPERATION;
 8023622:	f640 73a1 	movw	r3, #4001	@ 0xfa1
 8023626:	e00a      	b.n	802363e <SHA256_HASH_DigestCompute+0x4e>
	}

	if (computed_size != CMOX_SHA256_SIZE) {
 8023628:	693b      	ldr	r3, [r7, #16]
 802362a:	2b20      	cmp	r3, #32
 802362c:	d002      	beq.n	8023634 <SHA256_HASH_DigestCompute+0x44>
		return HASH_ERR_BAD_OPERATION;
 802362e:	f640 73a1 	movw	r3, #4001	@ 0xfa1
 8023632:	e004      	b.n	802363e <SHA256_HASH_DigestCompute+0x4e>
	}
	*MessageDigestLength = computed_size;
 8023634:	693b      	ldr	r3, [r7, #16]
 8023636:	461a      	mov	r2, r3
 8023638:	683b      	ldr	r3, [r7, #0]
 802363a:	601a      	str	r2, [r3, #0]

	return HASH_SUCCESS;
 802363c:	2300      	movs	r3, #0
}
 802363e:	4618      	mov	r0, r3
 8023640:	3718      	adds	r7, #24
 8023642:	46bd      	mov	sp, r7
 8023644:	bd80      	pop	{r7, pc}
 8023646:	bf00      	nop
 8023648:	0802abfc 	.word	0x0802abfc

0802364c <FW_Signature_Verify>:



int32_t FW_Signature_Verify(const uint8_t* Msg_Digest ,const uint8_t *signature, size_t signature_len) {
 802364c:	b590      	push	{r4, r7, lr}
 802364e:	f2ad 4d84 	subw	sp, sp, #1156	@ 0x484
 8023652:	af04      	add	r7, sp, #16
 8023654:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8023658:	f2a3 4364 	subw	r3, r3, #1124	@ 0x464
 802365c:	6018      	str	r0, [r3, #0]
 802365e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8023662:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 8023666:	6019      	str	r1, [r3, #0]
 8023668:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 802366c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8023670:	601a      	str	r2, [r3, #0]

    // Buffer for the RSA context
    uint8_t rsa_buffer[BUFFER_SIZE];

    // Initialize the RSA context with appropriate math and modular exponentiation functions
    cmox_rsa_construct(&rsa_ctx, CMOX_MATH_FUNCS_FAST, CMOX_MODEXP_PUBLIC, rsa_buffer, BUFFER_SIZE);
 8023672:	4b2b      	ldr	r3, [pc, #172]	@ (8023720 <FW_Signature_Verify+0xd4>)
 8023674:	6819      	ldr	r1, [r3, #0]
 8023676:	4b2b      	ldr	r3, [pc, #172]	@ (8023724 <FW_Signature_Verify+0xd8>)
 8023678:	681a      	ldr	r2, [r3, #0]
 802367a:	f107 0314 	add.w	r3, r7, #20
 802367e:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 8023682:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8023686:	9400      	str	r4, [sp, #0]
 8023688:	f7fd f92a 	bl	80208e0 <cmox_rsa_construct>

    // Set the RSA key with the provided modulus and public exponent
    cmox_rsa_retval_t retval = cmox_rsa_setKey(&rsa_key, modulus, sizeof(modulus), exponent, sizeof(exponent));
 802368c:	f207 4014 	addw	r0, r7, #1044	@ 0x414
 8023690:	2303      	movs	r3, #3
 8023692:	9300      	str	r3, [sp, #0]
 8023694:	4b24      	ldr	r3, [pc, #144]	@ (8023728 <FW_Signature_Verify+0xdc>)
 8023696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802369a:	4924      	ldr	r1, [pc, #144]	@ (802372c <FW_Signature_Verify+0xe0>)
 802369c:	f7fd f944 	bl	8020928 <cmox_rsa_setKey>
 80236a0:	f8c7 046c 	str.w	r0, [r7, #1132]	@ 0x46c
    if (retval != CMOX_RSA_SUCCESS) {
 80236a4:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 80236a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80236ac:	d007      	beq.n	80236be <FW_Signature_Verify+0x72>
        cmox_rsa_cleanup(&rsa_ctx);
 80236ae:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80236b2:	4618      	mov	r0, r3
 80236b4:	f7fd f92c 	bl	8020910 <cmox_rsa_cleanup>
        return retval;  // Handle error if key setting fails
 80236b8:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 80236bc:	e02b      	b.n	8023716 <FW_Signature_Verify+0xca>
    }


    // Perform signature verification using PKCS#1 v1.5
    uint32_t fault_check = 0;  // Optional fault check parameter
 80236be:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80236c2:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 80236c6:	2200      	movs	r2, #0
 80236c8:	601a      	str	r2, [r3, #0]
    retval = cmox_rsa_pkcs1v15_verify(
 80236ca:	4b19      	ldr	r3, [pc, #100]	@ (8023730 <FW_Signature_Verify+0xe4>)
 80236cc:	681c      	ldr	r4, [r3, #0]
 80236ce:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80236d2:	f2a3 4264 	subw	r2, r3, #1124	@ 0x464
 80236d6:	f207 4114 	addw	r1, r7, #1044	@ 0x414
 80236da:	f507 608a 	add.w	r0, r7, #1104	@ 0x450
 80236de:	f107 0310 	add.w	r3, r7, #16
 80236e2:	9302      	str	r3, [sp, #8]
 80236e4:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80236e8:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80236ec:	681b      	ldr	r3, [r3, #0]
 80236ee:	9301      	str	r3, [sp, #4]
 80236f0:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80236f4:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 80236f8:	681b      	ldr	r3, [r3, #0]
 80236fa:	9300      	str	r3, [sp, #0]
 80236fc:	4623      	mov	r3, r4
 80236fe:	6812      	ldr	r2, [r2, #0]
 8023700:	f7fd f9d8 	bl	8020ab4 <cmox_rsa_pkcs1v15_verify>
 8023704:	f8c7 046c 	str.w	r0, [r7, #1132]	@ 0x46c
        signature,                  // Signature to verify
        signature_len,              // Length of the signature
        &fault_check);              // Optional fault check (can be NULL if not used)

    // Clean up RSA context after the operation
    cmox_rsa_cleanup(&rsa_ctx);
 8023708:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 802370c:	4618      	mov	r0, r3
 802370e:	f7fd f8ff 	bl	8020910 <cmox_rsa_cleanup>

    // Return the result of the verification
    return retval;
 8023712:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
}
 8023716:	4618      	mov	r0, r3
 8023718:	f207 4774 	addw	r7, r7, #1140	@ 0x474
 802371c:	46bd      	mov	sp, r7
 802371e:	bd90      	pop	{r4, r7, pc}
 8023720:	0802abc0 	.word	0x0802abc0
 8023724:	0802abd0 	.word	0x0802abd0
 8023728:	0802ae58 	.word	0x0802ae58
 802372c:	0802ad58 	.word	0x0802ad58
 8023730:	0802abf4 	.word	0x0802abf4

08023734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8023734:	b580      	push	{r7, lr}
 8023736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  FlashBootloader_Main();
 8023738:	f7ff fd5e 	bl	80231f8 <FlashBootloader_Main>
 802373c:	e7fc      	b.n	8023738 <main+0x4>
	...

08023740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8023740:	b580      	push	{r7, lr}
 8023742:	b09c      	sub	sp, #112	@ 0x70
 8023744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8023746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802374a:	224c      	movs	r2, #76	@ 0x4c
 802374c:	2100      	movs	r1, #0
 802374e:	4618      	mov	r0, r3
 8023750:	f006 fc86 	bl	802a060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8023754:	1d3b      	adds	r3, r7, #4
 8023756:	2220      	movs	r2, #32
 8023758:	2100      	movs	r1, #0
 802375a:	4618      	mov	r0, r3
 802375c:	f006 fc80 	bl	802a060 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8023760:	2004      	movs	r0, #4
 8023762:	f002 fbbf 	bl	8025ee4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8023766:	2300      	movs	r3, #0
 8023768:	603b      	str	r3, [r7, #0]
 802376a:	4b31      	ldr	r3, [pc, #196]	@ (8023830 <SystemClock_Config+0xf0>)
 802376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802376e:	4a30      	ldr	r2, [pc, #192]	@ (8023830 <SystemClock_Config+0xf0>)
 8023770:	f023 0301 	bic.w	r3, r3, #1
 8023774:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8023776:	4b2e      	ldr	r3, [pc, #184]	@ (8023830 <SystemClock_Config+0xf0>)
 8023778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802377a:	f003 0301 	and.w	r3, r3, #1
 802377e:	603b      	str	r3, [r7, #0]
 8023780:	4b2c      	ldr	r3, [pc, #176]	@ (8023834 <SystemClock_Config+0xf4>)
 8023782:	699b      	ldr	r3, [r3, #24]
 8023784:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8023788:	4a2a      	ldr	r2, [pc, #168]	@ (8023834 <SystemClock_Config+0xf4>)
 802378a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 802378e:	6193      	str	r3, [r2, #24]
 8023790:	4b28      	ldr	r3, [pc, #160]	@ (8023834 <SystemClock_Config+0xf4>)
 8023792:	699b      	ldr	r3, [r3, #24]
 8023794:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8023798:	603b      	str	r3, [r7, #0]
 802379a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 802379c:	bf00      	nop
 802379e:	4b25      	ldr	r3, [pc, #148]	@ (8023834 <SystemClock_Config+0xf4>)
 80237a0:	699b      	ldr	r3, [r3, #24]
 80237a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80237a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80237aa:	d1f8      	bne.n	802379e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80237ac:	2302      	movs	r3, #2
 80237ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80237b0:	2301      	movs	r3, #1
 80237b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80237b4:	2340      	movs	r3, #64	@ 0x40
 80237b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80237b8:	2302      	movs	r3, #2
 80237ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80237bc:	2300      	movs	r3, #0
 80237be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80237c0:	2304      	movs	r3, #4
 80237c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 80237c4:	230a      	movs	r3, #10
 80237c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80237c8:	2302      	movs	r3, #2
 80237ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80237cc:	2304      	movs	r3, #4
 80237ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80237d0:	2302      	movs	r3, #2
 80237d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80237d4:	230c      	movs	r3, #12
 80237d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80237d8:	2302      	movs	r3, #2
 80237da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80237dc:	2300      	movs	r3, #0
 80237de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80237e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80237e4:	4618      	mov	r0, r3
 80237e6:	f002 fbd7 	bl	8025f98 <HAL_RCC_OscConfig>
 80237ea:	4603      	mov	r3, r0
 80237ec:	2b00      	cmp	r3, #0
 80237ee:	d001      	beq.n	80237f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80237f0:	f000 fa2e 	bl	8023c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80237f4:	233f      	movs	r3, #63	@ 0x3f
 80237f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80237f8:	2300      	movs	r3, #0
 80237fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80237fc:	2300      	movs	r3, #0
 80237fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8023800:	2300      	movs	r3, #0
 8023802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8023804:	2300      	movs	r3, #0
 8023806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8023808:	2300      	movs	r3, #0
 802380a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 802380c:	2300      	movs	r3, #0
 802380e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8023810:	2300      	movs	r3, #0
 8023812:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8023814:	1d3b      	adds	r3, r7, #4
 8023816:	2101      	movs	r1, #1
 8023818:	4618      	mov	r0, r3
 802381a:	f003 f817 	bl	802684c <HAL_RCC_ClockConfig>
 802381e:	4603      	mov	r3, r0
 8023820:	2b00      	cmp	r3, #0
 8023822:	d001      	beq.n	8023828 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8023824:	f000 fa14 	bl	8023c50 <Error_Handler>
  }
}
 8023828:	bf00      	nop
 802382a:	3770      	adds	r7, #112	@ 0x70
 802382c:	46bd      	mov	sp, r7
 802382e:	bd80      	pop	{r7, pc}
 8023830:	58000400 	.word	0x58000400
 8023834:	58024800 	.word	0x58024800

08023838 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
void MX_CRC_Init(void)
{
 8023838:	b580      	push	{r7, lr}
 802383a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 802383c:	4b0d      	ldr	r3, [pc, #52]	@ (8023874 <MX_CRC_Init+0x3c>)
 802383e:	4a0e      	ldr	r2, [pc, #56]	@ (8023878 <MX_CRC_Init+0x40>)
 8023840:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8023842:	4b0c      	ldr	r3, [pc, #48]	@ (8023874 <MX_CRC_Init+0x3c>)
 8023844:	2200      	movs	r2, #0
 8023846:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8023848:	4b0a      	ldr	r3, [pc, #40]	@ (8023874 <MX_CRC_Init+0x3c>)
 802384a:	2200      	movs	r2, #0
 802384c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 802384e:	4b09      	ldr	r3, [pc, #36]	@ (8023874 <MX_CRC_Init+0x3c>)
 8023850:	2200      	movs	r2, #0
 8023852:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8023854:	4b07      	ldr	r3, [pc, #28]	@ (8023874 <MX_CRC_Init+0x3c>)
 8023856:	2200      	movs	r2, #0
 8023858:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 802385a:	4b06      	ldr	r3, [pc, #24]	@ (8023874 <MX_CRC_Init+0x3c>)
 802385c:	2201      	movs	r2, #1
 802385e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8023860:	4804      	ldr	r0, [pc, #16]	@ (8023874 <MX_CRC_Init+0x3c>)
 8023862:	f000 fe89 	bl	8024578 <HAL_CRC_Init>
 8023866:	4603      	mov	r3, r0
 8023868:	2b00      	cmp	r3, #0
 802386a:	d001      	beq.n	8023870 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 802386c:	f000 f9f0 	bl	8023c50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8023870:	bf00      	nop
 8023872:	bd80      	pop	{r7, pc}
 8023874:	24000304 	.word	0x24000304
 8023878:	58024c00 	.word	0x58024c00

0802387c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_FDCAN1_Init(void)
{
 802387c:	b580      	push	{r7, lr}
 802387e:	b088      	sub	sp, #32
 8023880:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8023882:	4b3c      	ldr	r3, [pc, #240]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 8023884:	4a3c      	ldr	r2, [pc, #240]	@ (8023978 <MX_FDCAN1_Init+0xfc>)
 8023886:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8023888:	4b3a      	ldr	r3, [pc, #232]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 802388a:	2200      	movs	r2, #0
 802388c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 802388e:	4b39      	ldr	r3, [pc, #228]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 8023890:	2200      	movs	r2, #0
 8023892:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8023894:	4b37      	ldr	r3, [pc, #220]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 8023896:	2200      	movs	r2, #0
 8023898:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 802389a:	4b36      	ldr	r3, [pc, #216]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 802389c:	2200      	movs	r2, #0
 802389e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80238a0:	4b34      	ldr	r3, [pc, #208]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238a2:	2200      	movs	r2, #0
 80238a4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 80238a6:	4b33      	ldr	r3, [pc, #204]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238a8:	2205      	movs	r2, #5
 80238aa:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80238ac:	4b31      	ldr	r3, [pc, #196]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238ae:	2201      	movs	r2, #1
 80238b0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80238b2:	4b30      	ldr	r3, [pc, #192]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238b4:	220d      	movs	r2, #13
 80238b6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80238b8:	4b2e      	ldr	r3, [pc, #184]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238ba:	2202      	movs	r2, #2
 80238bc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80238be:	4b2d      	ldr	r3, [pc, #180]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238c0:	2201      	movs	r2, #1
 80238c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80238c4:	4b2b      	ldr	r3, [pc, #172]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238c6:	2201      	movs	r2, #1
 80238c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80238ca:	4b2a      	ldr	r3, [pc, #168]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238cc:	2201      	movs	r2, #1
 80238ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80238d0:	4b28      	ldr	r3, [pc, #160]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238d2:	2201      	movs	r2, #1
 80238d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80238d6:	4b27      	ldr	r3, [pc, #156]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238d8:	2200      	movs	r2, #0
 80238da:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80238dc:	4b25      	ldr	r3, [pc, #148]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238de:	2201      	movs	r2, #1
 80238e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80238e2:	4b24      	ldr	r3, [pc, #144]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238e4:	2200      	movs	r2, #0
 80238e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80238e8:	4b22      	ldr	r3, [pc, #136]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238ea:	2201      	movs	r2, #1
 80238ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80238ee:	4b21      	ldr	r3, [pc, #132]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238f0:	2204      	movs	r2, #4
 80238f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 1;
 80238f4:	4b1f      	ldr	r3, [pc, #124]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238f6:	2201      	movs	r2, #1
 80238f8:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80238fa:	4b1e      	ldr	r3, [pc, #120]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 80238fc:	2204      	movs	r2, #4
 80238fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8023900:	4b1c      	ldr	r3, [pc, #112]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 8023902:	2200      	movs	r2, #0
 8023904:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8023906:	4b1b      	ldr	r3, [pc, #108]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 8023908:	2204      	movs	r2, #4
 802390a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 802390c:	4b19      	ldr	r3, [pc, #100]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 802390e:	2200      	movs	r2, #0
 8023910:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8023912:	4b18      	ldr	r3, [pc, #96]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 8023914:	2200      	movs	r2, #0
 8023916:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8023918:	4b16      	ldr	r3, [pc, #88]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 802391a:	2201      	movs	r2, #1
 802391c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 802391e:	4b15      	ldr	r3, [pc, #84]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 8023920:	2200      	movs	r2, #0
 8023922:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8023924:	4b13      	ldr	r3, [pc, #76]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 8023926:	2204      	movs	r2, #4
 8023928:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 802392a:	4812      	ldr	r0, [pc, #72]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 802392c:	f000 ff16 	bl	802475c <HAL_FDCAN_Init>
 8023930:	4603      	mov	r3, r0
 8023932:	2b00      	cmp	r3, #0
 8023934:	d001      	beq.n	802393a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8023936:	f000 f98b 	bl	8023c50 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig1.IdType = FDCAN_STANDARD_ID;
 802393a:	2300      	movs	r3, #0
 802393c:	603b      	str	r3, [r7, #0]
  sFilterConfig1.FilterIndex = 0;
 802393e:	2300      	movs	r3, #0
 8023940:	607b      	str	r3, [r7, #4]
  sFilterConfig1.FilterType = FDCAN_FILTER_MASK;
 8023942:	2302      	movs	r3, #2
 8023944:	60bb      	str	r3, [r7, #8]
  sFilterConfig1.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8023946:	2302      	movs	r3, #2
 8023948:	60fb      	str	r3, [r7, #12]
  sFilterConfig1.FilterID1 = 0x111;
 802394a:	f240 1311 	movw	r3, #273	@ 0x111
 802394e:	613b      	str	r3, [r7, #16]
  sFilterConfig1.FilterID2 = 0x7FF;
 8023950:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8023954:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig1) != HAL_OK) {
 8023956:	463b      	mov	r3, r7
 8023958:	4619      	mov	r1, r3
 802395a:	4806      	ldr	r0, [pc, #24]	@ (8023974 <MX_FDCAN1_Init+0xf8>)
 802395c:	f001 f8dc 	bl	8024b18 <HAL_FDCAN_ConfigFilter>
 8023960:	4603      	mov	r3, r0
 8023962:	2b00      	cmp	r3, #0
 8023964:	d002      	beq.n	802396c <MX_FDCAN1_Init+0xf0>
	  printmsg("Filter config has not been configured successfully.!!!");
 8023966:	4805      	ldr	r0, [pc, #20]	@ (802397c <MX_FDCAN1_Init+0x100>)
 8023968:	f000 f926 	bl	8023bb8 <printmsg>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 802396c:	bf00      	nop
 802396e:	3720      	adds	r7, #32
 8023970:	46bd      	mov	sp, r7
 8023972:	bd80      	pop	{r7, pc}
 8023974:	24000328 	.word	0x24000328
 8023978:	4000a000 	.word	0x4000a000
 802397c:	0802aaec 	.word	0x0802aaec

08023980 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
void MX_FDCAN2_Init(void)
{
 8023980:	b580      	push	{r7, lr}
 8023982:	b088      	sub	sp, #32
 8023984:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8023986:	4b3c      	ldr	r3, [pc, #240]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023988:	4a3c      	ldr	r2, [pc, #240]	@ (8023a7c <MX_FDCAN2_Init+0xfc>)
 802398a:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 802398c:	4b3a      	ldr	r3, [pc, #232]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 802398e:	2200      	movs	r2, #0
 8023990:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8023992:	4b39      	ldr	r3, [pc, #228]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023994:	2200      	movs	r2, #0
 8023996:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8023998:	4b37      	ldr	r3, [pc, #220]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 802399a:	2200      	movs	r2, #0
 802399c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 802399e:	4b36      	ldr	r3, [pc, #216]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239a0:	2200      	movs	r2, #0
 80239a2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80239a4:	4b34      	ldr	r3, [pc, #208]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239a6:	2200      	movs	r2, #0
 80239a8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 5;
 80239aa:	4b33      	ldr	r3, [pc, #204]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239ac:	2205      	movs	r2, #5
 80239ae:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80239b0:	4b31      	ldr	r3, [pc, #196]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239b2:	2201      	movs	r2, #1
 80239b4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 13;
 80239b6:	4b30      	ldr	r3, [pc, #192]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239b8:	220d      	movs	r2, #13
 80239ba:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80239bc:	4b2e      	ldr	r3, [pc, #184]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239be:	2202      	movs	r2, #2
 80239c0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80239c2:	4b2d      	ldr	r3, [pc, #180]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239c4:	2201      	movs	r2, #1
 80239c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80239c8:	4b2b      	ldr	r3, [pc, #172]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239ca:	2201      	movs	r2, #1
 80239cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80239ce:	4b2a      	ldr	r3, [pc, #168]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239d0:	2201      	movs	r2, #1
 80239d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80239d4:	4b28      	ldr	r3, [pc, #160]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239d6:	2201      	movs	r2, #1
 80239d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80239da:	4b27      	ldr	r3, [pc, #156]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239dc:	2200      	movs	r2, #0
 80239de:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 80239e0:	4b25      	ldr	r3, [pc, #148]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239e2:	2201      	movs	r2, #1
 80239e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80239e6:	4b24      	ldr	r3, [pc, #144]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239e8:	2200      	movs	r2, #0
 80239ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 1;
 80239ec:	4b22      	ldr	r3, [pc, #136]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239ee:	2201      	movs	r2, #1
 80239f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80239f2:	4b21      	ldr	r3, [pc, #132]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239f4:	2204      	movs	r2, #4
 80239f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 80239f8:	4b1f      	ldr	r3, [pc, #124]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 80239fa:	2201      	movs	r2, #1
 80239fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80239fe:	4b1e      	ldr	r3, [pc, #120]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023a00:	2204      	movs	r2, #4
 8023a02:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8023a04:	4b1c      	ldr	r3, [pc, #112]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023a06:	2200      	movs	r2, #0
 8023a08:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8023a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023a0c:	2204      	movs	r2, #4
 8023a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8023a10:	4b19      	ldr	r3, [pc, #100]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023a12:	2200      	movs	r2, #0
 8023a14:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 1;
 8023a16:	4b18      	ldr	r3, [pc, #96]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023a18:	2201      	movs	r2, #1
 8023a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8023a1c:	4b16      	ldr	r3, [pc, #88]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023a1e:	2201      	movs	r2, #1
 8023a20:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8023a22:	4b15      	ldr	r3, [pc, #84]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023a24:	2200      	movs	r2, #0
 8023a26:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8023a28:	4b13      	ldr	r3, [pc, #76]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023a2a:	2204      	movs	r2, #4
 8023a2c:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8023a2e:	4812      	ldr	r0, [pc, #72]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023a30:	f000 fe94 	bl	802475c <HAL_FDCAN_Init>
 8023a34:	4603      	mov	r3, r0
 8023a36:	2b00      	cmp	r3, #0
 8023a38:	d001      	beq.n	8023a3e <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8023a3a:	f000 f909 	bl	8023c50 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  sFilterConfig2.IdType = FDCAN_STANDARD_ID;
 8023a3e:	2300      	movs	r3, #0
 8023a40:	603b      	str	r3, [r7, #0]
  sFilterConfig2.FilterIndex = 0;
 8023a42:	2300      	movs	r3, #0
 8023a44:	607b      	str	r3, [r7, #4]
  sFilterConfig2.FilterType = FDCAN_FILTER_MASK;
 8023a46:	2302      	movs	r3, #2
 8023a48:	60bb      	str	r3, [r7, #8]
  sFilterConfig2.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8023a4a:	2302      	movs	r3, #2
 8023a4c:	60fb      	str	r3, [r7, #12]
  sFilterConfig2.FilterID1 = 0x111;
 8023a4e:	f240 1311 	movw	r3, #273	@ 0x111
 8023a52:	613b      	str	r3, [r7, #16]
  sFilterConfig2.FilterID2 = 0x7FF;
 8023a54:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8023a58:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig2) != HAL_OK) {
 8023a5a:	463b      	mov	r3, r7
 8023a5c:	4619      	mov	r1, r3
 8023a5e:	4806      	ldr	r0, [pc, #24]	@ (8023a78 <MX_FDCAN2_Init+0xf8>)
 8023a60:	f001 f85a 	bl	8024b18 <HAL_FDCAN_ConfigFilter>
 8023a64:	4603      	mov	r3, r0
 8023a66:	2b00      	cmp	r3, #0
 8023a68:	d002      	beq.n	8023a70 <MX_FDCAN2_Init+0xf0>
	  printmsg("Filter config has not been configured successfully.!!!");
 8023a6a:	4805      	ldr	r0, [pc, #20]	@ (8023a80 <MX_FDCAN2_Init+0x100>)
 8023a6c:	f000 f8a4 	bl	8023bb8 <printmsg>
  }

  /* USER CODE END FDCAN2_Init 2 */

}
 8023a70:	bf00      	nop
 8023a72:	3720      	adds	r7, #32
 8023a74:	46bd      	mov	sp, r7
 8023a76:	bd80      	pop	{r7, pc}
 8023a78:	240003c8 	.word	0x240003c8
 8023a7c:	4000a400 	.word	0x4000a400
 8023a80:	0802aaec 	.word	0x0802aaec

08023a84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8023a84:	b580      	push	{r7, lr}
 8023a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8023a88:	4b22      	ldr	r3, [pc, #136]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023a8a:	4a23      	ldr	r2, [pc, #140]	@ (8023b18 <MX_USART3_UART_Init+0x94>)
 8023a8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8023a8e:	4b21      	ldr	r3, [pc, #132]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8023a94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8023a96:	4b1f      	ldr	r3, [pc, #124]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023a98:	2200      	movs	r2, #0
 8023a9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8023a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023a9e:	2200      	movs	r2, #0
 8023aa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8023aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023aa4:	2200      	movs	r2, #0
 8023aa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8023aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023aaa:	220c      	movs	r2, #12
 8023aac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8023aae:	4b19      	ldr	r3, [pc, #100]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023ab0:	2200      	movs	r2, #0
 8023ab2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8023ab4:	4b17      	ldr	r3, [pc, #92]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023ab6:	2200      	movs	r2, #0
 8023ab8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8023aba:	4b16      	ldr	r3, [pc, #88]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023abc:	2200      	movs	r2, #0
 8023abe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8023ac0:	4b14      	ldr	r3, [pc, #80]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023ac2:	2200      	movs	r2, #0
 8023ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8023ac6:	4b13      	ldr	r3, [pc, #76]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023ac8:	2200      	movs	r2, #0
 8023aca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8023acc:	4811      	ldr	r0, [pc, #68]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023ace:	f005 f875 	bl	8028bbc <HAL_UART_Init>
 8023ad2:	4603      	mov	r3, r0
 8023ad4:	2b00      	cmp	r3, #0
 8023ad6:	d001      	beq.n	8023adc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8023ad8:	f000 f8ba 	bl	8023c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8023adc:	2100      	movs	r1, #0
 8023ade:	480d      	ldr	r0, [pc, #52]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023ae0:	f006 f9d3 	bl	8029e8a <HAL_UARTEx_SetTxFifoThreshold>
 8023ae4:	4603      	mov	r3, r0
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	d001      	beq.n	8023aee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8023aea:	f000 f8b1 	bl	8023c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8023aee:	2100      	movs	r1, #0
 8023af0:	4808      	ldr	r0, [pc, #32]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023af2:	f006 fa08 	bl	8029f06 <HAL_UARTEx_SetRxFifoThreshold>
 8023af6:	4603      	mov	r3, r0
 8023af8:	2b00      	cmp	r3, #0
 8023afa:	d001      	beq.n	8023b00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8023afc:	f000 f8a8 	bl	8023c50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8023b00:	4804      	ldr	r0, [pc, #16]	@ (8023b14 <MX_USART3_UART_Init+0x90>)
 8023b02:	f006 f989 	bl	8029e18 <HAL_UARTEx_DisableFifoMode>
 8023b06:	4603      	mov	r3, r0
 8023b08:	2b00      	cmp	r3, #0
 8023b0a:	d001      	beq.n	8023b10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8023b0c:	f000 f8a0 	bl	8023c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8023b10:	bf00      	nop
 8023b12:	bd80      	pop	{r7, pc}
 8023b14:	24000270 	.word	0x24000270
 8023b18:	40004800 	.word	0x40004800

08023b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8023b1c:	b580      	push	{r7, lr}
 8023b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART2;
 8023b20:	4b22      	ldr	r3, [pc, #136]	@ (8023bac <MX_USART2_UART_Init+0x90>)
 8023b22:	4a23      	ldr	r2, [pc, #140]	@ (8023bb0 <MX_USART2_UART_Init+0x94>)
 8023b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8023b26:	4b21      	ldr	r3, [pc, #132]	@ (8023bac <MX_USART2_UART_Init+0x90>)
 8023b28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8023b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8023b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8023bac <MX_USART2_UART_Init+0x90>)
 8023b30:	2200      	movs	r2, #0
 8023b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8023b34:	4b1d      	ldr	r3, [pc, #116]	@ (8023bac <MX_USART2_UART_Init+0x90>)
 8023b36:	2200      	movs	r2, #0
 8023b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8023b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8023bac <MX_USART2_UART_Init+0x90>)
 8023b3c:	2200      	movs	r2, #0
 8023b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8023b40:	4b1a      	ldr	r3, [pc, #104]	@ (8023bac <MX_USART2_UART_Init+0x90>)
 8023b42:	220c      	movs	r2, #12
 8023b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8023b46:	4b19      	ldr	r3, [pc, #100]	@ (8023bac <MX_USART2_UART_Init+0x90>)
 8023b48:	2200      	movs	r2, #0
 8023b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8023b4c:	4b17      	ldr	r3, [pc, #92]	@ (8023bac <MX_USART2_UART_Init+0x90>)
 8023b4e:	2200      	movs	r2, #0
 8023b50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8023b52:	4b16      	ldr	r3, [pc, #88]	@ (8023bac <MX_USART2_UART_Init+0x90>)
 8023b54:	2200      	movs	r2, #0
 8023b56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8023b58:	4b14      	ldr	r3, [pc, #80]	@ (8023bac <MX_USART2_UART_Init+0x90>)
 8023b5a:	2200      	movs	r2, #0
 8023b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8023b5e:	4b13      	ldr	r3, [pc, #76]	@ (8023bac <MX_USART2_UART_Init+0x90>)
 8023b60:	2200      	movs	r2, #0
 8023b62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8023b64:	4813      	ldr	r0, [pc, #76]	@ (8023bb4 <MX_USART2_UART_Init+0x98>)
 8023b66:	f005 f829 	bl	8028bbc <HAL_UART_Init>
 8023b6a:	4603      	mov	r3, r0
 8023b6c:	2b00      	cmp	r3, #0
 8023b6e:	d001      	beq.n	8023b74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8023b70:	f000 f86e 	bl	8023c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8023b74:	2100      	movs	r1, #0
 8023b76:	480f      	ldr	r0, [pc, #60]	@ (8023bb4 <MX_USART2_UART_Init+0x98>)
 8023b78:	f006 f987 	bl	8029e8a <HAL_UARTEx_SetTxFifoThreshold>
 8023b7c:	4603      	mov	r3, r0
 8023b7e:	2b00      	cmp	r3, #0
 8023b80:	d001      	beq.n	8023b86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8023b82:	f000 f865 	bl	8023c50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8023b86:	2100      	movs	r1, #0
 8023b88:	480a      	ldr	r0, [pc, #40]	@ (8023bb4 <MX_USART2_UART_Init+0x98>)
 8023b8a:	f006 f9bc 	bl	8029f06 <HAL_UARTEx_SetRxFifoThreshold>
 8023b8e:	4603      	mov	r3, r0
 8023b90:	2b00      	cmp	r3, #0
 8023b92:	d001      	beq.n	8023b98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8023b94:	f000 f85c 	bl	8023c50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8023b98:	4806      	ldr	r0, [pc, #24]	@ (8023bb4 <MX_USART2_UART_Init+0x98>)
 8023b9a:	f006 f93d 	bl	8029e18 <HAL_UARTEx_DisableFifoMode>
 8023b9e:	4603      	mov	r3, r0
 8023ba0:	2b00      	cmp	r3, #0
 8023ba2:	d001      	beq.n	8023ba8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8023ba4:	f000 f854 	bl	8023c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8023ba8:	bf00      	nop
 8023baa:	bd80      	pop	{r7, pc}
 8023bac:	24000270 	.word	0x24000270
 8023bb0:	40004400 	.word	0x40004400
 8023bb4:	240001dc 	.word	0x240001dc

08023bb8 <printmsg>:
/* USER CODE BEGIN 4 */
void printmsg(char *format, ...) {
 8023bb8:	b40f      	push	{r0, r1, r2, r3}
 8023bba:	b580      	push	{r7, lr}
 8023bbc:	b09a      	sub	sp, #104	@ 0x68
 8023bbe:	af00      	add	r7, sp, #0
  char str[100];
  va_list args;
  va_start(args, format);
 8023bc0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8023bc4:	603b      	str	r3, [r7, #0]
  vsprintf(str, format, args);
 8023bc6:	1d3b      	adds	r3, r7, #4
 8023bc8:	683a      	ldr	r2, [r7, #0]
 8023bca:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8023bcc:	4618      	mov	r0, r3
 8023bce:	f006 fa3d 	bl	802a04c <vsiprintf>
  HAL_UART_Transmit(D_UART, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8023bd2:	1d3b      	adds	r3, r7, #4
 8023bd4:	4618      	mov	r0, r3
 8023bd6:	f7ff f840 	bl	8022c5a <strlen>
 8023bda:	4603      	mov	r3, r0
 8023bdc:	b29a      	uxth	r2, r3
 8023bde:	1d39      	adds	r1, r7, #4
 8023be0:	f04f 33ff 	mov.w	r3, #4294967295
 8023be4:	4804      	ldr	r0, [pc, #16]	@ (8023bf8 <printmsg+0x40>)
 8023be6:	f005 f839 	bl	8028c5c <HAL_UART_Transmit>
  va_end(args);
}
 8023bea:	bf00      	nop
 8023bec:	3768      	adds	r7, #104	@ 0x68
 8023bee:	46bd      	mov	sp, r7
 8023bf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8023bf4:	b004      	add	sp, #16
 8023bf6:	4770      	bx	lr
 8023bf8:	24000270 	.word	0x24000270

08023bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8023bfc:	b480      	push	{r7}
 8023bfe:	b083      	sub	sp, #12
 8023c00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023c02:	4b12      	ldr	r3, [pc, #72]	@ (8023c4c <MX_GPIO_Init+0x50>)
 8023c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023c08:	4a10      	ldr	r2, [pc, #64]	@ (8023c4c <MX_GPIO_Init+0x50>)
 8023c0a:	f043 0302 	orr.w	r3, r3, #2
 8023c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8023c12:	4b0e      	ldr	r3, [pc, #56]	@ (8023c4c <MX_GPIO_Init+0x50>)
 8023c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023c18:	f003 0302 	and.w	r3, r3, #2
 8023c1c:	607b      	str	r3, [r7, #4]
 8023c1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c20:	4b0a      	ldr	r3, [pc, #40]	@ (8023c4c <MX_GPIO_Init+0x50>)
 8023c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023c26:	4a09      	ldr	r2, [pc, #36]	@ (8023c4c <MX_GPIO_Init+0x50>)
 8023c28:	f043 0301 	orr.w	r3, r3, #1
 8023c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8023c30:	4b06      	ldr	r3, [pc, #24]	@ (8023c4c <MX_GPIO_Init+0x50>)
 8023c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023c36:	f003 0301 	and.w	r3, r3, #1
 8023c3a:	603b      	str	r3, [r7, #0]
 8023c3c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8023c3e:	bf00      	nop
 8023c40:	370c      	adds	r7, #12
 8023c42:	46bd      	mov	sp, r7
 8023c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c48:	4770      	bx	lr
 8023c4a:	bf00      	nop
 8023c4c:	58024400 	.word	0x58024400

08023c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023c50:	b580      	push	{r7, lr}
 8023c52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8023c54:	b672      	cpsid	i
}
 8023c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printmsg("Inside the error handler\n");
 8023c58:	4801      	ldr	r0, [pc, #4]	@ (8023c60 <Error_Handler+0x10>)
 8023c5a:	f7ff ffad 	bl	8023bb8 <printmsg>
 8023c5e:	e7fb      	b.n	8023c58 <Error_Handler+0x8>
 8023c60:	0802ab24 	.word	0x0802ab24

08023c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8023c64:	b480      	push	{r7}
 8023c66:	b083      	sub	sp, #12
 8023c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8023c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8023c94 <HAL_MspInit+0x30>)
 8023c6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8023c70:	4a08      	ldr	r2, [pc, #32]	@ (8023c94 <HAL_MspInit+0x30>)
 8023c72:	f043 0302 	orr.w	r3, r3, #2
 8023c76:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8023c7a:	4b06      	ldr	r3, [pc, #24]	@ (8023c94 <HAL_MspInit+0x30>)
 8023c7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8023c80:	f003 0302 	and.w	r3, r3, #2
 8023c84:	607b      	str	r3, [r7, #4]
 8023c86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8023c88:	bf00      	nop
 8023c8a:	370c      	adds	r7, #12
 8023c8c:	46bd      	mov	sp, r7
 8023c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c92:	4770      	bx	lr
 8023c94:	58024400 	.word	0x58024400

08023c98 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8023c98:	b480      	push	{r7}
 8023c9a:	b085      	sub	sp, #20
 8023c9c:	af00      	add	r7, sp, #0
 8023c9e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8023ca0:	687b      	ldr	r3, [r7, #4]
 8023ca2:	681b      	ldr	r3, [r3, #0]
 8023ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8023cd4 <HAL_CRC_MspInit+0x3c>)
 8023ca6:	4293      	cmp	r3, r2
 8023ca8:	d10e      	bne.n	8023cc8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8023caa:	4b0b      	ldr	r3, [pc, #44]	@ (8023cd8 <HAL_CRC_MspInit+0x40>)
 8023cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023cb0:	4a09      	ldr	r2, [pc, #36]	@ (8023cd8 <HAL_CRC_MspInit+0x40>)
 8023cb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8023cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8023cba:	4b07      	ldr	r3, [pc, #28]	@ (8023cd8 <HAL_CRC_MspInit+0x40>)
 8023cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8023cc4:	60fb      	str	r3, [r7, #12]
 8023cc6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8023cc8:	bf00      	nop
 8023cca:	3714      	adds	r7, #20
 8023ccc:	46bd      	mov	sp, r7
 8023cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cd2:	4770      	bx	lr
 8023cd4:	58024c00 	.word	0x58024c00
 8023cd8:	58024400 	.word	0x58024400

08023cdc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8023cdc:	b580      	push	{r7, lr}
 8023cde:	b0bc      	sub	sp, #240	@ 0xf0
 8023ce0:	af00      	add	r7, sp, #0
 8023ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023ce4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8023ce8:	2200      	movs	r2, #0
 8023cea:	601a      	str	r2, [r3, #0]
 8023cec:	605a      	str	r2, [r3, #4]
 8023cee:	609a      	str	r2, [r3, #8]
 8023cf0:	60da      	str	r2, [r3, #12]
 8023cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8023cf4:	f107 0318 	add.w	r3, r7, #24
 8023cf8:	22c0      	movs	r2, #192	@ 0xc0
 8023cfa:	2100      	movs	r1, #0
 8023cfc:	4618      	mov	r0, r3
 8023cfe:	f006 f9af 	bl	802a060 <memset>
  if(hfdcan->Instance==FDCAN1)
 8023d02:	687b      	ldr	r3, [r7, #4]
 8023d04:	681b      	ldr	r3, [r3, #0]
 8023d06:	4a5f      	ldr	r2, [pc, #380]	@ (8023e84 <HAL_FDCAN_MspInit+0x1a8>)
 8023d08:	4293      	cmp	r3, r2
 8023d0a:	d161      	bne.n	8023dd0 <HAL_FDCAN_MspInit+0xf4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8023d0c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8023d10:	f04f 0300 	mov.w	r3, #0
 8023d14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8023d18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8023d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8023d20:	f107 0318 	add.w	r3, r7, #24
 8023d24:	4618      	mov	r0, r3
 8023d26:	f003 f91d 	bl	8026f64 <HAL_RCCEx_PeriphCLKConfig>
 8023d2a:	4603      	mov	r3, r0
 8023d2c:	2b00      	cmp	r3, #0
 8023d2e:	d001      	beq.n	8023d34 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8023d30:	f7ff ff8e 	bl	8023c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8023d34:	4b54      	ldr	r3, [pc, #336]	@ (8023e88 <HAL_FDCAN_MspInit+0x1ac>)
 8023d36:	681b      	ldr	r3, [r3, #0]
 8023d38:	3301      	adds	r3, #1
 8023d3a:	4a53      	ldr	r2, [pc, #332]	@ (8023e88 <HAL_FDCAN_MspInit+0x1ac>)
 8023d3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8023d3e:	4b52      	ldr	r3, [pc, #328]	@ (8023e88 <HAL_FDCAN_MspInit+0x1ac>)
 8023d40:	681b      	ldr	r3, [r3, #0]
 8023d42:	2b01      	cmp	r3, #1
 8023d44:	d10e      	bne.n	8023d64 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8023d46:	4b51      	ldr	r3, [pc, #324]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023d48:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8023d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8023d52:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8023d56:	4b4d      	ldr	r3, [pc, #308]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023d58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8023d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8023d60:	617b      	str	r3, [r7, #20]
 8023d62:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023d64:	4b49      	ldr	r3, [pc, #292]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023d6a:	4a48      	ldr	r2, [pc, #288]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023d6c:	f043 0301 	orr.w	r3, r3, #1
 8023d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8023d74:	4b45      	ldr	r3, [pc, #276]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023d7a:	f003 0301 	and.w	r3, r3, #1
 8023d7e:	613b      	str	r3, [r7, #16]
 8023d80:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8023d82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8023d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023d8a:	2302      	movs	r3, #2
 8023d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023d90:	2300      	movs	r3, #0
 8023d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023d96:	2300      	movs	r3, #0
 8023d98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8023d9c:	2309      	movs	r3, #9
 8023d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023da2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8023da6:	4619      	mov	r1, r3
 8023da8:	4839      	ldr	r0, [pc, #228]	@ (8023e90 <HAL_FDCAN_MspInit+0x1b4>)
 8023daa:	f001 feb7 	bl	8025b1c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8023dae:	2200      	movs	r2, #0
 8023db0:	2100      	movs	r1, #0
 8023db2:	2013      	movs	r0, #19
 8023db4:	f000 fbab 	bl	802450e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8023db8:	2013      	movs	r0, #19
 8023dba:	f000 fbc2 	bl	8024542 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8023dbe:	2200      	movs	r2, #0
 8023dc0:	2100      	movs	r1, #0
 8023dc2:	2015      	movs	r0, #21
 8023dc4:	f000 fba3 	bl	802450e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8023dc8:	2015      	movs	r0, #21
 8023dca:	f000 fbba 	bl	8024542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8023dce:	e055      	b.n	8023e7c <HAL_FDCAN_MspInit+0x1a0>
  else if(hfdcan->Instance==FDCAN2)
 8023dd0:	687b      	ldr	r3, [r7, #4]
 8023dd2:	681b      	ldr	r3, [r3, #0]
 8023dd4:	4a2f      	ldr	r2, [pc, #188]	@ (8023e94 <HAL_FDCAN_MspInit+0x1b8>)
 8023dd6:	4293      	cmp	r3, r2
 8023dd8:	d150      	bne.n	8023e7c <HAL_FDCAN_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8023dda:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8023dde:	f04f 0300 	mov.w	r3, #0
 8023de2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8023de6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8023dea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8023dee:	f107 0318 	add.w	r3, r7, #24
 8023df2:	4618      	mov	r0, r3
 8023df4:	f003 f8b6 	bl	8026f64 <HAL_RCCEx_PeriphCLKConfig>
 8023df8:	4603      	mov	r3, r0
 8023dfa:	2b00      	cmp	r3, #0
 8023dfc:	d001      	beq.n	8023e02 <HAL_FDCAN_MspInit+0x126>
      Error_Handler();
 8023dfe:	f7ff ff27 	bl	8023c50 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8023e02:	4b21      	ldr	r3, [pc, #132]	@ (8023e88 <HAL_FDCAN_MspInit+0x1ac>)
 8023e04:	681b      	ldr	r3, [r3, #0]
 8023e06:	3301      	adds	r3, #1
 8023e08:	4a1f      	ldr	r2, [pc, #124]	@ (8023e88 <HAL_FDCAN_MspInit+0x1ac>)
 8023e0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8023e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8023e88 <HAL_FDCAN_MspInit+0x1ac>)
 8023e0e:	681b      	ldr	r3, [r3, #0]
 8023e10:	2b01      	cmp	r3, #1
 8023e12:	d10e      	bne.n	8023e32 <HAL_FDCAN_MspInit+0x156>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8023e14:	4b1d      	ldr	r3, [pc, #116]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023e16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8023e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8023e20:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8023e24:	4b19      	ldr	r3, [pc, #100]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023e26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8023e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8023e2e:	60fb      	str	r3, [r7, #12]
 8023e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023e32:	4b16      	ldr	r3, [pc, #88]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023e38:	4a14      	ldr	r2, [pc, #80]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023e3a:	f043 0302 	orr.w	r3, r3, #2
 8023e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8023e42:	4b12      	ldr	r3, [pc, #72]	@ (8023e8c <HAL_FDCAN_MspInit+0x1b0>)
 8023e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023e48:	f003 0302 	and.w	r3, r3, #2
 8023e4c:	60bb      	str	r3, [r7, #8]
 8023e4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8023e50:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8023e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023e58:	2302      	movs	r3, #2
 8023e5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023e5e:	2300      	movs	r3, #0
 8023e60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023e64:	2300      	movs	r3, #0
 8023e66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8023e6a:	2309      	movs	r3, #9
 8023e6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023e70:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8023e74:	4619      	mov	r1, r3
 8023e76:	4808      	ldr	r0, [pc, #32]	@ (8023e98 <HAL_FDCAN_MspInit+0x1bc>)
 8023e78:	f001 fe50 	bl	8025b1c <HAL_GPIO_Init>
}
 8023e7c:	bf00      	nop
 8023e7e:	37f0      	adds	r7, #240	@ 0xf0
 8023e80:	46bd      	mov	sp, r7
 8023e82:	bd80      	pop	{r7, pc}
 8023e84:	4000a000 	.word	0x4000a000
 8023e88:	24000468 	.word	0x24000468
 8023e8c:	58024400 	.word	0x58024400
 8023e90:	58020000 	.word	0x58020000
 8023e94:	4000a400 	.word	0x4000a400
 8023e98:	58020400 	.word	0x58020400

08023e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8023e9c:	b580      	push	{r7, lr}
 8023e9e:	b0ba      	sub	sp, #232	@ 0xe8
 8023ea0:	af00      	add	r7, sp, #0
 8023ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023ea4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8023ea8:	2200      	movs	r2, #0
 8023eaa:	601a      	str	r2, [r3, #0]
 8023eac:	605a      	str	r2, [r3, #4]
 8023eae:	609a      	str	r2, [r3, #8]
 8023eb0:	60da      	str	r2, [r3, #12]
 8023eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8023eb4:	f107 0310 	add.w	r3, r7, #16
 8023eb8:	22c0      	movs	r2, #192	@ 0xc0
 8023eba:	2100      	movs	r1, #0
 8023ebc:	4618      	mov	r0, r3
 8023ebe:	f006 f8cf 	bl	802a060 <memset>
  if(huart->Instance==USART3)
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	681b      	ldr	r3, [r3, #0]
 8023ec6:	4a27      	ldr	r2, [pc, #156]	@ (8023f64 <HAL_UART_MspInit+0xc8>)
 8023ec8:	4293      	cmp	r3, r2
 8023eca:	d146      	bne.n	8023f5a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8023ecc:	f04f 0202 	mov.w	r2, #2
 8023ed0:	f04f 0300 	mov.w	r3, #0
 8023ed4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8023ed8:	2300      	movs	r3, #0
 8023eda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8023ede:	f107 0310 	add.w	r3, r7, #16
 8023ee2:	4618      	mov	r0, r3
 8023ee4:	f003 f83e 	bl	8026f64 <HAL_RCCEx_PeriphCLKConfig>
 8023ee8:	4603      	mov	r3, r0
 8023eea:	2b00      	cmp	r3, #0
 8023eec:	d001      	beq.n	8023ef2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8023eee:	f7ff feaf 	bl	8023c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8023ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8023f68 <HAL_UART_MspInit+0xcc>)
 8023ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8023ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8023f68 <HAL_UART_MspInit+0xcc>)
 8023efa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8023efe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8023f02:	4b19      	ldr	r3, [pc, #100]	@ (8023f68 <HAL_UART_MspInit+0xcc>)
 8023f04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8023f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8023f0c:	60fb      	str	r3, [r7, #12]
 8023f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023f10:	4b15      	ldr	r3, [pc, #84]	@ (8023f68 <HAL_UART_MspInit+0xcc>)
 8023f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023f16:	4a14      	ldr	r2, [pc, #80]	@ (8023f68 <HAL_UART_MspInit+0xcc>)
 8023f18:	f043 0302 	orr.w	r3, r3, #2
 8023f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8023f20:	4b11      	ldr	r3, [pc, #68]	@ (8023f68 <HAL_UART_MspInit+0xcc>)
 8023f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8023f26:	f003 0302 	and.w	r3, r3, #2
 8023f2a:	60bb      	str	r3, [r7, #8]
 8023f2c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8023f2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8023f32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023f36:	2302      	movs	r3, #2
 8023f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023f3c:	2300      	movs	r3, #0
 8023f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023f42:	2300      	movs	r3, #0
 8023f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8023f48:	2307      	movs	r3, #7
 8023f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023f4e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8023f52:	4619      	mov	r1, r3
 8023f54:	4805      	ldr	r0, [pc, #20]	@ (8023f6c <HAL_UART_MspInit+0xd0>)
 8023f56:	f001 fde1 	bl	8025b1c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8023f5a:	bf00      	nop
 8023f5c:	37e8      	adds	r7, #232	@ 0xe8
 8023f5e:	46bd      	mov	sp, r7
 8023f60:	bd80      	pop	{r7, pc}
 8023f62:	bf00      	nop
 8023f64:	40004800 	.word	0x40004800
 8023f68:	58024400 	.word	0x58024400
 8023f6c:	58020400 	.word	0x58020400

08023f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8023f70:	b480      	push	{r7}
 8023f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8023f74:	bf00      	nop
 8023f76:	e7fd      	b.n	8023f74 <NMI_Handler+0x4>

08023f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8023f78:	b480      	push	{r7}
 8023f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8023f7c:	bf00      	nop
 8023f7e:	e7fd      	b.n	8023f7c <HardFault_Handler+0x4>

08023f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8023f80:	b480      	push	{r7}
 8023f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8023f84:	bf00      	nop
 8023f86:	e7fd      	b.n	8023f84 <MemManage_Handler+0x4>

08023f88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8023f88:	b480      	push	{r7}
 8023f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8023f8c:	bf00      	nop
 8023f8e:	e7fd      	b.n	8023f8c <BusFault_Handler+0x4>

08023f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8023f90:	b480      	push	{r7}
 8023f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8023f94:	bf00      	nop
 8023f96:	e7fd      	b.n	8023f94 <UsageFault_Handler+0x4>

08023f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8023f98:	b480      	push	{r7}
 8023f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8023f9c:	bf00      	nop
 8023f9e:	46bd      	mov	sp, r7
 8023fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fa4:	4770      	bx	lr

08023fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8023fa6:	b480      	push	{r7}
 8023fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8023faa:	bf00      	nop
 8023fac:	46bd      	mov	sp, r7
 8023fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fb2:	4770      	bx	lr

08023fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8023fb4:	b480      	push	{r7}
 8023fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8023fb8:	bf00      	nop
 8023fba:	46bd      	mov	sp, r7
 8023fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fc0:	4770      	bx	lr

08023fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8023fc2:	b580      	push	{r7, lr}
 8023fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8023fc6:	f000 f99b 	bl	8024300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8023fca:	bf00      	nop
 8023fcc:	bd80      	pop	{r7, pc}
	...

08023fd0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8023fd0:	b580      	push	{r7, lr}
 8023fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8023fd4:	4802      	ldr	r0, [pc, #8]	@ (8023fe0 <FDCAN1_IT0_IRQHandler+0x10>)
 8023fd6:	f000 fe15 	bl	8024c04 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8023fda:	bf00      	nop
 8023fdc:	bd80      	pop	{r7, pc}
 8023fde:	bf00      	nop
 8023fe0:	24000328 	.word	0x24000328

08023fe4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8023fe4:	b580      	push	{r7, lr}
 8023fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8023fe8:	4802      	ldr	r0, [pc, #8]	@ (8023ff4 <FDCAN1_IT1_IRQHandler+0x10>)
 8023fea:	f000 fe0b 	bl	8024c04 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8023fee:	bf00      	nop
 8023ff0:	bd80      	pop	{r7, pc}
 8023ff2:	bf00      	nop
 8023ff4:	24000328 	.word	0x24000328

08023ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8023ff8:	b580      	push	{r7, lr}
 8023ffa:	b086      	sub	sp, #24
 8023ffc:	af00      	add	r7, sp, #0
 8023ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8024000:	4a14      	ldr	r2, [pc, #80]	@ (8024054 <_sbrk+0x5c>)
 8024002:	4b15      	ldr	r3, [pc, #84]	@ (8024058 <_sbrk+0x60>)
 8024004:	1ad3      	subs	r3, r2, r3
 8024006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8024008:	697b      	ldr	r3, [r7, #20]
 802400a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802400c:	4b13      	ldr	r3, [pc, #76]	@ (802405c <_sbrk+0x64>)
 802400e:	681b      	ldr	r3, [r3, #0]
 8024010:	2b00      	cmp	r3, #0
 8024012:	d102      	bne.n	802401a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8024014:	4b11      	ldr	r3, [pc, #68]	@ (802405c <_sbrk+0x64>)
 8024016:	4a12      	ldr	r2, [pc, #72]	@ (8024060 <_sbrk+0x68>)
 8024018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802401a:	4b10      	ldr	r3, [pc, #64]	@ (802405c <_sbrk+0x64>)
 802401c:	681a      	ldr	r2, [r3, #0]
 802401e:	687b      	ldr	r3, [r7, #4]
 8024020:	4413      	add	r3, r2
 8024022:	693a      	ldr	r2, [r7, #16]
 8024024:	429a      	cmp	r2, r3
 8024026:	d207      	bcs.n	8024038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8024028:	f006 f822 	bl	802a070 <__errno>
 802402c:	4603      	mov	r3, r0
 802402e:	220c      	movs	r2, #12
 8024030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8024032:	f04f 33ff 	mov.w	r3, #4294967295
 8024036:	e009      	b.n	802404c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8024038:	4b08      	ldr	r3, [pc, #32]	@ (802405c <_sbrk+0x64>)
 802403a:	681b      	ldr	r3, [r3, #0]
 802403c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802403e:	4b07      	ldr	r3, [pc, #28]	@ (802405c <_sbrk+0x64>)
 8024040:	681a      	ldr	r2, [r3, #0]
 8024042:	687b      	ldr	r3, [r7, #4]
 8024044:	4413      	add	r3, r2
 8024046:	4a05      	ldr	r2, [pc, #20]	@ (802405c <_sbrk+0x64>)
 8024048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802404a:	68fb      	ldr	r3, [r7, #12]
}
 802404c:	4618      	mov	r0, r3
 802404e:	3718      	adds	r7, #24
 8024050:	46bd      	mov	sp, r7
 8024052:	bd80      	pop	{r7, pc}
 8024054:	24080000 	.word	0x24080000
 8024058:	00000400 	.word	0x00000400
 802405c:	2400046c 	.word	0x2400046c
 8024060:	240005d8 	.word	0x240005d8

08024064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8024064:	f8df d04c 	ldr.w	sp, [pc, #76]	@ 80240b4 <LoopCopyITCMInit+0x10>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8024068:	f7ff f81a 	bl	80230a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802406c:	4812      	ldr	r0, [pc, #72]	@ (80240b8 <LoopCopyITCMInit+0x14>)
  ldr r1, =_edata
 802406e:	4913      	ldr	r1, [pc, #76]	@ (80240bc <LoopCopyITCMInit+0x18>)
  ldr r2, =_sidata
 8024070:	4a13      	ldr	r2, [pc, #76]	@ (80240c0 <LoopCopyITCMInit+0x1c>)
  movs r3, #0
 8024072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8024074:	e002      	b.n	802407c <LoopCopyDataInit>

08024076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8024076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8024078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802407a:	3304      	adds	r3, #4

0802407c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802407c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802407e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8024080:	d3f9      	bcc.n	8024076 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8024082:	4a10      	ldr	r2, [pc, #64]	@ (80240c4 <LoopCopyITCMInit+0x20>)
  ldr r4, =_ebss
 8024084:	4c10      	ldr	r4, [pc, #64]	@ (80240c8 <LoopCopyITCMInit+0x24>)
  movs r3, #0
 8024086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8024088:	e001      	b.n	802408e <LoopFillZerobss>

0802408a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802408a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802408c:	3204      	adds	r2, #4

0802408e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802408e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8024090:	d3fb      	bcc.n	802408a <FillZerobss>


/* Copy the ITCM code segment initializers from Flash to ITCM RAM */
  ldr r0, =_itcm_start         /* Load the address of the start of ITCM RAM */
 8024092:	480e      	ldr	r0, [pc, #56]	@ (80240cc <LoopCopyITCMInit+0x28>)
  ldr r1, =_itcm_end           /* Load the address of the end of ITCM RAM */
 8024094:	490e      	ldr	r1, [pc, #56]	@ (80240d0 <LoopCopyITCMInit+0x2c>)
  ldr r2, =_sitcm_code_in_flash /* Load the address of the ITCM code in Flash */
 8024096:	4a0f      	ldr	r2, [pc, #60]	@ (80240d4 <LoopCopyITCMInit+0x30>)
  movs r3, #0                  /* Initialize offset to 0 */
 8024098:	2300      	movs	r3, #0
  b LoopCopyITCMInit
 802409a:	e003      	b.n	80240a4 <LoopCopyITCMInit>

0802409c <CopyITCMInit>:

CopyITCMInit:
  ldr r4, [r2, r3]             /* Load a 32-bit word from Flash */
 802409c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]             /* Store the 32-bit word to ITCM RAM */
 802409e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4              /* Increment the offset by 4 bytes (32 bits) */
 80240a0:	3304      	adds	r3, #4
  b LoopCopyITCMInit
 80240a2:	e7ff      	b.n	80240a4 <LoopCopyITCMInit>

080240a4 <LoopCopyITCMInit>:

LoopCopyITCMInit:
  adds r4, r0, r3              /* Calculate the current address in ITCM */
 80240a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1                   /* Compare current address with the end address */
 80240a6:	428c      	cmp	r4, r1
  bcc CopyITCMInit             /* If current address < end address, continue copying */
 80240a8:	d3f8      	bcc.n	802409c <CopyITCMInit>

  /* ITCM copying complete, continue with the rest of the initialization */
/* Call static constructors */
    bl __libc_init_array
 80240aa:	f005 ffe7 	bl	802a07c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80240ae:	f7ff fb41 	bl	8023734 <main>
  bx  lr
 80240b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80240b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80240b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80240bc:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80240c0:	0802b3d0 	.word	0x0802b3d0
  ldr r2, =_sbss
 80240c4:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 80240c8:	240005d8 	.word	0x240005d8
  ldr r0, =_itcm_start         /* Load the address of the start of ITCM RAM */
 80240cc:	00000000 	.word	0x00000000
  ldr r1, =_itcm_end           /* Load the address of the end of ITCM RAM */
 80240d0:	00000098 	.word	0x00000098
  ldr r2, =_sitcm_code_in_flash /* Load the address of the ITCM code in Flash */
 80240d4:	0802b454 	.word	0x0802b454

080240d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80240d8:	e7fe      	b.n	80240d8 <ADC3_IRQHandler>
	...

080240dc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80240dc:	b580      	push	{r7, lr}
 80240de:	b08c      	sub	sp, #48	@ 0x30
 80240e0:	af00      	add	r7, sp, #0
 80240e2:	4603      	mov	r3, r0
 80240e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80240e6:	2300      	movs	r3, #0
 80240e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80240ea:	79fb      	ldrb	r3, [r7, #7]
 80240ec:	2b00      	cmp	r3, #0
 80240ee:	d009      	beq.n	8024104 <BSP_LED_Init+0x28>
 80240f0:	79fb      	ldrb	r3, [r7, #7]
 80240f2:	2b01      	cmp	r3, #1
 80240f4:	d006      	beq.n	8024104 <BSP_LED_Init+0x28>
 80240f6:	79fb      	ldrb	r3, [r7, #7]
 80240f8:	2b02      	cmp	r3, #2
 80240fa:	d003      	beq.n	8024104 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80240fc:	f06f 0301 	mvn.w	r3, #1
 8024100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024102:	e055      	b.n	80241b0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8024104:	79fb      	ldrb	r3, [r7, #7]
 8024106:	2b00      	cmp	r3, #0
 8024108:	d10f      	bne.n	802412a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 802410a:	4b2c      	ldr	r3, [pc, #176]	@ (80241bc <BSP_LED_Init+0xe0>)
 802410c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8024110:	4a2a      	ldr	r2, [pc, #168]	@ (80241bc <BSP_LED_Init+0xe0>)
 8024112:	f043 0302 	orr.w	r3, r3, #2
 8024116:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 802411a:	4b28      	ldr	r3, [pc, #160]	@ (80241bc <BSP_LED_Init+0xe0>)
 802411c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8024120:	f003 0302 	and.w	r3, r3, #2
 8024124:	617b      	str	r3, [r7, #20]
 8024126:	697b      	ldr	r3, [r7, #20]
 8024128:	e021      	b.n	802416e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 802412a:	79fb      	ldrb	r3, [r7, #7]
 802412c:	2b01      	cmp	r3, #1
 802412e:	d10f      	bne.n	8024150 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8024130:	4b22      	ldr	r3, [pc, #136]	@ (80241bc <BSP_LED_Init+0xe0>)
 8024132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8024136:	4a21      	ldr	r2, [pc, #132]	@ (80241bc <BSP_LED_Init+0xe0>)
 8024138:	f043 0310 	orr.w	r3, r3, #16
 802413c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8024140:	4b1e      	ldr	r3, [pc, #120]	@ (80241bc <BSP_LED_Init+0xe0>)
 8024142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8024146:	f003 0310 	and.w	r3, r3, #16
 802414a:	613b      	str	r3, [r7, #16]
 802414c:	693b      	ldr	r3, [r7, #16]
 802414e:	e00e      	b.n	802416e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8024150:	4b1a      	ldr	r3, [pc, #104]	@ (80241bc <BSP_LED_Init+0xe0>)
 8024152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8024156:	4a19      	ldr	r2, [pc, #100]	@ (80241bc <BSP_LED_Init+0xe0>)
 8024158:	f043 0302 	orr.w	r3, r3, #2
 802415c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8024160:	4b16      	ldr	r3, [pc, #88]	@ (80241bc <BSP_LED_Init+0xe0>)
 8024162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8024166:	f003 0302 	and.w	r3, r3, #2
 802416a:	60fb      	str	r3, [r7, #12]
 802416c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 802416e:	79fb      	ldrb	r3, [r7, #7]
 8024170:	4a13      	ldr	r2, [pc, #76]	@ (80241c0 <BSP_LED_Init+0xe4>)
 8024172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024176:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8024178:	2301      	movs	r3, #1
 802417a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 802417c:	2300      	movs	r3, #0
 802417e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024180:	2303      	movs	r3, #3
 8024182:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8024184:	79fb      	ldrb	r3, [r7, #7]
 8024186:	4a0f      	ldr	r2, [pc, #60]	@ (80241c4 <BSP_LED_Init+0xe8>)
 8024188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802418c:	f107 0218 	add.w	r2, r7, #24
 8024190:	4611      	mov	r1, r2
 8024192:	4618      	mov	r0, r3
 8024194:	f001 fcc2 	bl	8025b1c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8024198:	79fb      	ldrb	r3, [r7, #7]
 802419a:	4a0a      	ldr	r2, [pc, #40]	@ (80241c4 <BSP_LED_Init+0xe8>)
 802419c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80241a0:	79fb      	ldrb	r3, [r7, #7]
 80241a2:	4a07      	ldr	r2, [pc, #28]	@ (80241c0 <BSP_LED_Init+0xe4>)
 80241a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80241a8:	2200      	movs	r2, #0
 80241aa:	4619      	mov	r1, r3
 80241ac:	f001 fe66 	bl	8025e7c <HAL_GPIO_WritePin>
  }

  return ret;
 80241b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80241b2:	4618      	mov	r0, r3
 80241b4:	3730      	adds	r7, #48	@ 0x30
 80241b6:	46bd      	mov	sp, r7
 80241b8:	bd80      	pop	{r7, pc}
 80241ba:	bf00      	nop
 80241bc:	58024400 	.word	0x58024400
 80241c0:	0802ae5c 	.word	0x0802ae5c
 80241c4:	24000020 	.word	0x24000020

080241c8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80241c8:	b580      	push	{r7, lr}
 80241ca:	b084      	sub	sp, #16
 80241cc:	af00      	add	r7, sp, #0
 80241ce:	4603      	mov	r3, r0
 80241d0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80241d2:	2300      	movs	r3, #0
 80241d4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80241d6:	79fb      	ldrb	r3, [r7, #7]
 80241d8:	2b00      	cmp	r3, #0
 80241da:	d009      	beq.n	80241f0 <BSP_LED_Toggle+0x28>
 80241dc:	79fb      	ldrb	r3, [r7, #7]
 80241de:	2b01      	cmp	r3, #1
 80241e0:	d006      	beq.n	80241f0 <BSP_LED_Toggle+0x28>
 80241e2:	79fb      	ldrb	r3, [r7, #7]
 80241e4:	2b02      	cmp	r3, #2
 80241e6:	d003      	beq.n	80241f0 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80241e8:	f06f 0301 	mvn.w	r3, #1
 80241ec:	60fb      	str	r3, [r7, #12]
 80241ee:	e00b      	b.n	8024208 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80241f0:	79fb      	ldrb	r3, [r7, #7]
 80241f2:	4a08      	ldr	r2, [pc, #32]	@ (8024214 <BSP_LED_Toggle+0x4c>)
 80241f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80241f8:	79fb      	ldrb	r3, [r7, #7]
 80241fa:	4907      	ldr	r1, [pc, #28]	@ (8024218 <BSP_LED_Toggle+0x50>)
 80241fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8024200:	4619      	mov	r1, r3
 8024202:	4610      	mov	r0, r2
 8024204:	f001 fe53 	bl	8025eae <HAL_GPIO_TogglePin>
  }

  return ret;
 8024208:	68fb      	ldr	r3, [r7, #12]
}
 802420a:	4618      	mov	r0, r3
 802420c:	3710      	adds	r7, #16
 802420e:	46bd      	mov	sp, r7
 8024210:	bd80      	pop	{r7, pc}
 8024212:	bf00      	nop
 8024214:	24000020 	.word	0x24000020
 8024218:	0802ae5c 	.word	0x0802ae5c

0802421c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802421c:	b580      	push	{r7, lr}
 802421e:	b082      	sub	sp, #8
 8024220:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8024222:	2003      	movs	r0, #3
 8024224:	f000 f968 	bl	80244f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8024228:	f002 fcc6 	bl	8026bb8 <HAL_RCC_GetSysClockFreq>
 802422c:	4602      	mov	r2, r0
 802422e:	4b15      	ldr	r3, [pc, #84]	@ (8024284 <HAL_Init+0x68>)
 8024230:	699b      	ldr	r3, [r3, #24]
 8024232:	0a1b      	lsrs	r3, r3, #8
 8024234:	f003 030f 	and.w	r3, r3, #15
 8024238:	4913      	ldr	r1, [pc, #76]	@ (8024288 <HAL_Init+0x6c>)
 802423a:	5ccb      	ldrb	r3, [r1, r3]
 802423c:	f003 031f 	and.w	r3, r3, #31
 8024240:	fa22 f303 	lsr.w	r3, r2, r3
 8024244:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8024246:	4b0f      	ldr	r3, [pc, #60]	@ (8024284 <HAL_Init+0x68>)
 8024248:	699b      	ldr	r3, [r3, #24]
 802424a:	f003 030f 	and.w	r3, r3, #15
 802424e:	4a0e      	ldr	r2, [pc, #56]	@ (8024288 <HAL_Init+0x6c>)
 8024250:	5cd3      	ldrb	r3, [r2, r3]
 8024252:	f003 031f 	and.w	r3, r3, #31
 8024256:	687a      	ldr	r2, [r7, #4]
 8024258:	fa22 f303 	lsr.w	r3, r2, r3
 802425c:	4a0b      	ldr	r2, [pc, #44]	@ (802428c <HAL_Init+0x70>)
 802425e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8024260:	4a0b      	ldr	r2, [pc, #44]	@ (8024290 <HAL_Init+0x74>)
 8024262:	687b      	ldr	r3, [r7, #4]
 8024264:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8024266:	2000      	movs	r0, #0
 8024268:	f000 f814 	bl	8024294 <HAL_InitTick>
 802426c:	4603      	mov	r3, r0
 802426e:	2b00      	cmp	r3, #0
 8024270:	d001      	beq.n	8024276 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8024272:	2301      	movs	r3, #1
 8024274:	e002      	b.n	802427c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8024276:	f7ff fcf5 	bl	8023c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802427a:	2300      	movs	r3, #0
}
 802427c:	4618      	mov	r0, r3
 802427e:	3708      	adds	r7, #8
 8024280:	46bd      	mov	sp, r7
 8024282:	bd80      	pop	{r7, pc}
 8024284:	58024400 	.word	0x58024400
 8024288:	0802ad48 	.word	0x0802ad48
 802428c:	24000008 	.word	0x24000008
 8024290:	24000004 	.word	0x24000004

08024294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8024294:	b580      	push	{r7, lr}
 8024296:	b082      	sub	sp, #8
 8024298:	af00      	add	r7, sp, #0
 802429a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802429c:	4b15      	ldr	r3, [pc, #84]	@ (80242f4 <HAL_InitTick+0x60>)
 802429e:	781b      	ldrb	r3, [r3, #0]
 80242a0:	2b00      	cmp	r3, #0
 80242a2:	d101      	bne.n	80242a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80242a4:	2301      	movs	r3, #1
 80242a6:	e021      	b.n	80242ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80242a8:	4b13      	ldr	r3, [pc, #76]	@ (80242f8 <HAL_InitTick+0x64>)
 80242aa:	681a      	ldr	r2, [r3, #0]
 80242ac:	4b11      	ldr	r3, [pc, #68]	@ (80242f4 <HAL_InitTick+0x60>)
 80242ae:	781b      	ldrb	r3, [r3, #0]
 80242b0:	4619      	mov	r1, r3
 80242b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80242b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80242ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80242be:	4618      	mov	r0, r3
 80242c0:	f000 f94d 	bl	802455e <HAL_SYSTICK_Config>
 80242c4:	4603      	mov	r3, r0
 80242c6:	2b00      	cmp	r3, #0
 80242c8:	d001      	beq.n	80242ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80242ca:	2301      	movs	r3, #1
 80242cc:	e00e      	b.n	80242ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80242ce:	687b      	ldr	r3, [r7, #4]
 80242d0:	2b0f      	cmp	r3, #15
 80242d2:	d80a      	bhi.n	80242ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80242d4:	2200      	movs	r2, #0
 80242d6:	6879      	ldr	r1, [r7, #4]
 80242d8:	f04f 30ff 	mov.w	r0, #4294967295
 80242dc:	f000 f917 	bl	802450e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80242e0:	4a06      	ldr	r2, [pc, #24]	@ (80242fc <HAL_InitTick+0x68>)
 80242e2:	687b      	ldr	r3, [r7, #4]
 80242e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80242e6:	2300      	movs	r3, #0
 80242e8:	e000      	b.n	80242ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80242ea:	2301      	movs	r3, #1
}
 80242ec:	4618      	mov	r0, r3
 80242ee:	3708      	adds	r7, #8
 80242f0:	46bd      	mov	sp, r7
 80242f2:	bd80      	pop	{r7, pc}
 80242f4:	24000030 	.word	0x24000030
 80242f8:	24000004 	.word	0x24000004
 80242fc:	2400002c 	.word	0x2400002c

08024300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8024300:	b480      	push	{r7}
 8024302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8024304:	4b06      	ldr	r3, [pc, #24]	@ (8024320 <HAL_IncTick+0x20>)
 8024306:	781b      	ldrb	r3, [r3, #0]
 8024308:	461a      	mov	r2, r3
 802430a:	4b06      	ldr	r3, [pc, #24]	@ (8024324 <HAL_IncTick+0x24>)
 802430c:	681b      	ldr	r3, [r3, #0]
 802430e:	4413      	add	r3, r2
 8024310:	4a04      	ldr	r2, [pc, #16]	@ (8024324 <HAL_IncTick+0x24>)
 8024312:	6013      	str	r3, [r2, #0]
}
 8024314:	bf00      	nop
 8024316:	46bd      	mov	sp, r7
 8024318:	f85d 7b04 	ldr.w	r7, [sp], #4
 802431c:	4770      	bx	lr
 802431e:	bf00      	nop
 8024320:	24000030 	.word	0x24000030
 8024324:	24000470 	.word	0x24000470

08024328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8024328:	b480      	push	{r7}
 802432a:	af00      	add	r7, sp, #0
  return uwTick;
 802432c:	4b03      	ldr	r3, [pc, #12]	@ (802433c <HAL_GetTick+0x14>)
 802432e:	681b      	ldr	r3, [r3, #0]
}
 8024330:	4618      	mov	r0, r3
 8024332:	46bd      	mov	sp, r7
 8024334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024338:	4770      	bx	lr
 802433a:	bf00      	nop
 802433c:	24000470 	.word	0x24000470

08024340 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8024340:	b480      	push	{r7}
 8024342:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8024344:	4b03      	ldr	r3, [pc, #12]	@ (8024354 <HAL_GetREVID+0x14>)
 8024346:	681b      	ldr	r3, [r3, #0]
 8024348:	0c1b      	lsrs	r3, r3, #16
}
 802434a:	4618      	mov	r0, r3
 802434c:	46bd      	mov	sp, r7
 802434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024352:	4770      	bx	lr
 8024354:	5c001000 	.word	0x5c001000

08024358 <__NVIC_SetPriorityGrouping>:
{
 8024358:	b480      	push	{r7}
 802435a:	b085      	sub	sp, #20
 802435c:	af00      	add	r7, sp, #0
 802435e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8024360:	687b      	ldr	r3, [r7, #4]
 8024362:	f003 0307 	and.w	r3, r3, #7
 8024366:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8024368:	4b0b      	ldr	r3, [pc, #44]	@ (8024398 <__NVIC_SetPriorityGrouping+0x40>)
 802436a:	68db      	ldr	r3, [r3, #12]
 802436c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802436e:	68ba      	ldr	r2, [r7, #8]
 8024370:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8024374:	4013      	ands	r3, r2
 8024376:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8024378:	68fb      	ldr	r3, [r7, #12]
 802437a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802437c:	68bb      	ldr	r3, [r7, #8]
 802437e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8024380:	4b06      	ldr	r3, [pc, #24]	@ (802439c <__NVIC_SetPriorityGrouping+0x44>)
 8024382:	4313      	orrs	r3, r2
 8024384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8024386:	4a04      	ldr	r2, [pc, #16]	@ (8024398 <__NVIC_SetPriorityGrouping+0x40>)
 8024388:	68bb      	ldr	r3, [r7, #8]
 802438a:	60d3      	str	r3, [r2, #12]
}
 802438c:	bf00      	nop
 802438e:	3714      	adds	r7, #20
 8024390:	46bd      	mov	sp, r7
 8024392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024396:	4770      	bx	lr
 8024398:	e000ed00 	.word	0xe000ed00
 802439c:	05fa0000 	.word	0x05fa0000

080243a0 <__NVIC_GetPriorityGrouping>:
{
 80243a0:	b480      	push	{r7}
 80243a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80243a4:	4b04      	ldr	r3, [pc, #16]	@ (80243b8 <__NVIC_GetPriorityGrouping+0x18>)
 80243a6:	68db      	ldr	r3, [r3, #12]
 80243a8:	0a1b      	lsrs	r3, r3, #8
 80243aa:	f003 0307 	and.w	r3, r3, #7
}
 80243ae:	4618      	mov	r0, r3
 80243b0:	46bd      	mov	sp, r7
 80243b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243b6:	4770      	bx	lr
 80243b8:	e000ed00 	.word	0xe000ed00

080243bc <__NVIC_EnableIRQ>:
{
 80243bc:	b480      	push	{r7}
 80243be:	b083      	sub	sp, #12
 80243c0:	af00      	add	r7, sp, #0
 80243c2:	4603      	mov	r3, r0
 80243c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80243c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80243ca:	2b00      	cmp	r3, #0
 80243cc:	db0b      	blt.n	80243e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80243ce:	88fb      	ldrh	r3, [r7, #6]
 80243d0:	f003 021f 	and.w	r2, r3, #31
 80243d4:	4907      	ldr	r1, [pc, #28]	@ (80243f4 <__NVIC_EnableIRQ+0x38>)
 80243d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80243da:	095b      	lsrs	r3, r3, #5
 80243dc:	2001      	movs	r0, #1
 80243de:	fa00 f202 	lsl.w	r2, r0, r2
 80243e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80243e6:	bf00      	nop
 80243e8:	370c      	adds	r7, #12
 80243ea:	46bd      	mov	sp, r7
 80243ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243f0:	4770      	bx	lr
 80243f2:	bf00      	nop
 80243f4:	e000e100 	.word	0xe000e100

080243f8 <__NVIC_SetPriority>:
{
 80243f8:	b480      	push	{r7}
 80243fa:	b083      	sub	sp, #12
 80243fc:	af00      	add	r7, sp, #0
 80243fe:	4603      	mov	r3, r0
 8024400:	6039      	str	r1, [r7, #0]
 8024402:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8024404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8024408:	2b00      	cmp	r3, #0
 802440a:	db0a      	blt.n	8024422 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802440c:	683b      	ldr	r3, [r7, #0]
 802440e:	b2da      	uxtb	r2, r3
 8024410:	490c      	ldr	r1, [pc, #48]	@ (8024444 <__NVIC_SetPriority+0x4c>)
 8024412:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8024416:	0112      	lsls	r2, r2, #4
 8024418:	b2d2      	uxtb	r2, r2
 802441a:	440b      	add	r3, r1
 802441c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8024420:	e00a      	b.n	8024438 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024422:	683b      	ldr	r3, [r7, #0]
 8024424:	b2da      	uxtb	r2, r3
 8024426:	4908      	ldr	r1, [pc, #32]	@ (8024448 <__NVIC_SetPriority+0x50>)
 8024428:	88fb      	ldrh	r3, [r7, #6]
 802442a:	f003 030f 	and.w	r3, r3, #15
 802442e:	3b04      	subs	r3, #4
 8024430:	0112      	lsls	r2, r2, #4
 8024432:	b2d2      	uxtb	r2, r2
 8024434:	440b      	add	r3, r1
 8024436:	761a      	strb	r2, [r3, #24]
}
 8024438:	bf00      	nop
 802443a:	370c      	adds	r7, #12
 802443c:	46bd      	mov	sp, r7
 802443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024442:	4770      	bx	lr
 8024444:	e000e100 	.word	0xe000e100
 8024448:	e000ed00 	.word	0xe000ed00

0802444c <NVIC_EncodePriority>:
{
 802444c:	b480      	push	{r7}
 802444e:	b089      	sub	sp, #36	@ 0x24
 8024450:	af00      	add	r7, sp, #0
 8024452:	60f8      	str	r0, [r7, #12]
 8024454:	60b9      	str	r1, [r7, #8]
 8024456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8024458:	68fb      	ldr	r3, [r7, #12]
 802445a:	f003 0307 	and.w	r3, r3, #7
 802445e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8024460:	69fb      	ldr	r3, [r7, #28]
 8024462:	f1c3 0307 	rsb	r3, r3, #7
 8024466:	2b04      	cmp	r3, #4
 8024468:	bf28      	it	cs
 802446a:	2304      	movcs	r3, #4
 802446c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802446e:	69fb      	ldr	r3, [r7, #28]
 8024470:	3304      	adds	r3, #4
 8024472:	2b06      	cmp	r3, #6
 8024474:	d902      	bls.n	802447c <NVIC_EncodePriority+0x30>
 8024476:	69fb      	ldr	r3, [r7, #28]
 8024478:	3b03      	subs	r3, #3
 802447a:	e000      	b.n	802447e <NVIC_EncodePriority+0x32>
 802447c:	2300      	movs	r3, #0
 802447e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8024480:	f04f 32ff 	mov.w	r2, #4294967295
 8024484:	69bb      	ldr	r3, [r7, #24]
 8024486:	fa02 f303 	lsl.w	r3, r2, r3
 802448a:	43da      	mvns	r2, r3
 802448c:	68bb      	ldr	r3, [r7, #8]
 802448e:	401a      	ands	r2, r3
 8024490:	697b      	ldr	r3, [r7, #20]
 8024492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8024494:	f04f 31ff 	mov.w	r1, #4294967295
 8024498:	697b      	ldr	r3, [r7, #20]
 802449a:	fa01 f303 	lsl.w	r3, r1, r3
 802449e:	43d9      	mvns	r1, r3
 80244a0:	687b      	ldr	r3, [r7, #4]
 80244a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80244a4:	4313      	orrs	r3, r2
}
 80244a6:	4618      	mov	r0, r3
 80244a8:	3724      	adds	r7, #36	@ 0x24
 80244aa:	46bd      	mov	sp, r7
 80244ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244b0:	4770      	bx	lr
	...

080244b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80244b4:	b580      	push	{r7, lr}
 80244b6:	b082      	sub	sp, #8
 80244b8:	af00      	add	r7, sp, #0
 80244ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80244bc:	687b      	ldr	r3, [r7, #4]
 80244be:	3b01      	subs	r3, #1
 80244c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80244c4:	d301      	bcc.n	80244ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80244c6:	2301      	movs	r3, #1
 80244c8:	e00f      	b.n	80244ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80244ca:	4a0a      	ldr	r2, [pc, #40]	@ (80244f4 <SysTick_Config+0x40>)
 80244cc:	687b      	ldr	r3, [r7, #4]
 80244ce:	3b01      	subs	r3, #1
 80244d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80244d2:	210f      	movs	r1, #15
 80244d4:	f04f 30ff 	mov.w	r0, #4294967295
 80244d8:	f7ff ff8e 	bl	80243f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80244dc:	4b05      	ldr	r3, [pc, #20]	@ (80244f4 <SysTick_Config+0x40>)
 80244de:	2200      	movs	r2, #0
 80244e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80244e2:	4b04      	ldr	r3, [pc, #16]	@ (80244f4 <SysTick_Config+0x40>)
 80244e4:	2207      	movs	r2, #7
 80244e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80244e8:	2300      	movs	r3, #0
}
 80244ea:	4618      	mov	r0, r3
 80244ec:	3708      	adds	r7, #8
 80244ee:	46bd      	mov	sp, r7
 80244f0:	bd80      	pop	{r7, pc}
 80244f2:	bf00      	nop
 80244f4:	e000e010 	.word	0xe000e010

080244f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80244f8:	b580      	push	{r7, lr}
 80244fa:	b082      	sub	sp, #8
 80244fc:	af00      	add	r7, sp, #0
 80244fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8024500:	6878      	ldr	r0, [r7, #4]
 8024502:	f7ff ff29 	bl	8024358 <__NVIC_SetPriorityGrouping>
}
 8024506:	bf00      	nop
 8024508:	3708      	adds	r7, #8
 802450a:	46bd      	mov	sp, r7
 802450c:	bd80      	pop	{r7, pc}

0802450e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802450e:	b580      	push	{r7, lr}
 8024510:	b086      	sub	sp, #24
 8024512:	af00      	add	r7, sp, #0
 8024514:	4603      	mov	r3, r0
 8024516:	60b9      	str	r1, [r7, #8]
 8024518:	607a      	str	r2, [r7, #4]
 802451a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802451c:	f7ff ff40 	bl	80243a0 <__NVIC_GetPriorityGrouping>
 8024520:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8024522:	687a      	ldr	r2, [r7, #4]
 8024524:	68b9      	ldr	r1, [r7, #8]
 8024526:	6978      	ldr	r0, [r7, #20]
 8024528:	f7ff ff90 	bl	802444c <NVIC_EncodePriority>
 802452c:	4602      	mov	r2, r0
 802452e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8024532:	4611      	mov	r1, r2
 8024534:	4618      	mov	r0, r3
 8024536:	f7ff ff5f 	bl	80243f8 <__NVIC_SetPriority>
}
 802453a:	bf00      	nop
 802453c:	3718      	adds	r7, #24
 802453e:	46bd      	mov	sp, r7
 8024540:	bd80      	pop	{r7, pc}

08024542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8024542:	b580      	push	{r7, lr}
 8024544:	b082      	sub	sp, #8
 8024546:	af00      	add	r7, sp, #0
 8024548:	4603      	mov	r3, r0
 802454a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802454c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8024550:	4618      	mov	r0, r3
 8024552:	f7ff ff33 	bl	80243bc <__NVIC_EnableIRQ>
}
 8024556:	bf00      	nop
 8024558:	3708      	adds	r7, #8
 802455a:	46bd      	mov	sp, r7
 802455c:	bd80      	pop	{r7, pc}

0802455e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802455e:	b580      	push	{r7, lr}
 8024560:	b082      	sub	sp, #8
 8024562:	af00      	add	r7, sp, #0
 8024564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8024566:	6878      	ldr	r0, [r7, #4]
 8024568:	f7ff ffa4 	bl	80244b4 <SysTick_Config>
 802456c:	4603      	mov	r3, r0
}
 802456e:	4618      	mov	r0, r3
 8024570:	3708      	adds	r7, #8
 8024572:	46bd      	mov	sp, r7
 8024574:	bd80      	pop	{r7, pc}
	...

08024578 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8024578:	b580      	push	{r7, lr}
 802457a:	b082      	sub	sp, #8
 802457c:	af00      	add	r7, sp, #0
 802457e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8024580:	687b      	ldr	r3, [r7, #4]
 8024582:	2b00      	cmp	r3, #0
 8024584:	d101      	bne.n	802458a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8024586:	2301      	movs	r3, #1
 8024588:	e054      	b.n	8024634 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 802458a:	687b      	ldr	r3, [r7, #4]
 802458c:	7f5b      	ldrb	r3, [r3, #29]
 802458e:	b2db      	uxtb	r3, r3
 8024590:	2b00      	cmp	r3, #0
 8024592:	d105      	bne.n	80245a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8024594:	687b      	ldr	r3, [r7, #4]
 8024596:	2200      	movs	r2, #0
 8024598:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 802459a:	6878      	ldr	r0, [r7, #4]
 802459c:	f7ff fb7c 	bl	8023c98 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80245a0:	687b      	ldr	r3, [r7, #4]
 80245a2:	2202      	movs	r2, #2
 80245a4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80245a6:	687b      	ldr	r3, [r7, #4]
 80245a8:	791b      	ldrb	r3, [r3, #4]
 80245aa:	2b00      	cmp	r3, #0
 80245ac:	d10c      	bne.n	80245c8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80245ae:	687b      	ldr	r3, [r7, #4]
 80245b0:	681b      	ldr	r3, [r3, #0]
 80245b2:	4a22      	ldr	r2, [pc, #136]	@ (802463c <HAL_CRC_Init+0xc4>)
 80245b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80245b6:	687b      	ldr	r3, [r7, #4]
 80245b8:	681b      	ldr	r3, [r3, #0]
 80245ba:	689a      	ldr	r2, [r3, #8]
 80245bc:	687b      	ldr	r3, [r7, #4]
 80245be:	681b      	ldr	r3, [r3, #0]
 80245c0:	f022 0218 	bic.w	r2, r2, #24
 80245c4:	609a      	str	r2, [r3, #8]
 80245c6:	e00c      	b.n	80245e2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80245c8:	687b      	ldr	r3, [r7, #4]
 80245ca:	6899      	ldr	r1, [r3, #8]
 80245cc:	687b      	ldr	r3, [r7, #4]
 80245ce:	68db      	ldr	r3, [r3, #12]
 80245d0:	461a      	mov	r2, r3
 80245d2:	6878      	ldr	r0, [r7, #4]
 80245d4:	f000 f834 	bl	8024640 <HAL_CRCEx_Polynomial_Set>
 80245d8:	4603      	mov	r3, r0
 80245da:	2b00      	cmp	r3, #0
 80245dc:	d001      	beq.n	80245e2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80245de:	2301      	movs	r3, #1
 80245e0:	e028      	b.n	8024634 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80245e2:	687b      	ldr	r3, [r7, #4]
 80245e4:	795b      	ldrb	r3, [r3, #5]
 80245e6:	2b00      	cmp	r3, #0
 80245e8:	d105      	bne.n	80245f6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80245ea:	687b      	ldr	r3, [r7, #4]
 80245ec:	681b      	ldr	r3, [r3, #0]
 80245ee:	f04f 32ff 	mov.w	r2, #4294967295
 80245f2:	611a      	str	r2, [r3, #16]
 80245f4:	e004      	b.n	8024600 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80245f6:	687b      	ldr	r3, [r7, #4]
 80245f8:	681b      	ldr	r3, [r3, #0]
 80245fa:	687a      	ldr	r2, [r7, #4]
 80245fc:	6912      	ldr	r2, [r2, #16]
 80245fe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8024600:	687b      	ldr	r3, [r7, #4]
 8024602:	681b      	ldr	r3, [r3, #0]
 8024604:	689b      	ldr	r3, [r3, #8]
 8024606:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 802460a:	687b      	ldr	r3, [r7, #4]
 802460c:	695a      	ldr	r2, [r3, #20]
 802460e:	687b      	ldr	r3, [r7, #4]
 8024610:	681b      	ldr	r3, [r3, #0]
 8024612:	430a      	orrs	r2, r1
 8024614:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8024616:	687b      	ldr	r3, [r7, #4]
 8024618:	681b      	ldr	r3, [r3, #0]
 802461a:	689b      	ldr	r3, [r3, #8]
 802461c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8024620:	687b      	ldr	r3, [r7, #4]
 8024622:	699a      	ldr	r2, [r3, #24]
 8024624:	687b      	ldr	r3, [r7, #4]
 8024626:	681b      	ldr	r3, [r3, #0]
 8024628:	430a      	orrs	r2, r1
 802462a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 802462c:	687b      	ldr	r3, [r7, #4]
 802462e:	2201      	movs	r2, #1
 8024630:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8024632:	2300      	movs	r3, #0
}
 8024634:	4618      	mov	r0, r3
 8024636:	3708      	adds	r7, #8
 8024638:	46bd      	mov	sp, r7
 802463a:	bd80      	pop	{r7, pc}
 802463c:	04c11db7 	.word	0x04c11db7

08024640 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8024640:	b480      	push	{r7}
 8024642:	b087      	sub	sp, #28
 8024644:	af00      	add	r7, sp, #0
 8024646:	60f8      	str	r0, [r7, #12]
 8024648:	60b9      	str	r1, [r7, #8]
 802464a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802464c:	2300      	movs	r3, #0
 802464e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8024650:	231f      	movs	r3, #31
 8024652:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8024654:	68bb      	ldr	r3, [r7, #8]
 8024656:	f003 0301 	and.w	r3, r3, #1
 802465a:	2b00      	cmp	r3, #0
 802465c:	d102      	bne.n	8024664 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 802465e:	2301      	movs	r3, #1
 8024660:	75fb      	strb	r3, [r7, #23]
 8024662:	e063      	b.n	802472c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8024664:	bf00      	nop
 8024666:	693b      	ldr	r3, [r7, #16]
 8024668:	1e5a      	subs	r2, r3, #1
 802466a:	613a      	str	r2, [r7, #16]
 802466c:	2b00      	cmp	r3, #0
 802466e:	d009      	beq.n	8024684 <HAL_CRCEx_Polynomial_Set+0x44>
 8024670:	693b      	ldr	r3, [r7, #16]
 8024672:	f003 031f 	and.w	r3, r3, #31
 8024676:	68ba      	ldr	r2, [r7, #8]
 8024678:	fa22 f303 	lsr.w	r3, r2, r3
 802467c:	f003 0301 	and.w	r3, r3, #1
 8024680:	2b00      	cmp	r3, #0
 8024682:	d0f0      	beq.n	8024666 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8024684:	687b      	ldr	r3, [r7, #4]
 8024686:	2b18      	cmp	r3, #24
 8024688:	d846      	bhi.n	8024718 <HAL_CRCEx_Polynomial_Set+0xd8>
 802468a:	a201      	add	r2, pc, #4	@ (adr r2, 8024690 <HAL_CRCEx_Polynomial_Set+0x50>)
 802468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024690:	0802471f 	.word	0x0802471f
 8024694:	08024719 	.word	0x08024719
 8024698:	08024719 	.word	0x08024719
 802469c:	08024719 	.word	0x08024719
 80246a0:	08024719 	.word	0x08024719
 80246a4:	08024719 	.word	0x08024719
 80246a8:	08024719 	.word	0x08024719
 80246ac:	08024719 	.word	0x08024719
 80246b0:	0802470d 	.word	0x0802470d
 80246b4:	08024719 	.word	0x08024719
 80246b8:	08024719 	.word	0x08024719
 80246bc:	08024719 	.word	0x08024719
 80246c0:	08024719 	.word	0x08024719
 80246c4:	08024719 	.word	0x08024719
 80246c8:	08024719 	.word	0x08024719
 80246cc:	08024719 	.word	0x08024719
 80246d0:	08024701 	.word	0x08024701
 80246d4:	08024719 	.word	0x08024719
 80246d8:	08024719 	.word	0x08024719
 80246dc:	08024719 	.word	0x08024719
 80246e0:	08024719 	.word	0x08024719
 80246e4:	08024719 	.word	0x08024719
 80246e8:	08024719 	.word	0x08024719
 80246ec:	08024719 	.word	0x08024719
 80246f0:	080246f5 	.word	0x080246f5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80246f4:	693b      	ldr	r3, [r7, #16]
 80246f6:	2b06      	cmp	r3, #6
 80246f8:	d913      	bls.n	8024722 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80246fa:	2301      	movs	r3, #1
 80246fc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80246fe:	e010      	b.n	8024722 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8024700:	693b      	ldr	r3, [r7, #16]
 8024702:	2b07      	cmp	r3, #7
 8024704:	d90f      	bls.n	8024726 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8024706:	2301      	movs	r3, #1
 8024708:	75fb      	strb	r3, [r7, #23]
        }
        break;
 802470a:	e00c      	b.n	8024726 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 802470c:	693b      	ldr	r3, [r7, #16]
 802470e:	2b0f      	cmp	r3, #15
 8024710:	d90b      	bls.n	802472a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8024712:	2301      	movs	r3, #1
 8024714:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8024716:	e008      	b.n	802472a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8024718:	2301      	movs	r3, #1
 802471a:	75fb      	strb	r3, [r7, #23]
        break;
 802471c:	e006      	b.n	802472c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 802471e:	bf00      	nop
 8024720:	e004      	b.n	802472c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8024722:	bf00      	nop
 8024724:	e002      	b.n	802472c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8024726:	bf00      	nop
 8024728:	e000      	b.n	802472c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 802472a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 802472c:	7dfb      	ldrb	r3, [r7, #23]
 802472e:	2b00      	cmp	r3, #0
 8024730:	d10d      	bne.n	802474e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8024732:	68fb      	ldr	r3, [r7, #12]
 8024734:	681b      	ldr	r3, [r3, #0]
 8024736:	68ba      	ldr	r2, [r7, #8]
 8024738:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 802473a:	68fb      	ldr	r3, [r7, #12]
 802473c:	681b      	ldr	r3, [r3, #0]
 802473e:	689b      	ldr	r3, [r3, #8]
 8024740:	f023 0118 	bic.w	r1, r3, #24
 8024744:	68fb      	ldr	r3, [r7, #12]
 8024746:	681b      	ldr	r3, [r3, #0]
 8024748:	687a      	ldr	r2, [r7, #4]
 802474a:	430a      	orrs	r2, r1
 802474c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 802474e:	7dfb      	ldrb	r3, [r7, #23]
}
 8024750:	4618      	mov	r0, r3
 8024752:	371c      	adds	r7, #28
 8024754:	46bd      	mov	sp, r7
 8024756:	f85d 7b04 	ldr.w	r7, [sp], #4
 802475a:	4770      	bx	lr

0802475c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 802475c:	b580      	push	{r7, lr}
 802475e:	b098      	sub	sp, #96	@ 0x60
 8024760:	af00      	add	r7, sp, #0
 8024762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8024764:	4a84      	ldr	r2, [pc, #528]	@ (8024978 <HAL_FDCAN_Init+0x21c>)
 8024766:	f107 030c 	add.w	r3, r7, #12
 802476a:	4611      	mov	r1, r2
 802476c:	224c      	movs	r2, #76	@ 0x4c
 802476e:	4618      	mov	r0, r3
 8024770:	f005 fcaf 	bl	802a0d2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8024774:	687b      	ldr	r3, [r7, #4]
 8024776:	2b00      	cmp	r3, #0
 8024778:	d101      	bne.n	802477e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 802477a:	2301      	movs	r3, #1
 802477c:	e1c6      	b.n	8024b0c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 802477e:	687b      	ldr	r3, [r7, #4]
 8024780:	681b      	ldr	r3, [r3, #0]
 8024782:	4a7e      	ldr	r2, [pc, #504]	@ (802497c <HAL_FDCAN_Init+0x220>)
 8024784:	4293      	cmp	r3, r2
 8024786:	d106      	bne.n	8024796 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	681b      	ldr	r3, [r3, #0]
 802478c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8024790:	461a      	mov	r2, r3
 8024792:	687b      	ldr	r3, [r7, #4]
 8024794:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8024796:	687b      	ldr	r3, [r7, #4]
 8024798:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 802479c:	b2db      	uxtb	r3, r3
 802479e:	2b00      	cmp	r3, #0
 80247a0:	d106      	bne.n	80247b0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80247a2:	687b      	ldr	r3, [r7, #4]
 80247a4:	2200      	movs	r2, #0
 80247a6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80247aa:	6878      	ldr	r0, [r7, #4]
 80247ac:	f7ff fa96 	bl	8023cdc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80247b0:	687b      	ldr	r3, [r7, #4]
 80247b2:	681b      	ldr	r3, [r3, #0]
 80247b4:	699a      	ldr	r2, [r3, #24]
 80247b6:	687b      	ldr	r3, [r7, #4]
 80247b8:	681b      	ldr	r3, [r3, #0]
 80247ba:	f022 0210 	bic.w	r2, r2, #16
 80247be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80247c0:	f7ff fdb2 	bl	8024328 <HAL_GetTick>
 80247c4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80247c6:	e014      	b.n	80247f2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80247c8:	f7ff fdae 	bl	8024328 <HAL_GetTick>
 80247cc:	4602      	mov	r2, r0
 80247ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80247d0:	1ad3      	subs	r3, r2, r3
 80247d2:	2b0a      	cmp	r3, #10
 80247d4:	d90d      	bls.n	80247f2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80247d6:	687b      	ldr	r3, [r7, #4]
 80247d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80247dc:	f043 0201 	orr.w	r2, r3, #1
 80247e0:	687b      	ldr	r3, [r7, #4]
 80247e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80247e6:	687b      	ldr	r3, [r7, #4]
 80247e8:	2203      	movs	r2, #3
 80247ea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80247ee:	2301      	movs	r3, #1
 80247f0:	e18c      	b.n	8024b0c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80247f2:	687b      	ldr	r3, [r7, #4]
 80247f4:	681b      	ldr	r3, [r3, #0]
 80247f6:	699b      	ldr	r3, [r3, #24]
 80247f8:	f003 0308 	and.w	r3, r3, #8
 80247fc:	2b08      	cmp	r3, #8
 80247fe:	d0e3      	beq.n	80247c8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8024800:	687b      	ldr	r3, [r7, #4]
 8024802:	681b      	ldr	r3, [r3, #0]
 8024804:	699a      	ldr	r2, [r3, #24]
 8024806:	687b      	ldr	r3, [r7, #4]
 8024808:	681b      	ldr	r3, [r3, #0]
 802480a:	f042 0201 	orr.w	r2, r2, #1
 802480e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8024810:	f7ff fd8a 	bl	8024328 <HAL_GetTick>
 8024814:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8024816:	e014      	b.n	8024842 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8024818:	f7ff fd86 	bl	8024328 <HAL_GetTick>
 802481c:	4602      	mov	r2, r0
 802481e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8024820:	1ad3      	subs	r3, r2, r3
 8024822:	2b0a      	cmp	r3, #10
 8024824:	d90d      	bls.n	8024842 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8024826:	687b      	ldr	r3, [r7, #4]
 8024828:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 802482c:	f043 0201 	orr.w	r2, r3, #1
 8024830:	687b      	ldr	r3, [r7, #4]
 8024832:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8024836:	687b      	ldr	r3, [r7, #4]
 8024838:	2203      	movs	r2, #3
 802483a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 802483e:	2301      	movs	r3, #1
 8024840:	e164      	b.n	8024b0c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8024842:	687b      	ldr	r3, [r7, #4]
 8024844:	681b      	ldr	r3, [r3, #0]
 8024846:	699b      	ldr	r3, [r3, #24]
 8024848:	f003 0301 	and.w	r3, r3, #1
 802484c:	2b00      	cmp	r3, #0
 802484e:	d0e3      	beq.n	8024818 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8024850:	687b      	ldr	r3, [r7, #4]
 8024852:	681b      	ldr	r3, [r3, #0]
 8024854:	699a      	ldr	r2, [r3, #24]
 8024856:	687b      	ldr	r3, [r7, #4]
 8024858:	681b      	ldr	r3, [r3, #0]
 802485a:	f042 0202 	orr.w	r2, r2, #2
 802485e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8024860:	687b      	ldr	r3, [r7, #4]
 8024862:	7c1b      	ldrb	r3, [r3, #16]
 8024864:	2b01      	cmp	r3, #1
 8024866:	d108      	bne.n	802487a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8024868:	687b      	ldr	r3, [r7, #4]
 802486a:	681b      	ldr	r3, [r3, #0]
 802486c:	699a      	ldr	r2, [r3, #24]
 802486e:	687b      	ldr	r3, [r7, #4]
 8024870:	681b      	ldr	r3, [r3, #0]
 8024872:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8024876:	619a      	str	r2, [r3, #24]
 8024878:	e007      	b.n	802488a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	681b      	ldr	r3, [r3, #0]
 802487e:	699a      	ldr	r2, [r3, #24]
 8024880:	687b      	ldr	r3, [r7, #4]
 8024882:	681b      	ldr	r3, [r3, #0]
 8024884:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8024888:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 802488a:	687b      	ldr	r3, [r7, #4]
 802488c:	7c5b      	ldrb	r3, [r3, #17]
 802488e:	2b01      	cmp	r3, #1
 8024890:	d108      	bne.n	80248a4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8024892:	687b      	ldr	r3, [r7, #4]
 8024894:	681b      	ldr	r3, [r3, #0]
 8024896:	699a      	ldr	r2, [r3, #24]
 8024898:	687b      	ldr	r3, [r7, #4]
 802489a:	681b      	ldr	r3, [r3, #0]
 802489c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80248a0:	619a      	str	r2, [r3, #24]
 80248a2:	e007      	b.n	80248b4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	681b      	ldr	r3, [r3, #0]
 80248a8:	699a      	ldr	r2, [r3, #24]
 80248aa:	687b      	ldr	r3, [r7, #4]
 80248ac:	681b      	ldr	r3, [r3, #0]
 80248ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80248b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80248b4:	687b      	ldr	r3, [r7, #4]
 80248b6:	7c9b      	ldrb	r3, [r3, #18]
 80248b8:	2b01      	cmp	r3, #1
 80248ba:	d108      	bne.n	80248ce <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80248bc:	687b      	ldr	r3, [r7, #4]
 80248be:	681b      	ldr	r3, [r3, #0]
 80248c0:	699a      	ldr	r2, [r3, #24]
 80248c2:	687b      	ldr	r3, [r7, #4]
 80248c4:	681b      	ldr	r3, [r3, #0]
 80248c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80248ca:	619a      	str	r2, [r3, #24]
 80248cc:	e007      	b.n	80248de <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80248ce:	687b      	ldr	r3, [r7, #4]
 80248d0:	681b      	ldr	r3, [r3, #0]
 80248d2:	699a      	ldr	r2, [r3, #24]
 80248d4:	687b      	ldr	r3, [r7, #4]
 80248d6:	681b      	ldr	r3, [r3, #0]
 80248d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80248dc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80248de:	687b      	ldr	r3, [r7, #4]
 80248e0:	681b      	ldr	r3, [r3, #0]
 80248e2:	699b      	ldr	r3, [r3, #24]
 80248e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80248e8:	687b      	ldr	r3, [r7, #4]
 80248ea:	689a      	ldr	r2, [r3, #8]
 80248ec:	687b      	ldr	r3, [r7, #4]
 80248ee:	681b      	ldr	r3, [r3, #0]
 80248f0:	430a      	orrs	r2, r1
 80248f2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80248f4:	687b      	ldr	r3, [r7, #4]
 80248f6:	681b      	ldr	r3, [r3, #0]
 80248f8:	699a      	ldr	r2, [r3, #24]
 80248fa:	687b      	ldr	r3, [r7, #4]
 80248fc:	681b      	ldr	r3, [r3, #0]
 80248fe:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8024902:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8024904:	687b      	ldr	r3, [r7, #4]
 8024906:	681b      	ldr	r3, [r3, #0]
 8024908:	691a      	ldr	r2, [r3, #16]
 802490a:	687b      	ldr	r3, [r7, #4]
 802490c:	681b      	ldr	r3, [r3, #0]
 802490e:	f022 0210 	bic.w	r2, r2, #16
 8024912:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8024914:	687b      	ldr	r3, [r7, #4]
 8024916:	68db      	ldr	r3, [r3, #12]
 8024918:	2b01      	cmp	r3, #1
 802491a:	d108      	bne.n	802492e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 802491c:	687b      	ldr	r3, [r7, #4]
 802491e:	681b      	ldr	r3, [r3, #0]
 8024920:	699a      	ldr	r2, [r3, #24]
 8024922:	687b      	ldr	r3, [r7, #4]
 8024924:	681b      	ldr	r3, [r3, #0]
 8024926:	f042 0204 	orr.w	r2, r2, #4
 802492a:	619a      	str	r2, [r3, #24]
 802492c:	e030      	b.n	8024990 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 802492e:	687b      	ldr	r3, [r7, #4]
 8024930:	68db      	ldr	r3, [r3, #12]
 8024932:	2b00      	cmp	r3, #0
 8024934:	d02c      	beq.n	8024990 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8024936:	687b      	ldr	r3, [r7, #4]
 8024938:	68db      	ldr	r3, [r3, #12]
 802493a:	2b02      	cmp	r3, #2
 802493c:	d020      	beq.n	8024980 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 802493e:	687b      	ldr	r3, [r7, #4]
 8024940:	681b      	ldr	r3, [r3, #0]
 8024942:	699a      	ldr	r2, [r3, #24]
 8024944:	687b      	ldr	r3, [r7, #4]
 8024946:	681b      	ldr	r3, [r3, #0]
 8024948:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802494c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 802494e:	687b      	ldr	r3, [r7, #4]
 8024950:	681b      	ldr	r3, [r3, #0]
 8024952:	691a      	ldr	r2, [r3, #16]
 8024954:	687b      	ldr	r3, [r7, #4]
 8024956:	681b      	ldr	r3, [r3, #0]
 8024958:	f042 0210 	orr.w	r2, r2, #16
 802495c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 802495e:	687b      	ldr	r3, [r7, #4]
 8024960:	68db      	ldr	r3, [r3, #12]
 8024962:	2b03      	cmp	r3, #3
 8024964:	d114      	bne.n	8024990 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8024966:	687b      	ldr	r3, [r7, #4]
 8024968:	681b      	ldr	r3, [r3, #0]
 802496a:	699a      	ldr	r2, [r3, #24]
 802496c:	687b      	ldr	r3, [r7, #4]
 802496e:	681b      	ldr	r3, [r3, #0]
 8024970:	f042 0220 	orr.w	r2, r2, #32
 8024974:	619a      	str	r2, [r3, #24]
 8024976:	e00b      	b.n	8024990 <HAL_FDCAN_Init+0x234>
 8024978:	0802ab40 	.word	0x0802ab40
 802497c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8024980:	687b      	ldr	r3, [r7, #4]
 8024982:	681b      	ldr	r3, [r3, #0]
 8024984:	699a      	ldr	r2, [r3, #24]
 8024986:	687b      	ldr	r3, [r7, #4]
 8024988:	681b      	ldr	r3, [r3, #0]
 802498a:	f042 0220 	orr.w	r2, r2, #32
 802498e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8024990:	687b      	ldr	r3, [r7, #4]
 8024992:	699b      	ldr	r3, [r3, #24]
 8024994:	3b01      	subs	r3, #1
 8024996:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8024998:	687b      	ldr	r3, [r7, #4]
 802499a:	69db      	ldr	r3, [r3, #28]
 802499c:	3b01      	subs	r3, #1
 802499e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80249a0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80249a2:	687b      	ldr	r3, [r7, #4]
 80249a4:	6a1b      	ldr	r3, [r3, #32]
 80249a6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80249a8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80249ac:	687b      	ldr	r3, [r7, #4]
 80249ae:	695b      	ldr	r3, [r3, #20]
 80249b0:	3b01      	subs	r3, #1
 80249b2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80249b4:	687b      	ldr	r3, [r7, #4]
 80249b6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80249b8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80249ba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80249bc:	687b      	ldr	r3, [r7, #4]
 80249be:	689b      	ldr	r3, [r3, #8]
 80249c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80249c4:	d115      	bne.n	80249f2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80249c6:	687b      	ldr	r3, [r7, #4]
 80249c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80249ca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80249d0:	3b01      	subs	r3, #1
 80249d2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80249d4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80249d6:	687b      	ldr	r3, [r7, #4]
 80249d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80249da:	3b01      	subs	r3, #1
 80249dc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80249de:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80249e2:	687b      	ldr	r3, [r7, #4]
 80249e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80249e6:	3b01      	subs	r3, #1
 80249e8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80249ea:	687b      	ldr	r3, [r7, #4]
 80249ec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80249ee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80249f0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80249f2:	687b      	ldr	r3, [r7, #4]
 80249f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80249f6:	2b00      	cmp	r3, #0
 80249f8:	d00a      	beq.n	8024a10 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80249fa:	687b      	ldr	r3, [r7, #4]
 80249fc:	681b      	ldr	r3, [r3, #0]
 80249fe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8024a02:	687b      	ldr	r3, [r7, #4]
 8024a04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8024a06:	687b      	ldr	r3, [r7, #4]
 8024a08:	681b      	ldr	r3, [r3, #0]
 8024a0a:	430a      	orrs	r2, r1
 8024a0c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8024a10:	687b      	ldr	r3, [r7, #4]
 8024a12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8024a14:	687b      	ldr	r3, [r7, #4]
 8024a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8024a18:	4413      	add	r3, r2
 8024a1a:	2b00      	cmp	r3, #0
 8024a1c:	d011      	beq.n	8024a42 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8024a1e:	687b      	ldr	r3, [r7, #4]
 8024a20:	681b      	ldr	r3, [r3, #0]
 8024a22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8024a26:	f023 0107 	bic.w	r1, r3, #7
 8024a2a:	687b      	ldr	r3, [r7, #4]
 8024a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024a2e:	009b      	lsls	r3, r3, #2
 8024a30:	3360      	adds	r3, #96	@ 0x60
 8024a32:	443b      	add	r3, r7
 8024a34:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8024a38:	687b      	ldr	r3, [r7, #4]
 8024a3a:	681b      	ldr	r3, [r3, #0]
 8024a3c:	430a      	orrs	r2, r1
 8024a3e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8024a42:	687b      	ldr	r3, [r7, #4]
 8024a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024a46:	2b00      	cmp	r3, #0
 8024a48:	d011      	beq.n	8024a6e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8024a4a:	687b      	ldr	r3, [r7, #4]
 8024a4c:	681b      	ldr	r3, [r3, #0]
 8024a4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8024a52:	f023 0107 	bic.w	r1, r3, #7
 8024a56:	687b      	ldr	r3, [r7, #4]
 8024a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8024a5a:	009b      	lsls	r3, r3, #2
 8024a5c:	3360      	adds	r3, #96	@ 0x60
 8024a5e:	443b      	add	r3, r7
 8024a60:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8024a64:	687b      	ldr	r3, [r7, #4]
 8024a66:	681b      	ldr	r3, [r3, #0]
 8024a68:	430a      	orrs	r2, r1
 8024a6a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8024a6e:	687b      	ldr	r3, [r7, #4]
 8024a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8024a72:	2b00      	cmp	r3, #0
 8024a74:	d012      	beq.n	8024a9c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8024a76:	687b      	ldr	r3, [r7, #4]
 8024a78:	681b      	ldr	r3, [r3, #0]
 8024a7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8024a7e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8024a82:	687b      	ldr	r3, [r7, #4]
 8024a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8024a86:	009b      	lsls	r3, r3, #2
 8024a88:	3360      	adds	r3, #96	@ 0x60
 8024a8a:	443b      	add	r3, r7
 8024a8c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8024a90:	011a      	lsls	r2, r3, #4
 8024a92:	687b      	ldr	r3, [r7, #4]
 8024a94:	681b      	ldr	r3, [r3, #0]
 8024a96:	430a      	orrs	r2, r1
 8024a98:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8024a9c:	687b      	ldr	r3, [r7, #4]
 8024a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8024aa0:	2b00      	cmp	r3, #0
 8024aa2:	d012      	beq.n	8024aca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8024aa4:	687b      	ldr	r3, [r7, #4]
 8024aa6:	681b      	ldr	r3, [r3, #0]
 8024aa8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8024aac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8024ab0:	687b      	ldr	r3, [r7, #4]
 8024ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024ab4:	009b      	lsls	r3, r3, #2
 8024ab6:	3360      	adds	r3, #96	@ 0x60
 8024ab8:	443b      	add	r3, r7
 8024aba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8024abe:	021a      	lsls	r2, r3, #8
 8024ac0:	687b      	ldr	r3, [r7, #4]
 8024ac2:	681b      	ldr	r3, [r3, #0]
 8024ac4:	430a      	orrs	r2, r1
 8024ac6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8024aca:	687b      	ldr	r3, [r7, #4]
 8024acc:	681b      	ldr	r3, [r3, #0]
 8024ace:	4a11      	ldr	r2, [pc, #68]	@ (8024b14 <HAL_FDCAN_Init+0x3b8>)
 8024ad0:	4293      	cmp	r3, r2
 8024ad2:	d107      	bne.n	8024ae4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8024ad4:	687b      	ldr	r3, [r7, #4]
 8024ad6:	685b      	ldr	r3, [r3, #4]
 8024ad8:	689a      	ldr	r2, [r3, #8]
 8024ada:	687b      	ldr	r3, [r7, #4]
 8024adc:	685b      	ldr	r3, [r3, #4]
 8024ade:	f022 0203 	bic.w	r2, r2, #3
 8024ae2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8024ae4:	687b      	ldr	r3, [r7, #4]
 8024ae6:	2200      	movs	r2, #0
 8024ae8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8024aec:	687b      	ldr	r3, [r7, #4]
 8024aee:	2200      	movs	r2, #0
 8024af0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8024af4:	687b      	ldr	r3, [r7, #4]
 8024af6:	2201      	movs	r2, #1
 8024af8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8024afc:	6878      	ldr	r0, [r7, #4]
 8024afe:	f000 fb83 	bl	8025208 <FDCAN_CalcultateRamBlockAddresses>
 8024b02:	4603      	mov	r3, r0
 8024b04:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8024b08:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8024b0c:	4618      	mov	r0, r3
 8024b0e:	3760      	adds	r7, #96	@ 0x60
 8024b10:	46bd      	mov	sp, r7
 8024b12:	bd80      	pop	{r7, pc}
 8024b14:	4000a000 	.word	0x4000a000

08024b18 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8024b18:	b480      	push	{r7}
 8024b1a:	b087      	sub	sp, #28
 8024b1c:	af00      	add	r7, sp, #0
 8024b1e:	6078      	str	r0, [r7, #4]
 8024b20:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8024b22:	687b      	ldr	r3, [r7, #4]
 8024b24:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8024b28:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8024b2a:	7bfb      	ldrb	r3, [r7, #15]
 8024b2c:	2b01      	cmp	r3, #1
 8024b2e:	d002      	beq.n	8024b36 <HAL_FDCAN_ConfigFilter+0x1e>
 8024b30:	7bfb      	ldrb	r3, [r7, #15]
 8024b32:	2b02      	cmp	r3, #2
 8024b34:	d157      	bne.n	8024be6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8024b36:	683b      	ldr	r3, [r7, #0]
 8024b38:	681b      	ldr	r3, [r3, #0]
 8024b3a:	2b00      	cmp	r3, #0
 8024b3c:	d12b      	bne.n	8024b96 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8024b3e:	683b      	ldr	r3, [r7, #0]
 8024b40:	68db      	ldr	r3, [r3, #12]
 8024b42:	2b07      	cmp	r3, #7
 8024b44:	d10d      	bne.n	8024b62 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8024b46:	683b      	ldr	r3, [r7, #0]
 8024b48:	691b      	ldr	r3, [r3, #16]
 8024b4a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8024b4c:	683b      	ldr	r3, [r7, #0]
 8024b4e:	69db      	ldr	r3, [r3, #28]
 8024b50:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8024b52:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8024b54:	683b      	ldr	r3, [r7, #0]
 8024b56:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8024b58:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8024b5a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8024b5e:	617b      	str	r3, [r7, #20]
 8024b60:	e00e      	b.n	8024b80 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8024b62:	683b      	ldr	r3, [r7, #0]
 8024b64:	689b      	ldr	r3, [r3, #8]
 8024b66:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8024b68:	683b      	ldr	r3, [r7, #0]
 8024b6a:	68db      	ldr	r3, [r3, #12]
 8024b6c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8024b6e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8024b70:	683b      	ldr	r3, [r7, #0]
 8024b72:	691b      	ldr	r3, [r3, #16]
 8024b74:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8024b76:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8024b78:	683b      	ldr	r3, [r7, #0]
 8024b7a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8024b7c:	4313      	orrs	r3, r2
 8024b7e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8024b80:	687b      	ldr	r3, [r7, #4]
 8024b82:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8024b84:	683b      	ldr	r3, [r7, #0]
 8024b86:	685b      	ldr	r3, [r3, #4]
 8024b88:	009b      	lsls	r3, r3, #2
 8024b8a:	4413      	add	r3, r2
 8024b8c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8024b8e:	68bb      	ldr	r3, [r7, #8]
 8024b90:	697a      	ldr	r2, [r7, #20]
 8024b92:	601a      	str	r2, [r3, #0]
 8024b94:	e025      	b.n	8024be2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8024b96:	683b      	ldr	r3, [r7, #0]
 8024b98:	68db      	ldr	r3, [r3, #12]
 8024b9a:	075a      	lsls	r2, r3, #29
 8024b9c:	683b      	ldr	r3, [r7, #0]
 8024b9e:	691b      	ldr	r3, [r3, #16]
 8024ba0:	4313      	orrs	r3, r2
 8024ba2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8024ba4:	683b      	ldr	r3, [r7, #0]
 8024ba6:	68db      	ldr	r3, [r3, #12]
 8024ba8:	2b07      	cmp	r3, #7
 8024baa:	d103      	bne.n	8024bb4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8024bac:	683b      	ldr	r3, [r7, #0]
 8024bae:	699b      	ldr	r3, [r3, #24]
 8024bb0:	613b      	str	r3, [r7, #16]
 8024bb2:	e006      	b.n	8024bc2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8024bb4:	683b      	ldr	r3, [r7, #0]
 8024bb6:	689b      	ldr	r3, [r3, #8]
 8024bb8:	079a      	lsls	r2, r3, #30
 8024bba:	683b      	ldr	r3, [r7, #0]
 8024bbc:	695b      	ldr	r3, [r3, #20]
 8024bbe:	4313      	orrs	r3, r2
 8024bc0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8024bc2:	687b      	ldr	r3, [r7, #4]
 8024bc4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8024bc6:	683b      	ldr	r3, [r7, #0]
 8024bc8:	685b      	ldr	r3, [r3, #4]
 8024bca:	00db      	lsls	r3, r3, #3
 8024bcc:	4413      	add	r3, r2
 8024bce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8024bd0:	68bb      	ldr	r3, [r7, #8]
 8024bd2:	697a      	ldr	r2, [r7, #20]
 8024bd4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8024bd6:	68bb      	ldr	r3, [r7, #8]
 8024bd8:	3304      	adds	r3, #4
 8024bda:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8024bdc:	68bb      	ldr	r3, [r7, #8]
 8024bde:	693a      	ldr	r2, [r7, #16]
 8024be0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8024be2:	2300      	movs	r3, #0
 8024be4:	e008      	b.n	8024bf8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8024be6:	687b      	ldr	r3, [r7, #4]
 8024be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8024bec:	f043 0202 	orr.w	r2, r3, #2
 8024bf0:	687b      	ldr	r3, [r7, #4]
 8024bf2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8024bf6:	2301      	movs	r3, #1
  }
}
 8024bf8:	4618      	mov	r0, r3
 8024bfa:	371c      	adds	r7, #28
 8024bfc:	46bd      	mov	sp, r7
 8024bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c02:	4770      	bx	lr

08024c04 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8024c04:	b580      	push	{r7, lr}
 8024c06:	b096      	sub	sp, #88	@ 0x58
 8024c08:	af00      	add	r7, sp, #0
 8024c0a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8024c0c:	4b95      	ldr	r3, [pc, #596]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024c0e:	691b      	ldr	r3, [r3, #16]
 8024c10:	079b      	lsls	r3, r3, #30
 8024c12:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8024c14:	4b93      	ldr	r3, [pc, #588]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024c16:	695b      	ldr	r3, [r3, #20]
 8024c18:	079b      	lsls	r3, r3, #30
 8024c1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8024c1c:	4013      	ands	r3, r2
 8024c1e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8024c20:	687b      	ldr	r3, [r7, #4]
 8024c22:	681b      	ldr	r3, [r3, #0]
 8024c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8024c26:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8024c2a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8024c2c:	687b      	ldr	r3, [r7, #4]
 8024c2e:	681b      	ldr	r3, [r3, #0]
 8024c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024c32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8024c34:	4013      	ands	r3, r2
 8024c36:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8024c38:	687b      	ldr	r3, [r7, #4]
 8024c3a:	681b      	ldr	r3, [r3, #0]
 8024c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8024c3e:	f003 030f 	and.w	r3, r3, #15
 8024c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8024c44:	687b      	ldr	r3, [r7, #4]
 8024c46:	681b      	ldr	r3, [r3, #0]
 8024c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024c4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8024c4c:	4013      	ands	r3, r2
 8024c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8024c50:	687b      	ldr	r3, [r7, #4]
 8024c52:	681b      	ldr	r3, [r3, #0]
 8024c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8024c56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8024c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8024c5c:	687b      	ldr	r3, [r7, #4]
 8024c5e:	681b      	ldr	r3, [r3, #0]
 8024c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024c62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8024c64:	4013      	ands	r3, r2
 8024c66:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8024c68:	687b      	ldr	r3, [r7, #4]
 8024c6a:	681b      	ldr	r3, [r3, #0]
 8024c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8024c6e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8024c72:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8024c74:	687b      	ldr	r3, [r7, #4]
 8024c76:	681b      	ldr	r3, [r3, #0]
 8024c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8024c7c:	4013      	ands	r3, r2
 8024c7e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8024c80:	687b      	ldr	r3, [r7, #4]
 8024c82:	681b      	ldr	r3, [r3, #0]
 8024c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8024c86:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8024c8a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8024c8c:	687b      	ldr	r3, [r7, #4]
 8024c8e:	681b      	ldr	r3, [r3, #0]
 8024c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8024c94:	4013      	ands	r3, r2
 8024c96:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8024c98:	687b      	ldr	r3, [r7, #4]
 8024c9a:	681b      	ldr	r3, [r3, #0]
 8024c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8024ca0:	687b      	ldr	r3, [r7, #4]
 8024ca2:	681b      	ldr	r3, [r3, #0]
 8024ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8024ca6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8024ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8024cae:	2b00      	cmp	r3, #0
 8024cb0:	d00f      	beq.n	8024cd2 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8024cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8024cb8:	2b00      	cmp	r3, #0
 8024cba:	d00a      	beq.n	8024cd2 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8024cbc:	687b      	ldr	r3, [r7, #4]
 8024cbe:	681b      	ldr	r3, [r3, #0]
 8024cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8024cc4:	651a      	str	r2, [r3, #80]	@ 0x50
 8024cc6:	4b67      	ldr	r3, [pc, #412]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024cc8:	2200      	movs	r2, #0
 8024cca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8024ccc:	6878      	ldr	r0, [r7, #4]
 8024cce:	f000 fa4f 	bl	8025170 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8024cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	d01c      	beq.n	8024d16 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8024cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8024ce2:	2b00      	cmp	r3, #0
 8024ce4:	d017      	beq.n	8024d16 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8024ce6:	687b      	ldr	r3, [r7, #4]
 8024ce8:	681b      	ldr	r3, [r3, #0]
 8024cea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8024cee:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8024cf0:	687b      	ldr	r3, [r7, #4]
 8024cf2:	681b      	ldr	r3, [r3, #0]
 8024cf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8024cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024cfa:	4013      	ands	r3, r2
 8024cfc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8024cfe:	687b      	ldr	r3, [r7, #4]
 8024d00:	681b      	ldr	r3, [r3, #0]
 8024d02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8024d06:	651a      	str	r2, [r3, #80]	@ 0x50
 8024d08:	4b56      	ldr	r3, [pc, #344]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024d0a:	2200      	movs	r2, #0
 8024d0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8024d0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8024d10:	6878      	ldr	r0, [r7, #4]
 8024d12:	f000 fa04 	bl	802511e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8024d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024d18:	2b00      	cmp	r3, #0
 8024d1a:	d00d      	beq.n	8024d38 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8024d1c:	687b      	ldr	r3, [r7, #4]
 8024d1e:	681a      	ldr	r2, [r3, #0]
 8024d20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8024d22:	4b51      	ldr	r3, [pc, #324]	@ (8024e68 <HAL_FDCAN_IRQHandler+0x264>)
 8024d24:	400b      	ands	r3, r1
 8024d26:	6513      	str	r3, [r2, #80]	@ 0x50
 8024d28:	4a4e      	ldr	r2, [pc, #312]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024d2c:	0f9b      	lsrs	r3, r3, #30
 8024d2e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8024d30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8024d32:	6878      	ldr	r0, [r7, #4]
 8024d34:	f000 f9b2 	bl	802509c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8024d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	d00d      	beq.n	8024d5a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8024d3e:	687b      	ldr	r3, [r7, #4]
 8024d40:	681a      	ldr	r2, [r3, #0]
 8024d42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8024d44:	4b48      	ldr	r3, [pc, #288]	@ (8024e68 <HAL_FDCAN_IRQHandler+0x264>)
 8024d46:	400b      	ands	r3, r1
 8024d48:	6513      	str	r3, [r2, #80]	@ 0x50
 8024d4a:	4a46      	ldr	r2, [pc, #280]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8024d4e:	0f9b      	lsrs	r3, r3, #30
 8024d50:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8024d52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8024d54:	6878      	ldr	r0, [r7, #4]
 8024d56:	f000 f9ac 	bl	80250b2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8024d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024d5c:	2b00      	cmp	r3, #0
 8024d5e:	d00d      	beq.n	8024d7c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8024d60:	687b      	ldr	r3, [r7, #4]
 8024d62:	681a      	ldr	r2, [r3, #0]
 8024d64:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8024d66:	4b40      	ldr	r3, [pc, #256]	@ (8024e68 <HAL_FDCAN_IRQHandler+0x264>)
 8024d68:	400b      	ands	r3, r1
 8024d6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8024d6c:	4a3d      	ldr	r2, [pc, #244]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024d70:	0f9b      	lsrs	r3, r3, #30
 8024d72:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8024d74:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8024d76:	6878      	ldr	r0, [r7, #4]
 8024d78:	f000 f9a6 	bl	80250c8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8024d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8024d7e:	2b00      	cmp	r3, #0
 8024d80:	d00d      	beq.n	8024d9e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8024d82:	687b      	ldr	r3, [r7, #4]
 8024d84:	681a      	ldr	r2, [r3, #0]
 8024d86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8024d88:	4b37      	ldr	r3, [pc, #220]	@ (8024e68 <HAL_FDCAN_IRQHandler+0x264>)
 8024d8a:	400b      	ands	r3, r1
 8024d8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8024d8e:	4a35      	ldr	r2, [pc, #212]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024d90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8024d92:	0f9b      	lsrs	r3, r3, #30
 8024d94:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8024d96:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8024d98:	6878      	ldr	r0, [r7, #4]
 8024d9a:	f000 f9a0 	bl	80250de <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8024d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8024da4:	2b00      	cmp	r3, #0
 8024da6:	d00f      	beq.n	8024dc8 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8024da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8024dae:	2b00      	cmp	r3, #0
 8024db0:	d00a      	beq.n	8024dc8 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8024db2:	687b      	ldr	r3, [r7, #4]
 8024db4:	681b      	ldr	r3, [r3, #0]
 8024db6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8024dba:	651a      	str	r2, [r3, #80]	@ 0x50
 8024dbc:	4b29      	ldr	r3, [pc, #164]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024dbe:	2200      	movs	r2, #0
 8024dc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8024dc2:	6878      	ldr	r0, [r7, #4]
 8024dc4:	f000 f996 	bl	80250f4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8024dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024dca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8024dce:	2b00      	cmp	r3, #0
 8024dd0:	d01c      	beq.n	8024e0c <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8024dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8024dd8:	2b00      	cmp	r3, #0
 8024dda:	d017      	beq.n	8024e0c <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8024ddc:	687b      	ldr	r3, [r7, #4]
 8024dde:	681b      	ldr	r3, [r3, #0]
 8024de0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8024de4:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8024de6:	687b      	ldr	r3, [r7, #4]
 8024de8:	681b      	ldr	r3, [r3, #0]
 8024dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8024dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024df0:	4013      	ands	r3, r2
 8024df2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8024df4:	687b      	ldr	r3, [r7, #4]
 8024df6:	681b      	ldr	r3, [r3, #0]
 8024df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8024dfc:	651a      	str	r2, [r3, #80]	@ 0x50
 8024dfe:	4b19      	ldr	r3, [pc, #100]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024e00:	2200      	movs	r2, #0
 8024e02:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8024e04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8024e06:	6878      	ldr	r0, [r7, #4]
 8024e08:	f000 f97e 	bl	8025108 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8024e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024e0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8024e12:	2b00      	cmp	r3, #0
 8024e14:	d00f      	beq.n	8024e36 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8024e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8024e1c:	2b00      	cmp	r3, #0
 8024e1e:	d00a      	beq.n	8024e36 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8024e20:	687b      	ldr	r3, [r7, #4]
 8024e22:	681b      	ldr	r3, [r3, #0]
 8024e24:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8024e28:	651a      	str	r2, [r3, #80]	@ 0x50
 8024e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024e2c:	2200      	movs	r2, #0
 8024e2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8024e30:	6878      	ldr	r0, [r7, #4]
 8024e32:	f000 f97f 	bl	8025134 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8024e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8024e3c:	2b00      	cmp	r3, #0
 8024e3e:	d015      	beq.n	8024e6c <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8024e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8024e46:	2b00      	cmp	r3, #0
 8024e48:	d010      	beq.n	8024e6c <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8024e4a:	687b      	ldr	r3, [r7, #4]
 8024e4c:	681b      	ldr	r3, [r3, #0]
 8024e4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8024e52:	651a      	str	r2, [r3, #80]	@ 0x50
 8024e54:	4b03      	ldr	r3, [pc, #12]	@ (8024e64 <HAL_FDCAN_IRQHandler+0x260>)
 8024e56:	2200      	movs	r2, #0
 8024e58:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8024e5a:	6878      	ldr	r0, [r7, #4]
 8024e5c:	f000 f974 	bl	8025148 <HAL_FDCAN_TimestampWraparoundCallback>
 8024e60:	e004      	b.n	8024e6c <HAL_FDCAN_IRQHandler+0x268>
 8024e62:	bf00      	nop
 8024e64:	4000a800 	.word	0x4000a800
 8024e68:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8024e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024e6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8024e72:	2b00      	cmp	r3, #0
 8024e74:	d00f      	beq.n	8024e96 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8024e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8024e7c:	2b00      	cmp	r3, #0
 8024e7e:	d00a      	beq.n	8024e96 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8024e80:	687b      	ldr	r3, [r7, #4]
 8024e82:	681b      	ldr	r3, [r3, #0]
 8024e84:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8024e88:	651a      	str	r2, [r3, #80]	@ 0x50
 8024e8a:	4b81      	ldr	r3, [pc, #516]	@ (8025090 <HAL_FDCAN_IRQHandler+0x48c>)
 8024e8c:	2200      	movs	r2, #0
 8024e8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8024e90:	6878      	ldr	r0, [r7, #4]
 8024e92:	f000 f963 	bl	802515c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8024e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8024e9c:	2b00      	cmp	r3, #0
 8024e9e:	d014      	beq.n	8024eca <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8024ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8024ea6:	2b00      	cmp	r3, #0
 8024ea8:	d00f      	beq.n	8024eca <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8024eaa:	687b      	ldr	r3, [r7, #4]
 8024eac:	681b      	ldr	r3, [r3, #0]
 8024eae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8024eb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8024eb4:	4b76      	ldr	r3, [pc, #472]	@ (8025090 <HAL_FDCAN_IRQHandler+0x48c>)
 8024eb6:	2200      	movs	r2, #0
 8024eb8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8024eba:	687b      	ldr	r3, [r7, #4]
 8024ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8024ec0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8024ec4:	687b      	ldr	r3, [r7, #4]
 8024ec6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8024eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024ecc:	2b00      	cmp	r3, #0
 8024ece:	d00d      	beq.n	8024eec <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8024ed0:	687b      	ldr	r3, [r7, #4]
 8024ed2:	681a      	ldr	r2, [r3, #0]
 8024ed4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8024ed6:	4b6f      	ldr	r3, [pc, #444]	@ (8025094 <HAL_FDCAN_IRQHandler+0x490>)
 8024ed8:	400b      	ands	r3, r1
 8024eda:	6513      	str	r3, [r2, #80]	@ 0x50
 8024edc:	4a6c      	ldr	r2, [pc, #432]	@ (8025090 <HAL_FDCAN_IRQHandler+0x48c>)
 8024ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024ee0:	0f9b      	lsrs	r3, r3, #30
 8024ee2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8024ee4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8024ee6:	6878      	ldr	r0, [r7, #4]
 8024ee8:	f000 f956 	bl	8025198 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8024eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8024eee:	2b00      	cmp	r3, #0
 8024ef0:	d011      	beq.n	8024f16 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8024ef2:	687b      	ldr	r3, [r7, #4]
 8024ef4:	681a      	ldr	r2, [r3, #0]
 8024ef6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8024ef8:	4b66      	ldr	r3, [pc, #408]	@ (8025094 <HAL_FDCAN_IRQHandler+0x490>)
 8024efa:	400b      	ands	r3, r1
 8024efc:	6513      	str	r3, [r2, #80]	@ 0x50
 8024efe:	4a64      	ldr	r2, [pc, #400]	@ (8025090 <HAL_FDCAN_IRQHandler+0x48c>)
 8024f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8024f02:	0f9b      	lsrs	r3, r3, #30
 8024f04:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8024f06:	687b      	ldr	r3, [r7, #4]
 8024f08:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8024f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8024f0e:	431a      	orrs	r2, r3
 8024f10:	687b      	ldr	r3, [r7, #4]
 8024f12:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8024f16:	687b      	ldr	r3, [r7, #4]
 8024f18:	681b      	ldr	r3, [r3, #0]
 8024f1a:	4a5f      	ldr	r2, [pc, #380]	@ (8025098 <HAL_FDCAN_IRQHandler+0x494>)
 8024f1c:	4293      	cmp	r3, r2
 8024f1e:	f040 80aa 	bne.w	8025076 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8024f22:	687b      	ldr	r3, [r7, #4]
 8024f24:	685b      	ldr	r3, [r3, #4]
 8024f26:	689b      	ldr	r3, [r3, #8]
 8024f28:	f003 0303 	and.w	r3, r3, #3
 8024f2c:	2b00      	cmp	r3, #0
 8024f2e:	f000 80a2 	beq.w	8025076 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8024f32:	687b      	ldr	r3, [r7, #4]
 8024f34:	685b      	ldr	r3, [r3, #4]
 8024f36:	6a1b      	ldr	r3, [r3, #32]
 8024f38:	f003 030f 	and.w	r3, r3, #15
 8024f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8024f3e:	687b      	ldr	r3, [r7, #4]
 8024f40:	685b      	ldr	r3, [r3, #4]
 8024f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024f44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024f46:	4013      	ands	r3, r2
 8024f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8024f4a:	687b      	ldr	r3, [r7, #4]
 8024f4c:	685b      	ldr	r3, [r3, #4]
 8024f4e:	6a1b      	ldr	r3, [r3, #32]
 8024f50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8024f54:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8024f56:	687b      	ldr	r3, [r7, #4]
 8024f58:	685b      	ldr	r3, [r3, #4]
 8024f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8024f5e:	4013      	ands	r3, r2
 8024f60:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8024f62:	687b      	ldr	r3, [r7, #4]
 8024f64:	685b      	ldr	r3, [r3, #4]
 8024f66:	6a1b      	ldr	r3, [r3, #32]
 8024f68:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8024f6c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8024f6e:	687b      	ldr	r3, [r7, #4]
 8024f70:	685b      	ldr	r3, [r3, #4]
 8024f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024f76:	4013      	ands	r3, r2
 8024f78:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8024f7a:	687b      	ldr	r3, [r7, #4]
 8024f7c:	685b      	ldr	r3, [r3, #4]
 8024f7e:	6a1b      	ldr	r3, [r3, #32]
 8024f80:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8024f84:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8024f86:	687b      	ldr	r3, [r7, #4]
 8024f88:	685b      	ldr	r3, [r3, #4]
 8024f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024f8c:	6a3a      	ldr	r2, [r7, #32]
 8024f8e:	4013      	ands	r3, r2
 8024f90:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8024f92:	687b      	ldr	r3, [r7, #4]
 8024f94:	685b      	ldr	r3, [r3, #4]
 8024f96:	6a1b      	ldr	r3, [r3, #32]
 8024f98:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8024f9c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8024f9e:	687b      	ldr	r3, [r7, #4]
 8024fa0:	685b      	ldr	r3, [r3, #4]
 8024fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024fa4:	69fa      	ldr	r2, [r7, #28]
 8024fa6:	4013      	ands	r3, r2
 8024fa8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8024faa:	687b      	ldr	r3, [r7, #4]
 8024fac:	685b      	ldr	r3, [r3, #4]
 8024fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024fb0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8024fb2:	687b      	ldr	r3, [r7, #4]
 8024fb4:	685b      	ldr	r3, [r3, #4]
 8024fb6:	6a1b      	ldr	r3, [r3, #32]
 8024fb8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8024fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024fbc:	2b00      	cmp	r3, #0
 8024fbe:	d007      	beq.n	8024fd0 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8024fc0:	687b      	ldr	r3, [r7, #4]
 8024fc2:	685b      	ldr	r3, [r3, #4]
 8024fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024fc6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8024fc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8024fca:	6878      	ldr	r0, [r7, #4]
 8024fcc:	f000 f8ef 	bl	80251ae <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8024fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024fd2:	2b00      	cmp	r3, #0
 8024fd4:	d007      	beq.n	8024fe6 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8024fd6:	687b      	ldr	r3, [r7, #4]
 8024fd8:	685b      	ldr	r3, [r3, #4]
 8024fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8024fdc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8024fde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8024fe0:	6878      	ldr	r0, [r7, #4]
 8024fe2:	f000 f8ef 	bl	80251c4 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8024fe6:	69bb      	ldr	r3, [r7, #24]
 8024fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024fec:	2b00      	cmp	r3, #0
 8024fee:	d019      	beq.n	8025024 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8024ff0:	697b      	ldr	r3, [r7, #20]
 8024ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024ff6:	2b00      	cmp	r3, #0
 8024ff8:	d014      	beq.n	8025024 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8024ffa:	687b      	ldr	r3, [r7, #4]
 8024ffc:	685b      	ldr	r3, [r3, #4]
 8024ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025000:	0c1b      	lsrs	r3, r3, #16
 8025002:	b29b      	uxth	r3, r3
 8025004:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8025006:	687b      	ldr	r3, [r7, #4]
 8025008:	685b      	ldr	r3, [r3, #4]
 802500a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802500c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8025010:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8025012:	687b      	ldr	r3, [r7, #4]
 8025014:	685b      	ldr	r3, [r3, #4]
 8025016:	2240      	movs	r2, #64	@ 0x40
 8025018:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 802501a:	68fa      	ldr	r2, [r7, #12]
 802501c:	6939      	ldr	r1, [r7, #16]
 802501e:	6878      	ldr	r0, [r7, #4]
 8025020:	f000 f8db 	bl	80251da <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8025024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025026:	2b00      	cmp	r3, #0
 8025028:	d007      	beq.n	802503a <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 802502a:	687b      	ldr	r3, [r7, #4]
 802502c:	685b      	ldr	r3, [r3, #4]
 802502e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8025030:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8025032:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8025034:	6878      	ldr	r0, [r7, #4]
 8025036:	f000 f8dc 	bl	80251f2 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 802503a:	6a3b      	ldr	r3, [r7, #32]
 802503c:	2b00      	cmp	r3, #0
 802503e:	d00b      	beq.n	8025058 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8025040:	687b      	ldr	r3, [r7, #4]
 8025042:	685b      	ldr	r3, [r3, #4]
 8025044:	6a3a      	ldr	r2, [r7, #32]
 8025046:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8025048:	687b      	ldr	r3, [r7, #4]
 802504a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 802504e:	6a3b      	ldr	r3, [r7, #32]
 8025050:	431a      	orrs	r2, r3
 8025052:	687b      	ldr	r3, [r7, #4]
 8025054:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8025058:	69fb      	ldr	r3, [r7, #28]
 802505a:	2b00      	cmp	r3, #0
 802505c:	d00b      	beq.n	8025076 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 802505e:	687b      	ldr	r3, [r7, #4]
 8025060:	685b      	ldr	r3, [r3, #4]
 8025062:	69fa      	ldr	r2, [r7, #28]
 8025064:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8025066:	687b      	ldr	r3, [r7, #4]
 8025068:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 802506c:	69fb      	ldr	r3, [r7, #28]
 802506e:	431a      	orrs	r2, r3
 8025070:	687b      	ldr	r3, [r7, #4]
 8025072:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8025076:	687b      	ldr	r3, [r7, #4]
 8025078:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 802507c:	2b00      	cmp	r3, #0
 802507e:	d002      	beq.n	8025086 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8025080:	6878      	ldr	r0, [r7, #4]
 8025082:	f000 f87f 	bl	8025184 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8025086:	bf00      	nop
 8025088:	3758      	adds	r7, #88	@ 0x58
 802508a:	46bd      	mov	sp, r7
 802508c:	bd80      	pop	{r7, pc}
 802508e:	bf00      	nop
 8025090:	4000a800 	.word	0x4000a800
 8025094:	3fcfffff 	.word	0x3fcfffff
 8025098:	4000a000 	.word	0x4000a000

0802509c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 802509c:	b480      	push	{r7}
 802509e:	b083      	sub	sp, #12
 80250a0:	af00      	add	r7, sp, #0
 80250a2:	6078      	str	r0, [r7, #4]
 80250a4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80250a6:	bf00      	nop
 80250a8:	370c      	adds	r7, #12
 80250aa:	46bd      	mov	sp, r7
 80250ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250b0:	4770      	bx	lr

080250b2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80250b2:	b480      	push	{r7}
 80250b4:	b083      	sub	sp, #12
 80250b6:	af00      	add	r7, sp, #0
 80250b8:	6078      	str	r0, [r7, #4]
 80250ba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80250bc:	bf00      	nop
 80250be:	370c      	adds	r7, #12
 80250c0:	46bd      	mov	sp, r7
 80250c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250c6:	4770      	bx	lr

080250c8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80250c8:	b480      	push	{r7}
 80250ca:	b083      	sub	sp, #12
 80250cc:	af00      	add	r7, sp, #0
 80250ce:	6078      	str	r0, [r7, #4]
 80250d0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80250d2:	bf00      	nop
 80250d4:	370c      	adds	r7, #12
 80250d6:	46bd      	mov	sp, r7
 80250d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250dc:	4770      	bx	lr

080250de <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80250de:	b480      	push	{r7}
 80250e0:	b083      	sub	sp, #12
 80250e2:	af00      	add	r7, sp, #0
 80250e4:	6078      	str	r0, [r7, #4]
 80250e6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80250e8:	bf00      	nop
 80250ea:	370c      	adds	r7, #12
 80250ec:	46bd      	mov	sp, r7
 80250ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250f2:	4770      	bx	lr

080250f4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80250f4:	b480      	push	{r7}
 80250f6:	b083      	sub	sp, #12
 80250f8:	af00      	add	r7, sp, #0
 80250fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80250fc:	bf00      	nop
 80250fe:	370c      	adds	r7, #12
 8025100:	46bd      	mov	sp, r7
 8025102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025106:	4770      	bx	lr

08025108 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8025108:	b480      	push	{r7}
 802510a:	b083      	sub	sp, #12
 802510c:	af00      	add	r7, sp, #0
 802510e:	6078      	str	r0, [r7, #4]
 8025110:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8025112:	bf00      	nop
 8025114:	370c      	adds	r7, #12
 8025116:	46bd      	mov	sp, r7
 8025118:	f85d 7b04 	ldr.w	r7, [sp], #4
 802511c:	4770      	bx	lr

0802511e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 802511e:	b480      	push	{r7}
 8025120:	b083      	sub	sp, #12
 8025122:	af00      	add	r7, sp, #0
 8025124:	6078      	str	r0, [r7, #4]
 8025126:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8025128:	bf00      	nop
 802512a:	370c      	adds	r7, #12
 802512c:	46bd      	mov	sp, r7
 802512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025132:	4770      	bx	lr

08025134 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8025134:	b480      	push	{r7}
 8025136:	b083      	sub	sp, #12
 8025138:	af00      	add	r7, sp, #0
 802513a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 802513c:	bf00      	nop
 802513e:	370c      	adds	r7, #12
 8025140:	46bd      	mov	sp, r7
 8025142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025146:	4770      	bx	lr

08025148 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8025148:	b480      	push	{r7}
 802514a:	b083      	sub	sp, #12
 802514c:	af00      	add	r7, sp, #0
 802514e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8025150:	bf00      	nop
 8025152:	370c      	adds	r7, #12
 8025154:	46bd      	mov	sp, r7
 8025156:	f85d 7b04 	ldr.w	r7, [sp], #4
 802515a:	4770      	bx	lr

0802515c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 802515c:	b480      	push	{r7}
 802515e:	b083      	sub	sp, #12
 8025160:	af00      	add	r7, sp, #0
 8025162:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8025164:	bf00      	nop
 8025166:	370c      	adds	r7, #12
 8025168:	46bd      	mov	sp, r7
 802516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802516e:	4770      	bx	lr

08025170 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8025170:	b480      	push	{r7}
 8025172:	b083      	sub	sp, #12
 8025174:	af00      	add	r7, sp, #0
 8025176:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8025178:	bf00      	nop
 802517a:	370c      	adds	r7, #12
 802517c:	46bd      	mov	sp, r7
 802517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025182:	4770      	bx	lr

08025184 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8025184:	b480      	push	{r7}
 8025186:	b083      	sub	sp, #12
 8025188:	af00      	add	r7, sp, #0
 802518a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 802518c:	bf00      	nop
 802518e:	370c      	adds	r7, #12
 8025190:	46bd      	mov	sp, r7
 8025192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025196:	4770      	bx	lr

08025198 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8025198:	b480      	push	{r7}
 802519a:	b083      	sub	sp, #12
 802519c:	af00      	add	r7, sp, #0
 802519e:	6078      	str	r0, [r7, #4]
 80251a0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80251a2:	bf00      	nop
 80251a4:	370c      	adds	r7, #12
 80251a6:	46bd      	mov	sp, r7
 80251a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251ac:	4770      	bx	lr

080251ae <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80251ae:	b480      	push	{r7}
 80251b0:	b083      	sub	sp, #12
 80251b2:	af00      	add	r7, sp, #0
 80251b4:	6078      	str	r0, [r7, #4]
 80251b6:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80251b8:	bf00      	nop
 80251ba:	370c      	adds	r7, #12
 80251bc:	46bd      	mov	sp, r7
 80251be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251c2:	4770      	bx	lr

080251c4 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80251c4:	b480      	push	{r7}
 80251c6:	b083      	sub	sp, #12
 80251c8:	af00      	add	r7, sp, #0
 80251ca:	6078      	str	r0, [r7, #4]
 80251cc:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80251ce:	bf00      	nop
 80251d0:	370c      	adds	r7, #12
 80251d2:	46bd      	mov	sp, r7
 80251d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251d8:	4770      	bx	lr

080251da <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80251da:	b480      	push	{r7}
 80251dc:	b085      	sub	sp, #20
 80251de:	af00      	add	r7, sp, #0
 80251e0:	60f8      	str	r0, [r7, #12]
 80251e2:	60b9      	str	r1, [r7, #8]
 80251e4:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80251e6:	bf00      	nop
 80251e8:	3714      	adds	r7, #20
 80251ea:	46bd      	mov	sp, r7
 80251ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251f0:	4770      	bx	lr

080251f2 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80251f2:	b480      	push	{r7}
 80251f4:	b083      	sub	sp, #12
 80251f6:	af00      	add	r7, sp, #0
 80251f8:	6078      	str	r0, [r7, #4]
 80251fa:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80251fc:	bf00      	nop
 80251fe:	370c      	adds	r7, #12
 8025200:	46bd      	mov	sp, r7
 8025202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025206:	4770      	bx	lr

08025208 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8025208:	b480      	push	{r7}
 802520a:	b085      	sub	sp, #20
 802520c:	af00      	add	r7, sp, #0
 802520e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8025210:	687b      	ldr	r3, [r7, #4]
 8025212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025214:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8025216:	687b      	ldr	r3, [r7, #4]
 8025218:	681b      	ldr	r3, [r3, #0]
 802521a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 802521e:	4ba7      	ldr	r3, [pc, #668]	@ (80254bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8025220:	4013      	ands	r3, r2
 8025222:	68ba      	ldr	r2, [r7, #8]
 8025224:	0091      	lsls	r1, r2, #2
 8025226:	687a      	ldr	r2, [r7, #4]
 8025228:	6812      	ldr	r2, [r2, #0]
 802522a:	430b      	orrs	r3, r1
 802522c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8025230:	687b      	ldr	r3, [r7, #4]
 8025232:	681b      	ldr	r3, [r3, #0]
 8025234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8025238:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 802523c:	687b      	ldr	r3, [r7, #4]
 802523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025240:	041a      	lsls	r2, r3, #16
 8025242:	687b      	ldr	r3, [r7, #4]
 8025244:	681b      	ldr	r3, [r3, #0]
 8025246:	430a      	orrs	r2, r1
 8025248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 802524c:	687b      	ldr	r3, [r7, #4]
 802524e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025250:	68ba      	ldr	r2, [r7, #8]
 8025252:	4413      	add	r3, r2
 8025254:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8025256:	687b      	ldr	r3, [r7, #4]
 8025258:	681b      	ldr	r3, [r3, #0]
 802525a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 802525e:	4b97      	ldr	r3, [pc, #604]	@ (80254bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8025260:	4013      	ands	r3, r2
 8025262:	68ba      	ldr	r2, [r7, #8]
 8025264:	0091      	lsls	r1, r2, #2
 8025266:	687a      	ldr	r2, [r7, #4]
 8025268:	6812      	ldr	r2, [r2, #0]
 802526a:	430b      	orrs	r3, r1
 802526c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8025270:	687b      	ldr	r3, [r7, #4]
 8025272:	681b      	ldr	r3, [r3, #0]
 8025274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8025278:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 802527c:	687b      	ldr	r3, [r7, #4]
 802527e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025280:	041a      	lsls	r2, r3, #16
 8025282:	687b      	ldr	r3, [r7, #4]
 8025284:	681b      	ldr	r3, [r3, #0]
 8025286:	430a      	orrs	r2, r1
 8025288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025290:	005b      	lsls	r3, r3, #1
 8025292:	68ba      	ldr	r2, [r7, #8]
 8025294:	4413      	add	r3, r2
 8025296:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8025298:	687b      	ldr	r3, [r7, #4]
 802529a:	681b      	ldr	r3, [r3, #0]
 802529c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80252a0:	4b86      	ldr	r3, [pc, #536]	@ (80254bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80252a2:	4013      	ands	r3, r2
 80252a4:	68ba      	ldr	r2, [r7, #8]
 80252a6:	0091      	lsls	r1, r2, #2
 80252a8:	687a      	ldr	r2, [r7, #4]
 80252aa:	6812      	ldr	r2, [r2, #0]
 80252ac:	430b      	orrs	r3, r1
 80252ae:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80252b2:	687b      	ldr	r3, [r7, #4]
 80252b4:	681b      	ldr	r3, [r3, #0]
 80252b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80252ba:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80252be:	687b      	ldr	r3, [r7, #4]
 80252c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80252c2:	041a      	lsls	r2, r3, #16
 80252c4:	687b      	ldr	r3, [r7, #4]
 80252c6:	681b      	ldr	r3, [r3, #0]
 80252c8:	430a      	orrs	r2, r1
 80252ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80252ce:	687b      	ldr	r3, [r7, #4]
 80252d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80252d2:	687a      	ldr	r2, [r7, #4]
 80252d4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80252d6:	fb02 f303 	mul.w	r3, r2, r3
 80252da:	68ba      	ldr	r2, [r7, #8]
 80252dc:	4413      	add	r3, r2
 80252de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80252e0:	687b      	ldr	r3, [r7, #4]
 80252e2:	681b      	ldr	r3, [r3, #0]
 80252e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80252e8:	4b74      	ldr	r3, [pc, #464]	@ (80254bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80252ea:	4013      	ands	r3, r2
 80252ec:	68ba      	ldr	r2, [r7, #8]
 80252ee:	0091      	lsls	r1, r2, #2
 80252f0:	687a      	ldr	r2, [r7, #4]
 80252f2:	6812      	ldr	r2, [r2, #0]
 80252f4:	430b      	orrs	r3, r1
 80252f6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80252fa:	687b      	ldr	r3, [r7, #4]
 80252fc:	681b      	ldr	r3, [r3, #0]
 80252fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8025302:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8025306:	687b      	ldr	r3, [r7, #4]
 8025308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802530a:	041a      	lsls	r2, r3, #16
 802530c:	687b      	ldr	r3, [r7, #4]
 802530e:	681b      	ldr	r3, [r3, #0]
 8025310:	430a      	orrs	r2, r1
 8025312:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8025316:	687b      	ldr	r3, [r7, #4]
 8025318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802531a:	687a      	ldr	r2, [r7, #4]
 802531c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 802531e:	fb02 f303 	mul.w	r3, r2, r3
 8025322:	68ba      	ldr	r2, [r7, #8]
 8025324:	4413      	add	r3, r2
 8025326:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8025328:	687b      	ldr	r3, [r7, #4]
 802532a:	681b      	ldr	r3, [r3, #0]
 802532c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8025330:	4b62      	ldr	r3, [pc, #392]	@ (80254bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8025332:	4013      	ands	r3, r2
 8025334:	68ba      	ldr	r2, [r7, #8]
 8025336:	0091      	lsls	r1, r2, #2
 8025338:	687a      	ldr	r2, [r7, #4]
 802533a:	6812      	ldr	r2, [r2, #0]
 802533c:	430b      	orrs	r3, r1
 802533e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8025342:	687b      	ldr	r3, [r7, #4]
 8025344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8025346:	687a      	ldr	r2, [r7, #4]
 8025348:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 802534a:	fb02 f303 	mul.w	r3, r2, r3
 802534e:	68ba      	ldr	r2, [r7, #8]
 8025350:	4413      	add	r3, r2
 8025352:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8025354:	687b      	ldr	r3, [r7, #4]
 8025356:	681b      	ldr	r3, [r3, #0]
 8025358:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 802535c:	4b57      	ldr	r3, [pc, #348]	@ (80254bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 802535e:	4013      	ands	r3, r2
 8025360:	68ba      	ldr	r2, [r7, #8]
 8025362:	0091      	lsls	r1, r2, #2
 8025364:	687a      	ldr	r2, [r7, #4]
 8025366:	6812      	ldr	r2, [r2, #0]
 8025368:	430b      	orrs	r3, r1
 802536a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 802536e:	687b      	ldr	r3, [r7, #4]
 8025370:	681b      	ldr	r3, [r3, #0]
 8025372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8025376:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 802537a:	687b      	ldr	r3, [r7, #4]
 802537c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802537e:	041a      	lsls	r2, r3, #16
 8025380:	687b      	ldr	r3, [r7, #4]
 8025382:	681b      	ldr	r3, [r3, #0]
 8025384:	430a      	orrs	r2, r1
 8025386:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 802538a:	687b      	ldr	r3, [r7, #4]
 802538c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802538e:	005b      	lsls	r3, r3, #1
 8025390:	68ba      	ldr	r2, [r7, #8]
 8025392:	4413      	add	r3, r2
 8025394:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8025396:	687b      	ldr	r3, [r7, #4]
 8025398:	681b      	ldr	r3, [r3, #0]
 802539a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 802539e:	4b47      	ldr	r3, [pc, #284]	@ (80254bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80253a0:	4013      	ands	r3, r2
 80253a2:	68ba      	ldr	r2, [r7, #8]
 80253a4:	0091      	lsls	r1, r2, #2
 80253a6:	687a      	ldr	r2, [r7, #4]
 80253a8:	6812      	ldr	r2, [r2, #0]
 80253aa:	430b      	orrs	r3, r1
 80253ac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80253b0:	687b      	ldr	r3, [r7, #4]
 80253b2:	681b      	ldr	r3, [r3, #0]
 80253b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80253b8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80253bc:	687b      	ldr	r3, [r7, #4]
 80253be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80253c0:	041a      	lsls	r2, r3, #16
 80253c2:	687b      	ldr	r3, [r7, #4]
 80253c4:	681b      	ldr	r3, [r3, #0]
 80253c6:	430a      	orrs	r2, r1
 80253c8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80253cc:	687b      	ldr	r3, [r7, #4]
 80253ce:	681b      	ldr	r3, [r3, #0]
 80253d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80253d4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80253dc:	061a      	lsls	r2, r3, #24
 80253de:	687b      	ldr	r3, [r7, #4]
 80253e0:	681b      	ldr	r3, [r3, #0]
 80253e2:	430a      	orrs	r2, r1
 80253e4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80253e8:	687b      	ldr	r3, [r7, #4]
 80253ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80253ec:	4b34      	ldr	r3, [pc, #208]	@ (80254c0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80253ee:	4413      	add	r3, r2
 80253f0:	009a      	lsls	r2, r3, #2
 80253f2:	687b      	ldr	r3, [r7, #4]
 80253f4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80253f6:	687b      	ldr	r3, [r7, #4]
 80253f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80253fa:	687b      	ldr	r3, [r7, #4]
 80253fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80253fe:	009b      	lsls	r3, r3, #2
 8025400:	441a      	add	r2, r3
 8025402:	687b      	ldr	r3, [r7, #4]
 8025404:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8025406:	687b      	ldr	r3, [r7, #4]
 8025408:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 802540a:	687b      	ldr	r3, [r7, #4]
 802540c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802540e:	00db      	lsls	r3, r3, #3
 8025410:	441a      	add	r2, r3
 8025412:	687b      	ldr	r3, [r7, #4]
 8025414:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8025416:	687b      	ldr	r3, [r7, #4]
 8025418:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 802541a:	687b      	ldr	r3, [r7, #4]
 802541c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802541e:	6879      	ldr	r1, [r7, #4]
 8025420:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8025422:	fb01 f303 	mul.w	r3, r1, r3
 8025426:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8025428:	441a      	add	r2, r3
 802542a:	687b      	ldr	r3, [r7, #4]
 802542c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 802542e:	687b      	ldr	r3, [r7, #4]
 8025430:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8025432:	687b      	ldr	r3, [r7, #4]
 8025434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8025436:	6879      	ldr	r1, [r7, #4]
 8025438:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 802543a:	fb01 f303 	mul.w	r3, r1, r3
 802543e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8025440:	441a      	add	r2, r3
 8025442:	687b      	ldr	r3, [r7, #4]
 8025444:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8025446:	687b      	ldr	r3, [r7, #4]
 8025448:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 802544a:	687b      	ldr	r3, [r7, #4]
 802544c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802544e:	6879      	ldr	r1, [r7, #4]
 8025450:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8025452:	fb01 f303 	mul.w	r3, r1, r3
 8025456:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8025458:	441a      	add	r2, r3
 802545a:	687b      	ldr	r3, [r7, #4]
 802545c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8025466:	687b      	ldr	r3, [r7, #4]
 8025468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802546a:	00db      	lsls	r3, r3, #3
 802546c:	441a      	add	r2, r3
 802546e:	687b      	ldr	r3, [r7, #4]
 8025470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8025474:	687b      	ldr	r3, [r7, #4]
 8025476:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 802547a:	687b      	ldr	r3, [r7, #4]
 802547c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802547e:	6879      	ldr	r1, [r7, #4]
 8025480:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8025482:	fb01 f303 	mul.w	r3, r1, r3
 8025486:	009b      	lsls	r3, r3, #2
 8025488:	441a      	add	r2, r3
 802548a:	687b      	ldr	r3, [r7, #4]
 802548c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8025490:	687b      	ldr	r3, [r7, #4]
 8025492:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8025496:	687b      	ldr	r3, [r7, #4]
 8025498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802549a:	6879      	ldr	r1, [r7, #4]
 802549c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 802549e:	fb01 f303 	mul.w	r3, r1, r3
 80254a2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80254a4:	441a      	add	r2, r3
 80254a6:	687b      	ldr	r3, [r7, #4]
 80254a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80254ac:	687b      	ldr	r3, [r7, #4]
 80254ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80254b2:	4a04      	ldr	r2, [pc, #16]	@ (80254c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80254b4:	4293      	cmp	r3, r2
 80254b6:	d915      	bls.n	80254e4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80254b8:	e006      	b.n	80254c8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80254ba:	bf00      	nop
 80254bc:	ffff0003 	.word	0xffff0003
 80254c0:	10002b00 	.word	0x10002b00
 80254c4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80254c8:	687b      	ldr	r3, [r7, #4]
 80254ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80254ce:	f043 0220 	orr.w	r2, r3, #32
 80254d2:	687b      	ldr	r3, [r7, #4]
 80254d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80254d8:	687b      	ldr	r3, [r7, #4]
 80254da:	2203      	movs	r2, #3
 80254dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80254e0:	2301      	movs	r3, #1
 80254e2:	e010      	b.n	8025506 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80254e8:	60fb      	str	r3, [r7, #12]
 80254ea:	e005      	b.n	80254f8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80254ec:	68fb      	ldr	r3, [r7, #12]
 80254ee:	2200      	movs	r2, #0
 80254f0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80254f2:	68fb      	ldr	r3, [r7, #12]
 80254f4:	3304      	adds	r3, #4
 80254f6:	60fb      	str	r3, [r7, #12]
 80254f8:	687b      	ldr	r3, [r7, #4]
 80254fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80254fe:	68fa      	ldr	r2, [r7, #12]
 8025500:	429a      	cmp	r2, r3
 8025502:	d3f3      	bcc.n	80254ec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8025504:	2300      	movs	r3, #0
}
 8025506:	4618      	mov	r0, r3
 8025508:	3714      	adds	r7, #20
 802550a:	46bd      	mov	sp, r7
 802550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025510:	4770      	bx	lr
 8025512:	bf00      	nop

08025514 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8025514:	b580      	push	{r7, lr}
 8025516:	b08a      	sub	sp, #40	@ 0x28
 8025518:	af00      	add	r7, sp, #0
 802551a:	60f8      	str	r0, [r7, #12]
 802551c:	60b9      	str	r1, [r7, #8]
 802551e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8025520:	68bb      	ldr	r3, [r7, #8]
 8025522:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8025524:	687b      	ldr	r3, [r7, #4]
 8025526:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8025528:	2308      	movs	r3, #8
 802552a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802552c:	4b40      	ldr	r3, [pc, #256]	@ (8025630 <HAL_FLASH_Program+0x11c>)
 802552e:	7d1b      	ldrb	r3, [r3, #20]
 8025530:	2b01      	cmp	r3, #1
 8025532:	d101      	bne.n	8025538 <HAL_FLASH_Program+0x24>
 8025534:	2302      	movs	r3, #2
 8025536:	e076      	b.n	8025626 <HAL_FLASH_Program+0x112>
 8025538:	4b3d      	ldr	r3, [pc, #244]	@ (8025630 <HAL_FLASH_Program+0x11c>)
 802553a:	2201      	movs	r2, #1
 802553c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 802553e:	68bb      	ldr	r3, [r7, #8]
 8025540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8025544:	d306      	bcc.n	8025554 <HAL_FLASH_Program+0x40>
 8025546:	68bb      	ldr	r3, [r7, #8]
 8025548:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 802554c:	d202      	bcs.n	8025554 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 802554e:	2301      	movs	r3, #1
 8025550:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8025552:	e00c      	b.n	802556e <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8025554:	68bb      	ldr	r3, [r7, #8]
 8025556:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 802555a:	d306      	bcc.n	802556a <HAL_FLASH_Program+0x56>
 802555c:	68bb      	ldr	r3, [r7, #8]
 802555e:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 8025562:	d202      	bcs.n	802556a <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8025564:	2302      	movs	r3, #2
 8025566:	61bb      	str	r3, [r7, #24]
 8025568:	e001      	b.n	802556e <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 802556a:	2301      	movs	r3, #1
 802556c:	e05b      	b.n	8025626 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 802556e:	4b30      	ldr	r3, [pc, #192]	@ (8025630 <HAL_FLASH_Program+0x11c>)
 8025570:	2200      	movs	r2, #0
 8025572:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8025574:	69b9      	ldr	r1, [r7, #24]
 8025576:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802557a:	f000 f8c1 	bl	8025700 <FLASH_WaitForLastOperation>
 802557e:	4603      	mov	r3, r0
 8025580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8025584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8025588:	2b00      	cmp	r3, #0
 802558a:	d147      	bne.n	802561c <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 802558c:	69bb      	ldr	r3, [r7, #24]
 802558e:	2b01      	cmp	r3, #1
 8025590:	d106      	bne.n	80255a0 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8025592:	4b28      	ldr	r3, [pc, #160]	@ (8025634 <HAL_FLASH_Program+0x120>)
 8025594:	68db      	ldr	r3, [r3, #12]
 8025596:	4a27      	ldr	r2, [pc, #156]	@ (8025634 <HAL_FLASH_Program+0x120>)
 8025598:	f043 0302 	orr.w	r3, r3, #2
 802559c:	60d3      	str	r3, [r2, #12]
 802559e:	e007      	b.n	80255b0 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 80255a0:	4b24      	ldr	r3, [pc, #144]	@ (8025634 <HAL_FLASH_Program+0x120>)
 80255a2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80255a6:	4a23      	ldr	r2, [pc, #140]	@ (8025634 <HAL_FLASH_Program+0x120>)
 80255a8:	f043 0302 	orr.w	r3, r3, #2
 80255ac:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 80255b0:	f3bf 8f6f 	isb	sy
}
 80255b4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80255b6:	f3bf 8f4f 	dsb	sy
}
 80255ba:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80255bc:	69fb      	ldr	r3, [r7, #28]
 80255be:	681a      	ldr	r2, [r3, #0]
 80255c0:	6a3b      	ldr	r3, [r7, #32]
 80255c2:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80255c4:	6a3b      	ldr	r3, [r7, #32]
 80255c6:	3304      	adds	r3, #4
 80255c8:	623b      	str	r3, [r7, #32]
        src_addr++;
 80255ca:	69fb      	ldr	r3, [r7, #28]
 80255cc:	3304      	adds	r3, #4
 80255ce:	61fb      	str	r3, [r7, #28]
        row_index--;
 80255d0:	7dfb      	ldrb	r3, [r7, #23]
 80255d2:	3b01      	subs	r3, #1
 80255d4:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 80255d6:	7dfb      	ldrb	r3, [r7, #23]
 80255d8:	2b00      	cmp	r3, #0
 80255da:	d1ef      	bne.n	80255bc <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 80255dc:	f3bf 8f6f 	isb	sy
}
 80255e0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80255e2:	f3bf 8f4f 	dsb	sy
}
 80255e6:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80255e8:	69b9      	ldr	r1, [r7, #24]
 80255ea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80255ee:	f000 f887 	bl	8025700 <FLASH_WaitForLastOperation>
 80255f2:	4603      	mov	r3, r0
 80255f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 80255f8:	69bb      	ldr	r3, [r7, #24]
 80255fa:	2b01      	cmp	r3, #1
 80255fc:	d106      	bne.n	802560c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80255fe:	4b0d      	ldr	r3, [pc, #52]	@ (8025634 <HAL_FLASH_Program+0x120>)
 8025600:	68db      	ldr	r3, [r3, #12]
 8025602:	4a0c      	ldr	r2, [pc, #48]	@ (8025634 <HAL_FLASH_Program+0x120>)
 8025604:	f023 0302 	bic.w	r3, r3, #2
 8025608:	60d3      	str	r3, [r2, #12]
 802560a:	e007      	b.n	802561c <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 802560c:	4b09      	ldr	r3, [pc, #36]	@ (8025634 <HAL_FLASH_Program+0x120>)
 802560e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8025612:	4a08      	ldr	r2, [pc, #32]	@ (8025634 <HAL_FLASH_Program+0x120>)
 8025614:	f023 0302 	bic.w	r3, r3, #2
 8025618:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802561c:	4b04      	ldr	r3, [pc, #16]	@ (8025630 <HAL_FLASH_Program+0x11c>)
 802561e:	2200      	movs	r2, #0
 8025620:	751a      	strb	r2, [r3, #20]

  return status;
 8025622:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8025626:	4618      	mov	r0, r3
 8025628:	3728      	adds	r7, #40	@ 0x28
 802562a:	46bd      	mov	sp, r7
 802562c:	bd80      	pop	{r7, pc}
 802562e:	bf00      	nop
 8025630:	24000474 	.word	0x24000474
 8025634:	52002000 	.word	0x52002000

08025638 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8025638:	b480      	push	{r7}
 802563a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 802563c:	4b18      	ldr	r3, [pc, #96]	@ (80256a0 <HAL_FLASH_Unlock+0x68>)
 802563e:	68db      	ldr	r3, [r3, #12]
 8025640:	f003 0301 	and.w	r3, r3, #1
 8025644:	2b00      	cmp	r3, #0
 8025646:	d00d      	beq.n	8025664 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8025648:	4b15      	ldr	r3, [pc, #84]	@ (80256a0 <HAL_FLASH_Unlock+0x68>)
 802564a:	4a16      	ldr	r2, [pc, #88]	@ (80256a4 <HAL_FLASH_Unlock+0x6c>)
 802564c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 802564e:	4b14      	ldr	r3, [pc, #80]	@ (80256a0 <HAL_FLASH_Unlock+0x68>)
 8025650:	4a15      	ldr	r2, [pc, #84]	@ (80256a8 <HAL_FLASH_Unlock+0x70>)
 8025652:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8025654:	4b12      	ldr	r3, [pc, #72]	@ (80256a0 <HAL_FLASH_Unlock+0x68>)
 8025656:	68db      	ldr	r3, [r3, #12]
 8025658:	f003 0301 	and.w	r3, r3, #1
 802565c:	2b00      	cmp	r3, #0
 802565e:	d001      	beq.n	8025664 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8025660:	2301      	movs	r3, #1
 8025662:	e018      	b.n	8025696 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8025664:	4b0e      	ldr	r3, [pc, #56]	@ (80256a0 <HAL_FLASH_Unlock+0x68>)
 8025666:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 802566a:	f003 0301 	and.w	r3, r3, #1
 802566e:	2b00      	cmp	r3, #0
 8025670:	d010      	beq.n	8025694 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8025672:	4b0b      	ldr	r3, [pc, #44]	@ (80256a0 <HAL_FLASH_Unlock+0x68>)
 8025674:	4a0b      	ldr	r2, [pc, #44]	@ (80256a4 <HAL_FLASH_Unlock+0x6c>)
 8025676:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 802567a:	4b09      	ldr	r3, [pc, #36]	@ (80256a0 <HAL_FLASH_Unlock+0x68>)
 802567c:	4a0a      	ldr	r2, [pc, #40]	@ (80256a8 <HAL_FLASH_Unlock+0x70>)
 802567e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8025682:	4b07      	ldr	r3, [pc, #28]	@ (80256a0 <HAL_FLASH_Unlock+0x68>)
 8025684:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8025688:	f003 0301 	and.w	r3, r3, #1
 802568c:	2b00      	cmp	r3, #0
 802568e:	d001      	beq.n	8025694 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 8025690:	2301      	movs	r3, #1
 8025692:	e000      	b.n	8025696 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8025694:	2300      	movs	r3, #0
}
 8025696:	4618      	mov	r0, r3
 8025698:	46bd      	mov	sp, r7
 802569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802569e:	4770      	bx	lr
 80256a0:	52002000 	.word	0x52002000
 80256a4:	45670123 	.word	0x45670123
 80256a8:	cdef89ab 	.word	0xcdef89ab

080256ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80256ac:	b480      	push	{r7}
 80256ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80256b0:	4b12      	ldr	r3, [pc, #72]	@ (80256fc <HAL_FLASH_Lock+0x50>)
 80256b2:	68db      	ldr	r3, [r3, #12]
 80256b4:	4a11      	ldr	r2, [pc, #68]	@ (80256fc <HAL_FLASH_Lock+0x50>)
 80256b6:	f043 0301 	orr.w	r3, r3, #1
 80256ba:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80256bc:	4b0f      	ldr	r3, [pc, #60]	@ (80256fc <HAL_FLASH_Lock+0x50>)
 80256be:	68db      	ldr	r3, [r3, #12]
 80256c0:	f003 0301 	and.w	r3, r3, #1
 80256c4:	2b00      	cmp	r3, #0
 80256c6:	d101      	bne.n	80256cc <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80256c8:	2301      	movs	r3, #1
 80256ca:	e011      	b.n	80256f0 <HAL_FLASH_Lock+0x44>
  }

#if defined (DUAL_BANK)
  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 80256cc:	4b0b      	ldr	r3, [pc, #44]	@ (80256fc <HAL_FLASH_Lock+0x50>)
 80256ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80256d2:	4a0a      	ldr	r2, [pc, #40]	@ (80256fc <HAL_FLASH_Lock+0x50>)
 80256d4:	f043 0301 	orr.w	r3, r3, #1
 80256d8:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 80256dc:	4b07      	ldr	r3, [pc, #28]	@ (80256fc <HAL_FLASH_Lock+0x50>)
 80256de:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80256e2:	f003 0301 	and.w	r3, r3, #1
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	d101      	bne.n	80256ee <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 80256ea:	2301      	movs	r3, #1
 80256ec:	e000      	b.n	80256f0 <HAL_FLASH_Lock+0x44>
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80256ee:	2300      	movs	r3, #0
}
 80256f0:	4618      	mov	r0, r3
 80256f2:	46bd      	mov	sp, r7
 80256f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256f8:	4770      	bx	lr
 80256fa:	bf00      	nop
 80256fc:	52002000 	.word	0x52002000

08025700 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8025700:	b580      	push	{r7, lr}
 8025702:	b086      	sub	sp, #24
 8025704:	af00      	add	r7, sp, #0
 8025706:	6078      	str	r0, [r7, #4]
 8025708:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 802570a:	2304      	movs	r3, #4
 802570c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 802570e:	2300      	movs	r3, #0
 8025710:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8025712:	f7fe fe09 	bl	8024328 <HAL_GetTick>
 8025716:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8025718:	683b      	ldr	r3, [r7, #0]
 802571a:	2b02      	cmp	r3, #2
 802571c:	d113      	bne.n	8025746 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 802571e:	4b41      	ldr	r3, [pc, #260]	@ (8025824 <FLASH_WaitForLastOperation+0x124>)
 8025720:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8025722:	e010      	b.n	8025746 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8025724:	687b      	ldr	r3, [r7, #4]
 8025726:	f1b3 3fff 	cmp.w	r3, #4294967295
 802572a:	d00c      	beq.n	8025746 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802572c:	f7fe fdfc 	bl	8024328 <HAL_GetTick>
 8025730:	4602      	mov	r2, r0
 8025732:	68fb      	ldr	r3, [r7, #12]
 8025734:	1ad3      	subs	r3, r2, r3
 8025736:	687a      	ldr	r2, [r7, #4]
 8025738:	429a      	cmp	r2, r3
 802573a:	d302      	bcc.n	8025742 <FLASH_WaitForLastOperation+0x42>
 802573c:	687b      	ldr	r3, [r7, #4]
 802573e:	2b00      	cmp	r3, #0
 8025740:	d101      	bne.n	8025746 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8025742:	2303      	movs	r3, #3
 8025744:	e06a      	b.n	802581c <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8025746:	697a      	ldr	r2, [r7, #20]
 8025748:	4b37      	ldr	r3, [pc, #220]	@ (8025828 <FLASH_WaitForLastOperation+0x128>)
 802574a:	4013      	ands	r3, r2
 802574c:	697a      	ldr	r2, [r7, #20]
 802574e:	429a      	cmp	r2, r3
 8025750:	d10a      	bne.n	8025768 <FLASH_WaitForLastOperation+0x68>
 8025752:	4b36      	ldr	r3, [pc, #216]	@ (802582c <FLASH_WaitForLastOperation+0x12c>)
 8025754:	691a      	ldr	r2, [r3, #16]
 8025756:	697b      	ldr	r3, [r7, #20]
 8025758:	4013      	ands	r3, r2
 802575a:	697a      	ldr	r2, [r7, #20]
 802575c:	429a      	cmp	r2, r3
 802575e:	bf0c      	ite	eq
 8025760:	2301      	moveq	r3, #1
 8025762:	2300      	movne	r3, #0
 8025764:	b2db      	uxtb	r3, r3
 8025766:	e00c      	b.n	8025782 <FLASH_WaitForLastOperation+0x82>
 8025768:	4b30      	ldr	r3, [pc, #192]	@ (802582c <FLASH_WaitForLastOperation+0x12c>)
 802576a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 802576e:	43da      	mvns	r2, r3
 8025770:	697b      	ldr	r3, [r7, #20]
 8025772:	4013      	ands	r3, r2
 8025774:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8025778:	2b00      	cmp	r3, #0
 802577a:	bf0c      	ite	eq
 802577c:	2301      	moveq	r3, #1
 802577e:	2300      	movne	r3, #0
 8025780:	b2db      	uxtb	r3, r3
 8025782:	2b00      	cmp	r3, #0
 8025784:	d1ce      	bne.n	8025724 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8025786:	683b      	ldr	r3, [r7, #0]
 8025788:	2b01      	cmp	r3, #1
 802578a:	d105      	bne.n	8025798 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 802578c:	4b27      	ldr	r3, [pc, #156]	@ (802582c <FLASH_WaitForLastOperation+0x12c>)
 802578e:	691a      	ldr	r2, [r3, #16]
 8025790:	4b27      	ldr	r3, [pc, #156]	@ (8025830 <FLASH_WaitForLastOperation+0x130>)
 8025792:	4013      	ands	r3, r2
 8025794:	613b      	str	r3, [r7, #16]
 8025796:	e007      	b.n	80257a8 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8025798:	4b24      	ldr	r3, [pc, #144]	@ (802582c <FLASH_WaitForLastOperation+0x12c>)
 802579a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 802579e:	4b24      	ldr	r3, [pc, #144]	@ (8025830 <FLASH_WaitForLastOperation+0x130>)
 80257a0:	4013      	ands	r3, r2
 80257a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80257a6:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80257a8:	693b      	ldr	r3, [r7, #16]
 80257aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	d017      	beq.n	80257e2 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80257b2:	4b20      	ldr	r3, [pc, #128]	@ (8025834 <FLASH_WaitForLastOperation+0x134>)
 80257b4:	699a      	ldr	r2, [r3, #24]
 80257b6:	693b      	ldr	r3, [r7, #16]
 80257b8:	4313      	orrs	r3, r2
 80257ba:	4a1e      	ldr	r2, [pc, #120]	@ (8025834 <FLASH_WaitForLastOperation+0x134>)
 80257bc:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80257be:	693a      	ldr	r2, [r7, #16]
 80257c0:	4b19      	ldr	r3, [pc, #100]	@ (8025828 <FLASH_WaitForLastOperation+0x128>)
 80257c2:	4013      	ands	r3, r2
 80257c4:	693a      	ldr	r2, [r7, #16]
 80257c6:	429a      	cmp	r2, r3
 80257c8:	d103      	bne.n	80257d2 <FLASH_WaitForLastOperation+0xd2>
 80257ca:	4a18      	ldr	r2, [pc, #96]	@ (802582c <FLASH_WaitForLastOperation+0x12c>)
 80257cc:	693b      	ldr	r3, [r7, #16]
 80257ce:	6153      	str	r3, [r2, #20]
 80257d0:	e005      	b.n	80257de <FLASH_WaitForLastOperation+0xde>
 80257d2:	4a16      	ldr	r2, [pc, #88]	@ (802582c <FLASH_WaitForLastOperation+0x12c>)
 80257d4:	693b      	ldr	r3, [r7, #16]
 80257d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80257da:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    return HAL_ERROR;
 80257de:	2301      	movs	r3, #1
 80257e0:	e01c      	b.n	802581c <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80257e2:	683b      	ldr	r3, [r7, #0]
 80257e4:	2b01      	cmp	r3, #1
 80257e6:	d10b      	bne.n	8025800 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80257e8:	4b10      	ldr	r3, [pc, #64]	@ (802582c <FLASH_WaitForLastOperation+0x12c>)
 80257ea:	691b      	ldr	r3, [r3, #16]
 80257ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80257f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80257f4:	d111      	bne.n	802581a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80257f6:	4b0d      	ldr	r3, [pc, #52]	@ (802582c <FLASH_WaitForLastOperation+0x12c>)
 80257f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80257fc:	615a      	str	r2, [r3, #20]
 80257fe:	e00c      	b.n	802581a <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8025800:	4b0a      	ldr	r3, [pc, #40]	@ (802582c <FLASH_WaitForLastOperation+0x12c>)
 8025802:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8025806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802580a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802580e:	d104      	bne.n	802581a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8025810:	4b06      	ldr	r3, [pc, #24]	@ (802582c <FLASH_WaitForLastOperation+0x12c>)
 8025812:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8025816:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 802581a:	2300      	movs	r3, #0
}
 802581c:	4618      	mov	r0, r3
 802581e:	3718      	adds	r7, #24
 8025820:	46bd      	mov	sp, r7
 8025822:	bd80      	pop	{r7, pc}
 8025824:	80000004 	.word	0x80000004
 8025828:	1fef000f 	.word	0x1fef000f
 802582c:	52002000 	.word	0x52002000
 8025830:	17ee0000 	.word	0x17ee0000
 8025834:	24000474 	.word	0x24000474

08025838 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8025838:	b580      	push	{r7, lr}
 802583a:	b084      	sub	sp, #16
 802583c:	af00      	add	r7, sp, #0
 802583e:	6078      	str	r0, [r7, #4]
 8025840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8025842:	2300      	movs	r3, #0
 8025844:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8025846:	4b5e      	ldr	r3, [pc, #376]	@ (80259c0 <HAL_FLASHEx_Erase+0x188>)
 8025848:	7d1b      	ldrb	r3, [r3, #20]
 802584a:	2b01      	cmp	r3, #1
 802584c:	d101      	bne.n	8025852 <HAL_FLASHEx_Erase+0x1a>
 802584e:	2302      	movs	r3, #2
 8025850:	e0b2      	b.n	80259b8 <HAL_FLASHEx_Erase+0x180>
 8025852:	4b5b      	ldr	r3, [pc, #364]	@ (80259c0 <HAL_FLASHEx_Erase+0x188>)
 8025854:	2201      	movs	r2, #1
 8025856:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8025858:	4b59      	ldr	r3, [pc, #356]	@ (80259c0 <HAL_FLASHEx_Erase+0x188>)
 802585a:	2200      	movs	r2, #0
 802585c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 802585e:	687b      	ldr	r3, [r7, #4]
 8025860:	685b      	ldr	r3, [r3, #4]
 8025862:	f003 0301 	and.w	r3, r3, #1
 8025866:	2b00      	cmp	r3, #0
 8025868:	d009      	beq.n	802587e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 802586a:	2101      	movs	r1, #1
 802586c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8025870:	f7ff ff46 	bl	8025700 <FLASH_WaitForLastOperation>
 8025874:	4603      	mov	r3, r0
 8025876:	2b00      	cmp	r3, #0
 8025878:	d001      	beq.n	802587e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 802587a:	2301      	movs	r3, #1
 802587c:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 802587e:	687b      	ldr	r3, [r7, #4]
 8025880:	685b      	ldr	r3, [r3, #4]
 8025882:	f003 0302 	and.w	r3, r3, #2
 8025886:	2b00      	cmp	r3, #0
 8025888:	d009      	beq.n	802589e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 802588a:	2102      	movs	r1, #2
 802588c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8025890:	f7ff ff36 	bl	8025700 <FLASH_WaitForLastOperation>
 8025894:	4603      	mov	r3, r0
 8025896:	2b00      	cmp	r3, #0
 8025898:	d001      	beq.n	802589e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 802589a:	2301      	movs	r3, #1
 802589c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 802589e:	7bfb      	ldrb	r3, [r7, #15]
 80258a0:	2b00      	cmp	r3, #0
 80258a2:	f040 8085 	bne.w	80259b0 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80258a6:	687b      	ldr	r3, [r7, #4]
 80258a8:	681b      	ldr	r3, [r3, #0]
 80258aa:	2b01      	cmp	r3, #1
 80258ac:	d136      	bne.n	802591c <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80258ae:	687b      	ldr	r3, [r7, #4]
 80258b0:	691a      	ldr	r2, [r3, #16]
 80258b2:	687b      	ldr	r3, [r7, #4]
 80258b4:	685b      	ldr	r3, [r3, #4]
 80258b6:	4619      	mov	r1, r3
 80258b8:	4610      	mov	r0, r2
 80258ba:	f000 f887 	bl	80259cc <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80258be:	687b      	ldr	r3, [r7, #4]
 80258c0:	685b      	ldr	r3, [r3, #4]
 80258c2:	f003 0301 	and.w	r3, r3, #1
 80258c6:	2b00      	cmp	r3, #0
 80258c8:	d00f      	beq.n	80258ea <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80258ca:	2101      	movs	r1, #1
 80258cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80258d0:	f7ff ff16 	bl	8025700 <FLASH_WaitForLastOperation>
 80258d4:	4603      	mov	r3, r0
 80258d6:	2b00      	cmp	r3, #0
 80258d8:	d001      	beq.n	80258de <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 80258da:	2301      	movs	r3, #1
 80258dc:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80258de:	4b39      	ldr	r3, [pc, #228]	@ (80259c4 <HAL_FLASHEx_Erase+0x18c>)
 80258e0:	68db      	ldr	r3, [r3, #12]
 80258e2:	4a38      	ldr	r2, [pc, #224]	@ (80259c4 <HAL_FLASHEx_Erase+0x18c>)
 80258e4:	f023 0308 	bic.w	r3, r3, #8
 80258e8:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80258ea:	687b      	ldr	r3, [r7, #4]
 80258ec:	685b      	ldr	r3, [r3, #4]
 80258ee:	f003 0302 	and.w	r3, r3, #2
 80258f2:	2b00      	cmp	r3, #0
 80258f4:	d05c      	beq.n	80259b0 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80258f6:	2102      	movs	r1, #2
 80258f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80258fc:	f7ff ff00 	bl	8025700 <FLASH_WaitForLastOperation>
 8025900:	4603      	mov	r3, r0
 8025902:	2b00      	cmp	r3, #0
 8025904:	d001      	beq.n	802590a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8025906:	2301      	movs	r3, #1
 8025908:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 802590a:	4b2e      	ldr	r3, [pc, #184]	@ (80259c4 <HAL_FLASHEx_Erase+0x18c>)
 802590c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8025910:	4a2c      	ldr	r2, [pc, #176]	@ (80259c4 <HAL_FLASHEx_Erase+0x18c>)
 8025912:	f023 0308 	bic.w	r3, r3, #8
 8025916:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
 802591a:	e049      	b.n	80259b0 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 802591c:	683b      	ldr	r3, [r7, #0]
 802591e:	f04f 32ff 	mov.w	r2, #4294967295
 8025922:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8025924:	687b      	ldr	r3, [r7, #4]
 8025926:	689b      	ldr	r3, [r3, #8]
 8025928:	60bb      	str	r3, [r7, #8]
 802592a:	e039      	b.n	80259a0 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 802592c:	687b      	ldr	r3, [r7, #4]
 802592e:	6859      	ldr	r1, [r3, #4]
 8025930:	687b      	ldr	r3, [r7, #4]
 8025932:	691b      	ldr	r3, [r3, #16]
 8025934:	461a      	mov	r2, r3
 8025936:	68b8      	ldr	r0, [r7, #8]
 8025938:	f000 f8b2 	bl	8025aa0 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 802593c:	687b      	ldr	r3, [r7, #4]
 802593e:	685b      	ldr	r3, [r3, #4]
 8025940:	f003 0301 	and.w	r3, r3, #1
 8025944:	2b00      	cmp	r3, #0
 8025946:	d00c      	beq.n	8025962 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8025948:	2101      	movs	r1, #1
 802594a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802594e:	f7ff fed7 	bl	8025700 <FLASH_WaitForLastOperation>
 8025952:	4603      	mov	r3, r0
 8025954:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8025956:	4b1b      	ldr	r3, [pc, #108]	@ (80259c4 <HAL_FLASHEx_Erase+0x18c>)
 8025958:	68da      	ldr	r2, [r3, #12]
 802595a:	491a      	ldr	r1, [pc, #104]	@ (80259c4 <HAL_FLASHEx_Erase+0x18c>)
 802595c:	4b1a      	ldr	r3, [pc, #104]	@ (80259c8 <HAL_FLASHEx_Erase+0x190>)
 802595e:	4013      	ands	r3, r2
 8025960:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8025962:	687b      	ldr	r3, [r7, #4]
 8025964:	685b      	ldr	r3, [r3, #4]
 8025966:	f003 0302 	and.w	r3, r3, #2
 802596a:	2b00      	cmp	r3, #0
 802596c:	d00e      	beq.n	802598c <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 802596e:	2102      	movs	r1, #2
 8025970:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8025974:	f7ff fec4 	bl	8025700 <FLASH_WaitForLastOperation>
 8025978:	4603      	mov	r3, r0
 802597a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 802597c:	4b11      	ldr	r3, [pc, #68]	@ (80259c4 <HAL_FLASHEx_Erase+0x18c>)
 802597e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8025982:	4910      	ldr	r1, [pc, #64]	@ (80259c4 <HAL_FLASHEx_Erase+0x18c>)
 8025984:	4b10      	ldr	r3, [pc, #64]	@ (80259c8 <HAL_FLASHEx_Erase+0x190>)
 8025986:	4013      	ands	r3, r2
 8025988:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 802598c:	7bfb      	ldrb	r3, [r7, #15]
 802598e:	2b00      	cmp	r3, #0
 8025990:	d003      	beq.n	802599a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8025992:	683b      	ldr	r3, [r7, #0]
 8025994:	68ba      	ldr	r2, [r7, #8]
 8025996:	601a      	str	r2, [r3, #0]
          break;
 8025998:	e00a      	b.n	80259b0 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 802599a:	68bb      	ldr	r3, [r7, #8]
 802599c:	3301      	adds	r3, #1
 802599e:	60bb      	str	r3, [r7, #8]
 80259a0:	687b      	ldr	r3, [r7, #4]
 80259a2:	68da      	ldr	r2, [r3, #12]
 80259a4:	687b      	ldr	r3, [r7, #4]
 80259a6:	689b      	ldr	r3, [r3, #8]
 80259a8:	4413      	add	r3, r2
 80259aa:	68ba      	ldr	r2, [r7, #8]
 80259ac:	429a      	cmp	r2, r3
 80259ae:	d3bd      	bcc.n	802592c <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80259b0:	4b03      	ldr	r3, [pc, #12]	@ (80259c0 <HAL_FLASHEx_Erase+0x188>)
 80259b2:	2200      	movs	r2, #0
 80259b4:	751a      	strb	r2, [r3, #20]

  return status;
 80259b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80259b8:	4618      	mov	r0, r3
 80259ba:	3710      	adds	r7, #16
 80259bc:	46bd      	mov	sp, r7
 80259be:	bd80      	pop	{r7, pc}
 80259c0:	24000474 	.word	0x24000474
 80259c4:	52002000 	.word	0x52002000
 80259c8:	fffff8fb 	.word	0xfffff8fb

080259cc <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80259cc:	b480      	push	{r7}
 80259ce:	b083      	sub	sp, #12
 80259d0:	af00      	add	r7, sp, #0
 80259d2:	6078      	str	r0, [r7, #4]
 80259d4:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80259d6:	683b      	ldr	r3, [r7, #0]
 80259d8:	f003 0303 	and.w	r3, r3, #3
 80259dc:	2b03      	cmp	r3, #3
 80259de:	d122      	bne.n	8025a26 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80259e0:	4b2e      	ldr	r3, [pc, #184]	@ (8025a9c <FLASH_MassErase+0xd0>)
 80259e2:	68db      	ldr	r3, [r3, #12]
 80259e4:	4a2d      	ldr	r2, [pc, #180]	@ (8025a9c <FLASH_MassErase+0xd0>)
 80259e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80259ea:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 80259ec:	4b2b      	ldr	r3, [pc, #172]	@ (8025a9c <FLASH_MassErase+0xd0>)
 80259ee:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80259f2:	4a2a      	ldr	r2, [pc, #168]	@ (8025a9c <FLASH_MassErase+0xd0>)
 80259f4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80259f8:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 80259fc:	4b27      	ldr	r3, [pc, #156]	@ (8025a9c <FLASH_MassErase+0xd0>)
 80259fe:	68da      	ldr	r2, [r3, #12]
 8025a00:	4926      	ldr	r1, [pc, #152]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a02:	687b      	ldr	r3, [r7, #4]
 8025a04:	4313      	orrs	r3, r2
 8025a06:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 8025a08:	4b24      	ldr	r3, [pc, #144]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a0a:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8025a0e:	4923      	ldr	r1, [pc, #140]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a10:	687b      	ldr	r3, [r7, #4]
 8025a12:	4313      	orrs	r3, r2
 8025a14:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 8025a18:	4b20      	ldr	r3, [pc, #128]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a1a:	699b      	ldr	r3, [r3, #24]
 8025a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a1e:	f043 0310 	orr.w	r3, r3, #16
 8025a22:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8025a24:	e033      	b.n	8025a8e <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8025a26:	683b      	ldr	r3, [r7, #0]
 8025a28:	f003 0301 	and.w	r3, r3, #1
 8025a2c:	2b00      	cmp	r3, #0
 8025a2e:	d011      	beq.n	8025a54 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8025a30:	4b1a      	ldr	r3, [pc, #104]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a32:	68db      	ldr	r3, [r3, #12]
 8025a34:	4a19      	ldr	r2, [pc, #100]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8025a3a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8025a3c:	4b17      	ldr	r3, [pc, #92]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a3e:	68da      	ldr	r2, [r3, #12]
 8025a40:	4916      	ldr	r1, [pc, #88]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a42:	687b      	ldr	r3, [r7, #4]
 8025a44:	4313      	orrs	r3, r2
 8025a46:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8025a48:	4b14      	ldr	r3, [pc, #80]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a4a:	68db      	ldr	r3, [r3, #12]
 8025a4c:	4a13      	ldr	r2, [pc, #76]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a4e:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8025a52:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8025a54:	683b      	ldr	r3, [r7, #0]
 8025a56:	f003 0302 	and.w	r3, r3, #2
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	d017      	beq.n	8025a8e <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8025a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a60:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8025a64:	4a0d      	ldr	r2, [pc, #52]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a66:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8025a6a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
      FLASH->CR2 |= VoltageRange;
 8025a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a70:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8025a74:	4909      	ldr	r1, [pc, #36]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a76:	687b      	ldr	r3, [r7, #4]
 8025a78:	4313      	orrs	r3, r2
 8025a7a:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8025a7e:	4b07      	ldr	r3, [pc, #28]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a80:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8025a84:	4a05      	ldr	r2, [pc, #20]	@ (8025a9c <FLASH_MassErase+0xd0>)
 8025a86:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8025a8a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
}
 8025a8e:	bf00      	nop
 8025a90:	370c      	adds	r7, #12
 8025a92:	46bd      	mov	sp, r7
 8025a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a98:	4770      	bx	lr
 8025a9a:	bf00      	nop
 8025a9c:	52002000 	.word	0x52002000

08025aa0 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8025aa0:	b480      	push	{r7}
 8025aa2:	b085      	sub	sp, #20
 8025aa4:	af00      	add	r7, sp, #0
 8025aa6:	60f8      	str	r0, [r7, #12]
 8025aa8:	60b9      	str	r1, [r7, #8]
 8025aaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8025aac:	68bb      	ldr	r3, [r7, #8]
 8025aae:	f003 0301 	and.w	r3, r3, #1
 8025ab2:	2b00      	cmp	r3, #0
 8025ab4:	d010      	beq.n	8025ad8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8025ab6:	4b18      	ldr	r3, [pc, #96]	@ (8025b18 <FLASH_Erase_Sector+0x78>)
 8025ab8:	68db      	ldr	r3, [r3, #12]
 8025aba:	4a17      	ldr	r2, [pc, #92]	@ (8025b18 <FLASH_Erase_Sector+0x78>)
 8025abc:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8025ac0:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8025ac2:	4b15      	ldr	r3, [pc, #84]	@ (8025b18 <FLASH_Erase_Sector+0x78>)
 8025ac4:	68da      	ldr	r2, [r3, #12]
 8025ac6:	68fb      	ldr	r3, [r7, #12]
 8025ac8:	0219      	lsls	r1, r3, #8
 8025aca:	687b      	ldr	r3, [r7, #4]
 8025acc:	430b      	orrs	r3, r1
 8025ace:	4313      	orrs	r3, r2
 8025ad0:	4a11      	ldr	r2, [pc, #68]	@ (8025b18 <FLASH_Erase_Sector+0x78>)
 8025ad2:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8025ad6:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8025ad8:	68bb      	ldr	r3, [r7, #8]
 8025ada:	f003 0302 	and.w	r3, r3, #2
 8025ade:	2b00      	cmp	r3, #0
 8025ae0:	d014      	beq.n	8025b0c <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8025ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8025b18 <FLASH_Erase_Sector+0x78>)
 8025ae4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8025ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8025b18 <FLASH_Erase_Sector+0x78>)
 8025aea:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8025aee:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8025af2:	4b09      	ldr	r3, [pc, #36]	@ (8025b18 <FLASH_Erase_Sector+0x78>)
 8025af4:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8025af8:	68fb      	ldr	r3, [r7, #12]
 8025afa:	0219      	lsls	r1, r3, #8
 8025afc:	687b      	ldr	r3, [r7, #4]
 8025afe:	430b      	orrs	r3, r1
 8025b00:	4313      	orrs	r3, r2
 8025b02:	4a05      	ldr	r2, [pc, #20]	@ (8025b18 <FLASH_Erase_Sector+0x78>)
 8025b04:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8025b08:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8025b0c:	bf00      	nop
 8025b0e:	3714      	adds	r7, #20
 8025b10:	46bd      	mov	sp, r7
 8025b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b16:	4770      	bx	lr
 8025b18:	52002000 	.word	0x52002000

08025b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8025b1c:	b480      	push	{r7}
 8025b1e:	b089      	sub	sp, #36	@ 0x24
 8025b20:	af00      	add	r7, sp, #0
 8025b22:	6078      	str	r0, [r7, #4]
 8025b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8025b26:	2300      	movs	r3, #0
 8025b28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8025b2a:	4b89      	ldr	r3, [pc, #548]	@ (8025d50 <HAL_GPIO_Init+0x234>)
 8025b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8025b2e:	e194      	b.n	8025e5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8025b30:	683b      	ldr	r3, [r7, #0]
 8025b32:	681a      	ldr	r2, [r3, #0]
 8025b34:	2101      	movs	r1, #1
 8025b36:	69fb      	ldr	r3, [r7, #28]
 8025b38:	fa01 f303 	lsl.w	r3, r1, r3
 8025b3c:	4013      	ands	r3, r2
 8025b3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8025b40:	693b      	ldr	r3, [r7, #16]
 8025b42:	2b00      	cmp	r3, #0
 8025b44:	f000 8186 	beq.w	8025e54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8025b48:	683b      	ldr	r3, [r7, #0]
 8025b4a:	685b      	ldr	r3, [r3, #4]
 8025b4c:	f003 0303 	and.w	r3, r3, #3
 8025b50:	2b01      	cmp	r3, #1
 8025b52:	d005      	beq.n	8025b60 <HAL_GPIO_Init+0x44>
 8025b54:	683b      	ldr	r3, [r7, #0]
 8025b56:	685b      	ldr	r3, [r3, #4]
 8025b58:	f003 0303 	and.w	r3, r3, #3
 8025b5c:	2b02      	cmp	r3, #2
 8025b5e:	d130      	bne.n	8025bc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8025b60:	687b      	ldr	r3, [r7, #4]
 8025b62:	689b      	ldr	r3, [r3, #8]
 8025b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8025b66:	69fb      	ldr	r3, [r7, #28]
 8025b68:	005b      	lsls	r3, r3, #1
 8025b6a:	2203      	movs	r2, #3
 8025b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8025b70:	43db      	mvns	r3, r3
 8025b72:	69ba      	ldr	r2, [r7, #24]
 8025b74:	4013      	ands	r3, r2
 8025b76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8025b78:	683b      	ldr	r3, [r7, #0]
 8025b7a:	68da      	ldr	r2, [r3, #12]
 8025b7c:	69fb      	ldr	r3, [r7, #28]
 8025b7e:	005b      	lsls	r3, r3, #1
 8025b80:	fa02 f303 	lsl.w	r3, r2, r3
 8025b84:	69ba      	ldr	r2, [r7, #24]
 8025b86:	4313      	orrs	r3, r2
 8025b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8025b8a:	687b      	ldr	r3, [r7, #4]
 8025b8c:	69ba      	ldr	r2, [r7, #24]
 8025b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8025b90:	687b      	ldr	r3, [r7, #4]
 8025b92:	685b      	ldr	r3, [r3, #4]
 8025b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8025b96:	2201      	movs	r2, #1
 8025b98:	69fb      	ldr	r3, [r7, #28]
 8025b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8025b9e:	43db      	mvns	r3, r3
 8025ba0:	69ba      	ldr	r2, [r7, #24]
 8025ba2:	4013      	ands	r3, r2
 8025ba4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8025ba6:	683b      	ldr	r3, [r7, #0]
 8025ba8:	685b      	ldr	r3, [r3, #4]
 8025baa:	091b      	lsrs	r3, r3, #4
 8025bac:	f003 0201 	and.w	r2, r3, #1
 8025bb0:	69fb      	ldr	r3, [r7, #28]
 8025bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8025bb6:	69ba      	ldr	r2, [r7, #24]
 8025bb8:	4313      	orrs	r3, r2
 8025bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8025bbc:	687b      	ldr	r3, [r7, #4]
 8025bbe:	69ba      	ldr	r2, [r7, #24]
 8025bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8025bc2:	683b      	ldr	r3, [r7, #0]
 8025bc4:	685b      	ldr	r3, [r3, #4]
 8025bc6:	f003 0303 	and.w	r3, r3, #3
 8025bca:	2b03      	cmp	r3, #3
 8025bcc:	d017      	beq.n	8025bfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	68db      	ldr	r3, [r3, #12]
 8025bd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8025bd4:	69fb      	ldr	r3, [r7, #28]
 8025bd6:	005b      	lsls	r3, r3, #1
 8025bd8:	2203      	movs	r2, #3
 8025bda:	fa02 f303 	lsl.w	r3, r2, r3
 8025bde:	43db      	mvns	r3, r3
 8025be0:	69ba      	ldr	r2, [r7, #24]
 8025be2:	4013      	ands	r3, r2
 8025be4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8025be6:	683b      	ldr	r3, [r7, #0]
 8025be8:	689a      	ldr	r2, [r3, #8]
 8025bea:	69fb      	ldr	r3, [r7, #28]
 8025bec:	005b      	lsls	r3, r3, #1
 8025bee:	fa02 f303 	lsl.w	r3, r2, r3
 8025bf2:	69ba      	ldr	r2, [r7, #24]
 8025bf4:	4313      	orrs	r3, r2
 8025bf6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8025bf8:	687b      	ldr	r3, [r7, #4]
 8025bfa:	69ba      	ldr	r2, [r7, #24]
 8025bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8025bfe:	683b      	ldr	r3, [r7, #0]
 8025c00:	685b      	ldr	r3, [r3, #4]
 8025c02:	f003 0303 	and.w	r3, r3, #3
 8025c06:	2b02      	cmp	r3, #2
 8025c08:	d123      	bne.n	8025c52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8025c0a:	69fb      	ldr	r3, [r7, #28]
 8025c0c:	08da      	lsrs	r2, r3, #3
 8025c0e:	687b      	ldr	r3, [r7, #4]
 8025c10:	3208      	adds	r2, #8
 8025c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8025c18:	69fb      	ldr	r3, [r7, #28]
 8025c1a:	f003 0307 	and.w	r3, r3, #7
 8025c1e:	009b      	lsls	r3, r3, #2
 8025c20:	220f      	movs	r2, #15
 8025c22:	fa02 f303 	lsl.w	r3, r2, r3
 8025c26:	43db      	mvns	r3, r3
 8025c28:	69ba      	ldr	r2, [r7, #24]
 8025c2a:	4013      	ands	r3, r2
 8025c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8025c2e:	683b      	ldr	r3, [r7, #0]
 8025c30:	691a      	ldr	r2, [r3, #16]
 8025c32:	69fb      	ldr	r3, [r7, #28]
 8025c34:	f003 0307 	and.w	r3, r3, #7
 8025c38:	009b      	lsls	r3, r3, #2
 8025c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8025c3e:	69ba      	ldr	r2, [r7, #24]
 8025c40:	4313      	orrs	r3, r2
 8025c42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8025c44:	69fb      	ldr	r3, [r7, #28]
 8025c46:	08da      	lsrs	r2, r3, #3
 8025c48:	687b      	ldr	r3, [r7, #4]
 8025c4a:	3208      	adds	r2, #8
 8025c4c:	69b9      	ldr	r1, [r7, #24]
 8025c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8025c52:	687b      	ldr	r3, [r7, #4]
 8025c54:	681b      	ldr	r3, [r3, #0]
 8025c56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8025c58:	69fb      	ldr	r3, [r7, #28]
 8025c5a:	005b      	lsls	r3, r3, #1
 8025c5c:	2203      	movs	r2, #3
 8025c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8025c62:	43db      	mvns	r3, r3
 8025c64:	69ba      	ldr	r2, [r7, #24]
 8025c66:	4013      	ands	r3, r2
 8025c68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8025c6a:	683b      	ldr	r3, [r7, #0]
 8025c6c:	685b      	ldr	r3, [r3, #4]
 8025c6e:	f003 0203 	and.w	r2, r3, #3
 8025c72:	69fb      	ldr	r3, [r7, #28]
 8025c74:	005b      	lsls	r3, r3, #1
 8025c76:	fa02 f303 	lsl.w	r3, r2, r3
 8025c7a:	69ba      	ldr	r2, [r7, #24]
 8025c7c:	4313      	orrs	r3, r2
 8025c7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8025c80:	687b      	ldr	r3, [r7, #4]
 8025c82:	69ba      	ldr	r2, [r7, #24]
 8025c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8025c86:	683b      	ldr	r3, [r7, #0]
 8025c88:	685b      	ldr	r3, [r3, #4]
 8025c8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8025c8e:	2b00      	cmp	r3, #0
 8025c90:	f000 80e0 	beq.w	8025e54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8025c94:	4b2f      	ldr	r3, [pc, #188]	@ (8025d54 <HAL_GPIO_Init+0x238>)
 8025c96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8025c9a:	4a2e      	ldr	r2, [pc, #184]	@ (8025d54 <HAL_GPIO_Init+0x238>)
 8025c9c:	f043 0302 	orr.w	r3, r3, #2
 8025ca0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8025ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8025d54 <HAL_GPIO_Init+0x238>)
 8025ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8025caa:	f003 0302 	and.w	r3, r3, #2
 8025cae:	60fb      	str	r3, [r7, #12]
 8025cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8025cb2:	4a29      	ldr	r2, [pc, #164]	@ (8025d58 <HAL_GPIO_Init+0x23c>)
 8025cb4:	69fb      	ldr	r3, [r7, #28]
 8025cb6:	089b      	lsrs	r3, r3, #2
 8025cb8:	3302      	adds	r3, #2
 8025cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8025cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8025cc0:	69fb      	ldr	r3, [r7, #28]
 8025cc2:	f003 0303 	and.w	r3, r3, #3
 8025cc6:	009b      	lsls	r3, r3, #2
 8025cc8:	220f      	movs	r2, #15
 8025cca:	fa02 f303 	lsl.w	r3, r2, r3
 8025cce:	43db      	mvns	r3, r3
 8025cd0:	69ba      	ldr	r2, [r7, #24]
 8025cd2:	4013      	ands	r3, r2
 8025cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8025cd6:	687b      	ldr	r3, [r7, #4]
 8025cd8:	4a20      	ldr	r2, [pc, #128]	@ (8025d5c <HAL_GPIO_Init+0x240>)
 8025cda:	4293      	cmp	r3, r2
 8025cdc:	d052      	beq.n	8025d84 <HAL_GPIO_Init+0x268>
 8025cde:	687b      	ldr	r3, [r7, #4]
 8025ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8025d60 <HAL_GPIO_Init+0x244>)
 8025ce2:	4293      	cmp	r3, r2
 8025ce4:	d031      	beq.n	8025d4a <HAL_GPIO_Init+0x22e>
 8025ce6:	687b      	ldr	r3, [r7, #4]
 8025ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8025d64 <HAL_GPIO_Init+0x248>)
 8025cea:	4293      	cmp	r3, r2
 8025cec:	d02b      	beq.n	8025d46 <HAL_GPIO_Init+0x22a>
 8025cee:	687b      	ldr	r3, [r7, #4]
 8025cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8025d68 <HAL_GPIO_Init+0x24c>)
 8025cf2:	4293      	cmp	r3, r2
 8025cf4:	d025      	beq.n	8025d42 <HAL_GPIO_Init+0x226>
 8025cf6:	687b      	ldr	r3, [r7, #4]
 8025cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8025d6c <HAL_GPIO_Init+0x250>)
 8025cfa:	4293      	cmp	r3, r2
 8025cfc:	d01f      	beq.n	8025d3e <HAL_GPIO_Init+0x222>
 8025cfe:	687b      	ldr	r3, [r7, #4]
 8025d00:	4a1b      	ldr	r2, [pc, #108]	@ (8025d70 <HAL_GPIO_Init+0x254>)
 8025d02:	4293      	cmp	r3, r2
 8025d04:	d019      	beq.n	8025d3a <HAL_GPIO_Init+0x21e>
 8025d06:	687b      	ldr	r3, [r7, #4]
 8025d08:	4a1a      	ldr	r2, [pc, #104]	@ (8025d74 <HAL_GPIO_Init+0x258>)
 8025d0a:	4293      	cmp	r3, r2
 8025d0c:	d013      	beq.n	8025d36 <HAL_GPIO_Init+0x21a>
 8025d0e:	687b      	ldr	r3, [r7, #4]
 8025d10:	4a19      	ldr	r2, [pc, #100]	@ (8025d78 <HAL_GPIO_Init+0x25c>)
 8025d12:	4293      	cmp	r3, r2
 8025d14:	d00d      	beq.n	8025d32 <HAL_GPIO_Init+0x216>
 8025d16:	687b      	ldr	r3, [r7, #4]
 8025d18:	4a18      	ldr	r2, [pc, #96]	@ (8025d7c <HAL_GPIO_Init+0x260>)
 8025d1a:	4293      	cmp	r3, r2
 8025d1c:	d007      	beq.n	8025d2e <HAL_GPIO_Init+0x212>
 8025d1e:	687b      	ldr	r3, [r7, #4]
 8025d20:	4a17      	ldr	r2, [pc, #92]	@ (8025d80 <HAL_GPIO_Init+0x264>)
 8025d22:	4293      	cmp	r3, r2
 8025d24:	d101      	bne.n	8025d2a <HAL_GPIO_Init+0x20e>
 8025d26:	2309      	movs	r3, #9
 8025d28:	e02d      	b.n	8025d86 <HAL_GPIO_Init+0x26a>
 8025d2a:	230a      	movs	r3, #10
 8025d2c:	e02b      	b.n	8025d86 <HAL_GPIO_Init+0x26a>
 8025d2e:	2308      	movs	r3, #8
 8025d30:	e029      	b.n	8025d86 <HAL_GPIO_Init+0x26a>
 8025d32:	2307      	movs	r3, #7
 8025d34:	e027      	b.n	8025d86 <HAL_GPIO_Init+0x26a>
 8025d36:	2306      	movs	r3, #6
 8025d38:	e025      	b.n	8025d86 <HAL_GPIO_Init+0x26a>
 8025d3a:	2305      	movs	r3, #5
 8025d3c:	e023      	b.n	8025d86 <HAL_GPIO_Init+0x26a>
 8025d3e:	2304      	movs	r3, #4
 8025d40:	e021      	b.n	8025d86 <HAL_GPIO_Init+0x26a>
 8025d42:	2303      	movs	r3, #3
 8025d44:	e01f      	b.n	8025d86 <HAL_GPIO_Init+0x26a>
 8025d46:	2302      	movs	r3, #2
 8025d48:	e01d      	b.n	8025d86 <HAL_GPIO_Init+0x26a>
 8025d4a:	2301      	movs	r3, #1
 8025d4c:	e01b      	b.n	8025d86 <HAL_GPIO_Init+0x26a>
 8025d4e:	bf00      	nop
 8025d50:	58000080 	.word	0x58000080
 8025d54:	58024400 	.word	0x58024400
 8025d58:	58000400 	.word	0x58000400
 8025d5c:	58020000 	.word	0x58020000
 8025d60:	58020400 	.word	0x58020400
 8025d64:	58020800 	.word	0x58020800
 8025d68:	58020c00 	.word	0x58020c00
 8025d6c:	58021000 	.word	0x58021000
 8025d70:	58021400 	.word	0x58021400
 8025d74:	58021800 	.word	0x58021800
 8025d78:	58021c00 	.word	0x58021c00
 8025d7c:	58022000 	.word	0x58022000
 8025d80:	58022400 	.word	0x58022400
 8025d84:	2300      	movs	r3, #0
 8025d86:	69fa      	ldr	r2, [r7, #28]
 8025d88:	f002 0203 	and.w	r2, r2, #3
 8025d8c:	0092      	lsls	r2, r2, #2
 8025d8e:	4093      	lsls	r3, r2
 8025d90:	69ba      	ldr	r2, [r7, #24]
 8025d92:	4313      	orrs	r3, r2
 8025d94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8025d96:	4938      	ldr	r1, [pc, #224]	@ (8025e78 <HAL_GPIO_Init+0x35c>)
 8025d98:	69fb      	ldr	r3, [r7, #28]
 8025d9a:	089b      	lsrs	r3, r3, #2
 8025d9c:	3302      	adds	r3, #2
 8025d9e:	69ba      	ldr	r2, [r7, #24]
 8025da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8025da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8025da8:	681b      	ldr	r3, [r3, #0]
 8025daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8025dac:	693b      	ldr	r3, [r7, #16]
 8025dae:	43db      	mvns	r3, r3
 8025db0:	69ba      	ldr	r2, [r7, #24]
 8025db2:	4013      	ands	r3, r2
 8025db4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8025db6:	683b      	ldr	r3, [r7, #0]
 8025db8:	685b      	ldr	r3, [r3, #4]
 8025dba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8025dbe:	2b00      	cmp	r3, #0
 8025dc0:	d003      	beq.n	8025dca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8025dc2:	69ba      	ldr	r2, [r7, #24]
 8025dc4:	693b      	ldr	r3, [r7, #16]
 8025dc6:	4313      	orrs	r3, r2
 8025dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8025dca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8025dce:	69bb      	ldr	r3, [r7, #24]
 8025dd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8025dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8025dd6:	685b      	ldr	r3, [r3, #4]
 8025dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8025dda:	693b      	ldr	r3, [r7, #16]
 8025ddc:	43db      	mvns	r3, r3
 8025dde:	69ba      	ldr	r2, [r7, #24]
 8025de0:	4013      	ands	r3, r2
 8025de2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8025de4:	683b      	ldr	r3, [r7, #0]
 8025de6:	685b      	ldr	r3, [r3, #4]
 8025de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8025dec:	2b00      	cmp	r3, #0
 8025dee:	d003      	beq.n	8025df8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8025df0:	69ba      	ldr	r2, [r7, #24]
 8025df2:	693b      	ldr	r3, [r7, #16]
 8025df4:	4313      	orrs	r3, r2
 8025df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8025df8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8025dfc:	69bb      	ldr	r3, [r7, #24]
 8025dfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8025e00:	697b      	ldr	r3, [r7, #20]
 8025e02:	685b      	ldr	r3, [r3, #4]
 8025e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8025e06:	693b      	ldr	r3, [r7, #16]
 8025e08:	43db      	mvns	r3, r3
 8025e0a:	69ba      	ldr	r2, [r7, #24]
 8025e0c:	4013      	ands	r3, r2
 8025e0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8025e10:	683b      	ldr	r3, [r7, #0]
 8025e12:	685b      	ldr	r3, [r3, #4]
 8025e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8025e18:	2b00      	cmp	r3, #0
 8025e1a:	d003      	beq.n	8025e24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8025e1c:	69ba      	ldr	r2, [r7, #24]
 8025e1e:	693b      	ldr	r3, [r7, #16]
 8025e20:	4313      	orrs	r3, r2
 8025e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8025e24:	697b      	ldr	r3, [r7, #20]
 8025e26:	69ba      	ldr	r2, [r7, #24]
 8025e28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8025e2a:	697b      	ldr	r3, [r7, #20]
 8025e2c:	681b      	ldr	r3, [r3, #0]
 8025e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8025e30:	693b      	ldr	r3, [r7, #16]
 8025e32:	43db      	mvns	r3, r3
 8025e34:	69ba      	ldr	r2, [r7, #24]
 8025e36:	4013      	ands	r3, r2
 8025e38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8025e3a:	683b      	ldr	r3, [r7, #0]
 8025e3c:	685b      	ldr	r3, [r3, #4]
 8025e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8025e42:	2b00      	cmp	r3, #0
 8025e44:	d003      	beq.n	8025e4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8025e46:	69ba      	ldr	r2, [r7, #24]
 8025e48:	693b      	ldr	r3, [r7, #16]
 8025e4a:	4313      	orrs	r3, r2
 8025e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8025e4e:	697b      	ldr	r3, [r7, #20]
 8025e50:	69ba      	ldr	r2, [r7, #24]
 8025e52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8025e54:	69fb      	ldr	r3, [r7, #28]
 8025e56:	3301      	adds	r3, #1
 8025e58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8025e5a:	683b      	ldr	r3, [r7, #0]
 8025e5c:	681a      	ldr	r2, [r3, #0]
 8025e5e:	69fb      	ldr	r3, [r7, #28]
 8025e60:	fa22 f303 	lsr.w	r3, r2, r3
 8025e64:	2b00      	cmp	r3, #0
 8025e66:	f47f ae63 	bne.w	8025b30 <HAL_GPIO_Init+0x14>
  }
}
 8025e6a:	bf00      	nop
 8025e6c:	bf00      	nop
 8025e6e:	3724      	adds	r7, #36	@ 0x24
 8025e70:	46bd      	mov	sp, r7
 8025e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e76:	4770      	bx	lr
 8025e78:	58000400 	.word	0x58000400

08025e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8025e7c:	b480      	push	{r7}
 8025e7e:	b083      	sub	sp, #12
 8025e80:	af00      	add	r7, sp, #0
 8025e82:	6078      	str	r0, [r7, #4]
 8025e84:	460b      	mov	r3, r1
 8025e86:	807b      	strh	r3, [r7, #2]
 8025e88:	4613      	mov	r3, r2
 8025e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8025e8c:	787b      	ldrb	r3, [r7, #1]
 8025e8e:	2b00      	cmp	r3, #0
 8025e90:	d003      	beq.n	8025e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8025e92:	887a      	ldrh	r2, [r7, #2]
 8025e94:	687b      	ldr	r3, [r7, #4]
 8025e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8025e98:	e003      	b.n	8025ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8025e9a:	887b      	ldrh	r3, [r7, #2]
 8025e9c:	041a      	lsls	r2, r3, #16
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	619a      	str	r2, [r3, #24]
}
 8025ea2:	bf00      	nop
 8025ea4:	370c      	adds	r7, #12
 8025ea6:	46bd      	mov	sp, r7
 8025ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025eac:	4770      	bx	lr

08025eae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8025eae:	b480      	push	{r7}
 8025eb0:	b085      	sub	sp, #20
 8025eb2:	af00      	add	r7, sp, #0
 8025eb4:	6078      	str	r0, [r7, #4]
 8025eb6:	460b      	mov	r3, r1
 8025eb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8025eba:	687b      	ldr	r3, [r7, #4]
 8025ebc:	695b      	ldr	r3, [r3, #20]
 8025ebe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8025ec0:	887a      	ldrh	r2, [r7, #2]
 8025ec2:	68fb      	ldr	r3, [r7, #12]
 8025ec4:	4013      	ands	r3, r2
 8025ec6:	041a      	lsls	r2, r3, #16
 8025ec8:	68fb      	ldr	r3, [r7, #12]
 8025eca:	43d9      	mvns	r1, r3
 8025ecc:	887b      	ldrh	r3, [r7, #2]
 8025ece:	400b      	ands	r3, r1
 8025ed0:	431a      	orrs	r2, r3
 8025ed2:	687b      	ldr	r3, [r7, #4]
 8025ed4:	619a      	str	r2, [r3, #24]
}
 8025ed6:	bf00      	nop
 8025ed8:	3714      	adds	r7, #20
 8025eda:	46bd      	mov	sp, r7
 8025edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ee0:	4770      	bx	lr
	...

08025ee4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8025ee4:	b580      	push	{r7, lr}
 8025ee6:	b084      	sub	sp, #16
 8025ee8:	af00      	add	r7, sp, #0
 8025eea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8025eec:	4b29      	ldr	r3, [pc, #164]	@ (8025f94 <HAL_PWREx_ConfigSupply+0xb0>)
 8025eee:	68db      	ldr	r3, [r3, #12]
 8025ef0:	f003 0307 	and.w	r3, r3, #7
 8025ef4:	2b06      	cmp	r3, #6
 8025ef6:	d00a      	beq.n	8025f0e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8025ef8:	4b26      	ldr	r3, [pc, #152]	@ (8025f94 <HAL_PWREx_ConfigSupply+0xb0>)
 8025efa:	68db      	ldr	r3, [r3, #12]
 8025efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8025f00:	687a      	ldr	r2, [r7, #4]
 8025f02:	429a      	cmp	r2, r3
 8025f04:	d001      	beq.n	8025f0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8025f06:	2301      	movs	r3, #1
 8025f08:	e040      	b.n	8025f8c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8025f0a:	2300      	movs	r3, #0
 8025f0c:	e03e      	b.n	8025f8c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8025f0e:	4b21      	ldr	r3, [pc, #132]	@ (8025f94 <HAL_PWREx_ConfigSupply+0xb0>)
 8025f10:	68db      	ldr	r3, [r3, #12]
 8025f12:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8025f16:	491f      	ldr	r1, [pc, #124]	@ (8025f94 <HAL_PWREx_ConfigSupply+0xb0>)
 8025f18:	687b      	ldr	r3, [r7, #4]
 8025f1a:	4313      	orrs	r3, r2
 8025f1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8025f1e:	f7fe fa03 	bl	8024328 <HAL_GetTick>
 8025f22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8025f24:	e009      	b.n	8025f3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8025f26:	f7fe f9ff 	bl	8024328 <HAL_GetTick>
 8025f2a:	4602      	mov	r2, r0
 8025f2c:	68fb      	ldr	r3, [r7, #12]
 8025f2e:	1ad3      	subs	r3, r2, r3
 8025f30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8025f34:	d901      	bls.n	8025f3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8025f36:	2301      	movs	r3, #1
 8025f38:	e028      	b.n	8025f8c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8025f3a:	4b16      	ldr	r3, [pc, #88]	@ (8025f94 <HAL_PWREx_ConfigSupply+0xb0>)
 8025f3c:	685b      	ldr	r3, [r3, #4]
 8025f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8025f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8025f46:	d1ee      	bne.n	8025f26 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8025f48:	687b      	ldr	r3, [r7, #4]
 8025f4a:	2b1e      	cmp	r3, #30
 8025f4c:	d008      	beq.n	8025f60 <HAL_PWREx_ConfigSupply+0x7c>
 8025f4e:	687b      	ldr	r3, [r7, #4]
 8025f50:	2b2e      	cmp	r3, #46	@ 0x2e
 8025f52:	d005      	beq.n	8025f60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8025f54:	687b      	ldr	r3, [r7, #4]
 8025f56:	2b1d      	cmp	r3, #29
 8025f58:	d002      	beq.n	8025f60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8025f5a:	687b      	ldr	r3, [r7, #4]
 8025f5c:	2b2d      	cmp	r3, #45	@ 0x2d
 8025f5e:	d114      	bne.n	8025f8a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8025f60:	f7fe f9e2 	bl	8024328 <HAL_GetTick>
 8025f64:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8025f66:	e009      	b.n	8025f7c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8025f68:	f7fe f9de 	bl	8024328 <HAL_GetTick>
 8025f6c:	4602      	mov	r2, r0
 8025f6e:	68fb      	ldr	r3, [r7, #12]
 8025f70:	1ad3      	subs	r3, r2, r3
 8025f72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8025f76:	d901      	bls.n	8025f7c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8025f78:	2301      	movs	r3, #1
 8025f7a:	e007      	b.n	8025f8c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8025f7c:	4b05      	ldr	r3, [pc, #20]	@ (8025f94 <HAL_PWREx_ConfigSupply+0xb0>)
 8025f7e:	68db      	ldr	r3, [r3, #12]
 8025f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8025f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8025f88:	d1ee      	bne.n	8025f68 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8025f8a:	2300      	movs	r3, #0
}
 8025f8c:	4618      	mov	r0, r3
 8025f8e:	3710      	adds	r7, #16
 8025f90:	46bd      	mov	sp, r7
 8025f92:	bd80      	pop	{r7, pc}
 8025f94:	58024800 	.word	0x58024800

08025f98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8025f98:	b580      	push	{r7, lr}
 8025f9a:	b08c      	sub	sp, #48	@ 0x30
 8025f9c:	af00      	add	r7, sp, #0
 8025f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8025fa0:	687b      	ldr	r3, [r7, #4]
 8025fa2:	2b00      	cmp	r3, #0
 8025fa4:	d102      	bne.n	8025fac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8025fa6:	2301      	movs	r3, #1
 8025fa8:	f000 bc48 	b.w	802683c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8025fac:	687b      	ldr	r3, [r7, #4]
 8025fae:	681b      	ldr	r3, [r3, #0]
 8025fb0:	f003 0301 	and.w	r3, r3, #1
 8025fb4:	2b00      	cmp	r3, #0
 8025fb6:	f000 8088 	beq.w	80260ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8025fba:	4b99      	ldr	r3, [pc, #612]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8025fbc:	691b      	ldr	r3, [r3, #16]
 8025fbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8025fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8025fc4:	4b96      	ldr	r3, [pc, #600]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8025fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8025fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025fcc:	2b10      	cmp	r3, #16
 8025fce:	d007      	beq.n	8025fe0 <HAL_RCC_OscConfig+0x48>
 8025fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025fd2:	2b18      	cmp	r3, #24
 8025fd4:	d111      	bne.n	8025ffa <HAL_RCC_OscConfig+0x62>
 8025fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025fd8:	f003 0303 	and.w	r3, r3, #3
 8025fdc:	2b02      	cmp	r3, #2
 8025fde:	d10c      	bne.n	8025ffa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8025fe0:	4b8f      	ldr	r3, [pc, #572]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8025fe2:	681b      	ldr	r3, [r3, #0]
 8025fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8025fe8:	2b00      	cmp	r3, #0
 8025fea:	d06d      	beq.n	80260c8 <HAL_RCC_OscConfig+0x130>
 8025fec:	687b      	ldr	r3, [r7, #4]
 8025fee:	685b      	ldr	r3, [r3, #4]
 8025ff0:	2b00      	cmp	r3, #0
 8025ff2:	d169      	bne.n	80260c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8025ff4:	2301      	movs	r3, #1
 8025ff6:	f000 bc21 	b.w	802683c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8025ffa:	687b      	ldr	r3, [r7, #4]
 8025ffc:	685b      	ldr	r3, [r3, #4]
 8025ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8026002:	d106      	bne.n	8026012 <HAL_RCC_OscConfig+0x7a>
 8026004:	4b86      	ldr	r3, [pc, #536]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026006:	681b      	ldr	r3, [r3, #0]
 8026008:	4a85      	ldr	r2, [pc, #532]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802600a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802600e:	6013      	str	r3, [r2, #0]
 8026010:	e02e      	b.n	8026070 <HAL_RCC_OscConfig+0xd8>
 8026012:	687b      	ldr	r3, [r7, #4]
 8026014:	685b      	ldr	r3, [r3, #4]
 8026016:	2b00      	cmp	r3, #0
 8026018:	d10c      	bne.n	8026034 <HAL_RCC_OscConfig+0x9c>
 802601a:	4b81      	ldr	r3, [pc, #516]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802601c:	681b      	ldr	r3, [r3, #0]
 802601e:	4a80      	ldr	r2, [pc, #512]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8026024:	6013      	str	r3, [r2, #0]
 8026026:	4b7e      	ldr	r3, [pc, #504]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026028:	681b      	ldr	r3, [r3, #0]
 802602a:	4a7d      	ldr	r2, [pc, #500]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802602c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8026030:	6013      	str	r3, [r2, #0]
 8026032:	e01d      	b.n	8026070 <HAL_RCC_OscConfig+0xd8>
 8026034:	687b      	ldr	r3, [r7, #4]
 8026036:	685b      	ldr	r3, [r3, #4]
 8026038:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 802603c:	d10c      	bne.n	8026058 <HAL_RCC_OscConfig+0xc0>
 802603e:	4b78      	ldr	r3, [pc, #480]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026040:	681b      	ldr	r3, [r3, #0]
 8026042:	4a77      	ldr	r2, [pc, #476]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026044:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8026048:	6013      	str	r3, [r2, #0]
 802604a:	4b75      	ldr	r3, [pc, #468]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802604c:	681b      	ldr	r3, [r3, #0]
 802604e:	4a74      	ldr	r2, [pc, #464]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8026054:	6013      	str	r3, [r2, #0]
 8026056:	e00b      	b.n	8026070 <HAL_RCC_OscConfig+0xd8>
 8026058:	4b71      	ldr	r3, [pc, #452]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802605a:	681b      	ldr	r3, [r3, #0]
 802605c:	4a70      	ldr	r2, [pc, #448]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802605e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8026062:	6013      	str	r3, [r2, #0]
 8026064:	4b6e      	ldr	r3, [pc, #440]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026066:	681b      	ldr	r3, [r3, #0]
 8026068:	4a6d      	ldr	r2, [pc, #436]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802606a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 802606e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8026070:	687b      	ldr	r3, [r7, #4]
 8026072:	685b      	ldr	r3, [r3, #4]
 8026074:	2b00      	cmp	r3, #0
 8026076:	d013      	beq.n	80260a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026078:	f7fe f956 	bl	8024328 <HAL_GetTick>
 802607c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802607e:	e008      	b.n	8026092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8026080:	f7fe f952 	bl	8024328 <HAL_GetTick>
 8026084:	4602      	mov	r2, r0
 8026086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026088:	1ad3      	subs	r3, r2, r3
 802608a:	2b64      	cmp	r3, #100	@ 0x64
 802608c:	d901      	bls.n	8026092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802608e:	2303      	movs	r3, #3
 8026090:	e3d4      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8026092:	4b63      	ldr	r3, [pc, #396]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026094:	681b      	ldr	r3, [r3, #0]
 8026096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802609a:	2b00      	cmp	r3, #0
 802609c:	d0f0      	beq.n	8026080 <HAL_RCC_OscConfig+0xe8>
 802609e:	e014      	b.n	80260ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80260a0:	f7fe f942 	bl	8024328 <HAL_GetTick>
 80260a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80260a6:	e008      	b.n	80260ba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80260a8:	f7fe f93e 	bl	8024328 <HAL_GetTick>
 80260ac:	4602      	mov	r2, r0
 80260ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80260b0:	1ad3      	subs	r3, r2, r3
 80260b2:	2b64      	cmp	r3, #100	@ 0x64
 80260b4:	d901      	bls.n	80260ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80260b6:	2303      	movs	r3, #3
 80260b8:	e3c0      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80260ba:	4b59      	ldr	r3, [pc, #356]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 80260bc:	681b      	ldr	r3, [r3, #0]
 80260be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80260c2:	2b00      	cmp	r3, #0
 80260c4:	d1f0      	bne.n	80260a8 <HAL_RCC_OscConfig+0x110>
 80260c6:	e000      	b.n	80260ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80260c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80260ca:	687b      	ldr	r3, [r7, #4]
 80260cc:	681b      	ldr	r3, [r3, #0]
 80260ce:	f003 0302 	and.w	r3, r3, #2
 80260d2:	2b00      	cmp	r3, #0
 80260d4:	f000 80ca 	beq.w	802626c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80260d8:	4b51      	ldr	r3, [pc, #324]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 80260da:	691b      	ldr	r3, [r3, #16]
 80260dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80260e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80260e2:	4b4f      	ldr	r3, [pc, #316]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 80260e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80260e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80260e8:	6a3b      	ldr	r3, [r7, #32]
 80260ea:	2b00      	cmp	r3, #0
 80260ec:	d007      	beq.n	80260fe <HAL_RCC_OscConfig+0x166>
 80260ee:	6a3b      	ldr	r3, [r7, #32]
 80260f0:	2b18      	cmp	r3, #24
 80260f2:	d156      	bne.n	80261a2 <HAL_RCC_OscConfig+0x20a>
 80260f4:	69fb      	ldr	r3, [r7, #28]
 80260f6:	f003 0303 	and.w	r3, r3, #3
 80260fa:	2b00      	cmp	r3, #0
 80260fc:	d151      	bne.n	80261a2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80260fe:	4b48      	ldr	r3, [pc, #288]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026100:	681b      	ldr	r3, [r3, #0]
 8026102:	f003 0304 	and.w	r3, r3, #4
 8026106:	2b00      	cmp	r3, #0
 8026108:	d005      	beq.n	8026116 <HAL_RCC_OscConfig+0x17e>
 802610a:	687b      	ldr	r3, [r7, #4]
 802610c:	68db      	ldr	r3, [r3, #12]
 802610e:	2b00      	cmp	r3, #0
 8026110:	d101      	bne.n	8026116 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8026112:	2301      	movs	r3, #1
 8026114:	e392      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8026116:	4b42      	ldr	r3, [pc, #264]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026118:	681b      	ldr	r3, [r3, #0]
 802611a:	f023 0219 	bic.w	r2, r3, #25
 802611e:	687b      	ldr	r3, [r7, #4]
 8026120:	68db      	ldr	r3, [r3, #12]
 8026122:	493f      	ldr	r1, [pc, #252]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026124:	4313      	orrs	r3, r2
 8026126:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026128:	f7fe f8fe 	bl	8024328 <HAL_GetTick>
 802612c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802612e:	e008      	b.n	8026142 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8026130:	f7fe f8fa 	bl	8024328 <HAL_GetTick>
 8026134:	4602      	mov	r2, r0
 8026136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026138:	1ad3      	subs	r3, r2, r3
 802613a:	2b02      	cmp	r3, #2
 802613c:	d901      	bls.n	8026142 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 802613e:	2303      	movs	r3, #3
 8026140:	e37c      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8026142:	4b37      	ldr	r3, [pc, #220]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026144:	681b      	ldr	r3, [r3, #0]
 8026146:	f003 0304 	and.w	r3, r3, #4
 802614a:	2b00      	cmp	r3, #0
 802614c:	d0f0      	beq.n	8026130 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802614e:	f7fe f8f7 	bl	8024340 <HAL_GetREVID>
 8026152:	4603      	mov	r3, r0
 8026154:	f241 0203 	movw	r2, #4099	@ 0x1003
 8026158:	4293      	cmp	r3, r2
 802615a:	d817      	bhi.n	802618c <HAL_RCC_OscConfig+0x1f4>
 802615c:	687b      	ldr	r3, [r7, #4]
 802615e:	691b      	ldr	r3, [r3, #16]
 8026160:	2b40      	cmp	r3, #64	@ 0x40
 8026162:	d108      	bne.n	8026176 <HAL_RCC_OscConfig+0x1de>
 8026164:	4b2e      	ldr	r3, [pc, #184]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026166:	685b      	ldr	r3, [r3, #4]
 8026168:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 802616c:	4a2c      	ldr	r2, [pc, #176]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802616e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8026172:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8026174:	e07a      	b.n	802626c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026176:	4b2a      	ldr	r3, [pc, #168]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026178:	685b      	ldr	r3, [r3, #4]
 802617a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 802617e:	687b      	ldr	r3, [r7, #4]
 8026180:	691b      	ldr	r3, [r3, #16]
 8026182:	031b      	lsls	r3, r3, #12
 8026184:	4926      	ldr	r1, [pc, #152]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026186:	4313      	orrs	r3, r2
 8026188:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 802618a:	e06f      	b.n	802626c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802618c:	4b24      	ldr	r3, [pc, #144]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802618e:	685b      	ldr	r3, [r3, #4]
 8026190:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8026194:	687b      	ldr	r3, [r7, #4]
 8026196:	691b      	ldr	r3, [r3, #16]
 8026198:	061b      	lsls	r3, r3, #24
 802619a:	4921      	ldr	r1, [pc, #132]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802619c:	4313      	orrs	r3, r2
 802619e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80261a0:	e064      	b.n	802626c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80261a2:	687b      	ldr	r3, [r7, #4]
 80261a4:	68db      	ldr	r3, [r3, #12]
 80261a6:	2b00      	cmp	r3, #0
 80261a8:	d047      	beq.n	802623a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80261aa:	4b1d      	ldr	r3, [pc, #116]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 80261ac:	681b      	ldr	r3, [r3, #0]
 80261ae:	f023 0219 	bic.w	r2, r3, #25
 80261b2:	687b      	ldr	r3, [r7, #4]
 80261b4:	68db      	ldr	r3, [r3, #12]
 80261b6:	491a      	ldr	r1, [pc, #104]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 80261b8:	4313      	orrs	r3, r2
 80261ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80261bc:	f7fe f8b4 	bl	8024328 <HAL_GetTick>
 80261c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80261c2:	e008      	b.n	80261d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80261c4:	f7fe f8b0 	bl	8024328 <HAL_GetTick>
 80261c8:	4602      	mov	r2, r0
 80261ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80261cc:	1ad3      	subs	r3, r2, r3
 80261ce:	2b02      	cmp	r3, #2
 80261d0:	d901      	bls.n	80261d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80261d2:	2303      	movs	r3, #3
 80261d4:	e332      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80261d6:	4b12      	ldr	r3, [pc, #72]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 80261d8:	681b      	ldr	r3, [r3, #0]
 80261da:	f003 0304 	and.w	r3, r3, #4
 80261de:	2b00      	cmp	r3, #0
 80261e0:	d0f0      	beq.n	80261c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80261e2:	f7fe f8ad 	bl	8024340 <HAL_GetREVID>
 80261e6:	4603      	mov	r3, r0
 80261e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80261ec:	4293      	cmp	r3, r2
 80261ee:	d819      	bhi.n	8026224 <HAL_RCC_OscConfig+0x28c>
 80261f0:	687b      	ldr	r3, [r7, #4]
 80261f2:	691b      	ldr	r3, [r3, #16]
 80261f4:	2b40      	cmp	r3, #64	@ 0x40
 80261f6:	d108      	bne.n	802620a <HAL_RCC_OscConfig+0x272>
 80261f8:	4b09      	ldr	r3, [pc, #36]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 80261fa:	685b      	ldr	r3, [r3, #4]
 80261fc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8026200:	4a07      	ldr	r2, [pc, #28]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 8026202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8026206:	6053      	str	r3, [r2, #4]
 8026208:	e030      	b.n	802626c <HAL_RCC_OscConfig+0x2d4>
 802620a:	4b05      	ldr	r3, [pc, #20]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802620c:	685b      	ldr	r3, [r3, #4]
 802620e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8026212:	687b      	ldr	r3, [r7, #4]
 8026214:	691b      	ldr	r3, [r3, #16]
 8026216:	031b      	lsls	r3, r3, #12
 8026218:	4901      	ldr	r1, [pc, #4]	@ (8026220 <HAL_RCC_OscConfig+0x288>)
 802621a:	4313      	orrs	r3, r2
 802621c:	604b      	str	r3, [r1, #4]
 802621e:	e025      	b.n	802626c <HAL_RCC_OscConfig+0x2d4>
 8026220:	58024400 	.word	0x58024400
 8026224:	4b9a      	ldr	r3, [pc, #616]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026226:	685b      	ldr	r3, [r3, #4]
 8026228:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 802622c:	687b      	ldr	r3, [r7, #4]
 802622e:	691b      	ldr	r3, [r3, #16]
 8026230:	061b      	lsls	r3, r3, #24
 8026232:	4997      	ldr	r1, [pc, #604]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026234:	4313      	orrs	r3, r2
 8026236:	604b      	str	r3, [r1, #4]
 8026238:	e018      	b.n	802626c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802623a:	4b95      	ldr	r3, [pc, #596]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 802623c:	681b      	ldr	r3, [r3, #0]
 802623e:	4a94      	ldr	r2, [pc, #592]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026240:	f023 0301 	bic.w	r3, r3, #1
 8026244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026246:	f7fe f86f 	bl	8024328 <HAL_GetTick>
 802624a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 802624c:	e008      	b.n	8026260 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802624e:	f7fe f86b 	bl	8024328 <HAL_GetTick>
 8026252:	4602      	mov	r2, r0
 8026254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026256:	1ad3      	subs	r3, r2, r3
 8026258:	2b02      	cmp	r3, #2
 802625a:	d901      	bls.n	8026260 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 802625c:	2303      	movs	r3, #3
 802625e:	e2ed      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8026260:	4b8b      	ldr	r3, [pc, #556]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026262:	681b      	ldr	r3, [r3, #0]
 8026264:	f003 0304 	and.w	r3, r3, #4
 8026268:	2b00      	cmp	r3, #0
 802626a:	d1f0      	bne.n	802624e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 802626c:	687b      	ldr	r3, [r7, #4]
 802626e:	681b      	ldr	r3, [r3, #0]
 8026270:	f003 0310 	and.w	r3, r3, #16
 8026274:	2b00      	cmp	r3, #0
 8026276:	f000 80a9 	beq.w	80263cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802627a:	4b85      	ldr	r3, [pc, #532]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 802627c:	691b      	ldr	r3, [r3, #16]
 802627e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8026282:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8026284:	4b82      	ldr	r3, [pc, #520]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026288:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 802628a:	69bb      	ldr	r3, [r7, #24]
 802628c:	2b08      	cmp	r3, #8
 802628e:	d007      	beq.n	80262a0 <HAL_RCC_OscConfig+0x308>
 8026290:	69bb      	ldr	r3, [r7, #24]
 8026292:	2b18      	cmp	r3, #24
 8026294:	d13a      	bne.n	802630c <HAL_RCC_OscConfig+0x374>
 8026296:	697b      	ldr	r3, [r7, #20]
 8026298:	f003 0303 	and.w	r3, r3, #3
 802629c:	2b01      	cmp	r3, #1
 802629e:	d135      	bne.n	802630c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80262a0:	4b7b      	ldr	r3, [pc, #492]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 80262a2:	681b      	ldr	r3, [r3, #0]
 80262a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80262a8:	2b00      	cmp	r3, #0
 80262aa:	d005      	beq.n	80262b8 <HAL_RCC_OscConfig+0x320>
 80262ac:	687b      	ldr	r3, [r7, #4]
 80262ae:	69db      	ldr	r3, [r3, #28]
 80262b0:	2b80      	cmp	r3, #128	@ 0x80
 80262b2:	d001      	beq.n	80262b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80262b4:	2301      	movs	r3, #1
 80262b6:	e2c1      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80262b8:	f7fe f842 	bl	8024340 <HAL_GetREVID>
 80262bc:	4603      	mov	r3, r0
 80262be:	f241 0203 	movw	r2, #4099	@ 0x1003
 80262c2:	4293      	cmp	r3, r2
 80262c4:	d817      	bhi.n	80262f6 <HAL_RCC_OscConfig+0x35e>
 80262c6:	687b      	ldr	r3, [r7, #4]
 80262c8:	6a1b      	ldr	r3, [r3, #32]
 80262ca:	2b20      	cmp	r3, #32
 80262cc:	d108      	bne.n	80262e0 <HAL_RCC_OscConfig+0x348>
 80262ce:	4b70      	ldr	r3, [pc, #448]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 80262d0:	685b      	ldr	r3, [r3, #4]
 80262d2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80262d6:	4a6e      	ldr	r2, [pc, #440]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 80262d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80262dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80262de:	e075      	b.n	80263cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80262e0:	4b6b      	ldr	r3, [pc, #428]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 80262e2:	685b      	ldr	r3, [r3, #4]
 80262e4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80262e8:	687b      	ldr	r3, [r7, #4]
 80262ea:	6a1b      	ldr	r3, [r3, #32]
 80262ec:	069b      	lsls	r3, r3, #26
 80262ee:	4968      	ldr	r1, [pc, #416]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 80262f0:	4313      	orrs	r3, r2
 80262f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80262f4:	e06a      	b.n	80263cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80262f6:	4b66      	ldr	r3, [pc, #408]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 80262f8:	68db      	ldr	r3, [r3, #12]
 80262fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80262fe:	687b      	ldr	r3, [r7, #4]
 8026300:	6a1b      	ldr	r3, [r3, #32]
 8026302:	061b      	lsls	r3, r3, #24
 8026304:	4962      	ldr	r1, [pc, #392]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026306:	4313      	orrs	r3, r2
 8026308:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802630a:	e05f      	b.n	80263cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 802630c:	687b      	ldr	r3, [r7, #4]
 802630e:	69db      	ldr	r3, [r3, #28]
 8026310:	2b00      	cmp	r3, #0
 8026312:	d042      	beq.n	802639a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8026314:	4b5e      	ldr	r3, [pc, #376]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026316:	681b      	ldr	r3, [r3, #0]
 8026318:	4a5d      	ldr	r2, [pc, #372]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 802631a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802631e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026320:	f7fe f802 	bl	8024328 <HAL_GetTick>
 8026324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8026326:	e008      	b.n	802633a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8026328:	f7fd fffe 	bl	8024328 <HAL_GetTick>
 802632c:	4602      	mov	r2, r0
 802632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026330:	1ad3      	subs	r3, r2, r3
 8026332:	2b02      	cmp	r3, #2
 8026334:	d901      	bls.n	802633a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8026336:	2303      	movs	r3, #3
 8026338:	e280      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802633a:	4b55      	ldr	r3, [pc, #340]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 802633c:	681b      	ldr	r3, [r3, #0]
 802633e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8026342:	2b00      	cmp	r3, #0
 8026344:	d0f0      	beq.n	8026328 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8026346:	f7fd fffb 	bl	8024340 <HAL_GetREVID>
 802634a:	4603      	mov	r3, r0
 802634c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8026350:	4293      	cmp	r3, r2
 8026352:	d817      	bhi.n	8026384 <HAL_RCC_OscConfig+0x3ec>
 8026354:	687b      	ldr	r3, [r7, #4]
 8026356:	6a1b      	ldr	r3, [r3, #32]
 8026358:	2b20      	cmp	r3, #32
 802635a:	d108      	bne.n	802636e <HAL_RCC_OscConfig+0x3d6>
 802635c:	4b4c      	ldr	r3, [pc, #304]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 802635e:	685b      	ldr	r3, [r3, #4]
 8026360:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8026364:	4a4a      	ldr	r2, [pc, #296]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026366:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 802636a:	6053      	str	r3, [r2, #4]
 802636c:	e02e      	b.n	80263cc <HAL_RCC_OscConfig+0x434>
 802636e:	4b48      	ldr	r3, [pc, #288]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026370:	685b      	ldr	r3, [r3, #4]
 8026372:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8026376:	687b      	ldr	r3, [r7, #4]
 8026378:	6a1b      	ldr	r3, [r3, #32]
 802637a:	069b      	lsls	r3, r3, #26
 802637c:	4944      	ldr	r1, [pc, #272]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 802637e:	4313      	orrs	r3, r2
 8026380:	604b      	str	r3, [r1, #4]
 8026382:	e023      	b.n	80263cc <HAL_RCC_OscConfig+0x434>
 8026384:	4b42      	ldr	r3, [pc, #264]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026386:	68db      	ldr	r3, [r3, #12]
 8026388:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 802638c:	687b      	ldr	r3, [r7, #4]
 802638e:	6a1b      	ldr	r3, [r3, #32]
 8026390:	061b      	lsls	r3, r3, #24
 8026392:	493f      	ldr	r1, [pc, #252]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026394:	4313      	orrs	r3, r2
 8026396:	60cb      	str	r3, [r1, #12]
 8026398:	e018      	b.n	80263cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 802639a:	4b3d      	ldr	r3, [pc, #244]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 802639c:	681b      	ldr	r3, [r3, #0]
 802639e:	4a3c      	ldr	r2, [pc, #240]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 80263a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80263a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80263a6:	f7fd ffbf 	bl	8024328 <HAL_GetTick>
 80263aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80263ac:	e008      	b.n	80263c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80263ae:	f7fd ffbb 	bl	8024328 <HAL_GetTick>
 80263b2:	4602      	mov	r2, r0
 80263b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80263b6:	1ad3      	subs	r3, r2, r3
 80263b8:	2b02      	cmp	r3, #2
 80263ba:	d901      	bls.n	80263c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80263bc:	2303      	movs	r3, #3
 80263be:	e23d      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80263c0:	4b33      	ldr	r3, [pc, #204]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 80263c2:	681b      	ldr	r3, [r3, #0]
 80263c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80263c8:	2b00      	cmp	r3, #0
 80263ca:	d1f0      	bne.n	80263ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80263cc:	687b      	ldr	r3, [r7, #4]
 80263ce:	681b      	ldr	r3, [r3, #0]
 80263d0:	f003 0308 	and.w	r3, r3, #8
 80263d4:	2b00      	cmp	r3, #0
 80263d6:	d036      	beq.n	8026446 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80263d8:	687b      	ldr	r3, [r7, #4]
 80263da:	695b      	ldr	r3, [r3, #20]
 80263dc:	2b00      	cmp	r3, #0
 80263de:	d019      	beq.n	8026414 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80263e0:	4b2b      	ldr	r3, [pc, #172]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 80263e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80263e4:	4a2a      	ldr	r2, [pc, #168]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 80263e6:	f043 0301 	orr.w	r3, r3, #1
 80263ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80263ec:	f7fd ff9c 	bl	8024328 <HAL_GetTick>
 80263f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80263f2:	e008      	b.n	8026406 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80263f4:	f7fd ff98 	bl	8024328 <HAL_GetTick>
 80263f8:	4602      	mov	r2, r0
 80263fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80263fc:	1ad3      	subs	r3, r2, r3
 80263fe:	2b02      	cmp	r3, #2
 8026400:	d901      	bls.n	8026406 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8026402:	2303      	movs	r3, #3
 8026404:	e21a      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8026406:	4b22      	ldr	r3, [pc, #136]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802640a:	f003 0302 	and.w	r3, r3, #2
 802640e:	2b00      	cmp	r3, #0
 8026410:	d0f0      	beq.n	80263f4 <HAL_RCC_OscConfig+0x45c>
 8026412:	e018      	b.n	8026446 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026414:	4b1e      	ldr	r3, [pc, #120]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8026418:	4a1d      	ldr	r2, [pc, #116]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 802641a:	f023 0301 	bic.w	r3, r3, #1
 802641e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026420:	f7fd ff82 	bl	8024328 <HAL_GetTick>
 8026424:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8026426:	e008      	b.n	802643a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8026428:	f7fd ff7e 	bl	8024328 <HAL_GetTick>
 802642c:	4602      	mov	r2, r0
 802642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026430:	1ad3      	subs	r3, r2, r3
 8026432:	2b02      	cmp	r3, #2
 8026434:	d901      	bls.n	802643a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8026436:	2303      	movs	r3, #3
 8026438:	e200      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 802643a:	4b15      	ldr	r3, [pc, #84]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 802643c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802643e:	f003 0302 	and.w	r3, r3, #2
 8026442:	2b00      	cmp	r3, #0
 8026444:	d1f0      	bne.n	8026428 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8026446:	687b      	ldr	r3, [r7, #4]
 8026448:	681b      	ldr	r3, [r3, #0]
 802644a:	f003 0320 	and.w	r3, r3, #32
 802644e:	2b00      	cmp	r3, #0
 8026450:	d039      	beq.n	80264c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8026452:	687b      	ldr	r3, [r7, #4]
 8026454:	699b      	ldr	r3, [r3, #24]
 8026456:	2b00      	cmp	r3, #0
 8026458:	d01c      	beq.n	8026494 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 802645a:	4b0d      	ldr	r3, [pc, #52]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 802645c:	681b      	ldr	r3, [r3, #0]
 802645e:	4a0c      	ldr	r2, [pc, #48]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026460:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8026464:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8026466:	f7fd ff5f 	bl	8024328 <HAL_GetTick>
 802646a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 802646c:	e008      	b.n	8026480 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802646e:	f7fd ff5b 	bl	8024328 <HAL_GetTick>
 8026472:	4602      	mov	r2, r0
 8026474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026476:	1ad3      	subs	r3, r2, r3
 8026478:	2b02      	cmp	r3, #2
 802647a:	d901      	bls.n	8026480 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 802647c:	2303      	movs	r3, #3
 802647e:	e1dd      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8026480:	4b03      	ldr	r3, [pc, #12]	@ (8026490 <HAL_RCC_OscConfig+0x4f8>)
 8026482:	681b      	ldr	r3, [r3, #0]
 8026484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8026488:	2b00      	cmp	r3, #0
 802648a:	d0f0      	beq.n	802646e <HAL_RCC_OscConfig+0x4d6>
 802648c:	e01b      	b.n	80264c6 <HAL_RCC_OscConfig+0x52e>
 802648e:	bf00      	nop
 8026490:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8026494:	4b9b      	ldr	r3, [pc, #620]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026496:	681b      	ldr	r3, [r3, #0]
 8026498:	4a9a      	ldr	r2, [pc, #616]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 802649a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802649e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80264a0:	f7fd ff42 	bl	8024328 <HAL_GetTick>
 80264a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80264a6:	e008      	b.n	80264ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80264a8:	f7fd ff3e 	bl	8024328 <HAL_GetTick>
 80264ac:	4602      	mov	r2, r0
 80264ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80264b0:	1ad3      	subs	r3, r2, r3
 80264b2:	2b02      	cmp	r3, #2
 80264b4:	d901      	bls.n	80264ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80264b6:	2303      	movs	r3, #3
 80264b8:	e1c0      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80264ba:	4b92      	ldr	r3, [pc, #584]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80264bc:	681b      	ldr	r3, [r3, #0]
 80264be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80264c2:	2b00      	cmp	r3, #0
 80264c4:	d1f0      	bne.n	80264a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80264c6:	687b      	ldr	r3, [r7, #4]
 80264c8:	681b      	ldr	r3, [r3, #0]
 80264ca:	f003 0304 	and.w	r3, r3, #4
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	f000 8081 	beq.w	80265d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80264d4:	4b8c      	ldr	r3, [pc, #560]	@ (8026708 <HAL_RCC_OscConfig+0x770>)
 80264d6:	681b      	ldr	r3, [r3, #0]
 80264d8:	4a8b      	ldr	r2, [pc, #556]	@ (8026708 <HAL_RCC_OscConfig+0x770>)
 80264da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80264de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80264e0:	f7fd ff22 	bl	8024328 <HAL_GetTick>
 80264e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80264e6:	e008      	b.n	80264fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80264e8:	f7fd ff1e 	bl	8024328 <HAL_GetTick>
 80264ec:	4602      	mov	r2, r0
 80264ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80264f0:	1ad3      	subs	r3, r2, r3
 80264f2:	2b64      	cmp	r3, #100	@ 0x64
 80264f4:	d901      	bls.n	80264fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80264f6:	2303      	movs	r3, #3
 80264f8:	e1a0      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80264fa:	4b83      	ldr	r3, [pc, #524]	@ (8026708 <HAL_RCC_OscConfig+0x770>)
 80264fc:	681b      	ldr	r3, [r3, #0]
 80264fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8026502:	2b00      	cmp	r3, #0
 8026504:	d0f0      	beq.n	80264e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026506:	687b      	ldr	r3, [r7, #4]
 8026508:	689b      	ldr	r3, [r3, #8]
 802650a:	2b01      	cmp	r3, #1
 802650c:	d106      	bne.n	802651c <HAL_RCC_OscConfig+0x584>
 802650e:	4b7d      	ldr	r3, [pc, #500]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8026512:	4a7c      	ldr	r2, [pc, #496]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026514:	f043 0301 	orr.w	r3, r3, #1
 8026518:	6713      	str	r3, [r2, #112]	@ 0x70
 802651a:	e02d      	b.n	8026578 <HAL_RCC_OscConfig+0x5e0>
 802651c:	687b      	ldr	r3, [r7, #4]
 802651e:	689b      	ldr	r3, [r3, #8]
 8026520:	2b00      	cmp	r3, #0
 8026522:	d10c      	bne.n	802653e <HAL_RCC_OscConfig+0x5a6>
 8026524:	4b77      	ldr	r3, [pc, #476]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8026528:	4a76      	ldr	r2, [pc, #472]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 802652a:	f023 0301 	bic.w	r3, r3, #1
 802652e:	6713      	str	r3, [r2, #112]	@ 0x70
 8026530:	4b74      	ldr	r3, [pc, #464]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8026534:	4a73      	ldr	r2, [pc, #460]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026536:	f023 0304 	bic.w	r3, r3, #4
 802653a:	6713      	str	r3, [r2, #112]	@ 0x70
 802653c:	e01c      	b.n	8026578 <HAL_RCC_OscConfig+0x5e0>
 802653e:	687b      	ldr	r3, [r7, #4]
 8026540:	689b      	ldr	r3, [r3, #8]
 8026542:	2b05      	cmp	r3, #5
 8026544:	d10c      	bne.n	8026560 <HAL_RCC_OscConfig+0x5c8>
 8026546:	4b6f      	ldr	r3, [pc, #444]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802654a:	4a6e      	ldr	r2, [pc, #440]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 802654c:	f043 0304 	orr.w	r3, r3, #4
 8026550:	6713      	str	r3, [r2, #112]	@ 0x70
 8026552:	4b6c      	ldr	r3, [pc, #432]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8026556:	4a6b      	ldr	r2, [pc, #428]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026558:	f043 0301 	orr.w	r3, r3, #1
 802655c:	6713      	str	r3, [r2, #112]	@ 0x70
 802655e:	e00b      	b.n	8026578 <HAL_RCC_OscConfig+0x5e0>
 8026560:	4b68      	ldr	r3, [pc, #416]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8026564:	4a67      	ldr	r2, [pc, #412]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026566:	f023 0301 	bic.w	r3, r3, #1
 802656a:	6713      	str	r3, [r2, #112]	@ 0x70
 802656c:	4b65      	ldr	r3, [pc, #404]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 802656e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8026570:	4a64      	ldr	r2, [pc, #400]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026572:	f023 0304 	bic.w	r3, r3, #4
 8026576:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8026578:	687b      	ldr	r3, [r7, #4]
 802657a:	689b      	ldr	r3, [r3, #8]
 802657c:	2b00      	cmp	r3, #0
 802657e:	d015      	beq.n	80265ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026580:	f7fd fed2 	bl	8024328 <HAL_GetTick>
 8026584:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8026586:	e00a      	b.n	802659e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8026588:	f7fd fece 	bl	8024328 <HAL_GetTick>
 802658c:	4602      	mov	r2, r0
 802658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026590:	1ad3      	subs	r3, r2, r3
 8026592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8026596:	4293      	cmp	r3, r2
 8026598:	d901      	bls.n	802659e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 802659a:	2303      	movs	r3, #3
 802659c:	e14e      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802659e:	4b59      	ldr	r3, [pc, #356]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80265a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80265a2:	f003 0302 	and.w	r3, r3, #2
 80265a6:	2b00      	cmp	r3, #0
 80265a8:	d0ee      	beq.n	8026588 <HAL_RCC_OscConfig+0x5f0>
 80265aa:	e014      	b.n	80265d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80265ac:	f7fd febc 	bl	8024328 <HAL_GetTick>
 80265b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80265b2:	e00a      	b.n	80265ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80265b4:	f7fd feb8 	bl	8024328 <HAL_GetTick>
 80265b8:	4602      	mov	r2, r0
 80265ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80265bc:	1ad3      	subs	r3, r2, r3
 80265be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80265c2:	4293      	cmp	r3, r2
 80265c4:	d901      	bls.n	80265ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80265c6:	2303      	movs	r3, #3
 80265c8:	e138      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80265ca:	4b4e      	ldr	r3, [pc, #312]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80265cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80265ce:	f003 0302 	and.w	r3, r3, #2
 80265d2:	2b00      	cmp	r3, #0
 80265d4:	d1ee      	bne.n	80265b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80265d6:	687b      	ldr	r3, [r7, #4]
 80265d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80265da:	2b00      	cmp	r3, #0
 80265dc:	f000 812d 	beq.w	802683a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80265e0:	4b48      	ldr	r3, [pc, #288]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80265e2:	691b      	ldr	r3, [r3, #16]
 80265e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80265e8:	2b18      	cmp	r3, #24
 80265ea:	f000 80bd 	beq.w	8026768 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80265ee:	687b      	ldr	r3, [r7, #4]
 80265f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80265f2:	2b02      	cmp	r3, #2
 80265f4:	f040 809e 	bne.w	8026734 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80265f8:	4b42      	ldr	r3, [pc, #264]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80265fa:	681b      	ldr	r3, [r3, #0]
 80265fc:	4a41      	ldr	r2, [pc, #260]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80265fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8026602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026604:	f7fd fe90 	bl	8024328 <HAL_GetTick>
 8026608:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802660a:	e008      	b.n	802661e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802660c:	f7fd fe8c 	bl	8024328 <HAL_GetTick>
 8026610:	4602      	mov	r2, r0
 8026612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026614:	1ad3      	subs	r3, r2, r3
 8026616:	2b02      	cmp	r3, #2
 8026618:	d901      	bls.n	802661e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 802661a:	2303      	movs	r3, #3
 802661c:	e10e      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802661e:	4b39      	ldr	r3, [pc, #228]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026620:	681b      	ldr	r3, [r3, #0]
 8026622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8026626:	2b00      	cmp	r3, #0
 8026628:	d1f0      	bne.n	802660c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 802662a:	4b36      	ldr	r3, [pc, #216]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 802662c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 802662e:	4b37      	ldr	r3, [pc, #220]	@ (802670c <HAL_RCC_OscConfig+0x774>)
 8026630:	4013      	ands	r3, r2
 8026632:	687a      	ldr	r2, [r7, #4]
 8026634:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8026636:	687a      	ldr	r2, [r7, #4]
 8026638:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 802663a:	0112      	lsls	r2, r2, #4
 802663c:	430a      	orrs	r2, r1
 802663e:	4931      	ldr	r1, [pc, #196]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026640:	4313      	orrs	r3, r2
 8026642:	628b      	str	r3, [r1, #40]	@ 0x28
 8026644:	687b      	ldr	r3, [r7, #4]
 8026646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026648:	3b01      	subs	r3, #1
 802664a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802664e:	687b      	ldr	r3, [r7, #4]
 8026650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8026652:	3b01      	subs	r3, #1
 8026654:	025b      	lsls	r3, r3, #9
 8026656:	b29b      	uxth	r3, r3
 8026658:	431a      	orrs	r2, r3
 802665a:	687b      	ldr	r3, [r7, #4]
 802665c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802665e:	3b01      	subs	r3, #1
 8026660:	041b      	lsls	r3, r3, #16
 8026662:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8026666:	431a      	orrs	r2, r3
 8026668:	687b      	ldr	r3, [r7, #4]
 802666a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802666c:	3b01      	subs	r3, #1
 802666e:	061b      	lsls	r3, r3, #24
 8026670:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8026674:	4923      	ldr	r1, [pc, #140]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026676:	4313      	orrs	r3, r2
 8026678:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 802667a:	4b22      	ldr	r3, [pc, #136]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 802667c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802667e:	4a21      	ldr	r2, [pc, #132]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026680:	f023 0301 	bic.w	r3, r3, #1
 8026684:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8026686:	4b1f      	ldr	r3, [pc, #124]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802668a:	4b21      	ldr	r3, [pc, #132]	@ (8026710 <HAL_RCC_OscConfig+0x778>)
 802668c:	4013      	ands	r3, r2
 802668e:	687a      	ldr	r2, [r7, #4]
 8026690:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8026692:	00d2      	lsls	r2, r2, #3
 8026694:	491b      	ldr	r1, [pc, #108]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 8026696:	4313      	orrs	r3, r2
 8026698:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 802669a:	4b1a      	ldr	r3, [pc, #104]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 802669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802669e:	f023 020c 	bic.w	r2, r3, #12
 80266a2:	687b      	ldr	r3, [r7, #4]
 80266a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80266a6:	4917      	ldr	r1, [pc, #92]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266a8:	4313      	orrs	r3, r2
 80266aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80266ac:	4b15      	ldr	r3, [pc, #84]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80266b0:	f023 0202 	bic.w	r2, r3, #2
 80266b4:	687b      	ldr	r3, [r7, #4]
 80266b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80266b8:	4912      	ldr	r1, [pc, #72]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266ba:	4313      	orrs	r3, r2
 80266bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80266be:	4b11      	ldr	r3, [pc, #68]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80266c2:	4a10      	ldr	r2, [pc, #64]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80266c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80266ca:	4b0e      	ldr	r3, [pc, #56]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80266ce:	4a0d      	ldr	r2, [pc, #52]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80266d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80266d6:	4b0b      	ldr	r3, [pc, #44]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80266da:	4a0a      	ldr	r2, [pc, #40]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80266e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80266e2:	4b08      	ldr	r3, [pc, #32]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80266e6:	4a07      	ldr	r2, [pc, #28]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266e8:	f043 0301 	orr.w	r3, r3, #1
 80266ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80266ee:	4b05      	ldr	r3, [pc, #20]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266f0:	681b      	ldr	r3, [r3, #0]
 80266f2:	4a04      	ldr	r2, [pc, #16]	@ (8026704 <HAL_RCC_OscConfig+0x76c>)
 80266f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80266f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80266fa:	f7fd fe15 	bl	8024328 <HAL_GetTick>
 80266fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8026700:	e011      	b.n	8026726 <HAL_RCC_OscConfig+0x78e>
 8026702:	bf00      	nop
 8026704:	58024400 	.word	0x58024400
 8026708:	58024800 	.word	0x58024800
 802670c:	fffffc0c 	.word	0xfffffc0c
 8026710:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8026714:	f7fd fe08 	bl	8024328 <HAL_GetTick>
 8026718:	4602      	mov	r2, r0
 802671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802671c:	1ad3      	subs	r3, r2, r3
 802671e:	2b02      	cmp	r3, #2
 8026720:	d901      	bls.n	8026726 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8026722:	2303      	movs	r3, #3
 8026724:	e08a      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8026726:	4b47      	ldr	r3, [pc, #284]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 8026728:	681b      	ldr	r3, [r3, #0]
 802672a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802672e:	2b00      	cmp	r3, #0
 8026730:	d0f0      	beq.n	8026714 <HAL_RCC_OscConfig+0x77c>
 8026732:	e082      	b.n	802683a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026734:	4b43      	ldr	r3, [pc, #268]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 8026736:	681b      	ldr	r3, [r3, #0]
 8026738:	4a42      	ldr	r2, [pc, #264]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 802673a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 802673e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026740:	f7fd fdf2 	bl	8024328 <HAL_GetTick>
 8026744:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8026746:	e008      	b.n	802675a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8026748:	f7fd fdee 	bl	8024328 <HAL_GetTick>
 802674c:	4602      	mov	r2, r0
 802674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026750:	1ad3      	subs	r3, r2, r3
 8026752:	2b02      	cmp	r3, #2
 8026754:	d901      	bls.n	802675a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8026756:	2303      	movs	r3, #3
 8026758:	e070      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802675a:	4b3a      	ldr	r3, [pc, #232]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 802675c:	681b      	ldr	r3, [r3, #0]
 802675e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8026762:	2b00      	cmp	r3, #0
 8026764:	d1f0      	bne.n	8026748 <HAL_RCC_OscConfig+0x7b0>
 8026766:	e068      	b.n	802683a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8026768:	4b36      	ldr	r3, [pc, #216]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 802676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802676c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 802676e:	4b35      	ldr	r3, [pc, #212]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 8026770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026772:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026774:	687b      	ldr	r3, [r7, #4]
 8026776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026778:	2b01      	cmp	r3, #1
 802677a:	d031      	beq.n	80267e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802677c:	693b      	ldr	r3, [r7, #16]
 802677e:	f003 0203 	and.w	r2, r3, #3
 8026782:	687b      	ldr	r3, [r7, #4]
 8026784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026786:	429a      	cmp	r2, r3
 8026788:	d12a      	bne.n	80267e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 802678a:	693b      	ldr	r3, [r7, #16]
 802678c:	091b      	lsrs	r3, r3, #4
 802678e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8026792:	687b      	ldr	r3, [r7, #4]
 8026794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8026796:	429a      	cmp	r2, r3
 8026798:	d122      	bne.n	80267e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 802679a:	68fb      	ldr	r3, [r7, #12]
 802679c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80267a0:	687b      	ldr	r3, [r7, #4]
 80267a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80267a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80267a6:	429a      	cmp	r2, r3
 80267a8:	d11a      	bne.n	80267e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80267aa:	68fb      	ldr	r3, [r7, #12]
 80267ac:	0a5b      	lsrs	r3, r3, #9
 80267ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80267b2:	687b      	ldr	r3, [r7, #4]
 80267b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80267b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80267b8:	429a      	cmp	r2, r3
 80267ba:	d111      	bne.n	80267e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80267bc:	68fb      	ldr	r3, [r7, #12]
 80267be:	0c1b      	lsrs	r3, r3, #16
 80267c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80267c4:	687b      	ldr	r3, [r7, #4]
 80267c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80267c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80267ca:	429a      	cmp	r2, r3
 80267cc:	d108      	bne.n	80267e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80267ce:	68fb      	ldr	r3, [r7, #12]
 80267d0:	0e1b      	lsrs	r3, r3, #24
 80267d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80267d6:	687b      	ldr	r3, [r7, #4]
 80267d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80267da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80267dc:	429a      	cmp	r2, r3
 80267de:	d001      	beq.n	80267e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80267e0:	2301      	movs	r3, #1
 80267e2:	e02b      	b.n	802683c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80267e4:	4b17      	ldr	r3, [pc, #92]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 80267e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80267e8:	08db      	lsrs	r3, r3, #3
 80267ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80267ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80267f0:	687b      	ldr	r3, [r7, #4]
 80267f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80267f4:	693a      	ldr	r2, [r7, #16]
 80267f6:	429a      	cmp	r2, r3
 80267f8:	d01f      	beq.n	802683a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80267fa:	4b12      	ldr	r3, [pc, #72]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 80267fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80267fe:	4a11      	ldr	r2, [pc, #68]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 8026800:	f023 0301 	bic.w	r3, r3, #1
 8026804:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8026806:	f7fd fd8f 	bl	8024328 <HAL_GetTick>
 802680a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 802680c:	bf00      	nop
 802680e:	f7fd fd8b 	bl	8024328 <HAL_GetTick>
 8026812:	4602      	mov	r2, r0
 8026814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026816:	4293      	cmp	r3, r2
 8026818:	d0f9      	beq.n	802680e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 802681a:	4b0a      	ldr	r3, [pc, #40]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 802681c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802681e:	4b0a      	ldr	r3, [pc, #40]	@ (8026848 <HAL_RCC_OscConfig+0x8b0>)
 8026820:	4013      	ands	r3, r2
 8026822:	687a      	ldr	r2, [r7, #4]
 8026824:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8026826:	00d2      	lsls	r2, r2, #3
 8026828:	4906      	ldr	r1, [pc, #24]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 802682a:	4313      	orrs	r3, r2
 802682c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 802682e:	4b05      	ldr	r3, [pc, #20]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 8026830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026832:	4a04      	ldr	r2, [pc, #16]	@ (8026844 <HAL_RCC_OscConfig+0x8ac>)
 8026834:	f043 0301 	orr.w	r3, r3, #1
 8026838:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 802683a:	2300      	movs	r3, #0
}
 802683c:	4618      	mov	r0, r3
 802683e:	3730      	adds	r7, #48	@ 0x30
 8026840:	46bd      	mov	sp, r7
 8026842:	bd80      	pop	{r7, pc}
 8026844:	58024400 	.word	0x58024400
 8026848:	ffff0007 	.word	0xffff0007

0802684c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802684c:	b580      	push	{r7, lr}
 802684e:	b086      	sub	sp, #24
 8026850:	af00      	add	r7, sp, #0
 8026852:	6078      	str	r0, [r7, #4]
 8026854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8026856:	687b      	ldr	r3, [r7, #4]
 8026858:	2b00      	cmp	r3, #0
 802685a:	d101      	bne.n	8026860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802685c:	2301      	movs	r3, #1
 802685e:	e19c      	b.n	8026b9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8026860:	4b8a      	ldr	r3, [pc, #552]	@ (8026a8c <HAL_RCC_ClockConfig+0x240>)
 8026862:	681b      	ldr	r3, [r3, #0]
 8026864:	f003 030f 	and.w	r3, r3, #15
 8026868:	683a      	ldr	r2, [r7, #0]
 802686a:	429a      	cmp	r2, r3
 802686c:	d910      	bls.n	8026890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802686e:	4b87      	ldr	r3, [pc, #540]	@ (8026a8c <HAL_RCC_ClockConfig+0x240>)
 8026870:	681b      	ldr	r3, [r3, #0]
 8026872:	f023 020f 	bic.w	r2, r3, #15
 8026876:	4985      	ldr	r1, [pc, #532]	@ (8026a8c <HAL_RCC_ClockConfig+0x240>)
 8026878:	683b      	ldr	r3, [r7, #0]
 802687a:	4313      	orrs	r3, r2
 802687c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802687e:	4b83      	ldr	r3, [pc, #524]	@ (8026a8c <HAL_RCC_ClockConfig+0x240>)
 8026880:	681b      	ldr	r3, [r3, #0]
 8026882:	f003 030f 	and.w	r3, r3, #15
 8026886:	683a      	ldr	r2, [r7, #0]
 8026888:	429a      	cmp	r2, r3
 802688a:	d001      	beq.n	8026890 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 802688c:	2301      	movs	r3, #1
 802688e:	e184      	b.n	8026b9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8026890:	687b      	ldr	r3, [r7, #4]
 8026892:	681b      	ldr	r3, [r3, #0]
 8026894:	f003 0304 	and.w	r3, r3, #4
 8026898:	2b00      	cmp	r3, #0
 802689a:	d010      	beq.n	80268be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 802689c:	687b      	ldr	r3, [r7, #4]
 802689e:	691a      	ldr	r2, [r3, #16]
 80268a0:	4b7b      	ldr	r3, [pc, #492]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80268a2:	699b      	ldr	r3, [r3, #24]
 80268a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80268a8:	429a      	cmp	r2, r3
 80268aa:	d908      	bls.n	80268be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80268ac:	4b78      	ldr	r3, [pc, #480]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80268ae:	699b      	ldr	r3, [r3, #24]
 80268b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80268b4:	687b      	ldr	r3, [r7, #4]
 80268b6:	691b      	ldr	r3, [r3, #16]
 80268b8:	4975      	ldr	r1, [pc, #468]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80268ba:	4313      	orrs	r3, r2
 80268bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80268be:	687b      	ldr	r3, [r7, #4]
 80268c0:	681b      	ldr	r3, [r3, #0]
 80268c2:	f003 0308 	and.w	r3, r3, #8
 80268c6:	2b00      	cmp	r3, #0
 80268c8:	d010      	beq.n	80268ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80268ca:	687b      	ldr	r3, [r7, #4]
 80268cc:	695a      	ldr	r2, [r3, #20]
 80268ce:	4b70      	ldr	r3, [pc, #448]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80268d0:	69db      	ldr	r3, [r3, #28]
 80268d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80268d6:	429a      	cmp	r2, r3
 80268d8:	d908      	bls.n	80268ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80268da:	4b6d      	ldr	r3, [pc, #436]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80268dc:	69db      	ldr	r3, [r3, #28]
 80268de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80268e2:	687b      	ldr	r3, [r7, #4]
 80268e4:	695b      	ldr	r3, [r3, #20]
 80268e6:	496a      	ldr	r1, [pc, #424]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80268e8:	4313      	orrs	r3, r2
 80268ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80268ec:	687b      	ldr	r3, [r7, #4]
 80268ee:	681b      	ldr	r3, [r3, #0]
 80268f0:	f003 0310 	and.w	r3, r3, #16
 80268f4:	2b00      	cmp	r3, #0
 80268f6:	d010      	beq.n	802691a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80268f8:	687b      	ldr	r3, [r7, #4]
 80268fa:	699a      	ldr	r2, [r3, #24]
 80268fc:	4b64      	ldr	r3, [pc, #400]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80268fe:	69db      	ldr	r3, [r3, #28]
 8026900:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8026904:	429a      	cmp	r2, r3
 8026906:	d908      	bls.n	802691a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8026908:	4b61      	ldr	r3, [pc, #388]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 802690a:	69db      	ldr	r3, [r3, #28]
 802690c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8026910:	687b      	ldr	r3, [r7, #4]
 8026912:	699b      	ldr	r3, [r3, #24]
 8026914:	495e      	ldr	r1, [pc, #376]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 8026916:	4313      	orrs	r3, r2
 8026918:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 802691a:	687b      	ldr	r3, [r7, #4]
 802691c:	681b      	ldr	r3, [r3, #0]
 802691e:	f003 0320 	and.w	r3, r3, #32
 8026922:	2b00      	cmp	r3, #0
 8026924:	d010      	beq.n	8026948 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8026926:	687b      	ldr	r3, [r7, #4]
 8026928:	69da      	ldr	r2, [r3, #28]
 802692a:	4b59      	ldr	r3, [pc, #356]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 802692c:	6a1b      	ldr	r3, [r3, #32]
 802692e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8026932:	429a      	cmp	r2, r3
 8026934:	d908      	bls.n	8026948 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8026936:	4b56      	ldr	r3, [pc, #344]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 8026938:	6a1b      	ldr	r3, [r3, #32]
 802693a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 802693e:	687b      	ldr	r3, [r7, #4]
 8026940:	69db      	ldr	r3, [r3, #28]
 8026942:	4953      	ldr	r1, [pc, #332]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 8026944:	4313      	orrs	r3, r2
 8026946:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8026948:	687b      	ldr	r3, [r7, #4]
 802694a:	681b      	ldr	r3, [r3, #0]
 802694c:	f003 0302 	and.w	r3, r3, #2
 8026950:	2b00      	cmp	r3, #0
 8026952:	d010      	beq.n	8026976 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8026954:	687b      	ldr	r3, [r7, #4]
 8026956:	68da      	ldr	r2, [r3, #12]
 8026958:	4b4d      	ldr	r3, [pc, #308]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 802695a:	699b      	ldr	r3, [r3, #24]
 802695c:	f003 030f 	and.w	r3, r3, #15
 8026960:	429a      	cmp	r2, r3
 8026962:	d908      	bls.n	8026976 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8026964:	4b4a      	ldr	r3, [pc, #296]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 8026966:	699b      	ldr	r3, [r3, #24]
 8026968:	f023 020f 	bic.w	r2, r3, #15
 802696c:	687b      	ldr	r3, [r7, #4]
 802696e:	68db      	ldr	r3, [r3, #12]
 8026970:	4947      	ldr	r1, [pc, #284]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 8026972:	4313      	orrs	r3, r2
 8026974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8026976:	687b      	ldr	r3, [r7, #4]
 8026978:	681b      	ldr	r3, [r3, #0]
 802697a:	f003 0301 	and.w	r3, r3, #1
 802697e:	2b00      	cmp	r3, #0
 8026980:	d055      	beq.n	8026a2e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8026982:	4b43      	ldr	r3, [pc, #268]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 8026984:	699b      	ldr	r3, [r3, #24]
 8026986:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 802698a:	687b      	ldr	r3, [r7, #4]
 802698c:	689b      	ldr	r3, [r3, #8]
 802698e:	4940      	ldr	r1, [pc, #256]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 8026990:	4313      	orrs	r3, r2
 8026992:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8026994:	687b      	ldr	r3, [r7, #4]
 8026996:	685b      	ldr	r3, [r3, #4]
 8026998:	2b02      	cmp	r3, #2
 802699a:	d107      	bne.n	80269ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 802699c:	4b3c      	ldr	r3, [pc, #240]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 802699e:	681b      	ldr	r3, [r3, #0]
 80269a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80269a4:	2b00      	cmp	r3, #0
 80269a6:	d121      	bne.n	80269ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80269a8:	2301      	movs	r3, #1
 80269aa:	e0f6      	b.n	8026b9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80269ac:	687b      	ldr	r3, [r7, #4]
 80269ae:	685b      	ldr	r3, [r3, #4]
 80269b0:	2b03      	cmp	r3, #3
 80269b2:	d107      	bne.n	80269c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80269b4:	4b36      	ldr	r3, [pc, #216]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80269b6:	681b      	ldr	r3, [r3, #0]
 80269b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80269bc:	2b00      	cmp	r3, #0
 80269be:	d115      	bne.n	80269ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80269c0:	2301      	movs	r3, #1
 80269c2:	e0ea      	b.n	8026b9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	685b      	ldr	r3, [r3, #4]
 80269c8:	2b01      	cmp	r3, #1
 80269ca:	d107      	bne.n	80269dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80269cc:	4b30      	ldr	r3, [pc, #192]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80269ce:	681b      	ldr	r3, [r3, #0]
 80269d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80269d4:	2b00      	cmp	r3, #0
 80269d6:	d109      	bne.n	80269ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80269d8:	2301      	movs	r3, #1
 80269da:	e0de      	b.n	8026b9a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80269dc:	4b2c      	ldr	r3, [pc, #176]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80269de:	681b      	ldr	r3, [r3, #0]
 80269e0:	f003 0304 	and.w	r3, r3, #4
 80269e4:	2b00      	cmp	r3, #0
 80269e6:	d101      	bne.n	80269ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80269e8:	2301      	movs	r3, #1
 80269ea:	e0d6      	b.n	8026b9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80269ec:	4b28      	ldr	r3, [pc, #160]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80269ee:	691b      	ldr	r3, [r3, #16]
 80269f0:	f023 0207 	bic.w	r2, r3, #7
 80269f4:	687b      	ldr	r3, [r7, #4]
 80269f6:	685b      	ldr	r3, [r3, #4]
 80269f8:	4925      	ldr	r1, [pc, #148]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 80269fa:	4313      	orrs	r3, r2
 80269fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80269fe:	f7fd fc93 	bl	8024328 <HAL_GetTick>
 8026a02:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026a04:	e00a      	b.n	8026a1c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8026a06:	f7fd fc8f 	bl	8024328 <HAL_GetTick>
 8026a0a:	4602      	mov	r2, r0
 8026a0c:	697b      	ldr	r3, [r7, #20]
 8026a0e:	1ad3      	subs	r3, r2, r3
 8026a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8026a14:	4293      	cmp	r3, r2
 8026a16:	d901      	bls.n	8026a1c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8026a18:	2303      	movs	r3, #3
 8026a1a:	e0be      	b.n	8026b9a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 8026a1e:	691b      	ldr	r3, [r3, #16]
 8026a20:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8026a24:	687b      	ldr	r3, [r7, #4]
 8026a26:	685b      	ldr	r3, [r3, #4]
 8026a28:	00db      	lsls	r3, r3, #3
 8026a2a:	429a      	cmp	r2, r3
 8026a2c:	d1eb      	bne.n	8026a06 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	681b      	ldr	r3, [r3, #0]
 8026a32:	f003 0302 	and.w	r3, r3, #2
 8026a36:	2b00      	cmp	r3, #0
 8026a38:	d010      	beq.n	8026a5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8026a3a:	687b      	ldr	r3, [r7, #4]
 8026a3c:	68da      	ldr	r2, [r3, #12]
 8026a3e:	4b14      	ldr	r3, [pc, #80]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 8026a40:	699b      	ldr	r3, [r3, #24]
 8026a42:	f003 030f 	and.w	r3, r3, #15
 8026a46:	429a      	cmp	r2, r3
 8026a48:	d208      	bcs.n	8026a5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8026a4a:	4b11      	ldr	r3, [pc, #68]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 8026a4c:	699b      	ldr	r3, [r3, #24]
 8026a4e:	f023 020f 	bic.w	r2, r3, #15
 8026a52:	687b      	ldr	r3, [r7, #4]
 8026a54:	68db      	ldr	r3, [r3, #12]
 8026a56:	490e      	ldr	r1, [pc, #56]	@ (8026a90 <HAL_RCC_ClockConfig+0x244>)
 8026a58:	4313      	orrs	r3, r2
 8026a5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8026a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8026a8c <HAL_RCC_ClockConfig+0x240>)
 8026a5e:	681b      	ldr	r3, [r3, #0]
 8026a60:	f003 030f 	and.w	r3, r3, #15
 8026a64:	683a      	ldr	r2, [r7, #0]
 8026a66:	429a      	cmp	r2, r3
 8026a68:	d214      	bcs.n	8026a94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8026a6a:	4b08      	ldr	r3, [pc, #32]	@ (8026a8c <HAL_RCC_ClockConfig+0x240>)
 8026a6c:	681b      	ldr	r3, [r3, #0]
 8026a6e:	f023 020f 	bic.w	r2, r3, #15
 8026a72:	4906      	ldr	r1, [pc, #24]	@ (8026a8c <HAL_RCC_ClockConfig+0x240>)
 8026a74:	683b      	ldr	r3, [r7, #0]
 8026a76:	4313      	orrs	r3, r2
 8026a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8026a7a:	4b04      	ldr	r3, [pc, #16]	@ (8026a8c <HAL_RCC_ClockConfig+0x240>)
 8026a7c:	681b      	ldr	r3, [r3, #0]
 8026a7e:	f003 030f 	and.w	r3, r3, #15
 8026a82:	683a      	ldr	r2, [r7, #0]
 8026a84:	429a      	cmp	r2, r3
 8026a86:	d005      	beq.n	8026a94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8026a88:	2301      	movs	r3, #1
 8026a8a:	e086      	b.n	8026b9a <HAL_RCC_ClockConfig+0x34e>
 8026a8c:	52002000 	.word	0x52002000
 8026a90:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8026a94:	687b      	ldr	r3, [r7, #4]
 8026a96:	681b      	ldr	r3, [r3, #0]
 8026a98:	f003 0304 	and.w	r3, r3, #4
 8026a9c:	2b00      	cmp	r3, #0
 8026a9e:	d010      	beq.n	8026ac2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8026aa0:	687b      	ldr	r3, [r7, #4]
 8026aa2:	691a      	ldr	r2, [r3, #16]
 8026aa4:	4b3f      	ldr	r3, [pc, #252]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026aa6:	699b      	ldr	r3, [r3, #24]
 8026aa8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8026aac:	429a      	cmp	r2, r3
 8026aae:	d208      	bcs.n	8026ac2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8026ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026ab2:	699b      	ldr	r3, [r3, #24]
 8026ab4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8026ab8:	687b      	ldr	r3, [r7, #4]
 8026aba:	691b      	ldr	r3, [r3, #16]
 8026abc:	4939      	ldr	r1, [pc, #228]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026abe:	4313      	orrs	r3, r2
 8026ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	681b      	ldr	r3, [r3, #0]
 8026ac6:	f003 0308 	and.w	r3, r3, #8
 8026aca:	2b00      	cmp	r3, #0
 8026acc:	d010      	beq.n	8026af0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8026ace:	687b      	ldr	r3, [r7, #4]
 8026ad0:	695a      	ldr	r2, [r3, #20]
 8026ad2:	4b34      	ldr	r3, [pc, #208]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026ad4:	69db      	ldr	r3, [r3, #28]
 8026ad6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8026ada:	429a      	cmp	r2, r3
 8026adc:	d208      	bcs.n	8026af0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8026ade:	4b31      	ldr	r3, [pc, #196]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026ae0:	69db      	ldr	r3, [r3, #28]
 8026ae2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8026ae6:	687b      	ldr	r3, [r7, #4]
 8026ae8:	695b      	ldr	r3, [r3, #20]
 8026aea:	492e      	ldr	r1, [pc, #184]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026aec:	4313      	orrs	r3, r2
 8026aee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026af0:	687b      	ldr	r3, [r7, #4]
 8026af2:	681b      	ldr	r3, [r3, #0]
 8026af4:	f003 0310 	and.w	r3, r3, #16
 8026af8:	2b00      	cmp	r3, #0
 8026afa:	d010      	beq.n	8026b1e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8026afc:	687b      	ldr	r3, [r7, #4]
 8026afe:	699a      	ldr	r2, [r3, #24]
 8026b00:	4b28      	ldr	r3, [pc, #160]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026b02:	69db      	ldr	r3, [r3, #28]
 8026b04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8026b08:	429a      	cmp	r2, r3
 8026b0a:	d208      	bcs.n	8026b1e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8026b0c:	4b25      	ldr	r3, [pc, #148]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026b0e:	69db      	ldr	r3, [r3, #28]
 8026b10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8026b14:	687b      	ldr	r3, [r7, #4]
 8026b16:	699b      	ldr	r3, [r3, #24]
 8026b18:	4922      	ldr	r1, [pc, #136]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026b1a:	4313      	orrs	r3, r2
 8026b1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8026b1e:	687b      	ldr	r3, [r7, #4]
 8026b20:	681b      	ldr	r3, [r3, #0]
 8026b22:	f003 0320 	and.w	r3, r3, #32
 8026b26:	2b00      	cmp	r3, #0
 8026b28:	d010      	beq.n	8026b4c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8026b2a:	687b      	ldr	r3, [r7, #4]
 8026b2c:	69da      	ldr	r2, [r3, #28]
 8026b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026b30:	6a1b      	ldr	r3, [r3, #32]
 8026b32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8026b36:	429a      	cmp	r2, r3
 8026b38:	d208      	bcs.n	8026b4c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8026b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026b3c:	6a1b      	ldr	r3, [r3, #32]
 8026b3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8026b42:	687b      	ldr	r3, [r7, #4]
 8026b44:	69db      	ldr	r3, [r3, #28]
 8026b46:	4917      	ldr	r1, [pc, #92]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026b48:	4313      	orrs	r3, r2
 8026b4a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8026b4c:	f000 f834 	bl	8026bb8 <HAL_RCC_GetSysClockFreq>
 8026b50:	4602      	mov	r2, r0
 8026b52:	4b14      	ldr	r3, [pc, #80]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026b54:	699b      	ldr	r3, [r3, #24]
 8026b56:	0a1b      	lsrs	r3, r3, #8
 8026b58:	f003 030f 	and.w	r3, r3, #15
 8026b5c:	4912      	ldr	r1, [pc, #72]	@ (8026ba8 <HAL_RCC_ClockConfig+0x35c>)
 8026b5e:	5ccb      	ldrb	r3, [r1, r3]
 8026b60:	f003 031f 	and.w	r3, r3, #31
 8026b64:	fa22 f303 	lsr.w	r3, r2, r3
 8026b68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8026b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8026ba4 <HAL_RCC_ClockConfig+0x358>)
 8026b6c:	699b      	ldr	r3, [r3, #24]
 8026b6e:	f003 030f 	and.w	r3, r3, #15
 8026b72:	4a0d      	ldr	r2, [pc, #52]	@ (8026ba8 <HAL_RCC_ClockConfig+0x35c>)
 8026b74:	5cd3      	ldrb	r3, [r2, r3]
 8026b76:	f003 031f 	and.w	r3, r3, #31
 8026b7a:	693a      	ldr	r2, [r7, #16]
 8026b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8026b80:	4a0a      	ldr	r2, [pc, #40]	@ (8026bac <HAL_RCC_ClockConfig+0x360>)
 8026b82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8026b84:	4a0a      	ldr	r2, [pc, #40]	@ (8026bb0 <HAL_RCC_ClockConfig+0x364>)
 8026b86:	693b      	ldr	r3, [r7, #16]
 8026b88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8026b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8026bb4 <HAL_RCC_ClockConfig+0x368>)
 8026b8c:	681b      	ldr	r3, [r3, #0]
 8026b8e:	4618      	mov	r0, r3
 8026b90:	f7fd fb80 	bl	8024294 <HAL_InitTick>
 8026b94:	4603      	mov	r3, r0
 8026b96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8026b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8026b9a:	4618      	mov	r0, r3
 8026b9c:	3718      	adds	r7, #24
 8026b9e:	46bd      	mov	sp, r7
 8026ba0:	bd80      	pop	{r7, pc}
 8026ba2:	bf00      	nop
 8026ba4:	58024400 	.word	0x58024400
 8026ba8:	0802ad48 	.word	0x0802ad48
 8026bac:	24000008 	.word	0x24000008
 8026bb0:	24000004 	.word	0x24000004
 8026bb4:	2400002c 	.word	0x2400002c

08026bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8026bb8:	b480      	push	{r7}
 8026bba:	b089      	sub	sp, #36	@ 0x24
 8026bbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8026bbe:	4bb3      	ldr	r3, [pc, #716]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026bc0:	691b      	ldr	r3, [r3, #16]
 8026bc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8026bc6:	2b18      	cmp	r3, #24
 8026bc8:	f200 8155 	bhi.w	8026e76 <HAL_RCC_GetSysClockFreq+0x2be>
 8026bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8026bd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8026bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026bd2:	bf00      	nop
 8026bd4:	08026c39 	.word	0x08026c39
 8026bd8:	08026e77 	.word	0x08026e77
 8026bdc:	08026e77 	.word	0x08026e77
 8026be0:	08026e77 	.word	0x08026e77
 8026be4:	08026e77 	.word	0x08026e77
 8026be8:	08026e77 	.word	0x08026e77
 8026bec:	08026e77 	.word	0x08026e77
 8026bf0:	08026e77 	.word	0x08026e77
 8026bf4:	08026c5f 	.word	0x08026c5f
 8026bf8:	08026e77 	.word	0x08026e77
 8026bfc:	08026e77 	.word	0x08026e77
 8026c00:	08026e77 	.word	0x08026e77
 8026c04:	08026e77 	.word	0x08026e77
 8026c08:	08026e77 	.word	0x08026e77
 8026c0c:	08026e77 	.word	0x08026e77
 8026c10:	08026e77 	.word	0x08026e77
 8026c14:	08026c65 	.word	0x08026c65
 8026c18:	08026e77 	.word	0x08026e77
 8026c1c:	08026e77 	.word	0x08026e77
 8026c20:	08026e77 	.word	0x08026e77
 8026c24:	08026e77 	.word	0x08026e77
 8026c28:	08026e77 	.word	0x08026e77
 8026c2c:	08026e77 	.word	0x08026e77
 8026c30:	08026e77 	.word	0x08026e77
 8026c34:	08026c6b 	.word	0x08026c6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8026c38:	4b94      	ldr	r3, [pc, #592]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026c3a:	681b      	ldr	r3, [r3, #0]
 8026c3c:	f003 0320 	and.w	r3, r3, #32
 8026c40:	2b00      	cmp	r3, #0
 8026c42:	d009      	beq.n	8026c58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8026c44:	4b91      	ldr	r3, [pc, #580]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026c46:	681b      	ldr	r3, [r3, #0]
 8026c48:	08db      	lsrs	r3, r3, #3
 8026c4a:	f003 0303 	and.w	r3, r3, #3
 8026c4e:	4a90      	ldr	r2, [pc, #576]	@ (8026e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8026c50:	fa22 f303 	lsr.w	r3, r2, r3
 8026c54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8026c56:	e111      	b.n	8026e7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8026c58:	4b8d      	ldr	r3, [pc, #564]	@ (8026e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8026c5a:	61bb      	str	r3, [r7, #24]
      break;
 8026c5c:	e10e      	b.n	8026e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8026c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8026e94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8026c60:	61bb      	str	r3, [r7, #24]
      break;
 8026c62:	e10b      	b.n	8026e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8026c64:	4b8c      	ldr	r3, [pc, #560]	@ (8026e98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8026c66:	61bb      	str	r3, [r7, #24]
      break;
 8026c68:	e108      	b.n	8026e7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8026c6a:	4b88      	ldr	r3, [pc, #544]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026c6e:	f003 0303 	and.w	r3, r3, #3
 8026c72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8026c74:	4b85      	ldr	r3, [pc, #532]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026c78:	091b      	lsrs	r3, r3, #4
 8026c7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8026c7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8026c80:	4b82      	ldr	r3, [pc, #520]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026c84:	f003 0301 	and.w	r3, r3, #1
 8026c88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8026c8a:	4b80      	ldr	r3, [pc, #512]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8026c8e:	08db      	lsrs	r3, r3, #3
 8026c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026c94:	68fa      	ldr	r2, [r7, #12]
 8026c96:	fb02 f303 	mul.w	r3, r2, r3
 8026c9a:	ee07 3a90 	vmov	s15, r3
 8026c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8026ca2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8026ca6:	693b      	ldr	r3, [r7, #16]
 8026ca8:	2b00      	cmp	r3, #0
 8026caa:	f000 80e1 	beq.w	8026e70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8026cae:	697b      	ldr	r3, [r7, #20]
 8026cb0:	2b02      	cmp	r3, #2
 8026cb2:	f000 8083 	beq.w	8026dbc <HAL_RCC_GetSysClockFreq+0x204>
 8026cb6:	697b      	ldr	r3, [r7, #20]
 8026cb8:	2b02      	cmp	r3, #2
 8026cba:	f200 80a1 	bhi.w	8026e00 <HAL_RCC_GetSysClockFreq+0x248>
 8026cbe:	697b      	ldr	r3, [r7, #20]
 8026cc0:	2b00      	cmp	r3, #0
 8026cc2:	d003      	beq.n	8026ccc <HAL_RCC_GetSysClockFreq+0x114>
 8026cc4:	697b      	ldr	r3, [r7, #20]
 8026cc6:	2b01      	cmp	r3, #1
 8026cc8:	d056      	beq.n	8026d78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8026cca:	e099      	b.n	8026e00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8026ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026cce:	681b      	ldr	r3, [r3, #0]
 8026cd0:	f003 0320 	and.w	r3, r3, #32
 8026cd4:	2b00      	cmp	r3, #0
 8026cd6:	d02d      	beq.n	8026d34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8026cd8:	4b6c      	ldr	r3, [pc, #432]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026cda:	681b      	ldr	r3, [r3, #0]
 8026cdc:	08db      	lsrs	r3, r3, #3
 8026cde:	f003 0303 	and.w	r3, r3, #3
 8026ce2:	4a6b      	ldr	r2, [pc, #428]	@ (8026e90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8026ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8026ce8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8026cea:	687b      	ldr	r3, [r7, #4]
 8026cec:	ee07 3a90 	vmov	s15, r3
 8026cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8026cf4:	693b      	ldr	r3, [r7, #16]
 8026cf6:	ee07 3a90 	vmov	s15, r3
 8026cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8026cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8026d02:	4b62      	ldr	r3, [pc, #392]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026d0a:	ee07 3a90 	vmov	s15, r3
 8026d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8026d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8026d16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8026e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8026d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8026d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8026d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8026d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8026d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8026d32:	e087      	b.n	8026e44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8026d34:	693b      	ldr	r3, [r7, #16]
 8026d36:	ee07 3a90 	vmov	s15, r3
 8026d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8026d3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8026ea0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8026d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8026d46:	4b51      	ldr	r3, [pc, #324]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026d4e:	ee07 3a90 	vmov	s15, r3
 8026d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8026d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8026d5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8026e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8026d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8026d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8026d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8026d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8026d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026d72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8026d76:	e065      	b.n	8026e44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8026d78:	693b      	ldr	r3, [r7, #16]
 8026d7a:	ee07 3a90 	vmov	s15, r3
 8026d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8026d82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8026ea4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8026d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8026d8a:	4b40      	ldr	r3, [pc, #256]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026d92:	ee07 3a90 	vmov	s15, r3
 8026d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8026d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8026d9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8026e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8026da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8026da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8026daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8026dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8026db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026db6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8026dba:	e043      	b.n	8026e44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8026dbc:	693b      	ldr	r3, [r7, #16]
 8026dbe:	ee07 3a90 	vmov	s15, r3
 8026dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8026dc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8026ea8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8026dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8026dce:	4b2f      	ldr	r3, [pc, #188]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026dd6:	ee07 3a90 	vmov	s15, r3
 8026dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8026dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8026de2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8026e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8026de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8026dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8026dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8026df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8026df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8026dfe:	e021      	b.n	8026e44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8026e00:	693b      	ldr	r3, [r7, #16]
 8026e02:	ee07 3a90 	vmov	s15, r3
 8026e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8026e0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8026ea4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8026e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8026e12:	4b1e      	ldr	r3, [pc, #120]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026e1a:	ee07 3a90 	vmov	s15, r3
 8026e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8026e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8026e26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8026e9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8026e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8026e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8026e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8026e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8026e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8026e42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8026e44:	4b11      	ldr	r3, [pc, #68]	@ (8026e8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8026e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8026e48:	0a5b      	lsrs	r3, r3, #9
 8026e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8026e4e:	3301      	adds	r3, #1
 8026e50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8026e52:	683b      	ldr	r3, [r7, #0]
 8026e54:	ee07 3a90 	vmov	s15, r3
 8026e58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8026e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8026e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8026e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8026e68:	ee17 3a90 	vmov	r3, s15
 8026e6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8026e6e:	e005      	b.n	8026e7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8026e70:	2300      	movs	r3, #0
 8026e72:	61bb      	str	r3, [r7, #24]
      break;
 8026e74:	e002      	b.n	8026e7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8026e76:	4b07      	ldr	r3, [pc, #28]	@ (8026e94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8026e78:	61bb      	str	r3, [r7, #24]
      break;
 8026e7a:	bf00      	nop
  }

  return sysclockfreq;
 8026e7c:	69bb      	ldr	r3, [r7, #24]
}
 8026e7e:	4618      	mov	r0, r3
 8026e80:	3724      	adds	r7, #36	@ 0x24
 8026e82:	46bd      	mov	sp, r7
 8026e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e88:	4770      	bx	lr
 8026e8a:	bf00      	nop
 8026e8c:	58024400 	.word	0x58024400
 8026e90:	03d09000 	.word	0x03d09000
 8026e94:	003d0900 	.word	0x003d0900
 8026e98:	017d7840 	.word	0x017d7840
 8026e9c:	46000000 	.word	0x46000000
 8026ea0:	4c742400 	.word	0x4c742400
 8026ea4:	4a742400 	.word	0x4a742400
 8026ea8:	4bbebc20 	.word	0x4bbebc20

08026eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8026eac:	b580      	push	{r7, lr}
 8026eae:	b082      	sub	sp, #8
 8026eb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8026eb2:	f7ff fe81 	bl	8026bb8 <HAL_RCC_GetSysClockFreq>
 8026eb6:	4602      	mov	r2, r0
 8026eb8:	4b10      	ldr	r3, [pc, #64]	@ (8026efc <HAL_RCC_GetHCLKFreq+0x50>)
 8026eba:	699b      	ldr	r3, [r3, #24]
 8026ebc:	0a1b      	lsrs	r3, r3, #8
 8026ebe:	f003 030f 	and.w	r3, r3, #15
 8026ec2:	490f      	ldr	r1, [pc, #60]	@ (8026f00 <HAL_RCC_GetHCLKFreq+0x54>)
 8026ec4:	5ccb      	ldrb	r3, [r1, r3]
 8026ec6:	f003 031f 	and.w	r3, r3, #31
 8026eca:	fa22 f303 	lsr.w	r3, r2, r3
 8026ece:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8026ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8026efc <HAL_RCC_GetHCLKFreq+0x50>)
 8026ed2:	699b      	ldr	r3, [r3, #24]
 8026ed4:	f003 030f 	and.w	r3, r3, #15
 8026ed8:	4a09      	ldr	r2, [pc, #36]	@ (8026f00 <HAL_RCC_GetHCLKFreq+0x54>)
 8026eda:	5cd3      	ldrb	r3, [r2, r3]
 8026edc:	f003 031f 	and.w	r3, r3, #31
 8026ee0:	687a      	ldr	r2, [r7, #4]
 8026ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8026ee6:	4a07      	ldr	r2, [pc, #28]	@ (8026f04 <HAL_RCC_GetHCLKFreq+0x58>)
 8026ee8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8026eea:	4a07      	ldr	r2, [pc, #28]	@ (8026f08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8026eec:	687b      	ldr	r3, [r7, #4]
 8026eee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8026ef0:	4b04      	ldr	r3, [pc, #16]	@ (8026f04 <HAL_RCC_GetHCLKFreq+0x58>)
 8026ef2:	681b      	ldr	r3, [r3, #0]
}
 8026ef4:	4618      	mov	r0, r3
 8026ef6:	3708      	adds	r7, #8
 8026ef8:	46bd      	mov	sp, r7
 8026efa:	bd80      	pop	{r7, pc}
 8026efc:	58024400 	.word	0x58024400
 8026f00:	0802ad48 	.word	0x0802ad48
 8026f04:	24000008 	.word	0x24000008
 8026f08:	24000004 	.word	0x24000004

08026f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8026f0c:	b580      	push	{r7, lr}
 8026f0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8026f10:	f7ff ffcc 	bl	8026eac <HAL_RCC_GetHCLKFreq>
 8026f14:	4602      	mov	r2, r0
 8026f16:	4b06      	ldr	r3, [pc, #24]	@ (8026f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8026f18:	69db      	ldr	r3, [r3, #28]
 8026f1a:	091b      	lsrs	r3, r3, #4
 8026f1c:	f003 0307 	and.w	r3, r3, #7
 8026f20:	4904      	ldr	r1, [pc, #16]	@ (8026f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8026f22:	5ccb      	ldrb	r3, [r1, r3]
 8026f24:	f003 031f 	and.w	r3, r3, #31
 8026f28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8026f2c:	4618      	mov	r0, r3
 8026f2e:	bd80      	pop	{r7, pc}
 8026f30:	58024400 	.word	0x58024400
 8026f34:	0802ad48 	.word	0x0802ad48

08026f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8026f38:	b580      	push	{r7, lr}
 8026f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8026f3c:	f7ff ffb6 	bl	8026eac <HAL_RCC_GetHCLKFreq>
 8026f40:	4602      	mov	r2, r0
 8026f42:	4b06      	ldr	r3, [pc, #24]	@ (8026f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8026f44:	69db      	ldr	r3, [r3, #28]
 8026f46:	0a1b      	lsrs	r3, r3, #8
 8026f48:	f003 0307 	and.w	r3, r3, #7
 8026f4c:	4904      	ldr	r1, [pc, #16]	@ (8026f60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8026f4e:	5ccb      	ldrb	r3, [r1, r3]
 8026f50:	f003 031f 	and.w	r3, r3, #31
 8026f54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8026f58:	4618      	mov	r0, r3
 8026f5a:	bd80      	pop	{r7, pc}
 8026f5c:	58024400 	.word	0x58024400
 8026f60:	0802ad48 	.word	0x0802ad48

08026f64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8026f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8026f68:	b0ca      	sub	sp, #296	@ 0x128
 8026f6a:	af00      	add	r7, sp, #0
 8026f6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8026f70:	2300      	movs	r3, #0
 8026f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8026f76:	2300      	movs	r3, #0
 8026f78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8026f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8026f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8026f88:	2500      	movs	r5, #0
 8026f8a:	ea54 0305 	orrs.w	r3, r4, r5
 8026f8e:	d049      	beq.n	8027024 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8026f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8026f94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026f96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8026f9a:	d02f      	beq.n	8026ffc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8026f9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8026fa0:	d828      	bhi.n	8026ff4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8026fa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8026fa6:	d01a      	beq.n	8026fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8026fa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8026fac:	d822      	bhi.n	8026ff4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8026fae:	2b00      	cmp	r3, #0
 8026fb0:	d003      	beq.n	8026fba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8026fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8026fb6:	d007      	beq.n	8026fc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8026fb8:	e01c      	b.n	8026ff4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8026fba:	4bb8      	ldr	r3, [pc, #736]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8026fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026fbe:	4ab7      	ldr	r2, [pc, #732]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8026fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8026fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8026fc6:	e01a      	b.n	8026ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8026fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8026fcc:	3308      	adds	r3, #8
 8026fce:	2102      	movs	r1, #2
 8026fd0:	4618      	mov	r0, r3
 8026fd2:	f001 fc8f 	bl	80288f4 <RCCEx_PLL2_Config>
 8026fd6:	4603      	mov	r3, r0
 8026fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8026fdc:	e00f      	b.n	8026ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8026fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8026fe2:	3328      	adds	r3, #40	@ 0x28
 8026fe4:	2102      	movs	r1, #2
 8026fe6:	4618      	mov	r0, r3
 8026fe8:	f001 fd36 	bl	8028a58 <RCCEx_PLL3_Config>
 8026fec:	4603      	mov	r3, r0
 8026fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8026ff2:	e004      	b.n	8026ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8026ff4:	2301      	movs	r3, #1
 8026ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8026ffa:	e000      	b.n	8026ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8026ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8026ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027002:	2b00      	cmp	r3, #0
 8027004:	d10a      	bne.n	802701c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8027006:	4ba5      	ldr	r3, [pc, #660]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8027008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802700a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 802700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027012:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8027014:	4aa1      	ldr	r2, [pc, #644]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8027016:	430b      	orrs	r3, r1
 8027018:	6513      	str	r3, [r2, #80]	@ 0x50
 802701a:	e003      	b.n	8027024 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802701c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027020:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8027024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027028:	e9d3 2300 	ldrd	r2, r3, [r3]
 802702c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8027030:	f04f 0900 	mov.w	r9, #0
 8027034:	ea58 0309 	orrs.w	r3, r8, r9
 8027038:	d047      	beq.n	80270ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 802703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802703e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8027040:	2b04      	cmp	r3, #4
 8027042:	d82a      	bhi.n	802709a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8027044:	a201      	add	r2, pc, #4	@ (adr r2, 802704c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8027046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802704a:	bf00      	nop
 802704c:	08027061 	.word	0x08027061
 8027050:	0802706f 	.word	0x0802706f
 8027054:	08027085 	.word	0x08027085
 8027058:	080270a3 	.word	0x080270a3
 802705c:	080270a3 	.word	0x080270a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027060:	4b8e      	ldr	r3, [pc, #568]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8027062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027064:	4a8d      	ldr	r2, [pc, #564]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8027066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802706a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802706c:	e01a      	b.n	80270a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802706e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027072:	3308      	adds	r3, #8
 8027074:	2100      	movs	r1, #0
 8027076:	4618      	mov	r0, r3
 8027078:	f001 fc3c 	bl	80288f4 <RCCEx_PLL2_Config>
 802707c:	4603      	mov	r3, r0
 802707e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8027082:	e00f      	b.n	80270a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8027084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027088:	3328      	adds	r3, #40	@ 0x28
 802708a:	2100      	movs	r1, #0
 802708c:	4618      	mov	r0, r3
 802708e:	f001 fce3 	bl	8028a58 <RCCEx_PLL3_Config>
 8027092:	4603      	mov	r3, r0
 8027094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8027098:	e004      	b.n	80270a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802709a:	2301      	movs	r3, #1
 802709c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80270a0:	e000      	b.n	80270a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80270a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80270a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80270a8:	2b00      	cmp	r3, #0
 80270aa:	d10a      	bne.n	80270c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80270ac:	4b7b      	ldr	r3, [pc, #492]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80270ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80270b0:	f023 0107 	bic.w	r1, r3, #7
 80270b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80270b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80270ba:	4a78      	ldr	r2, [pc, #480]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80270bc:	430b      	orrs	r3, r1
 80270be:	6513      	str	r3, [r2, #80]	@ 0x50
 80270c0:	e003      	b.n	80270ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80270c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80270c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80270ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80270ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270d2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80270d6:	f04f 0b00 	mov.w	fp, #0
 80270da:	ea5a 030b 	orrs.w	r3, sl, fp
 80270de:	d04c      	beq.n	802717a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80270e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80270e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80270e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80270ea:	d030      	beq.n	802714e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80270ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80270f0:	d829      	bhi.n	8027146 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80270f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80270f4:	d02d      	beq.n	8027152 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80270f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80270f8:	d825      	bhi.n	8027146 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80270fa:	2b80      	cmp	r3, #128	@ 0x80
 80270fc:	d018      	beq.n	8027130 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80270fe:	2b80      	cmp	r3, #128	@ 0x80
 8027100:	d821      	bhi.n	8027146 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8027102:	2b00      	cmp	r3, #0
 8027104:	d002      	beq.n	802710c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8027106:	2b40      	cmp	r3, #64	@ 0x40
 8027108:	d007      	beq.n	802711a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 802710a:	e01c      	b.n	8027146 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802710c:	4b63      	ldr	r3, [pc, #396]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802710e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027110:	4a62      	ldr	r2, [pc, #392]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8027112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8027116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8027118:	e01c      	b.n	8027154 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802711a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802711e:	3308      	adds	r3, #8
 8027120:	2100      	movs	r1, #0
 8027122:	4618      	mov	r0, r3
 8027124:	f001 fbe6 	bl	80288f4 <RCCEx_PLL2_Config>
 8027128:	4603      	mov	r3, r0
 802712a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 802712e:	e011      	b.n	8027154 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8027130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027134:	3328      	adds	r3, #40	@ 0x28
 8027136:	2100      	movs	r1, #0
 8027138:	4618      	mov	r0, r3
 802713a:	f001 fc8d 	bl	8028a58 <RCCEx_PLL3_Config>
 802713e:	4603      	mov	r3, r0
 8027140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8027144:	e006      	b.n	8027154 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8027146:	2301      	movs	r3, #1
 8027148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802714c:	e002      	b.n	8027154 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 802714e:	bf00      	nop
 8027150:	e000      	b.n	8027154 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8027152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027158:	2b00      	cmp	r3, #0
 802715a:	d10a      	bne.n	8027172 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 802715c:	4b4f      	ldr	r3, [pc, #316]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802715e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027160:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8027164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802716a:	4a4c      	ldr	r2, [pc, #304]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 802716c:	430b      	orrs	r3, r1
 802716e:	6513      	str	r3, [r2, #80]	@ 0x50
 8027170:	e003      	b.n	802717a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 802717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027182:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8027186:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 802718a:	2300      	movs	r3, #0
 802718c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8027190:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8027194:	460b      	mov	r3, r1
 8027196:	4313      	orrs	r3, r2
 8027198:	d053      	beq.n	8027242 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 802719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802719e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80271a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80271a6:	d035      	beq.n	8027214 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80271a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80271ac:	d82e      	bhi.n	802720c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80271ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80271b2:	d031      	beq.n	8027218 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80271b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80271b8:	d828      	bhi.n	802720c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80271ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80271be:	d01a      	beq.n	80271f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80271c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80271c4:	d822      	bhi.n	802720c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80271c6:	2b00      	cmp	r3, #0
 80271c8:	d003      	beq.n	80271d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80271ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80271ce:	d007      	beq.n	80271e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80271d0:	e01c      	b.n	802720c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80271d2:	4b32      	ldr	r3, [pc, #200]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80271d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80271d6:	4a31      	ldr	r2, [pc, #196]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80271d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80271dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80271de:	e01c      	b.n	802721a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80271e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80271e4:	3308      	adds	r3, #8
 80271e6:	2100      	movs	r1, #0
 80271e8:	4618      	mov	r0, r3
 80271ea:	f001 fb83 	bl	80288f4 <RCCEx_PLL2_Config>
 80271ee:	4603      	mov	r3, r0
 80271f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80271f4:	e011      	b.n	802721a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80271f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80271fa:	3328      	adds	r3, #40	@ 0x28
 80271fc:	2100      	movs	r1, #0
 80271fe:	4618      	mov	r0, r3
 8027200:	f001 fc2a 	bl	8028a58 <RCCEx_PLL3_Config>
 8027204:	4603      	mov	r3, r0
 8027206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802720a:	e006      	b.n	802721a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 802720c:	2301      	movs	r3, #1
 802720e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027212:	e002      	b.n	802721a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8027214:	bf00      	nop
 8027216:	e000      	b.n	802721a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8027218:	bf00      	nop
    }

    if (ret == HAL_OK)
 802721a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802721e:	2b00      	cmp	r3, #0
 8027220:	d10b      	bne.n	802723a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8027222:	4b1e      	ldr	r3, [pc, #120]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8027224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8027226:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 802722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802722e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8027232:	4a1a      	ldr	r2, [pc, #104]	@ (802729c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8027234:	430b      	orrs	r3, r1
 8027236:	6593      	str	r3, [r2, #88]	@ 0x58
 8027238:	e003      	b.n	8027242 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802723a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802723e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8027242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027246:	e9d3 2300 	ldrd	r2, r3, [r3]
 802724a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 802724e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8027252:	2300      	movs	r3, #0
 8027254:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8027258:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 802725c:	460b      	mov	r3, r1
 802725e:	4313      	orrs	r3, r2
 8027260:	d056      	beq.n	8027310 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8027262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027266:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 802726a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 802726e:	d038      	beq.n	80272e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8027270:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8027274:	d831      	bhi.n	80272da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8027276:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 802727a:	d034      	beq.n	80272e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 802727c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8027280:	d82b      	bhi.n	80272da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8027282:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8027286:	d01d      	beq.n	80272c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8027288:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802728c:	d825      	bhi.n	80272da <HAL_RCCEx_PeriphCLKConfig+0x376>
 802728e:	2b00      	cmp	r3, #0
 8027290:	d006      	beq.n	80272a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8027292:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8027296:	d00a      	beq.n	80272ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8027298:	e01f      	b.n	80272da <HAL_RCCEx_PeriphCLKConfig+0x376>
 802729a:	bf00      	nop
 802729c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80272a0:	4ba2      	ldr	r3, [pc, #648]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80272a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80272a4:	4aa1      	ldr	r2, [pc, #644]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80272a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80272aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80272ac:	e01c      	b.n	80272e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80272ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80272b2:	3308      	adds	r3, #8
 80272b4:	2100      	movs	r1, #0
 80272b6:	4618      	mov	r0, r3
 80272b8:	f001 fb1c 	bl	80288f4 <RCCEx_PLL2_Config>
 80272bc:	4603      	mov	r3, r0
 80272be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80272c2:	e011      	b.n	80272e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80272c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80272c8:	3328      	adds	r3, #40	@ 0x28
 80272ca:	2100      	movs	r1, #0
 80272cc:	4618      	mov	r0, r3
 80272ce:	f001 fbc3 	bl	8028a58 <RCCEx_PLL3_Config>
 80272d2:	4603      	mov	r3, r0
 80272d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80272d8:	e006      	b.n	80272e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80272da:	2301      	movs	r3, #1
 80272dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80272e0:	e002      	b.n	80272e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80272e2:	bf00      	nop
 80272e4:	e000      	b.n	80272e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80272e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80272e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80272ec:	2b00      	cmp	r3, #0
 80272ee:	d10b      	bne.n	8027308 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80272f0:	4b8e      	ldr	r3, [pc, #568]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80272f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80272f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80272f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80272fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8027300:	4a8a      	ldr	r2, [pc, #552]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8027302:	430b      	orrs	r3, r1
 8027304:	6593      	str	r3, [r2, #88]	@ 0x58
 8027306:	e003      	b.n	8027310 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802730c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8027310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027318:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 802731c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8027320:	2300      	movs	r3, #0
 8027322:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8027326:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 802732a:	460b      	mov	r3, r1
 802732c:	4313      	orrs	r3, r2
 802732e:	d03a      	beq.n	80273a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8027330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8027336:	2b30      	cmp	r3, #48	@ 0x30
 8027338:	d01f      	beq.n	802737a <HAL_RCCEx_PeriphCLKConfig+0x416>
 802733a:	2b30      	cmp	r3, #48	@ 0x30
 802733c:	d819      	bhi.n	8027372 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 802733e:	2b20      	cmp	r3, #32
 8027340:	d00c      	beq.n	802735c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8027342:	2b20      	cmp	r3, #32
 8027344:	d815      	bhi.n	8027372 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8027346:	2b00      	cmp	r3, #0
 8027348:	d019      	beq.n	802737e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 802734a:	2b10      	cmp	r3, #16
 802734c:	d111      	bne.n	8027372 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802734e:	4b77      	ldr	r3, [pc, #476]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8027350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027352:	4a76      	ldr	r2, [pc, #472]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8027354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8027358:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 802735a:	e011      	b.n	8027380 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027360:	3308      	adds	r3, #8
 8027362:	2102      	movs	r1, #2
 8027364:	4618      	mov	r0, r3
 8027366:	f001 fac5 	bl	80288f4 <RCCEx_PLL2_Config>
 802736a:	4603      	mov	r3, r0
 802736c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8027370:	e006      	b.n	8027380 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8027372:	2301      	movs	r3, #1
 8027374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027378:	e002      	b.n	8027380 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 802737a:	bf00      	nop
 802737c:	e000      	b.n	8027380 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 802737e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027384:	2b00      	cmp	r3, #0
 8027386:	d10a      	bne.n	802739e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8027388:	4b68      	ldr	r3, [pc, #416]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802738a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802738c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8027390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8027396:	4a65      	ldr	r2, [pc, #404]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8027398:	430b      	orrs	r3, r1
 802739a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 802739c:	e003      	b.n	80273a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802739e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80273a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80273a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80273aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80273ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80273b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80273b6:	2300      	movs	r3, #0
 80273b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80273bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80273c0:	460b      	mov	r3, r1
 80273c2:	4313      	orrs	r3, r2
 80273c4:	d051      	beq.n	802746a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80273c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80273ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80273cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80273d0:	d035      	beq.n	802743e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80273d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80273d6:	d82e      	bhi.n	8027436 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80273d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80273dc:	d031      	beq.n	8027442 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80273de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80273e2:	d828      	bhi.n	8027436 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80273e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80273e8:	d01a      	beq.n	8027420 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80273ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80273ee:	d822      	bhi.n	8027436 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80273f0:	2b00      	cmp	r3, #0
 80273f2:	d003      	beq.n	80273fc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80273f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80273f8:	d007      	beq.n	802740a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80273fa:	e01c      	b.n	8027436 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80273fc:	4b4b      	ldr	r3, [pc, #300]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80273fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027400:	4a4a      	ldr	r2, [pc, #296]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8027402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8027406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8027408:	e01c      	b.n	8027444 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802740e:	3308      	adds	r3, #8
 8027410:	2100      	movs	r1, #0
 8027412:	4618      	mov	r0, r3
 8027414:	f001 fa6e 	bl	80288f4 <RCCEx_PLL2_Config>
 8027418:	4603      	mov	r3, r0
 802741a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 802741e:	e011      	b.n	8027444 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8027420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027424:	3328      	adds	r3, #40	@ 0x28
 8027426:	2100      	movs	r1, #0
 8027428:	4618      	mov	r0, r3
 802742a:	f001 fb15 	bl	8028a58 <RCCEx_PLL3_Config>
 802742e:	4603      	mov	r3, r0
 8027430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8027434:	e006      	b.n	8027444 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8027436:	2301      	movs	r3, #1
 8027438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802743c:	e002      	b.n	8027444 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 802743e:	bf00      	nop
 8027440:	e000      	b.n	8027444 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8027442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027448:	2b00      	cmp	r3, #0
 802744a:	d10a      	bne.n	8027462 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 802744c:	4b37      	ldr	r3, [pc, #220]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802744e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027450:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8027454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802745a:	4a34      	ldr	r2, [pc, #208]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802745c:	430b      	orrs	r3, r1
 802745e:	6513      	str	r3, [r2, #80]	@ 0x50
 8027460:	e003      	b.n	802746a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 802746a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027472:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8027476:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 802747a:	2300      	movs	r3, #0
 802747c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8027480:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8027484:	460b      	mov	r3, r1
 8027486:	4313      	orrs	r3, r2
 8027488:	d056      	beq.n	8027538 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 802748a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802748e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8027490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8027494:	d033      	beq.n	80274fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8027496:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 802749a:	d82c      	bhi.n	80274f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 802749c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80274a0:	d02f      	beq.n	8027502 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80274a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80274a6:	d826      	bhi.n	80274f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80274a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80274ac:	d02b      	beq.n	8027506 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80274ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80274b2:	d820      	bhi.n	80274f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80274b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80274b8:	d012      	beq.n	80274e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80274ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80274be:	d81a      	bhi.n	80274f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80274c0:	2b00      	cmp	r3, #0
 80274c2:	d022      	beq.n	802750a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80274c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80274c8:	d115      	bne.n	80274f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80274ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80274ce:	3308      	adds	r3, #8
 80274d0:	2101      	movs	r1, #1
 80274d2:	4618      	mov	r0, r3
 80274d4:	f001 fa0e 	bl	80288f4 <RCCEx_PLL2_Config>
 80274d8:	4603      	mov	r3, r0
 80274da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80274de:	e015      	b.n	802750c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80274e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80274e4:	3328      	adds	r3, #40	@ 0x28
 80274e6:	2101      	movs	r1, #1
 80274e8:	4618      	mov	r0, r3
 80274ea:	f001 fab5 	bl	8028a58 <RCCEx_PLL3_Config>
 80274ee:	4603      	mov	r3, r0
 80274f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80274f4:	e00a      	b.n	802750c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80274f6:	2301      	movs	r3, #1
 80274f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80274fc:	e006      	b.n	802750c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80274fe:	bf00      	nop
 8027500:	e004      	b.n	802750c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8027502:	bf00      	nop
 8027504:	e002      	b.n	802750c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8027506:	bf00      	nop
 8027508:	e000      	b.n	802750c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802750a:	bf00      	nop
    }

    if (ret == HAL_OK)
 802750c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027510:	2b00      	cmp	r3, #0
 8027512:	d10d      	bne.n	8027530 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8027514:	4b05      	ldr	r3, [pc, #20]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8027516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027518:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 802751c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027520:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8027522:	4a02      	ldr	r2, [pc, #8]	@ (802752c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8027524:	430b      	orrs	r3, r1
 8027526:	6513      	str	r3, [r2, #80]	@ 0x50
 8027528:	e006      	b.n	8027538 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 802752a:	bf00      	nop
 802752c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8027538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027540:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8027544:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8027548:	2300      	movs	r3, #0
 802754a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 802754e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8027552:	460b      	mov	r3, r1
 8027554:	4313      	orrs	r3, r2
 8027556:	d055      	beq.n	8027604 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8027558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802755c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8027560:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8027564:	d033      	beq.n	80275ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8027566:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 802756a:	d82c      	bhi.n	80275c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 802756c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8027570:	d02f      	beq.n	80275d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8027572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8027576:	d826      	bhi.n	80275c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8027578:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 802757c:	d02b      	beq.n	80275d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 802757e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8027582:	d820      	bhi.n	80275c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8027584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8027588:	d012      	beq.n	80275b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 802758a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802758e:	d81a      	bhi.n	80275c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8027590:	2b00      	cmp	r3, #0
 8027592:	d022      	beq.n	80275da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8027594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8027598:	d115      	bne.n	80275c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802759e:	3308      	adds	r3, #8
 80275a0:	2101      	movs	r1, #1
 80275a2:	4618      	mov	r0, r3
 80275a4:	f001 f9a6 	bl	80288f4 <RCCEx_PLL2_Config>
 80275a8:	4603      	mov	r3, r0
 80275aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80275ae:	e015      	b.n	80275dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80275b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80275b4:	3328      	adds	r3, #40	@ 0x28
 80275b6:	2101      	movs	r1, #1
 80275b8:	4618      	mov	r0, r3
 80275ba:	f001 fa4d 	bl	8028a58 <RCCEx_PLL3_Config>
 80275be:	4603      	mov	r3, r0
 80275c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80275c4:	e00a      	b.n	80275dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80275c6:	2301      	movs	r3, #1
 80275c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80275cc:	e006      	b.n	80275dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80275ce:	bf00      	nop
 80275d0:	e004      	b.n	80275dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80275d2:	bf00      	nop
 80275d4:	e002      	b.n	80275dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80275d6:	bf00      	nop
 80275d8:	e000      	b.n	80275dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80275da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80275dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80275e0:	2b00      	cmp	r3, #0
 80275e2:	d10b      	bne.n	80275fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80275e4:	4ba3      	ldr	r3, [pc, #652]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80275e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80275e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80275ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80275f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80275f4:	4a9f      	ldr	r2, [pc, #636]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80275f6:	430b      	orrs	r3, r1
 80275f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80275fa:	e003      	b.n	8027604 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80275fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8027604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027608:	e9d3 2300 	ldrd	r2, r3, [r3]
 802760c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8027610:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8027614:	2300      	movs	r3, #0
 8027616:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 802761a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 802761e:	460b      	mov	r3, r1
 8027620:	4313      	orrs	r3, r2
 8027622:	d037      	beq.n	8027694 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8027624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802762a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802762e:	d00e      	beq.n	802764e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8027630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8027634:	d816      	bhi.n	8027664 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8027636:	2b00      	cmp	r3, #0
 8027638:	d018      	beq.n	802766c <HAL_RCCEx_PeriphCLKConfig+0x708>
 802763a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802763e:	d111      	bne.n	8027664 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027640:	4b8c      	ldr	r3, [pc, #560]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8027642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027644:	4a8b      	ldr	r2, [pc, #556]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8027646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802764a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 802764c:	e00f      	b.n	802766e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802764e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027652:	3308      	adds	r3, #8
 8027654:	2101      	movs	r1, #1
 8027656:	4618      	mov	r0, r3
 8027658:	f001 f94c 	bl	80288f4 <RCCEx_PLL2_Config>
 802765c:	4603      	mov	r3, r0
 802765e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8027662:	e004      	b.n	802766e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8027664:	2301      	movs	r3, #1
 8027666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802766a:	e000      	b.n	802766e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 802766c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802766e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027672:	2b00      	cmp	r3, #0
 8027674:	d10a      	bne.n	802768c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8027676:	4b7f      	ldr	r3, [pc, #508]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8027678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802767a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 802767e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8027684:	4a7b      	ldr	r2, [pc, #492]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8027686:	430b      	orrs	r3, r1
 8027688:	6513      	str	r3, [r2, #80]	@ 0x50
 802768a:	e003      	b.n	8027694 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802768c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027690:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8027694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802769c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80276a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80276a4:	2300      	movs	r3, #0
 80276a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80276aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80276ae:	460b      	mov	r3, r1
 80276b0:	4313      	orrs	r3, r2
 80276b2:	d039      	beq.n	8027728 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80276b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80276b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80276ba:	2b03      	cmp	r3, #3
 80276bc:	d81c      	bhi.n	80276f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80276be:	a201      	add	r2, pc, #4	@ (adr r2, 80276c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80276c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80276c4:	08027701 	.word	0x08027701
 80276c8:	080276d5 	.word	0x080276d5
 80276cc:	080276e3 	.word	0x080276e3
 80276d0:	08027701 	.word	0x08027701
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80276d4:	4b67      	ldr	r3, [pc, #412]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80276d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80276d8:	4a66      	ldr	r2, [pc, #408]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80276da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80276de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80276e0:	e00f      	b.n	8027702 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80276e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80276e6:	3308      	adds	r3, #8
 80276e8:	2102      	movs	r1, #2
 80276ea:	4618      	mov	r0, r3
 80276ec:	f001 f902 	bl	80288f4 <RCCEx_PLL2_Config>
 80276f0:	4603      	mov	r3, r0
 80276f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80276f6:	e004      	b.n	8027702 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80276f8:	2301      	movs	r3, #1
 80276fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80276fe:	e000      	b.n	8027702 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8027700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027706:	2b00      	cmp	r3, #0
 8027708:	d10a      	bne.n	8027720 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 802770a:	4b5a      	ldr	r3, [pc, #360]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802770c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802770e:	f023 0103 	bic.w	r1, r3, #3
 8027712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8027718:	4a56      	ldr	r2, [pc, #344]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802771a:	430b      	orrs	r3, r1
 802771c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 802771e:	e003      	b.n	8027728 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8027728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027730:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8027734:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8027738:	2300      	movs	r3, #0
 802773a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 802773e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8027742:	460b      	mov	r3, r1
 8027744:	4313      	orrs	r3, r2
 8027746:	f000 809f 	beq.w	8027888 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802774a:	4b4b      	ldr	r3, [pc, #300]	@ (8027878 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802774c:	681b      	ldr	r3, [r3, #0]
 802774e:	4a4a      	ldr	r2, [pc, #296]	@ (8027878 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8027750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8027754:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8027756:	f7fc fde7 	bl	8024328 <HAL_GetTick>
 802775a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802775e:	e00b      	b.n	8027778 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8027760:	f7fc fde2 	bl	8024328 <HAL_GetTick>
 8027764:	4602      	mov	r2, r0
 8027766:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 802776a:	1ad3      	subs	r3, r2, r3
 802776c:	2b64      	cmp	r3, #100	@ 0x64
 802776e:	d903      	bls.n	8027778 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8027770:	2303      	movs	r3, #3
 8027772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027776:	e005      	b.n	8027784 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8027778:	4b3f      	ldr	r3, [pc, #252]	@ (8027878 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802777a:	681b      	ldr	r3, [r3, #0]
 802777c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8027780:	2b00      	cmp	r3, #0
 8027782:	d0ed      	beq.n	8027760 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8027784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027788:	2b00      	cmp	r3, #0
 802778a:	d179      	bne.n	8027880 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 802778c:	4b39      	ldr	r3, [pc, #228]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802778e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8027790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027794:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8027798:	4053      	eors	r3, r2
 802779a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 802779e:	2b00      	cmp	r3, #0
 80277a0:	d015      	beq.n	80277ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80277a2:	4b34      	ldr	r3, [pc, #208]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80277a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80277a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80277aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80277ae:	4b31      	ldr	r3, [pc, #196]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80277b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80277b2:	4a30      	ldr	r2, [pc, #192]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80277b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80277b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80277ba:	4b2e      	ldr	r3, [pc, #184]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80277bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80277be:	4a2d      	ldr	r2, [pc, #180]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80277c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80277c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80277c6:	4a2b      	ldr	r2, [pc, #172]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80277c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80277cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80277ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80277d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80277d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80277da:	d118      	bne.n	802780e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80277dc:	f7fc fda4 	bl	8024328 <HAL_GetTick>
 80277e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80277e4:	e00d      	b.n	8027802 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80277e6:	f7fc fd9f 	bl	8024328 <HAL_GetTick>
 80277ea:	4602      	mov	r2, r0
 80277ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80277f0:	1ad2      	subs	r2, r2, r3
 80277f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80277f6:	429a      	cmp	r2, r3
 80277f8:	d903      	bls.n	8027802 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80277fa:	2303      	movs	r3, #3
 80277fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8027800:	e005      	b.n	802780e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8027802:	4b1c      	ldr	r3, [pc, #112]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8027804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8027806:	f003 0302 	and.w	r3, r3, #2
 802780a:	2b00      	cmp	r3, #0
 802780c:	d0eb      	beq.n	80277e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 802780e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027812:	2b00      	cmp	r3, #0
 8027814:	d129      	bne.n	802786a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8027816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802781a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 802781e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8027822:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8027826:	d10e      	bne.n	8027846 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8027828:	4b12      	ldr	r3, [pc, #72]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802782a:	691b      	ldr	r3, [r3, #16]
 802782c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8027830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027834:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8027838:	091a      	lsrs	r2, r3, #4
 802783a:	4b10      	ldr	r3, [pc, #64]	@ (802787c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 802783c:	4013      	ands	r3, r2
 802783e:	4a0d      	ldr	r2, [pc, #52]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8027840:	430b      	orrs	r3, r1
 8027842:	6113      	str	r3, [r2, #16]
 8027844:	e005      	b.n	8027852 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8027846:	4b0b      	ldr	r3, [pc, #44]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8027848:	691b      	ldr	r3, [r3, #16]
 802784a:	4a0a      	ldr	r2, [pc, #40]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802784c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8027850:	6113      	str	r3, [r2, #16]
 8027852:	4b08      	ldr	r3, [pc, #32]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8027854:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8027856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802785a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 802785e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027862:	4a04      	ldr	r2, [pc, #16]	@ (8027874 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8027864:	430b      	orrs	r3, r1
 8027866:	6713      	str	r3, [r2, #112]	@ 0x70
 8027868:	e00e      	b.n	8027888 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 802786a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802786e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8027872:	e009      	b.n	8027888 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8027874:	58024400 	.word	0x58024400
 8027878:	58024800 	.word	0x58024800
 802787c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8027888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027890:	f002 0301 	and.w	r3, r2, #1
 8027894:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8027898:	2300      	movs	r3, #0
 802789a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 802789e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80278a2:	460b      	mov	r3, r1
 80278a4:	4313      	orrs	r3, r2
 80278a6:	f000 8089 	beq.w	80279bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80278aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80278ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80278b0:	2b28      	cmp	r3, #40	@ 0x28
 80278b2:	d86b      	bhi.n	802798c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80278b4:	a201      	add	r2, pc, #4	@ (adr r2, 80278bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80278b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80278ba:	bf00      	nop
 80278bc:	08027995 	.word	0x08027995
 80278c0:	0802798d 	.word	0x0802798d
 80278c4:	0802798d 	.word	0x0802798d
 80278c8:	0802798d 	.word	0x0802798d
 80278cc:	0802798d 	.word	0x0802798d
 80278d0:	0802798d 	.word	0x0802798d
 80278d4:	0802798d 	.word	0x0802798d
 80278d8:	0802798d 	.word	0x0802798d
 80278dc:	08027961 	.word	0x08027961
 80278e0:	0802798d 	.word	0x0802798d
 80278e4:	0802798d 	.word	0x0802798d
 80278e8:	0802798d 	.word	0x0802798d
 80278ec:	0802798d 	.word	0x0802798d
 80278f0:	0802798d 	.word	0x0802798d
 80278f4:	0802798d 	.word	0x0802798d
 80278f8:	0802798d 	.word	0x0802798d
 80278fc:	08027977 	.word	0x08027977
 8027900:	0802798d 	.word	0x0802798d
 8027904:	0802798d 	.word	0x0802798d
 8027908:	0802798d 	.word	0x0802798d
 802790c:	0802798d 	.word	0x0802798d
 8027910:	0802798d 	.word	0x0802798d
 8027914:	0802798d 	.word	0x0802798d
 8027918:	0802798d 	.word	0x0802798d
 802791c:	08027995 	.word	0x08027995
 8027920:	0802798d 	.word	0x0802798d
 8027924:	0802798d 	.word	0x0802798d
 8027928:	0802798d 	.word	0x0802798d
 802792c:	0802798d 	.word	0x0802798d
 8027930:	0802798d 	.word	0x0802798d
 8027934:	0802798d 	.word	0x0802798d
 8027938:	0802798d 	.word	0x0802798d
 802793c:	08027995 	.word	0x08027995
 8027940:	0802798d 	.word	0x0802798d
 8027944:	0802798d 	.word	0x0802798d
 8027948:	0802798d 	.word	0x0802798d
 802794c:	0802798d 	.word	0x0802798d
 8027950:	0802798d 	.word	0x0802798d
 8027954:	0802798d 	.word	0x0802798d
 8027958:	0802798d 	.word	0x0802798d
 802795c:	08027995 	.word	0x08027995
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8027960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027964:	3308      	adds	r3, #8
 8027966:	2101      	movs	r1, #1
 8027968:	4618      	mov	r0, r3
 802796a:	f000 ffc3 	bl	80288f4 <RCCEx_PLL2_Config>
 802796e:	4603      	mov	r3, r0
 8027970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8027974:	e00f      	b.n	8027996 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8027976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802797a:	3328      	adds	r3, #40	@ 0x28
 802797c:	2101      	movs	r1, #1
 802797e:	4618      	mov	r0, r3
 8027980:	f001 f86a 	bl	8028a58 <RCCEx_PLL3_Config>
 8027984:	4603      	mov	r3, r0
 8027986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 802798a:	e004      	b.n	8027996 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802798c:	2301      	movs	r3, #1
 802798e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027992:	e000      	b.n	8027996 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8027994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802799a:	2b00      	cmp	r3, #0
 802799c:	d10a      	bne.n	80279b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 802799e:	4bbf      	ldr	r3, [pc, #764]	@ (8027c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80279a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80279a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80279a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80279aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80279ac:	4abb      	ldr	r2, [pc, #748]	@ (8027c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80279ae:	430b      	orrs	r3, r1
 80279b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80279b2:	e003      	b.n	80279bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80279b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80279b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80279bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80279c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80279c4:	f002 0302 	and.w	r3, r2, #2
 80279c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80279cc:	2300      	movs	r3, #0
 80279ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80279d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80279d6:	460b      	mov	r3, r1
 80279d8:	4313      	orrs	r3, r2
 80279da:	d041      	beq.n	8027a60 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80279dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80279e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80279e2:	2b05      	cmp	r3, #5
 80279e4:	d824      	bhi.n	8027a30 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80279e6:	a201      	add	r2, pc, #4	@ (adr r2, 80279ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80279e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80279ec:	08027a39 	.word	0x08027a39
 80279f0:	08027a05 	.word	0x08027a05
 80279f4:	08027a1b 	.word	0x08027a1b
 80279f8:	08027a39 	.word	0x08027a39
 80279fc:	08027a39 	.word	0x08027a39
 8027a00:	08027a39 	.word	0x08027a39
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8027a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027a08:	3308      	adds	r3, #8
 8027a0a:	2101      	movs	r1, #1
 8027a0c:	4618      	mov	r0, r3
 8027a0e:	f000 ff71 	bl	80288f4 <RCCEx_PLL2_Config>
 8027a12:	4603      	mov	r3, r0
 8027a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8027a18:	e00f      	b.n	8027a3a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8027a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027a1e:	3328      	adds	r3, #40	@ 0x28
 8027a20:	2101      	movs	r1, #1
 8027a22:	4618      	mov	r0, r3
 8027a24:	f001 f818 	bl	8028a58 <RCCEx_PLL3_Config>
 8027a28:	4603      	mov	r3, r0
 8027a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8027a2e:	e004      	b.n	8027a3a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8027a30:	2301      	movs	r3, #1
 8027a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027a36:	e000      	b.n	8027a3a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8027a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027a3e:	2b00      	cmp	r3, #0
 8027a40:	d10a      	bne.n	8027a58 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8027a42:	4b96      	ldr	r3, [pc, #600]	@ (8027c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8027a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8027a46:	f023 0107 	bic.w	r1, r3, #7
 8027a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027a4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8027a50:	4a92      	ldr	r2, [pc, #584]	@ (8027c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8027a52:	430b      	orrs	r3, r1
 8027a54:	6553      	str	r3, [r2, #84]	@ 0x54
 8027a56:	e003      	b.n	8027a60 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8027a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027a68:	f002 0304 	and.w	r3, r2, #4
 8027a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8027a70:	2300      	movs	r3, #0
 8027a72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8027a76:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8027a7a:	460b      	mov	r3, r1
 8027a7c:	4313      	orrs	r3, r2
 8027a7e:	d044      	beq.n	8027b0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8027a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8027a88:	2b05      	cmp	r3, #5
 8027a8a:	d825      	bhi.n	8027ad8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8027a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8027a94 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8027a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027a92:	bf00      	nop
 8027a94:	08027ae1 	.word	0x08027ae1
 8027a98:	08027aad 	.word	0x08027aad
 8027a9c:	08027ac3 	.word	0x08027ac3
 8027aa0:	08027ae1 	.word	0x08027ae1
 8027aa4:	08027ae1 	.word	0x08027ae1
 8027aa8:	08027ae1 	.word	0x08027ae1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8027aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027ab0:	3308      	adds	r3, #8
 8027ab2:	2101      	movs	r1, #1
 8027ab4:	4618      	mov	r0, r3
 8027ab6:	f000 ff1d 	bl	80288f4 <RCCEx_PLL2_Config>
 8027aba:	4603      	mov	r3, r0
 8027abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8027ac0:	e00f      	b.n	8027ae2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8027ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027ac6:	3328      	adds	r3, #40	@ 0x28
 8027ac8:	2101      	movs	r1, #1
 8027aca:	4618      	mov	r0, r3
 8027acc:	f000 ffc4 	bl	8028a58 <RCCEx_PLL3_Config>
 8027ad0:	4603      	mov	r3, r0
 8027ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8027ad6:	e004      	b.n	8027ae2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8027ad8:	2301      	movs	r3, #1
 8027ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027ade:	e000      	b.n	8027ae2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8027ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027ae6:	2b00      	cmp	r3, #0
 8027ae8:	d10b      	bne.n	8027b02 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8027aea:	4b6c      	ldr	r3, [pc, #432]	@ (8027c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8027aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8027aee:	f023 0107 	bic.w	r1, r3, #7
 8027af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8027afa:	4a68      	ldr	r2, [pc, #416]	@ (8027c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8027afc:	430b      	orrs	r3, r1
 8027afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8027b00:	e003      	b.n	8027b0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8027b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027b12:	f002 0320 	and.w	r3, r2, #32
 8027b16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8027b1a:	2300      	movs	r3, #0
 8027b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8027b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8027b24:	460b      	mov	r3, r1
 8027b26:	4313      	orrs	r3, r2
 8027b28:	d055      	beq.n	8027bd6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8027b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8027b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8027b36:	d033      	beq.n	8027ba0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8027b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8027b3c:	d82c      	bhi.n	8027b98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8027b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8027b42:	d02f      	beq.n	8027ba4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8027b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8027b48:	d826      	bhi.n	8027b98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8027b4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8027b4e:	d02b      	beq.n	8027ba8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8027b50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8027b54:	d820      	bhi.n	8027b98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8027b56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8027b5a:	d012      	beq.n	8027b82 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8027b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8027b60:	d81a      	bhi.n	8027b98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8027b62:	2b00      	cmp	r3, #0
 8027b64:	d022      	beq.n	8027bac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8027b66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8027b6a:	d115      	bne.n	8027b98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8027b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027b70:	3308      	adds	r3, #8
 8027b72:	2100      	movs	r1, #0
 8027b74:	4618      	mov	r0, r3
 8027b76:	f000 febd 	bl	80288f4 <RCCEx_PLL2_Config>
 8027b7a:	4603      	mov	r3, r0
 8027b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8027b80:	e015      	b.n	8027bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8027b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027b86:	3328      	adds	r3, #40	@ 0x28
 8027b88:	2102      	movs	r1, #2
 8027b8a:	4618      	mov	r0, r3
 8027b8c:	f000 ff64 	bl	8028a58 <RCCEx_PLL3_Config>
 8027b90:	4603      	mov	r3, r0
 8027b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8027b96:	e00a      	b.n	8027bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8027b98:	2301      	movs	r3, #1
 8027b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027b9e:	e006      	b.n	8027bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8027ba0:	bf00      	nop
 8027ba2:	e004      	b.n	8027bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8027ba4:	bf00      	nop
 8027ba6:	e002      	b.n	8027bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8027ba8:	bf00      	nop
 8027baa:	e000      	b.n	8027bae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8027bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027bb2:	2b00      	cmp	r3, #0
 8027bb4:	d10b      	bne.n	8027bce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8027bb6:	4b39      	ldr	r3, [pc, #228]	@ (8027c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8027bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8027bba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8027bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8027bc6:	4a35      	ldr	r2, [pc, #212]	@ (8027c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8027bc8:	430b      	orrs	r3, r1
 8027bca:	6553      	str	r3, [r2, #84]	@ 0x54
 8027bcc:	e003      	b.n	8027bd6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8027bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027bde:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8027be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8027be6:	2300      	movs	r3, #0
 8027be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8027bec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8027bf0:	460b      	mov	r3, r1
 8027bf2:	4313      	orrs	r3, r2
 8027bf4:	d058      	beq.n	8027ca8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8027bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8027bfe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8027c02:	d033      	beq.n	8027c6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8027c04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8027c08:	d82c      	bhi.n	8027c64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8027c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8027c0e:	d02f      	beq.n	8027c70 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8027c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8027c14:	d826      	bhi.n	8027c64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8027c16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8027c1a:	d02b      	beq.n	8027c74 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8027c1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8027c20:	d820      	bhi.n	8027c64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8027c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8027c26:	d012      	beq.n	8027c4e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8027c28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8027c2c:	d81a      	bhi.n	8027c64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8027c2e:	2b00      	cmp	r3, #0
 8027c30:	d022      	beq.n	8027c78 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8027c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8027c36:	d115      	bne.n	8027c64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8027c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027c3c:	3308      	adds	r3, #8
 8027c3e:	2100      	movs	r1, #0
 8027c40:	4618      	mov	r0, r3
 8027c42:	f000 fe57 	bl	80288f4 <RCCEx_PLL2_Config>
 8027c46:	4603      	mov	r3, r0
 8027c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8027c4c:	e015      	b.n	8027c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8027c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027c52:	3328      	adds	r3, #40	@ 0x28
 8027c54:	2102      	movs	r1, #2
 8027c56:	4618      	mov	r0, r3
 8027c58:	f000 fefe 	bl	8028a58 <RCCEx_PLL3_Config>
 8027c5c:	4603      	mov	r3, r0
 8027c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8027c62:	e00a      	b.n	8027c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8027c64:	2301      	movs	r3, #1
 8027c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027c6a:	e006      	b.n	8027c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8027c6c:	bf00      	nop
 8027c6e:	e004      	b.n	8027c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8027c70:	bf00      	nop
 8027c72:	e002      	b.n	8027c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8027c74:	bf00      	nop
 8027c76:	e000      	b.n	8027c7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8027c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027c7e:	2b00      	cmp	r3, #0
 8027c80:	d10e      	bne.n	8027ca0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8027c82:	4b06      	ldr	r3, [pc, #24]	@ (8027c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8027c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8027c86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8027c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8027c92:	4a02      	ldr	r2, [pc, #8]	@ (8027c9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8027c94:	430b      	orrs	r3, r1
 8027c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8027c98:	e006      	b.n	8027ca8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8027c9a:	bf00      	nop
 8027c9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027ca4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8027ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027cb0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8027cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8027cb8:	2300      	movs	r3, #0
 8027cba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8027cbe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8027cc2:	460b      	mov	r3, r1
 8027cc4:	4313      	orrs	r3, r2
 8027cc6:	d055      	beq.n	8027d74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8027cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027ccc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8027cd0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8027cd4:	d033      	beq.n	8027d3e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8027cd6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8027cda:	d82c      	bhi.n	8027d36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8027cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8027ce0:	d02f      	beq.n	8027d42 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8027ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8027ce6:	d826      	bhi.n	8027d36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8027ce8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8027cec:	d02b      	beq.n	8027d46 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8027cee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8027cf2:	d820      	bhi.n	8027d36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8027cf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8027cf8:	d012      	beq.n	8027d20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8027cfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8027cfe:	d81a      	bhi.n	8027d36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8027d00:	2b00      	cmp	r3, #0
 8027d02:	d022      	beq.n	8027d4a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8027d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8027d08:	d115      	bne.n	8027d36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8027d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027d0e:	3308      	adds	r3, #8
 8027d10:	2100      	movs	r1, #0
 8027d12:	4618      	mov	r0, r3
 8027d14:	f000 fdee 	bl	80288f4 <RCCEx_PLL2_Config>
 8027d18:	4603      	mov	r3, r0
 8027d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8027d1e:	e015      	b.n	8027d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8027d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027d24:	3328      	adds	r3, #40	@ 0x28
 8027d26:	2102      	movs	r1, #2
 8027d28:	4618      	mov	r0, r3
 8027d2a:	f000 fe95 	bl	8028a58 <RCCEx_PLL3_Config>
 8027d2e:	4603      	mov	r3, r0
 8027d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8027d34:	e00a      	b.n	8027d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8027d36:	2301      	movs	r3, #1
 8027d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027d3c:	e006      	b.n	8027d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8027d3e:	bf00      	nop
 8027d40:	e004      	b.n	8027d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8027d42:	bf00      	nop
 8027d44:	e002      	b.n	8027d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8027d46:	bf00      	nop
 8027d48:	e000      	b.n	8027d4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8027d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027d50:	2b00      	cmp	r3, #0
 8027d52:	d10b      	bne.n	8027d6c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8027d54:	4ba1      	ldr	r3, [pc, #644]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8027d58:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8027d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027d60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8027d64:	4a9d      	ldr	r2, [pc, #628]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027d66:	430b      	orrs	r3, r1
 8027d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8027d6a:	e003      	b.n	8027d74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8027d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027d7c:	f002 0308 	and.w	r3, r2, #8
 8027d80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8027d84:	2300      	movs	r3, #0
 8027d86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8027d8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8027d8e:	460b      	mov	r3, r1
 8027d90:	4313      	orrs	r3, r2
 8027d92:	d01e      	beq.n	8027dd2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8027d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8027d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8027da0:	d10c      	bne.n	8027dbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8027da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027da6:	3328      	adds	r3, #40	@ 0x28
 8027da8:	2102      	movs	r1, #2
 8027daa:	4618      	mov	r0, r3
 8027dac:	f000 fe54 	bl	8028a58 <RCCEx_PLL3_Config>
 8027db0:	4603      	mov	r3, r0
 8027db2:	2b00      	cmp	r3, #0
 8027db4:	d002      	beq.n	8027dbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8027db6:	2301      	movs	r3, #1
 8027db8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8027dbc:	4b87      	ldr	r3, [pc, #540]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8027dc0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8027dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8027dcc:	4a83      	ldr	r2, [pc, #524]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027dce:	430b      	orrs	r3, r1
 8027dd0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8027dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027dda:	f002 0310 	and.w	r3, r2, #16
 8027dde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8027de2:	2300      	movs	r3, #0
 8027de4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8027de8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8027dec:	460b      	mov	r3, r1
 8027dee:	4313      	orrs	r3, r2
 8027df0:	d01e      	beq.n	8027e30 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8027df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8027dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8027dfe:	d10c      	bne.n	8027e1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8027e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027e04:	3328      	adds	r3, #40	@ 0x28
 8027e06:	2102      	movs	r1, #2
 8027e08:	4618      	mov	r0, r3
 8027e0a:	f000 fe25 	bl	8028a58 <RCCEx_PLL3_Config>
 8027e0e:	4603      	mov	r3, r0
 8027e10:	2b00      	cmp	r3, #0
 8027e12:	d002      	beq.n	8027e1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8027e14:	2301      	movs	r3, #1
 8027e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8027e1a:	4b70      	ldr	r3, [pc, #448]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8027e1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8027e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8027e2a:	4a6c      	ldr	r2, [pc, #432]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027e2c:	430b      	orrs	r3, r1
 8027e2e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8027e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027e38:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8027e3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8027e40:	2300      	movs	r3, #0
 8027e42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8027e46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8027e4a:	460b      	mov	r3, r1
 8027e4c:	4313      	orrs	r3, r2
 8027e4e:	d03e      	beq.n	8027ece <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8027e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027e54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8027e58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8027e5c:	d022      	beq.n	8027ea4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8027e5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8027e62:	d81b      	bhi.n	8027e9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8027e64:	2b00      	cmp	r3, #0
 8027e66:	d003      	beq.n	8027e70 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8027e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8027e6c:	d00b      	beq.n	8027e86 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8027e6e:	e015      	b.n	8027e9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8027e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027e74:	3308      	adds	r3, #8
 8027e76:	2100      	movs	r1, #0
 8027e78:	4618      	mov	r0, r3
 8027e7a:	f000 fd3b 	bl	80288f4 <RCCEx_PLL2_Config>
 8027e7e:	4603      	mov	r3, r0
 8027e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8027e84:	e00f      	b.n	8027ea6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8027e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027e8a:	3328      	adds	r3, #40	@ 0x28
 8027e8c:	2102      	movs	r1, #2
 8027e8e:	4618      	mov	r0, r3
 8027e90:	f000 fde2 	bl	8028a58 <RCCEx_PLL3_Config>
 8027e94:	4603      	mov	r3, r0
 8027e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8027e9a:	e004      	b.n	8027ea6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8027e9c:	2301      	movs	r3, #1
 8027e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027ea2:	e000      	b.n	8027ea6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8027ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027eaa:	2b00      	cmp	r3, #0
 8027eac:	d10b      	bne.n	8027ec6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8027eae:	4b4b      	ldr	r3, [pc, #300]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8027eb2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8027eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027eba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8027ebe:	4a47      	ldr	r2, [pc, #284]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027ec0:	430b      	orrs	r3, r1
 8027ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8027ec4:	e003      	b.n	8027ece <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8027ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027ed6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8027eda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8027edc:	2300      	movs	r3, #0
 8027ede:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8027ee0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8027ee4:	460b      	mov	r3, r1
 8027ee6:	4313      	orrs	r3, r2
 8027ee8:	d03b      	beq.n	8027f62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8027eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8027ef2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8027ef6:	d01f      	beq.n	8027f38 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8027ef8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8027efc:	d818      	bhi.n	8027f30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8027efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8027f02:	d003      	beq.n	8027f0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8027f04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8027f08:	d007      	beq.n	8027f1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8027f0a:	e011      	b.n	8027f30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027f0c:	4b33      	ldr	r3, [pc, #204]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027f10:	4a32      	ldr	r2, [pc, #200]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8027f16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8027f18:	e00f      	b.n	8027f3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8027f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027f1e:	3328      	adds	r3, #40	@ 0x28
 8027f20:	2101      	movs	r1, #1
 8027f22:	4618      	mov	r0, r3
 8027f24:	f000 fd98 	bl	8028a58 <RCCEx_PLL3_Config>
 8027f28:	4603      	mov	r3, r0
 8027f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8027f2e:	e004      	b.n	8027f3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8027f30:	2301      	movs	r3, #1
 8027f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027f36:	e000      	b.n	8027f3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8027f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027f3e:	2b00      	cmp	r3, #0
 8027f40:	d10b      	bne.n	8027f5a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8027f42:	4b26      	ldr	r3, [pc, #152]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8027f46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8027f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8027f52:	4a22      	ldr	r2, [pc, #136]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027f54:	430b      	orrs	r3, r1
 8027f56:	6553      	str	r3, [r2, #84]	@ 0x54
 8027f58:	e003      	b.n	8027f62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8027f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027f6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8027f6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8027f70:	2300      	movs	r3, #0
 8027f72:	677b      	str	r3, [r7, #116]	@ 0x74
 8027f74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8027f78:	460b      	mov	r3, r1
 8027f7a:	4313      	orrs	r3, r2
 8027f7c:	d034      	beq.n	8027fe8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8027f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027f84:	2b00      	cmp	r3, #0
 8027f86:	d003      	beq.n	8027f90 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8027f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8027f8c:	d007      	beq.n	8027f9e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8027f8e:	e011      	b.n	8027fb4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8027f90:	4b12      	ldr	r3, [pc, #72]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027f94:	4a11      	ldr	r2, [pc, #68]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8027f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8027f9c:	e00e      	b.n	8027fbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8027f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027fa2:	3308      	adds	r3, #8
 8027fa4:	2102      	movs	r1, #2
 8027fa6:	4618      	mov	r0, r3
 8027fa8:	f000 fca4 	bl	80288f4 <RCCEx_PLL2_Config>
 8027fac:	4603      	mov	r3, r0
 8027fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8027fb2:	e003      	b.n	8027fbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8027fb4:	2301      	movs	r3, #1
 8027fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8027fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8027fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027fc0:	2b00      	cmp	r3, #0
 8027fc2:	d10d      	bne.n	8027fe0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8027fc4:	4b05      	ldr	r3, [pc, #20]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8027fc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8027fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8027fd2:	4a02      	ldr	r2, [pc, #8]	@ (8027fdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8027fd4:	430b      	orrs	r3, r1
 8027fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8027fd8:	e006      	b.n	8027fe8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8027fda:	bf00      	nop
 8027fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8027fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8027fe4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8027fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8027fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027ff0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8027ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8027ff6:	2300      	movs	r3, #0
 8027ff8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8027ffa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8027ffe:	460b      	mov	r3, r1
 8028000:	4313      	orrs	r3, r2
 8028002:	d00c      	beq.n	802801e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8028004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8028008:	3328      	adds	r3, #40	@ 0x28
 802800a:	2102      	movs	r1, #2
 802800c:	4618      	mov	r0, r3
 802800e:	f000 fd23 	bl	8028a58 <RCCEx_PLL3_Config>
 8028012:	4603      	mov	r3, r0
 8028014:	2b00      	cmp	r3, #0
 8028016:	d002      	beq.n	802801e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8028018:	2301      	movs	r3, #1
 802801a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 802801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8028022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028026:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 802802a:	663b      	str	r3, [r7, #96]	@ 0x60
 802802c:	2300      	movs	r3, #0
 802802e:	667b      	str	r3, [r7, #100]	@ 0x64
 8028030:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8028034:	460b      	mov	r3, r1
 8028036:	4313      	orrs	r3, r2
 8028038:	d038      	beq.n	80280ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 802803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802803e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8028042:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8028046:	d018      	beq.n	802807a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8028048:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802804c:	d811      	bhi.n	8028072 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 802804e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8028052:	d014      	beq.n	802807e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8028054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8028058:	d80b      	bhi.n	8028072 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 802805a:	2b00      	cmp	r3, #0
 802805c:	d011      	beq.n	8028082 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 802805e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8028062:	d106      	bne.n	8028072 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8028064:	4bc3      	ldr	r3, [pc, #780]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8028066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028068:	4ac2      	ldr	r2, [pc, #776]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802806a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802806e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8028070:	e008      	b.n	8028084 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8028072:	2301      	movs	r3, #1
 8028074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8028078:	e004      	b.n	8028084 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 802807a:	bf00      	nop
 802807c:	e002      	b.n	8028084 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 802807e:	bf00      	nop
 8028080:	e000      	b.n	8028084 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8028082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8028084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8028088:	2b00      	cmp	r3, #0
 802808a:	d10b      	bne.n	80280a4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 802808c:	4bb9      	ldr	r3, [pc, #740]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802808e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8028090:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8028094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8028098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802809c:	4ab5      	ldr	r2, [pc, #724]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802809e:	430b      	orrs	r3, r1
 80280a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80280a2:	e003      	b.n	80280ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80280a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80280a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80280ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80280b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80280b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80280b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80280ba:	2300      	movs	r3, #0
 80280bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80280be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80280c2:	460b      	mov	r3, r1
 80280c4:	4313      	orrs	r3, r2
 80280c6:	d009      	beq.n	80280dc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80280c8:	4baa      	ldr	r3, [pc, #680]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80280ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80280cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80280d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80280d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80280d6:	4aa7      	ldr	r2, [pc, #668]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80280d8:	430b      	orrs	r3, r1
 80280da:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80280dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80280e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80280e4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80280e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80280ea:	2300      	movs	r3, #0
 80280ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80280ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80280f2:	460b      	mov	r3, r1
 80280f4:	4313      	orrs	r3, r2
 80280f6:	d00a      	beq.n	802810e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80280f8:	4b9e      	ldr	r3, [pc, #632]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80280fa:	691b      	ldr	r3, [r3, #16]
 80280fc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8028100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8028104:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8028108:	4a9a      	ldr	r2, [pc, #616]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802810a:	430b      	orrs	r3, r1
 802810c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 802810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8028112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028116:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 802811a:	64bb      	str	r3, [r7, #72]	@ 0x48
 802811c:	2300      	movs	r3, #0
 802811e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8028120:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8028124:	460b      	mov	r3, r1
 8028126:	4313      	orrs	r3, r2
 8028128:	d009      	beq.n	802813e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 802812a:	4b92      	ldr	r3, [pc, #584]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802812c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802812e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8028132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8028136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8028138:	4a8e      	ldr	r2, [pc, #568]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802813a:	430b      	orrs	r3, r1
 802813c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 802813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8028142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028146:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 802814a:	643b      	str	r3, [r7, #64]	@ 0x40
 802814c:	2300      	movs	r3, #0
 802814e:	647b      	str	r3, [r7, #68]	@ 0x44
 8028150:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8028154:	460b      	mov	r3, r1
 8028156:	4313      	orrs	r3, r2
 8028158:	d00e      	beq.n	8028178 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 802815a:	4b86      	ldr	r3, [pc, #536]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 802815c:	691b      	ldr	r3, [r3, #16]
 802815e:	4a85      	ldr	r2, [pc, #532]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8028160:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8028164:	6113      	str	r3, [r2, #16]
 8028166:	4b83      	ldr	r3, [pc, #524]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8028168:	6919      	ldr	r1, [r3, #16]
 802816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802816e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8028172:	4a80      	ldr	r2, [pc, #512]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8028174:	430b      	orrs	r3, r1
 8028176:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8028178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028180:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8028184:	63bb      	str	r3, [r7, #56]	@ 0x38
 8028186:	2300      	movs	r3, #0
 8028188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802818a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 802818e:	460b      	mov	r3, r1
 8028190:	4313      	orrs	r3, r2
 8028192:	d009      	beq.n	80281a8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8028194:	4b77      	ldr	r3, [pc, #476]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8028196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8028198:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 802819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80281a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80281a2:	4a74      	ldr	r2, [pc, #464]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80281a4:	430b      	orrs	r3, r1
 80281a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80281a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80281ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281b0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80281b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80281b6:	2300      	movs	r3, #0
 80281b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80281ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80281be:	460b      	mov	r3, r1
 80281c0:	4313      	orrs	r3, r2
 80281c2:	d00a      	beq.n	80281da <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80281c4:	4b6b      	ldr	r3, [pc, #428]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80281c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80281c8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80281cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80281d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80281d4:	4a67      	ldr	r2, [pc, #412]	@ (8028374 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80281d6:	430b      	orrs	r3, r1
 80281d8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80281da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80281de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80281e2:	2100      	movs	r1, #0
 80281e4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80281e6:	f003 0301 	and.w	r3, r3, #1
 80281ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80281ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80281f0:	460b      	mov	r3, r1
 80281f2:	4313      	orrs	r3, r2
 80281f4:	d011      	beq.n	802821a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80281f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80281fa:	3308      	adds	r3, #8
 80281fc:	2100      	movs	r1, #0
 80281fe:	4618      	mov	r0, r3
 8028200:	f000 fb78 	bl	80288f4 <RCCEx_PLL2_Config>
 8028204:	4603      	mov	r3, r0
 8028206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 802820a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802820e:	2b00      	cmp	r3, #0
 8028210:	d003      	beq.n	802821a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8028216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 802821a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028222:	2100      	movs	r1, #0
 8028224:	6239      	str	r1, [r7, #32]
 8028226:	f003 0302 	and.w	r3, r3, #2
 802822a:	627b      	str	r3, [r7, #36]	@ 0x24
 802822c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8028230:	460b      	mov	r3, r1
 8028232:	4313      	orrs	r3, r2
 8028234:	d011      	beq.n	802825a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8028236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802823a:	3308      	adds	r3, #8
 802823c:	2101      	movs	r1, #1
 802823e:	4618      	mov	r0, r3
 8028240:	f000 fb58 	bl	80288f4 <RCCEx_PLL2_Config>
 8028244:	4603      	mov	r3, r0
 8028246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 802824a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802824e:	2b00      	cmp	r3, #0
 8028250:	d003      	beq.n	802825a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8028256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 802825a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028262:	2100      	movs	r1, #0
 8028264:	61b9      	str	r1, [r7, #24]
 8028266:	f003 0304 	and.w	r3, r3, #4
 802826a:	61fb      	str	r3, [r7, #28]
 802826c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8028270:	460b      	mov	r3, r1
 8028272:	4313      	orrs	r3, r2
 8028274:	d011      	beq.n	802829a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8028276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802827a:	3308      	adds	r3, #8
 802827c:	2102      	movs	r1, #2
 802827e:	4618      	mov	r0, r3
 8028280:	f000 fb38 	bl	80288f4 <RCCEx_PLL2_Config>
 8028284:	4603      	mov	r3, r0
 8028286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 802828a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802828e:	2b00      	cmp	r3, #0
 8028290:	d003      	beq.n	802829a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8028296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 802829a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80282a2:	2100      	movs	r1, #0
 80282a4:	6139      	str	r1, [r7, #16]
 80282a6:	f003 0308 	and.w	r3, r3, #8
 80282aa:	617b      	str	r3, [r7, #20]
 80282ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80282b0:	460b      	mov	r3, r1
 80282b2:	4313      	orrs	r3, r2
 80282b4:	d011      	beq.n	80282da <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80282b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80282ba:	3328      	adds	r3, #40	@ 0x28
 80282bc:	2100      	movs	r1, #0
 80282be:	4618      	mov	r0, r3
 80282c0:	f000 fbca 	bl	8028a58 <RCCEx_PLL3_Config>
 80282c4:	4603      	mov	r3, r0
 80282c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80282ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80282ce:	2b00      	cmp	r3, #0
 80282d0:	d003      	beq.n	80282da <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80282d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80282d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80282da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80282de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80282e2:	2100      	movs	r1, #0
 80282e4:	60b9      	str	r1, [r7, #8]
 80282e6:	f003 0310 	and.w	r3, r3, #16
 80282ea:	60fb      	str	r3, [r7, #12]
 80282ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80282f0:	460b      	mov	r3, r1
 80282f2:	4313      	orrs	r3, r2
 80282f4:	d011      	beq.n	802831a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80282f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80282fa:	3328      	adds	r3, #40	@ 0x28
 80282fc:	2101      	movs	r1, #1
 80282fe:	4618      	mov	r0, r3
 8028300:	f000 fbaa 	bl	8028a58 <RCCEx_PLL3_Config>
 8028304:	4603      	mov	r3, r0
 8028306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 802830a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802830e:	2b00      	cmp	r3, #0
 8028310:	d003      	beq.n	802831a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8028316:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 802831a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028322:	2100      	movs	r1, #0
 8028324:	6039      	str	r1, [r7, #0]
 8028326:	f003 0320 	and.w	r3, r3, #32
 802832a:	607b      	str	r3, [r7, #4]
 802832c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8028330:	460b      	mov	r3, r1
 8028332:	4313      	orrs	r3, r2
 8028334:	d011      	beq.n	802835a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8028336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802833a:	3328      	adds	r3, #40	@ 0x28
 802833c:	2102      	movs	r1, #2
 802833e:	4618      	mov	r0, r3
 8028340:	f000 fb8a 	bl	8028a58 <RCCEx_PLL3_Config>
 8028344:	4603      	mov	r3, r0
 8028346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 802834a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802834e:	2b00      	cmp	r3, #0
 8028350:	d003      	beq.n	802835a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8028352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8028356:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 802835a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 802835e:	2b00      	cmp	r3, #0
 8028360:	d101      	bne.n	8028366 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8028362:	2300      	movs	r3, #0
 8028364:	e000      	b.n	8028368 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8028366:	2301      	movs	r3, #1
}
 8028368:	4618      	mov	r0, r3
 802836a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 802836e:	46bd      	mov	sp, r7
 8028370:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8028374:	58024400 	.word	0x58024400

08028378 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8028378:	b580      	push	{r7, lr}
 802837a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 802837c:	f7fe fd96 	bl	8026eac <HAL_RCC_GetHCLKFreq>
 8028380:	4602      	mov	r2, r0
 8028382:	4b06      	ldr	r3, [pc, #24]	@ (802839c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8028384:	6a1b      	ldr	r3, [r3, #32]
 8028386:	091b      	lsrs	r3, r3, #4
 8028388:	f003 0307 	and.w	r3, r3, #7
 802838c:	4904      	ldr	r1, [pc, #16]	@ (80283a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 802838e:	5ccb      	ldrb	r3, [r1, r3]
 8028390:	f003 031f 	and.w	r3, r3, #31
 8028394:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8028398:	4618      	mov	r0, r3
 802839a:	bd80      	pop	{r7, pc}
 802839c:	58024400 	.word	0x58024400
 80283a0:	0802ad48 	.word	0x0802ad48

080283a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80283a4:	b480      	push	{r7}
 80283a6:	b089      	sub	sp, #36	@ 0x24
 80283a8:	af00      	add	r7, sp, #0
 80283aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80283ac:	4ba1      	ldr	r3, [pc, #644]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80283ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80283b0:	f003 0303 	and.w	r3, r3, #3
 80283b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80283b6:	4b9f      	ldr	r3, [pc, #636]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80283b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80283ba:	0b1b      	lsrs	r3, r3, #12
 80283bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80283c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80283c2:	4b9c      	ldr	r3, [pc, #624]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80283c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80283c6:	091b      	lsrs	r3, r3, #4
 80283c8:	f003 0301 	and.w	r3, r3, #1
 80283cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80283ce:	4b99      	ldr	r3, [pc, #612]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80283d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80283d2:	08db      	lsrs	r3, r3, #3
 80283d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80283d8:	693a      	ldr	r2, [r7, #16]
 80283da:	fb02 f303 	mul.w	r3, r2, r3
 80283de:	ee07 3a90 	vmov	s15, r3
 80283e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80283e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80283ea:	697b      	ldr	r3, [r7, #20]
 80283ec:	2b00      	cmp	r3, #0
 80283ee:	f000 8111 	beq.w	8028614 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80283f2:	69bb      	ldr	r3, [r7, #24]
 80283f4:	2b02      	cmp	r3, #2
 80283f6:	f000 8083 	beq.w	8028500 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80283fa:	69bb      	ldr	r3, [r7, #24]
 80283fc:	2b02      	cmp	r3, #2
 80283fe:	f200 80a1 	bhi.w	8028544 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8028402:	69bb      	ldr	r3, [r7, #24]
 8028404:	2b00      	cmp	r3, #0
 8028406:	d003      	beq.n	8028410 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8028408:	69bb      	ldr	r3, [r7, #24]
 802840a:	2b01      	cmp	r3, #1
 802840c:	d056      	beq.n	80284bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 802840e:	e099      	b.n	8028544 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8028410:	4b88      	ldr	r3, [pc, #544]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028412:	681b      	ldr	r3, [r3, #0]
 8028414:	f003 0320 	and.w	r3, r3, #32
 8028418:	2b00      	cmp	r3, #0
 802841a:	d02d      	beq.n	8028478 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802841c:	4b85      	ldr	r3, [pc, #532]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802841e:	681b      	ldr	r3, [r3, #0]
 8028420:	08db      	lsrs	r3, r3, #3
 8028422:	f003 0303 	and.w	r3, r3, #3
 8028426:	4a84      	ldr	r2, [pc, #528]	@ (8028638 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8028428:	fa22 f303 	lsr.w	r3, r2, r3
 802842c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802842e:	68bb      	ldr	r3, [r7, #8]
 8028430:	ee07 3a90 	vmov	s15, r3
 8028434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028438:	697b      	ldr	r3, [r7, #20]
 802843a:	ee07 3a90 	vmov	s15, r3
 802843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028446:	4b7b      	ldr	r3, [pc, #492]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802844a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802844e:	ee07 3a90 	vmov	s15, r3
 8028452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028456:	ed97 6a03 	vldr	s12, [r7, #12]
 802845a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 802863c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802845e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802846a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802846e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028472:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8028476:	e087      	b.n	8028588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8028478:	697b      	ldr	r3, [r7, #20]
 802847a:	ee07 3a90 	vmov	s15, r3
 802847e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028482:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8028640 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8028486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802848a:	4b6a      	ldr	r3, [pc, #424]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802848c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802848e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028492:	ee07 3a90 	vmov	s15, r3
 8028496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802849a:	ed97 6a03 	vldr	s12, [r7, #12]
 802849e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 802863c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80284a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80284a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80284aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80284ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80284b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80284b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80284ba:	e065      	b.n	8028588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80284bc:	697b      	ldr	r3, [r7, #20]
 80284be:	ee07 3a90 	vmov	s15, r3
 80284c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80284c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8028644 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80284ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80284ce:	4b59      	ldr	r3, [pc, #356]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80284d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80284d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80284d6:	ee07 3a90 	vmov	s15, r3
 80284da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80284de:	ed97 6a03 	vldr	s12, [r7, #12]
 80284e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 802863c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80284e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80284ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80284ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80284f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80284f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80284fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80284fe:	e043      	b.n	8028588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8028500:	697b      	ldr	r3, [r7, #20]
 8028502:	ee07 3a90 	vmov	s15, r3
 8028506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802850a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8028648 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 802850e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028512:	4b48      	ldr	r3, [pc, #288]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802851a:	ee07 3a90 	vmov	s15, r3
 802851e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028522:	ed97 6a03 	vldr	s12, [r7, #12]
 8028526:	eddf 5a45 	vldr	s11, [pc, #276]	@ 802863c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802852a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802852e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8028536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802853a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802853e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8028542:	e021      	b.n	8028588 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8028544:	697b      	ldr	r3, [r7, #20]
 8028546:	ee07 3a90 	vmov	s15, r3
 802854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802854e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8028644 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8028552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028556:	4b37      	ldr	r3, [pc, #220]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8028558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802855a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802855e:	ee07 3a90 	vmov	s15, r3
 8028562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028566:	ed97 6a03 	vldr	s12, [r7, #12]
 802856a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802863c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802856e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802857a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802857e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8028582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8028586:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8028588:	4b2a      	ldr	r3, [pc, #168]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802858a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802858c:	0a5b      	lsrs	r3, r3, #9
 802858e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8028592:	ee07 3a90 	vmov	s15, r3
 8028596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802859a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802859e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80285a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80285a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80285aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80285ae:	ee17 2a90 	vmov	r2, s15
 80285b2:	687b      	ldr	r3, [r7, #4]
 80285b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80285b6:	4b1f      	ldr	r3, [pc, #124]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80285b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80285ba:	0c1b      	lsrs	r3, r3, #16
 80285bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80285c0:	ee07 3a90 	vmov	s15, r3
 80285c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80285c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80285cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80285d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80285d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80285d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80285dc:	ee17 2a90 	vmov	r2, s15
 80285e0:	687b      	ldr	r3, [r7, #4]
 80285e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80285e4:	4b13      	ldr	r3, [pc, #76]	@ (8028634 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80285e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80285e8:	0e1b      	lsrs	r3, r3, #24
 80285ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80285ee:	ee07 3a90 	vmov	s15, r3
 80285f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80285f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80285fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80285fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8028602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802860a:	ee17 2a90 	vmov	r2, s15
 802860e:	687b      	ldr	r3, [r7, #4]
 8028610:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8028612:	e008      	b.n	8028626 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8028614:	687b      	ldr	r3, [r7, #4]
 8028616:	2200      	movs	r2, #0
 8028618:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 802861a:	687b      	ldr	r3, [r7, #4]
 802861c:	2200      	movs	r2, #0
 802861e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8028620:	687b      	ldr	r3, [r7, #4]
 8028622:	2200      	movs	r2, #0
 8028624:	609a      	str	r2, [r3, #8]
}
 8028626:	bf00      	nop
 8028628:	3724      	adds	r7, #36	@ 0x24
 802862a:	46bd      	mov	sp, r7
 802862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028630:	4770      	bx	lr
 8028632:	bf00      	nop
 8028634:	58024400 	.word	0x58024400
 8028638:	03d09000 	.word	0x03d09000
 802863c:	46000000 	.word	0x46000000
 8028640:	4c742400 	.word	0x4c742400
 8028644:	4a742400 	.word	0x4a742400
 8028648:	4bbebc20 	.word	0x4bbebc20

0802864c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 802864c:	b480      	push	{r7}
 802864e:	b089      	sub	sp, #36	@ 0x24
 8028650:	af00      	add	r7, sp, #0
 8028652:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8028654:	4ba1      	ldr	r3, [pc, #644]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028658:	f003 0303 	and.w	r3, r3, #3
 802865c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 802865e:	4b9f      	ldr	r3, [pc, #636]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028662:	0d1b      	lsrs	r3, r3, #20
 8028664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8028668:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 802866a:	4b9c      	ldr	r3, [pc, #624]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802866c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802866e:	0a1b      	lsrs	r3, r3, #8
 8028670:	f003 0301 	and.w	r3, r3, #1
 8028674:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8028676:	4b99      	ldr	r3, [pc, #612]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802867a:	08db      	lsrs	r3, r3, #3
 802867c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8028680:	693a      	ldr	r2, [r7, #16]
 8028682:	fb02 f303 	mul.w	r3, r2, r3
 8028686:	ee07 3a90 	vmov	s15, r3
 802868a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802868e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8028692:	697b      	ldr	r3, [r7, #20]
 8028694:	2b00      	cmp	r3, #0
 8028696:	f000 8111 	beq.w	80288bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 802869a:	69bb      	ldr	r3, [r7, #24]
 802869c:	2b02      	cmp	r3, #2
 802869e:	f000 8083 	beq.w	80287a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80286a2:	69bb      	ldr	r3, [r7, #24]
 80286a4:	2b02      	cmp	r3, #2
 80286a6:	f200 80a1 	bhi.w	80287ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80286aa:	69bb      	ldr	r3, [r7, #24]
 80286ac:	2b00      	cmp	r3, #0
 80286ae:	d003      	beq.n	80286b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80286b0:	69bb      	ldr	r3, [r7, #24]
 80286b2:	2b01      	cmp	r3, #1
 80286b4:	d056      	beq.n	8028764 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80286b6:	e099      	b.n	80287ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80286b8:	4b88      	ldr	r3, [pc, #544]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80286ba:	681b      	ldr	r3, [r3, #0]
 80286bc:	f003 0320 	and.w	r3, r3, #32
 80286c0:	2b00      	cmp	r3, #0
 80286c2:	d02d      	beq.n	8028720 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80286c4:	4b85      	ldr	r3, [pc, #532]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80286c6:	681b      	ldr	r3, [r3, #0]
 80286c8:	08db      	lsrs	r3, r3, #3
 80286ca:	f003 0303 	and.w	r3, r3, #3
 80286ce:	4a84      	ldr	r2, [pc, #528]	@ (80288e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80286d0:	fa22 f303 	lsr.w	r3, r2, r3
 80286d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80286d6:	68bb      	ldr	r3, [r7, #8]
 80286d8:	ee07 3a90 	vmov	s15, r3
 80286dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80286e0:	697b      	ldr	r3, [r7, #20]
 80286e2:	ee07 3a90 	vmov	s15, r3
 80286e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80286ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80286ee:	4b7b      	ldr	r3, [pc, #492]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80286f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80286f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80286f6:	ee07 3a90 	vmov	s15, r3
 80286fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80286fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8028702:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80288e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802870a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802870e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8028712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028716:	ee67 7a27 	vmul.f32	s15, s14, s15
 802871a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 802871e:	e087      	b.n	8028830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8028720:	697b      	ldr	r3, [r7, #20]
 8028722:	ee07 3a90 	vmov	s15, r3
 8028726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802872a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80288e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 802872e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028732:	4b6a      	ldr	r3, [pc, #424]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802873a:	ee07 3a90 	vmov	s15, r3
 802873e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028742:	ed97 6a03 	vldr	s12, [r7, #12]
 8028746:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80288e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802874a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802874e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8028756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802875a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802875e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8028762:	e065      	b.n	8028830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8028764:	697b      	ldr	r3, [r7, #20]
 8028766:	ee07 3a90 	vmov	s15, r3
 802876a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802876e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80288ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8028772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8028776:	4b59      	ldr	r3, [pc, #356]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802877a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802877e:	ee07 3a90 	vmov	s15, r3
 8028782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8028786:	ed97 6a03 	vldr	s12, [r7, #12]
 802878a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80288e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802878e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8028792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8028796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802879a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802879e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80287a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80287a6:	e043      	b.n	8028830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80287a8:	697b      	ldr	r3, [r7, #20]
 80287aa:	ee07 3a90 	vmov	s15, r3
 80287ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80287b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80288f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80287b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80287ba:	4b48      	ldr	r3, [pc, #288]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80287bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80287be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80287c2:	ee07 3a90 	vmov	s15, r3
 80287c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80287ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80287ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80288e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80287d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80287d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80287da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80287de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80287e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80287e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80287ea:	e021      	b.n	8028830 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80287ec:	697b      	ldr	r3, [r7, #20]
 80287ee:	ee07 3a90 	vmov	s15, r3
 80287f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80287f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80288ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80287fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80287fe:	4b37      	ldr	r3, [pc, #220]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028806:	ee07 3a90 	vmov	s15, r3
 802880a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802880e:	ed97 6a03 	vldr	s12, [r7, #12]
 8028812:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80288e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8028816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802881a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802881e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8028822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8028826:	ee67 7a27 	vmul.f32	s15, s14, s15
 802882a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802882e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8028830:	4b2a      	ldr	r3, [pc, #168]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028834:	0a5b      	lsrs	r3, r3, #9
 8028836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802883a:	ee07 3a90 	vmov	s15, r3
 802883e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028846:	ee37 7a87 	vadd.f32	s14, s15, s14
 802884a:	edd7 6a07 	vldr	s13, [r7, #28]
 802884e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028856:	ee17 2a90 	vmov	r2, s15
 802885a:	687b      	ldr	r3, [r7, #4]
 802885c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 802885e:	4b1f      	ldr	r3, [pc, #124]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8028860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028862:	0c1b      	lsrs	r3, r3, #16
 8028864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8028868:	ee07 3a90 	vmov	s15, r3
 802886c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8028870:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8028878:	edd7 6a07 	vldr	s13, [r7, #28]
 802887c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8028880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8028884:	ee17 2a90 	vmov	r2, s15
 8028888:	687b      	ldr	r3, [r7, #4]
 802888a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 802888c:	4b13      	ldr	r3, [pc, #76]	@ (80288dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802888e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028890:	0e1b      	lsrs	r3, r3, #24
 8028892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8028896:	ee07 3a90 	vmov	s15, r3
 802889a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802889e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80288a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80288a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80288aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80288ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80288b2:	ee17 2a90 	vmov	r2, s15
 80288b6:	687b      	ldr	r3, [r7, #4]
 80288b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80288ba:	e008      	b.n	80288ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80288bc:	687b      	ldr	r3, [r7, #4]
 80288be:	2200      	movs	r2, #0
 80288c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80288c2:	687b      	ldr	r3, [r7, #4]
 80288c4:	2200      	movs	r2, #0
 80288c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80288c8:	687b      	ldr	r3, [r7, #4]
 80288ca:	2200      	movs	r2, #0
 80288cc:	609a      	str	r2, [r3, #8]
}
 80288ce:	bf00      	nop
 80288d0:	3724      	adds	r7, #36	@ 0x24
 80288d2:	46bd      	mov	sp, r7
 80288d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288d8:	4770      	bx	lr
 80288da:	bf00      	nop
 80288dc:	58024400 	.word	0x58024400
 80288e0:	03d09000 	.word	0x03d09000
 80288e4:	46000000 	.word	0x46000000
 80288e8:	4c742400 	.word	0x4c742400
 80288ec:	4a742400 	.word	0x4a742400
 80288f0:	4bbebc20 	.word	0x4bbebc20

080288f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80288f4:	b580      	push	{r7, lr}
 80288f6:	b084      	sub	sp, #16
 80288f8:	af00      	add	r7, sp, #0
 80288fa:	6078      	str	r0, [r7, #4]
 80288fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80288fe:	2300      	movs	r3, #0
 8028900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8028902:	4b53      	ldr	r3, [pc, #332]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 8028904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028906:	f003 0303 	and.w	r3, r3, #3
 802890a:	2b03      	cmp	r3, #3
 802890c:	d101      	bne.n	8028912 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 802890e:	2301      	movs	r3, #1
 8028910:	e099      	b.n	8028a46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8028912:	4b4f      	ldr	r3, [pc, #316]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 8028914:	681b      	ldr	r3, [r3, #0]
 8028916:	4a4e      	ldr	r2, [pc, #312]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 8028918:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 802891c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802891e:	f7fb fd03 	bl	8024328 <HAL_GetTick>
 8028922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8028924:	e008      	b.n	8028938 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8028926:	f7fb fcff 	bl	8024328 <HAL_GetTick>
 802892a:	4602      	mov	r2, r0
 802892c:	68bb      	ldr	r3, [r7, #8]
 802892e:	1ad3      	subs	r3, r2, r3
 8028930:	2b02      	cmp	r3, #2
 8028932:	d901      	bls.n	8028938 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8028934:	2303      	movs	r3, #3
 8028936:	e086      	b.n	8028a46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8028938:	4b45      	ldr	r3, [pc, #276]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 802893a:	681b      	ldr	r3, [r3, #0]
 802893c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8028940:	2b00      	cmp	r3, #0
 8028942:	d1f0      	bne.n	8028926 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8028944:	4b42      	ldr	r3, [pc, #264]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 8028946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028948:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 802894c:	687b      	ldr	r3, [r7, #4]
 802894e:	681b      	ldr	r3, [r3, #0]
 8028950:	031b      	lsls	r3, r3, #12
 8028952:	493f      	ldr	r1, [pc, #252]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 8028954:	4313      	orrs	r3, r2
 8028956:	628b      	str	r3, [r1, #40]	@ 0x28
 8028958:	687b      	ldr	r3, [r7, #4]
 802895a:	685b      	ldr	r3, [r3, #4]
 802895c:	3b01      	subs	r3, #1
 802895e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8028962:	687b      	ldr	r3, [r7, #4]
 8028964:	689b      	ldr	r3, [r3, #8]
 8028966:	3b01      	subs	r3, #1
 8028968:	025b      	lsls	r3, r3, #9
 802896a:	b29b      	uxth	r3, r3
 802896c:	431a      	orrs	r2, r3
 802896e:	687b      	ldr	r3, [r7, #4]
 8028970:	68db      	ldr	r3, [r3, #12]
 8028972:	3b01      	subs	r3, #1
 8028974:	041b      	lsls	r3, r3, #16
 8028976:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 802897a:	431a      	orrs	r2, r3
 802897c:	687b      	ldr	r3, [r7, #4]
 802897e:	691b      	ldr	r3, [r3, #16]
 8028980:	3b01      	subs	r3, #1
 8028982:	061b      	lsls	r3, r3, #24
 8028984:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8028988:	4931      	ldr	r1, [pc, #196]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 802898a:	4313      	orrs	r3, r2
 802898c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 802898e:	4b30      	ldr	r3, [pc, #192]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 8028990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028992:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8028996:	687b      	ldr	r3, [r7, #4]
 8028998:	695b      	ldr	r3, [r3, #20]
 802899a:	492d      	ldr	r1, [pc, #180]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 802899c:	4313      	orrs	r3, r2
 802899e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80289a0:	4b2b      	ldr	r3, [pc, #172]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80289a4:	f023 0220 	bic.w	r2, r3, #32
 80289a8:	687b      	ldr	r3, [r7, #4]
 80289aa:	699b      	ldr	r3, [r3, #24]
 80289ac:	4928      	ldr	r1, [pc, #160]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289ae:	4313      	orrs	r3, r2
 80289b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80289b2:	4b27      	ldr	r3, [pc, #156]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80289b6:	4a26      	ldr	r2, [pc, #152]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289b8:	f023 0310 	bic.w	r3, r3, #16
 80289bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80289be:	4b24      	ldr	r3, [pc, #144]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80289c2:	4b24      	ldr	r3, [pc, #144]	@ (8028a54 <RCCEx_PLL2_Config+0x160>)
 80289c4:	4013      	ands	r3, r2
 80289c6:	687a      	ldr	r2, [r7, #4]
 80289c8:	69d2      	ldr	r2, [r2, #28]
 80289ca:	00d2      	lsls	r2, r2, #3
 80289cc:	4920      	ldr	r1, [pc, #128]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289ce:	4313      	orrs	r3, r2
 80289d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80289d2:	4b1f      	ldr	r3, [pc, #124]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80289d6:	4a1e      	ldr	r2, [pc, #120]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289d8:	f043 0310 	orr.w	r3, r3, #16
 80289dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80289de:	683b      	ldr	r3, [r7, #0]
 80289e0:	2b00      	cmp	r3, #0
 80289e2:	d106      	bne.n	80289f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80289e4:	4b1a      	ldr	r3, [pc, #104]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80289e8:	4a19      	ldr	r2, [pc, #100]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80289ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80289f0:	e00f      	b.n	8028a12 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80289f2:	683b      	ldr	r3, [r7, #0]
 80289f4:	2b01      	cmp	r3, #1
 80289f6:	d106      	bne.n	8028a06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80289f8:	4b15      	ldr	r3, [pc, #84]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80289fc:	4a14      	ldr	r2, [pc, #80]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 80289fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8028a02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8028a04:	e005      	b.n	8028a12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8028a06:	4b12      	ldr	r3, [pc, #72]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 8028a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028a0a:	4a11      	ldr	r2, [pc, #68]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 8028a0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8028a10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8028a12:	4b0f      	ldr	r3, [pc, #60]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 8028a14:	681b      	ldr	r3, [r3, #0]
 8028a16:	4a0e      	ldr	r2, [pc, #56]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 8028a18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8028a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028a1e:	f7fb fc83 	bl	8024328 <HAL_GetTick>
 8028a22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8028a24:	e008      	b.n	8028a38 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8028a26:	f7fb fc7f 	bl	8024328 <HAL_GetTick>
 8028a2a:	4602      	mov	r2, r0
 8028a2c:	68bb      	ldr	r3, [r7, #8]
 8028a2e:	1ad3      	subs	r3, r2, r3
 8028a30:	2b02      	cmp	r3, #2
 8028a32:	d901      	bls.n	8028a38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8028a34:	2303      	movs	r3, #3
 8028a36:	e006      	b.n	8028a46 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8028a38:	4b05      	ldr	r3, [pc, #20]	@ (8028a50 <RCCEx_PLL2_Config+0x15c>)
 8028a3a:	681b      	ldr	r3, [r3, #0]
 8028a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8028a40:	2b00      	cmp	r3, #0
 8028a42:	d0f0      	beq.n	8028a26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8028a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8028a46:	4618      	mov	r0, r3
 8028a48:	3710      	adds	r7, #16
 8028a4a:	46bd      	mov	sp, r7
 8028a4c:	bd80      	pop	{r7, pc}
 8028a4e:	bf00      	nop
 8028a50:	58024400 	.word	0x58024400
 8028a54:	ffff0007 	.word	0xffff0007

08028a58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8028a58:	b580      	push	{r7, lr}
 8028a5a:	b084      	sub	sp, #16
 8028a5c:	af00      	add	r7, sp, #0
 8028a5e:	6078      	str	r0, [r7, #4]
 8028a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8028a62:	2300      	movs	r3, #0
 8028a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8028a66:	4b53      	ldr	r3, [pc, #332]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028a6a:	f003 0303 	and.w	r3, r3, #3
 8028a6e:	2b03      	cmp	r3, #3
 8028a70:	d101      	bne.n	8028a76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8028a72:	2301      	movs	r3, #1
 8028a74:	e099      	b.n	8028baa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8028a76:	4b4f      	ldr	r3, [pc, #316]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028a78:	681b      	ldr	r3, [r3, #0]
 8028a7a:	4a4e      	ldr	r2, [pc, #312]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028a7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8028a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028a82:	f7fb fc51 	bl	8024328 <HAL_GetTick>
 8028a86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8028a88:	e008      	b.n	8028a9c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8028a8a:	f7fb fc4d 	bl	8024328 <HAL_GetTick>
 8028a8e:	4602      	mov	r2, r0
 8028a90:	68bb      	ldr	r3, [r7, #8]
 8028a92:	1ad3      	subs	r3, r2, r3
 8028a94:	2b02      	cmp	r3, #2
 8028a96:	d901      	bls.n	8028a9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8028a98:	2303      	movs	r3, #3
 8028a9a:	e086      	b.n	8028baa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8028a9c:	4b45      	ldr	r3, [pc, #276]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028a9e:	681b      	ldr	r3, [r3, #0]
 8028aa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8028aa4:	2b00      	cmp	r3, #0
 8028aa6:	d1f0      	bne.n	8028a8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8028aa8:	4b42      	ldr	r3, [pc, #264]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028aac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8028ab0:	687b      	ldr	r3, [r7, #4]
 8028ab2:	681b      	ldr	r3, [r3, #0]
 8028ab4:	051b      	lsls	r3, r3, #20
 8028ab6:	493f      	ldr	r1, [pc, #252]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028ab8:	4313      	orrs	r3, r2
 8028aba:	628b      	str	r3, [r1, #40]	@ 0x28
 8028abc:	687b      	ldr	r3, [r7, #4]
 8028abe:	685b      	ldr	r3, [r3, #4]
 8028ac0:	3b01      	subs	r3, #1
 8028ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8028ac6:	687b      	ldr	r3, [r7, #4]
 8028ac8:	689b      	ldr	r3, [r3, #8]
 8028aca:	3b01      	subs	r3, #1
 8028acc:	025b      	lsls	r3, r3, #9
 8028ace:	b29b      	uxth	r3, r3
 8028ad0:	431a      	orrs	r2, r3
 8028ad2:	687b      	ldr	r3, [r7, #4]
 8028ad4:	68db      	ldr	r3, [r3, #12]
 8028ad6:	3b01      	subs	r3, #1
 8028ad8:	041b      	lsls	r3, r3, #16
 8028ada:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8028ade:	431a      	orrs	r2, r3
 8028ae0:	687b      	ldr	r3, [r7, #4]
 8028ae2:	691b      	ldr	r3, [r3, #16]
 8028ae4:	3b01      	subs	r3, #1
 8028ae6:	061b      	lsls	r3, r3, #24
 8028ae8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8028aec:	4931      	ldr	r1, [pc, #196]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028aee:	4313      	orrs	r3, r2
 8028af0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8028af2:	4b30      	ldr	r3, [pc, #192]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028af6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8028afa:	687b      	ldr	r3, [r7, #4]
 8028afc:	695b      	ldr	r3, [r3, #20]
 8028afe:	492d      	ldr	r1, [pc, #180]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b00:	4313      	orrs	r3, r2
 8028b02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8028b04:	4b2b      	ldr	r3, [pc, #172]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028b08:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8028b0c:	687b      	ldr	r3, [r7, #4]
 8028b0e:	699b      	ldr	r3, [r3, #24]
 8028b10:	4928      	ldr	r1, [pc, #160]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b12:	4313      	orrs	r3, r2
 8028b14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8028b16:	4b27      	ldr	r3, [pc, #156]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028b1a:	4a26      	ldr	r2, [pc, #152]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8028b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8028b22:	4b24      	ldr	r3, [pc, #144]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8028b26:	4b24      	ldr	r3, [pc, #144]	@ (8028bb8 <RCCEx_PLL3_Config+0x160>)
 8028b28:	4013      	ands	r3, r2
 8028b2a:	687a      	ldr	r2, [r7, #4]
 8028b2c:	69d2      	ldr	r2, [r2, #28]
 8028b2e:	00d2      	lsls	r2, r2, #3
 8028b30:	4920      	ldr	r1, [pc, #128]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b32:	4313      	orrs	r3, r2
 8028b34:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8028b36:	4b1f      	ldr	r3, [pc, #124]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8028b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8028b42:	683b      	ldr	r3, [r7, #0]
 8028b44:	2b00      	cmp	r3, #0
 8028b46:	d106      	bne.n	8028b56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8028b48:	4b1a      	ldr	r3, [pc, #104]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028b4c:	4a19      	ldr	r2, [pc, #100]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8028b52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8028b54:	e00f      	b.n	8028b76 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8028b56:	683b      	ldr	r3, [r7, #0]
 8028b58:	2b01      	cmp	r3, #1
 8028b5a:	d106      	bne.n	8028b6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8028b5c:	4b15      	ldr	r3, [pc, #84]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028b60:	4a14      	ldr	r2, [pc, #80]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8028b66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8028b68:	e005      	b.n	8028b76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8028b6a:	4b12      	ldr	r3, [pc, #72]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028b6e:	4a11      	ldr	r2, [pc, #68]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8028b74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8028b76:	4b0f      	ldr	r3, [pc, #60]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b78:	681b      	ldr	r3, [r3, #0]
 8028b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8028b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8028b82:	f7fb fbd1 	bl	8024328 <HAL_GetTick>
 8028b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8028b88:	e008      	b.n	8028b9c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8028b8a:	f7fb fbcd 	bl	8024328 <HAL_GetTick>
 8028b8e:	4602      	mov	r2, r0
 8028b90:	68bb      	ldr	r3, [r7, #8]
 8028b92:	1ad3      	subs	r3, r2, r3
 8028b94:	2b02      	cmp	r3, #2
 8028b96:	d901      	bls.n	8028b9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8028b98:	2303      	movs	r3, #3
 8028b9a:	e006      	b.n	8028baa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8028b9c:	4b05      	ldr	r3, [pc, #20]	@ (8028bb4 <RCCEx_PLL3_Config+0x15c>)
 8028b9e:	681b      	ldr	r3, [r3, #0]
 8028ba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8028ba4:	2b00      	cmp	r3, #0
 8028ba6:	d0f0      	beq.n	8028b8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8028ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8028baa:	4618      	mov	r0, r3
 8028bac:	3710      	adds	r7, #16
 8028bae:	46bd      	mov	sp, r7
 8028bb0:	bd80      	pop	{r7, pc}
 8028bb2:	bf00      	nop
 8028bb4:	58024400 	.word	0x58024400
 8028bb8:	ffff0007 	.word	0xffff0007

08028bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8028bbc:	b580      	push	{r7, lr}
 8028bbe:	b082      	sub	sp, #8
 8028bc0:	af00      	add	r7, sp, #0
 8028bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8028bc4:	687b      	ldr	r3, [r7, #4]
 8028bc6:	2b00      	cmp	r3, #0
 8028bc8:	d101      	bne.n	8028bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8028bca:	2301      	movs	r3, #1
 8028bcc:	e042      	b.n	8028c54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8028bce:	687b      	ldr	r3, [r7, #4]
 8028bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8028bd4:	2b00      	cmp	r3, #0
 8028bd6:	d106      	bne.n	8028be6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8028bd8:	687b      	ldr	r3, [r7, #4]
 8028bda:	2200      	movs	r2, #0
 8028bdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8028be0:	6878      	ldr	r0, [r7, #4]
 8028be2:	f7fb f95b 	bl	8023e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8028be6:	687b      	ldr	r3, [r7, #4]
 8028be8:	2224      	movs	r2, #36	@ 0x24
 8028bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8028bee:	687b      	ldr	r3, [r7, #4]
 8028bf0:	681b      	ldr	r3, [r3, #0]
 8028bf2:	681a      	ldr	r2, [r3, #0]
 8028bf4:	687b      	ldr	r3, [r7, #4]
 8028bf6:	681b      	ldr	r3, [r3, #0]
 8028bf8:	f022 0201 	bic.w	r2, r2, #1
 8028bfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8028bfe:	687b      	ldr	r3, [r7, #4]
 8028c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028c02:	2b00      	cmp	r3, #0
 8028c04:	d002      	beq.n	8028c0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8028c06:	6878      	ldr	r0, [r7, #4]
 8028c08:	f000 fee6 	bl	80299d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8028c0c:	6878      	ldr	r0, [r7, #4]
 8028c0e:	f000 f97b 	bl	8028f08 <UART_SetConfig>
 8028c12:	4603      	mov	r3, r0
 8028c14:	2b01      	cmp	r3, #1
 8028c16:	d101      	bne.n	8028c1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8028c18:	2301      	movs	r3, #1
 8028c1a:	e01b      	b.n	8028c54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8028c1c:	687b      	ldr	r3, [r7, #4]
 8028c1e:	681b      	ldr	r3, [r3, #0]
 8028c20:	685a      	ldr	r2, [r3, #4]
 8028c22:	687b      	ldr	r3, [r7, #4]
 8028c24:	681b      	ldr	r3, [r3, #0]
 8028c26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8028c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8028c2c:	687b      	ldr	r3, [r7, #4]
 8028c2e:	681b      	ldr	r3, [r3, #0]
 8028c30:	689a      	ldr	r2, [r3, #8]
 8028c32:	687b      	ldr	r3, [r7, #4]
 8028c34:	681b      	ldr	r3, [r3, #0]
 8028c36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8028c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8028c3c:	687b      	ldr	r3, [r7, #4]
 8028c3e:	681b      	ldr	r3, [r3, #0]
 8028c40:	681a      	ldr	r2, [r3, #0]
 8028c42:	687b      	ldr	r3, [r7, #4]
 8028c44:	681b      	ldr	r3, [r3, #0]
 8028c46:	f042 0201 	orr.w	r2, r2, #1
 8028c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8028c4c:	6878      	ldr	r0, [r7, #4]
 8028c4e:	f000 ff65 	bl	8029b1c <UART_CheckIdleState>
 8028c52:	4603      	mov	r3, r0
}
 8028c54:	4618      	mov	r0, r3
 8028c56:	3708      	adds	r7, #8
 8028c58:	46bd      	mov	sp, r7
 8028c5a:	bd80      	pop	{r7, pc}

08028c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028c5c:	b580      	push	{r7, lr}
 8028c5e:	b08a      	sub	sp, #40	@ 0x28
 8028c60:	af02      	add	r7, sp, #8
 8028c62:	60f8      	str	r0, [r7, #12]
 8028c64:	60b9      	str	r1, [r7, #8]
 8028c66:	603b      	str	r3, [r7, #0]
 8028c68:	4613      	mov	r3, r2
 8028c6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8028c6c:	68fb      	ldr	r3, [r7, #12]
 8028c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8028c72:	2b20      	cmp	r3, #32
 8028c74:	d17b      	bne.n	8028d6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8028c76:	68bb      	ldr	r3, [r7, #8]
 8028c78:	2b00      	cmp	r3, #0
 8028c7a:	d002      	beq.n	8028c82 <HAL_UART_Transmit+0x26>
 8028c7c:	88fb      	ldrh	r3, [r7, #6]
 8028c7e:	2b00      	cmp	r3, #0
 8028c80:	d101      	bne.n	8028c86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8028c82:	2301      	movs	r3, #1
 8028c84:	e074      	b.n	8028d70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028c86:	68fb      	ldr	r3, [r7, #12]
 8028c88:	2200      	movs	r2, #0
 8028c8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8028c8e:	68fb      	ldr	r3, [r7, #12]
 8028c90:	2221      	movs	r2, #33	@ 0x21
 8028c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8028c96:	f7fb fb47 	bl	8024328 <HAL_GetTick>
 8028c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8028c9c:	68fb      	ldr	r3, [r7, #12]
 8028c9e:	88fa      	ldrh	r2, [r7, #6]
 8028ca0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8028ca4:	68fb      	ldr	r3, [r7, #12]
 8028ca6:	88fa      	ldrh	r2, [r7, #6]
 8028ca8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8028cac:	68fb      	ldr	r3, [r7, #12]
 8028cae:	689b      	ldr	r3, [r3, #8]
 8028cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8028cb4:	d108      	bne.n	8028cc8 <HAL_UART_Transmit+0x6c>
 8028cb6:	68fb      	ldr	r3, [r7, #12]
 8028cb8:	691b      	ldr	r3, [r3, #16]
 8028cba:	2b00      	cmp	r3, #0
 8028cbc:	d104      	bne.n	8028cc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8028cbe:	2300      	movs	r3, #0
 8028cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8028cc2:	68bb      	ldr	r3, [r7, #8]
 8028cc4:	61bb      	str	r3, [r7, #24]
 8028cc6:	e003      	b.n	8028cd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8028cc8:	68bb      	ldr	r3, [r7, #8]
 8028cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8028ccc:	2300      	movs	r3, #0
 8028cce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8028cd0:	e030      	b.n	8028d34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8028cd2:	683b      	ldr	r3, [r7, #0]
 8028cd4:	9300      	str	r3, [sp, #0]
 8028cd6:	697b      	ldr	r3, [r7, #20]
 8028cd8:	2200      	movs	r2, #0
 8028cda:	2180      	movs	r1, #128	@ 0x80
 8028cdc:	68f8      	ldr	r0, [r7, #12]
 8028cde:	f000 ffc7 	bl	8029c70 <UART_WaitOnFlagUntilTimeout>
 8028ce2:	4603      	mov	r3, r0
 8028ce4:	2b00      	cmp	r3, #0
 8028ce6:	d005      	beq.n	8028cf4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8028ce8:	68fb      	ldr	r3, [r7, #12]
 8028cea:	2220      	movs	r2, #32
 8028cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8028cf0:	2303      	movs	r3, #3
 8028cf2:	e03d      	b.n	8028d70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8028cf4:	69fb      	ldr	r3, [r7, #28]
 8028cf6:	2b00      	cmp	r3, #0
 8028cf8:	d10b      	bne.n	8028d12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8028cfa:	69bb      	ldr	r3, [r7, #24]
 8028cfc:	881b      	ldrh	r3, [r3, #0]
 8028cfe:	461a      	mov	r2, r3
 8028d00:	68fb      	ldr	r3, [r7, #12]
 8028d02:	681b      	ldr	r3, [r3, #0]
 8028d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8028d08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8028d0a:	69bb      	ldr	r3, [r7, #24]
 8028d0c:	3302      	adds	r3, #2
 8028d0e:	61bb      	str	r3, [r7, #24]
 8028d10:	e007      	b.n	8028d22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8028d12:	69fb      	ldr	r3, [r7, #28]
 8028d14:	781a      	ldrb	r2, [r3, #0]
 8028d16:	68fb      	ldr	r3, [r7, #12]
 8028d18:	681b      	ldr	r3, [r3, #0]
 8028d1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8028d1c:	69fb      	ldr	r3, [r7, #28]
 8028d1e:	3301      	adds	r3, #1
 8028d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8028d22:	68fb      	ldr	r3, [r7, #12]
 8028d24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8028d28:	b29b      	uxth	r3, r3
 8028d2a:	3b01      	subs	r3, #1
 8028d2c:	b29a      	uxth	r2, r3
 8028d2e:	68fb      	ldr	r3, [r7, #12]
 8028d30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8028d34:	68fb      	ldr	r3, [r7, #12]
 8028d36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8028d3a:	b29b      	uxth	r3, r3
 8028d3c:	2b00      	cmp	r3, #0
 8028d3e:	d1c8      	bne.n	8028cd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8028d40:	683b      	ldr	r3, [r7, #0]
 8028d42:	9300      	str	r3, [sp, #0]
 8028d44:	697b      	ldr	r3, [r7, #20]
 8028d46:	2200      	movs	r2, #0
 8028d48:	2140      	movs	r1, #64	@ 0x40
 8028d4a:	68f8      	ldr	r0, [r7, #12]
 8028d4c:	f000 ff90 	bl	8029c70 <UART_WaitOnFlagUntilTimeout>
 8028d50:	4603      	mov	r3, r0
 8028d52:	2b00      	cmp	r3, #0
 8028d54:	d005      	beq.n	8028d62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8028d56:	68fb      	ldr	r3, [r7, #12]
 8028d58:	2220      	movs	r2, #32
 8028d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8028d5e:	2303      	movs	r3, #3
 8028d60:	e006      	b.n	8028d70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8028d62:	68fb      	ldr	r3, [r7, #12]
 8028d64:	2220      	movs	r2, #32
 8028d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8028d6a:	2300      	movs	r3, #0
 8028d6c:	e000      	b.n	8028d70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8028d6e:	2302      	movs	r3, #2
  }
}
 8028d70:	4618      	mov	r0, r3
 8028d72:	3720      	adds	r7, #32
 8028d74:	46bd      	mov	sp, r7
 8028d76:	bd80      	pop	{r7, pc}

08028d78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028d78:	b580      	push	{r7, lr}
 8028d7a:	b08a      	sub	sp, #40	@ 0x28
 8028d7c:	af02      	add	r7, sp, #8
 8028d7e:	60f8      	str	r0, [r7, #12]
 8028d80:	60b9      	str	r1, [r7, #8]
 8028d82:	603b      	str	r3, [r7, #0]
 8028d84:	4613      	mov	r3, r2
 8028d86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8028d88:	68fb      	ldr	r3, [r7, #12]
 8028d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8028d8e:	2b20      	cmp	r3, #32
 8028d90:	f040 80b5 	bne.w	8028efe <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8028d94:	68bb      	ldr	r3, [r7, #8]
 8028d96:	2b00      	cmp	r3, #0
 8028d98:	d002      	beq.n	8028da0 <HAL_UART_Receive+0x28>
 8028d9a:	88fb      	ldrh	r3, [r7, #6]
 8028d9c:	2b00      	cmp	r3, #0
 8028d9e:	d101      	bne.n	8028da4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8028da0:	2301      	movs	r3, #1
 8028da2:	e0ad      	b.n	8028f00 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028da4:	68fb      	ldr	r3, [r7, #12]
 8028da6:	2200      	movs	r2, #0
 8028da8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8028dac:	68fb      	ldr	r3, [r7, #12]
 8028dae:	2222      	movs	r2, #34	@ 0x22
 8028db0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8028db4:	68fb      	ldr	r3, [r7, #12]
 8028db6:	2200      	movs	r2, #0
 8028db8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8028dba:	f7fb fab5 	bl	8024328 <HAL_GetTick>
 8028dbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8028dc0:	68fb      	ldr	r3, [r7, #12]
 8028dc2:	88fa      	ldrh	r2, [r7, #6]
 8028dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8028dc8:	68fb      	ldr	r3, [r7, #12]
 8028dca:	88fa      	ldrh	r2, [r7, #6]
 8028dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8028dd0:	68fb      	ldr	r3, [r7, #12]
 8028dd2:	689b      	ldr	r3, [r3, #8]
 8028dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8028dd8:	d10e      	bne.n	8028df8 <HAL_UART_Receive+0x80>
 8028dda:	68fb      	ldr	r3, [r7, #12]
 8028ddc:	691b      	ldr	r3, [r3, #16]
 8028dde:	2b00      	cmp	r3, #0
 8028de0:	d105      	bne.n	8028dee <HAL_UART_Receive+0x76>
 8028de2:	68fb      	ldr	r3, [r7, #12]
 8028de4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8028de8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8028dec:	e02d      	b.n	8028e4a <HAL_UART_Receive+0xd2>
 8028dee:	68fb      	ldr	r3, [r7, #12]
 8028df0:	22ff      	movs	r2, #255	@ 0xff
 8028df2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8028df6:	e028      	b.n	8028e4a <HAL_UART_Receive+0xd2>
 8028df8:	68fb      	ldr	r3, [r7, #12]
 8028dfa:	689b      	ldr	r3, [r3, #8]
 8028dfc:	2b00      	cmp	r3, #0
 8028dfe:	d10d      	bne.n	8028e1c <HAL_UART_Receive+0xa4>
 8028e00:	68fb      	ldr	r3, [r7, #12]
 8028e02:	691b      	ldr	r3, [r3, #16]
 8028e04:	2b00      	cmp	r3, #0
 8028e06:	d104      	bne.n	8028e12 <HAL_UART_Receive+0x9a>
 8028e08:	68fb      	ldr	r3, [r7, #12]
 8028e0a:	22ff      	movs	r2, #255	@ 0xff
 8028e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8028e10:	e01b      	b.n	8028e4a <HAL_UART_Receive+0xd2>
 8028e12:	68fb      	ldr	r3, [r7, #12]
 8028e14:	227f      	movs	r2, #127	@ 0x7f
 8028e16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8028e1a:	e016      	b.n	8028e4a <HAL_UART_Receive+0xd2>
 8028e1c:	68fb      	ldr	r3, [r7, #12]
 8028e1e:	689b      	ldr	r3, [r3, #8]
 8028e20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8028e24:	d10d      	bne.n	8028e42 <HAL_UART_Receive+0xca>
 8028e26:	68fb      	ldr	r3, [r7, #12]
 8028e28:	691b      	ldr	r3, [r3, #16]
 8028e2a:	2b00      	cmp	r3, #0
 8028e2c:	d104      	bne.n	8028e38 <HAL_UART_Receive+0xc0>
 8028e2e:	68fb      	ldr	r3, [r7, #12]
 8028e30:	227f      	movs	r2, #127	@ 0x7f
 8028e32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8028e36:	e008      	b.n	8028e4a <HAL_UART_Receive+0xd2>
 8028e38:	68fb      	ldr	r3, [r7, #12]
 8028e3a:	223f      	movs	r2, #63	@ 0x3f
 8028e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8028e40:	e003      	b.n	8028e4a <HAL_UART_Receive+0xd2>
 8028e42:	68fb      	ldr	r3, [r7, #12]
 8028e44:	2200      	movs	r2, #0
 8028e46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8028e4a:	68fb      	ldr	r3, [r7, #12]
 8028e4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8028e50:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8028e52:	68fb      	ldr	r3, [r7, #12]
 8028e54:	689b      	ldr	r3, [r3, #8]
 8028e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8028e5a:	d108      	bne.n	8028e6e <HAL_UART_Receive+0xf6>
 8028e5c:	68fb      	ldr	r3, [r7, #12]
 8028e5e:	691b      	ldr	r3, [r3, #16]
 8028e60:	2b00      	cmp	r3, #0
 8028e62:	d104      	bne.n	8028e6e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8028e64:	2300      	movs	r3, #0
 8028e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8028e68:	68bb      	ldr	r3, [r7, #8]
 8028e6a:	61bb      	str	r3, [r7, #24]
 8028e6c:	e003      	b.n	8028e76 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8028e6e:	68bb      	ldr	r3, [r7, #8]
 8028e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8028e72:	2300      	movs	r3, #0
 8028e74:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8028e76:	e036      	b.n	8028ee6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8028e78:	683b      	ldr	r3, [r7, #0]
 8028e7a:	9300      	str	r3, [sp, #0]
 8028e7c:	697b      	ldr	r3, [r7, #20]
 8028e7e:	2200      	movs	r2, #0
 8028e80:	2120      	movs	r1, #32
 8028e82:	68f8      	ldr	r0, [r7, #12]
 8028e84:	f000 fef4 	bl	8029c70 <UART_WaitOnFlagUntilTimeout>
 8028e88:	4603      	mov	r3, r0
 8028e8a:	2b00      	cmp	r3, #0
 8028e8c:	d005      	beq.n	8028e9a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8028e8e:	68fb      	ldr	r3, [r7, #12]
 8028e90:	2220      	movs	r2, #32
 8028e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8028e96:	2303      	movs	r3, #3
 8028e98:	e032      	b.n	8028f00 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8028e9a:	69fb      	ldr	r3, [r7, #28]
 8028e9c:	2b00      	cmp	r3, #0
 8028e9e:	d10c      	bne.n	8028eba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8028ea0:	68fb      	ldr	r3, [r7, #12]
 8028ea2:	681b      	ldr	r3, [r3, #0]
 8028ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028ea6:	b29a      	uxth	r2, r3
 8028ea8:	8a7b      	ldrh	r3, [r7, #18]
 8028eaa:	4013      	ands	r3, r2
 8028eac:	b29a      	uxth	r2, r3
 8028eae:	69bb      	ldr	r3, [r7, #24]
 8028eb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8028eb2:	69bb      	ldr	r3, [r7, #24]
 8028eb4:	3302      	adds	r3, #2
 8028eb6:	61bb      	str	r3, [r7, #24]
 8028eb8:	e00c      	b.n	8028ed4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8028eba:	68fb      	ldr	r3, [r7, #12]
 8028ebc:	681b      	ldr	r3, [r3, #0]
 8028ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028ec0:	b2da      	uxtb	r2, r3
 8028ec2:	8a7b      	ldrh	r3, [r7, #18]
 8028ec4:	b2db      	uxtb	r3, r3
 8028ec6:	4013      	ands	r3, r2
 8028ec8:	b2da      	uxtb	r2, r3
 8028eca:	69fb      	ldr	r3, [r7, #28]
 8028ecc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8028ece:	69fb      	ldr	r3, [r7, #28]
 8028ed0:	3301      	adds	r3, #1
 8028ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8028ed4:	68fb      	ldr	r3, [r7, #12]
 8028ed6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8028eda:	b29b      	uxth	r3, r3
 8028edc:	3b01      	subs	r3, #1
 8028ede:	b29a      	uxth	r2, r3
 8028ee0:	68fb      	ldr	r3, [r7, #12]
 8028ee2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8028ee6:	68fb      	ldr	r3, [r7, #12]
 8028ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8028eec:	b29b      	uxth	r3, r3
 8028eee:	2b00      	cmp	r3, #0
 8028ef0:	d1c2      	bne.n	8028e78 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8028ef2:	68fb      	ldr	r3, [r7, #12]
 8028ef4:	2220      	movs	r2, #32
 8028ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8028efa:	2300      	movs	r3, #0
 8028efc:	e000      	b.n	8028f00 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8028efe:	2302      	movs	r3, #2
  }
}
 8028f00:	4618      	mov	r0, r3
 8028f02:	3720      	adds	r7, #32
 8028f04:	46bd      	mov	sp, r7
 8028f06:	bd80      	pop	{r7, pc}

08028f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8028f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8028f0c:	b092      	sub	sp, #72	@ 0x48
 8028f0e:	af00      	add	r7, sp, #0
 8028f10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8028f12:	2300      	movs	r3, #0
 8028f14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8028f18:	697b      	ldr	r3, [r7, #20]
 8028f1a:	689a      	ldr	r2, [r3, #8]
 8028f1c:	697b      	ldr	r3, [r7, #20]
 8028f1e:	691b      	ldr	r3, [r3, #16]
 8028f20:	431a      	orrs	r2, r3
 8028f22:	697b      	ldr	r3, [r7, #20]
 8028f24:	695b      	ldr	r3, [r3, #20]
 8028f26:	431a      	orrs	r2, r3
 8028f28:	697b      	ldr	r3, [r7, #20]
 8028f2a:	69db      	ldr	r3, [r3, #28]
 8028f2c:	4313      	orrs	r3, r2
 8028f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8028f30:	697b      	ldr	r3, [r7, #20]
 8028f32:	681b      	ldr	r3, [r3, #0]
 8028f34:	681a      	ldr	r2, [r3, #0]
 8028f36:	4bbe      	ldr	r3, [pc, #760]	@ (8029230 <UART_SetConfig+0x328>)
 8028f38:	4013      	ands	r3, r2
 8028f3a:	697a      	ldr	r2, [r7, #20]
 8028f3c:	6812      	ldr	r2, [r2, #0]
 8028f3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8028f40:	430b      	orrs	r3, r1
 8028f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8028f44:	697b      	ldr	r3, [r7, #20]
 8028f46:	681b      	ldr	r3, [r3, #0]
 8028f48:	685b      	ldr	r3, [r3, #4]
 8028f4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8028f4e:	697b      	ldr	r3, [r7, #20]
 8028f50:	68da      	ldr	r2, [r3, #12]
 8028f52:	697b      	ldr	r3, [r7, #20]
 8028f54:	681b      	ldr	r3, [r3, #0]
 8028f56:	430a      	orrs	r2, r1
 8028f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8028f5a:	697b      	ldr	r3, [r7, #20]
 8028f5c:	699b      	ldr	r3, [r3, #24]
 8028f5e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8028f60:	697b      	ldr	r3, [r7, #20]
 8028f62:	681b      	ldr	r3, [r3, #0]
 8028f64:	4ab3      	ldr	r2, [pc, #716]	@ (8029234 <UART_SetConfig+0x32c>)
 8028f66:	4293      	cmp	r3, r2
 8028f68:	d004      	beq.n	8028f74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8028f6a:	697b      	ldr	r3, [r7, #20]
 8028f6c:	6a1b      	ldr	r3, [r3, #32]
 8028f6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8028f70:	4313      	orrs	r3, r2
 8028f72:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8028f74:	697b      	ldr	r3, [r7, #20]
 8028f76:	681b      	ldr	r3, [r3, #0]
 8028f78:	689a      	ldr	r2, [r3, #8]
 8028f7a:	4baf      	ldr	r3, [pc, #700]	@ (8029238 <UART_SetConfig+0x330>)
 8028f7c:	4013      	ands	r3, r2
 8028f7e:	697a      	ldr	r2, [r7, #20]
 8028f80:	6812      	ldr	r2, [r2, #0]
 8028f82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8028f84:	430b      	orrs	r3, r1
 8028f86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8028f88:	697b      	ldr	r3, [r7, #20]
 8028f8a:	681b      	ldr	r3, [r3, #0]
 8028f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028f8e:	f023 010f 	bic.w	r1, r3, #15
 8028f92:	697b      	ldr	r3, [r7, #20]
 8028f94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8028f96:	697b      	ldr	r3, [r7, #20]
 8028f98:	681b      	ldr	r3, [r3, #0]
 8028f9a:	430a      	orrs	r2, r1
 8028f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8028f9e:	697b      	ldr	r3, [r7, #20]
 8028fa0:	681b      	ldr	r3, [r3, #0]
 8028fa2:	4aa6      	ldr	r2, [pc, #664]	@ (802923c <UART_SetConfig+0x334>)
 8028fa4:	4293      	cmp	r3, r2
 8028fa6:	d177      	bne.n	8029098 <UART_SetConfig+0x190>
 8028fa8:	4ba5      	ldr	r3, [pc, #660]	@ (8029240 <UART_SetConfig+0x338>)
 8028faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8028fac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8028fb0:	2b28      	cmp	r3, #40	@ 0x28
 8028fb2:	d86d      	bhi.n	8029090 <UART_SetConfig+0x188>
 8028fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8028fbc <UART_SetConfig+0xb4>)
 8028fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028fba:	bf00      	nop
 8028fbc:	08029061 	.word	0x08029061
 8028fc0:	08029091 	.word	0x08029091
 8028fc4:	08029091 	.word	0x08029091
 8028fc8:	08029091 	.word	0x08029091
 8028fcc:	08029091 	.word	0x08029091
 8028fd0:	08029091 	.word	0x08029091
 8028fd4:	08029091 	.word	0x08029091
 8028fd8:	08029091 	.word	0x08029091
 8028fdc:	08029069 	.word	0x08029069
 8028fe0:	08029091 	.word	0x08029091
 8028fe4:	08029091 	.word	0x08029091
 8028fe8:	08029091 	.word	0x08029091
 8028fec:	08029091 	.word	0x08029091
 8028ff0:	08029091 	.word	0x08029091
 8028ff4:	08029091 	.word	0x08029091
 8028ff8:	08029091 	.word	0x08029091
 8028ffc:	08029071 	.word	0x08029071
 8029000:	08029091 	.word	0x08029091
 8029004:	08029091 	.word	0x08029091
 8029008:	08029091 	.word	0x08029091
 802900c:	08029091 	.word	0x08029091
 8029010:	08029091 	.word	0x08029091
 8029014:	08029091 	.word	0x08029091
 8029018:	08029091 	.word	0x08029091
 802901c:	08029079 	.word	0x08029079
 8029020:	08029091 	.word	0x08029091
 8029024:	08029091 	.word	0x08029091
 8029028:	08029091 	.word	0x08029091
 802902c:	08029091 	.word	0x08029091
 8029030:	08029091 	.word	0x08029091
 8029034:	08029091 	.word	0x08029091
 8029038:	08029091 	.word	0x08029091
 802903c:	08029081 	.word	0x08029081
 8029040:	08029091 	.word	0x08029091
 8029044:	08029091 	.word	0x08029091
 8029048:	08029091 	.word	0x08029091
 802904c:	08029091 	.word	0x08029091
 8029050:	08029091 	.word	0x08029091
 8029054:	08029091 	.word	0x08029091
 8029058:	08029091 	.word	0x08029091
 802905c:	08029089 	.word	0x08029089
 8029060:	2301      	movs	r3, #1
 8029062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029066:	e222      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029068:	2304      	movs	r3, #4
 802906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802906e:	e21e      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029070:	2308      	movs	r3, #8
 8029072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029076:	e21a      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029078:	2310      	movs	r3, #16
 802907a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802907e:	e216      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029080:	2320      	movs	r3, #32
 8029082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029086:	e212      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029088:	2340      	movs	r3, #64	@ 0x40
 802908a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802908e:	e20e      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029090:	2380      	movs	r3, #128	@ 0x80
 8029092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029096:	e20a      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029098:	697b      	ldr	r3, [r7, #20]
 802909a:	681b      	ldr	r3, [r3, #0]
 802909c:	4a69      	ldr	r2, [pc, #420]	@ (8029244 <UART_SetConfig+0x33c>)
 802909e:	4293      	cmp	r3, r2
 80290a0:	d130      	bne.n	8029104 <UART_SetConfig+0x1fc>
 80290a2:	4b67      	ldr	r3, [pc, #412]	@ (8029240 <UART_SetConfig+0x338>)
 80290a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80290a6:	f003 0307 	and.w	r3, r3, #7
 80290aa:	2b05      	cmp	r3, #5
 80290ac:	d826      	bhi.n	80290fc <UART_SetConfig+0x1f4>
 80290ae:	a201      	add	r2, pc, #4	@ (adr r2, 80290b4 <UART_SetConfig+0x1ac>)
 80290b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80290b4:	080290cd 	.word	0x080290cd
 80290b8:	080290d5 	.word	0x080290d5
 80290bc:	080290dd 	.word	0x080290dd
 80290c0:	080290e5 	.word	0x080290e5
 80290c4:	080290ed 	.word	0x080290ed
 80290c8:	080290f5 	.word	0x080290f5
 80290cc:	2300      	movs	r3, #0
 80290ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80290d2:	e1ec      	b.n	80294ae <UART_SetConfig+0x5a6>
 80290d4:	2304      	movs	r3, #4
 80290d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80290da:	e1e8      	b.n	80294ae <UART_SetConfig+0x5a6>
 80290dc:	2308      	movs	r3, #8
 80290de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80290e2:	e1e4      	b.n	80294ae <UART_SetConfig+0x5a6>
 80290e4:	2310      	movs	r3, #16
 80290e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80290ea:	e1e0      	b.n	80294ae <UART_SetConfig+0x5a6>
 80290ec:	2320      	movs	r3, #32
 80290ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80290f2:	e1dc      	b.n	80294ae <UART_SetConfig+0x5a6>
 80290f4:	2340      	movs	r3, #64	@ 0x40
 80290f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80290fa:	e1d8      	b.n	80294ae <UART_SetConfig+0x5a6>
 80290fc:	2380      	movs	r3, #128	@ 0x80
 80290fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029102:	e1d4      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029104:	697b      	ldr	r3, [r7, #20]
 8029106:	681b      	ldr	r3, [r3, #0]
 8029108:	4a4f      	ldr	r2, [pc, #316]	@ (8029248 <UART_SetConfig+0x340>)
 802910a:	4293      	cmp	r3, r2
 802910c:	d130      	bne.n	8029170 <UART_SetConfig+0x268>
 802910e:	4b4c      	ldr	r3, [pc, #304]	@ (8029240 <UART_SetConfig+0x338>)
 8029110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8029112:	f003 0307 	and.w	r3, r3, #7
 8029116:	2b05      	cmp	r3, #5
 8029118:	d826      	bhi.n	8029168 <UART_SetConfig+0x260>
 802911a:	a201      	add	r2, pc, #4	@ (adr r2, 8029120 <UART_SetConfig+0x218>)
 802911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029120:	08029139 	.word	0x08029139
 8029124:	08029141 	.word	0x08029141
 8029128:	08029149 	.word	0x08029149
 802912c:	08029151 	.word	0x08029151
 8029130:	08029159 	.word	0x08029159
 8029134:	08029161 	.word	0x08029161
 8029138:	2300      	movs	r3, #0
 802913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802913e:	e1b6      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029140:	2304      	movs	r3, #4
 8029142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029146:	e1b2      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029148:	2308      	movs	r3, #8
 802914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802914e:	e1ae      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029150:	2310      	movs	r3, #16
 8029152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029156:	e1aa      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029158:	2320      	movs	r3, #32
 802915a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802915e:	e1a6      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029160:	2340      	movs	r3, #64	@ 0x40
 8029162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029166:	e1a2      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029168:	2380      	movs	r3, #128	@ 0x80
 802916a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802916e:	e19e      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029170:	697b      	ldr	r3, [r7, #20]
 8029172:	681b      	ldr	r3, [r3, #0]
 8029174:	4a35      	ldr	r2, [pc, #212]	@ (802924c <UART_SetConfig+0x344>)
 8029176:	4293      	cmp	r3, r2
 8029178:	d130      	bne.n	80291dc <UART_SetConfig+0x2d4>
 802917a:	4b31      	ldr	r3, [pc, #196]	@ (8029240 <UART_SetConfig+0x338>)
 802917c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802917e:	f003 0307 	and.w	r3, r3, #7
 8029182:	2b05      	cmp	r3, #5
 8029184:	d826      	bhi.n	80291d4 <UART_SetConfig+0x2cc>
 8029186:	a201      	add	r2, pc, #4	@ (adr r2, 802918c <UART_SetConfig+0x284>)
 8029188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802918c:	080291a5 	.word	0x080291a5
 8029190:	080291ad 	.word	0x080291ad
 8029194:	080291b5 	.word	0x080291b5
 8029198:	080291bd 	.word	0x080291bd
 802919c:	080291c5 	.word	0x080291c5
 80291a0:	080291cd 	.word	0x080291cd
 80291a4:	2300      	movs	r3, #0
 80291a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80291aa:	e180      	b.n	80294ae <UART_SetConfig+0x5a6>
 80291ac:	2304      	movs	r3, #4
 80291ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80291b2:	e17c      	b.n	80294ae <UART_SetConfig+0x5a6>
 80291b4:	2308      	movs	r3, #8
 80291b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80291ba:	e178      	b.n	80294ae <UART_SetConfig+0x5a6>
 80291bc:	2310      	movs	r3, #16
 80291be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80291c2:	e174      	b.n	80294ae <UART_SetConfig+0x5a6>
 80291c4:	2320      	movs	r3, #32
 80291c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80291ca:	e170      	b.n	80294ae <UART_SetConfig+0x5a6>
 80291cc:	2340      	movs	r3, #64	@ 0x40
 80291ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80291d2:	e16c      	b.n	80294ae <UART_SetConfig+0x5a6>
 80291d4:	2380      	movs	r3, #128	@ 0x80
 80291d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80291da:	e168      	b.n	80294ae <UART_SetConfig+0x5a6>
 80291dc:	697b      	ldr	r3, [r7, #20]
 80291de:	681b      	ldr	r3, [r3, #0]
 80291e0:	4a1b      	ldr	r2, [pc, #108]	@ (8029250 <UART_SetConfig+0x348>)
 80291e2:	4293      	cmp	r3, r2
 80291e4:	d142      	bne.n	802926c <UART_SetConfig+0x364>
 80291e6:	4b16      	ldr	r3, [pc, #88]	@ (8029240 <UART_SetConfig+0x338>)
 80291e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80291ea:	f003 0307 	and.w	r3, r3, #7
 80291ee:	2b05      	cmp	r3, #5
 80291f0:	d838      	bhi.n	8029264 <UART_SetConfig+0x35c>
 80291f2:	a201      	add	r2, pc, #4	@ (adr r2, 80291f8 <UART_SetConfig+0x2f0>)
 80291f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80291f8:	08029211 	.word	0x08029211
 80291fc:	08029219 	.word	0x08029219
 8029200:	08029221 	.word	0x08029221
 8029204:	08029229 	.word	0x08029229
 8029208:	08029255 	.word	0x08029255
 802920c:	0802925d 	.word	0x0802925d
 8029210:	2300      	movs	r3, #0
 8029212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029216:	e14a      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029218:	2304      	movs	r3, #4
 802921a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802921e:	e146      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029220:	2308      	movs	r3, #8
 8029222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029226:	e142      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029228:	2310      	movs	r3, #16
 802922a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802922e:	e13e      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029230:	cfff69f3 	.word	0xcfff69f3
 8029234:	58000c00 	.word	0x58000c00
 8029238:	11fff4ff 	.word	0x11fff4ff
 802923c:	40011000 	.word	0x40011000
 8029240:	58024400 	.word	0x58024400
 8029244:	40004400 	.word	0x40004400
 8029248:	40004800 	.word	0x40004800
 802924c:	40004c00 	.word	0x40004c00
 8029250:	40005000 	.word	0x40005000
 8029254:	2320      	movs	r3, #32
 8029256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802925a:	e128      	b.n	80294ae <UART_SetConfig+0x5a6>
 802925c:	2340      	movs	r3, #64	@ 0x40
 802925e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029262:	e124      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029264:	2380      	movs	r3, #128	@ 0x80
 8029266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802926a:	e120      	b.n	80294ae <UART_SetConfig+0x5a6>
 802926c:	697b      	ldr	r3, [r7, #20]
 802926e:	681b      	ldr	r3, [r3, #0]
 8029270:	4acb      	ldr	r2, [pc, #812]	@ (80295a0 <UART_SetConfig+0x698>)
 8029272:	4293      	cmp	r3, r2
 8029274:	d176      	bne.n	8029364 <UART_SetConfig+0x45c>
 8029276:	4bcb      	ldr	r3, [pc, #812]	@ (80295a4 <UART_SetConfig+0x69c>)
 8029278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802927a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802927e:	2b28      	cmp	r3, #40	@ 0x28
 8029280:	d86c      	bhi.n	802935c <UART_SetConfig+0x454>
 8029282:	a201      	add	r2, pc, #4	@ (adr r2, 8029288 <UART_SetConfig+0x380>)
 8029284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029288:	0802932d 	.word	0x0802932d
 802928c:	0802935d 	.word	0x0802935d
 8029290:	0802935d 	.word	0x0802935d
 8029294:	0802935d 	.word	0x0802935d
 8029298:	0802935d 	.word	0x0802935d
 802929c:	0802935d 	.word	0x0802935d
 80292a0:	0802935d 	.word	0x0802935d
 80292a4:	0802935d 	.word	0x0802935d
 80292a8:	08029335 	.word	0x08029335
 80292ac:	0802935d 	.word	0x0802935d
 80292b0:	0802935d 	.word	0x0802935d
 80292b4:	0802935d 	.word	0x0802935d
 80292b8:	0802935d 	.word	0x0802935d
 80292bc:	0802935d 	.word	0x0802935d
 80292c0:	0802935d 	.word	0x0802935d
 80292c4:	0802935d 	.word	0x0802935d
 80292c8:	0802933d 	.word	0x0802933d
 80292cc:	0802935d 	.word	0x0802935d
 80292d0:	0802935d 	.word	0x0802935d
 80292d4:	0802935d 	.word	0x0802935d
 80292d8:	0802935d 	.word	0x0802935d
 80292dc:	0802935d 	.word	0x0802935d
 80292e0:	0802935d 	.word	0x0802935d
 80292e4:	0802935d 	.word	0x0802935d
 80292e8:	08029345 	.word	0x08029345
 80292ec:	0802935d 	.word	0x0802935d
 80292f0:	0802935d 	.word	0x0802935d
 80292f4:	0802935d 	.word	0x0802935d
 80292f8:	0802935d 	.word	0x0802935d
 80292fc:	0802935d 	.word	0x0802935d
 8029300:	0802935d 	.word	0x0802935d
 8029304:	0802935d 	.word	0x0802935d
 8029308:	0802934d 	.word	0x0802934d
 802930c:	0802935d 	.word	0x0802935d
 8029310:	0802935d 	.word	0x0802935d
 8029314:	0802935d 	.word	0x0802935d
 8029318:	0802935d 	.word	0x0802935d
 802931c:	0802935d 	.word	0x0802935d
 8029320:	0802935d 	.word	0x0802935d
 8029324:	0802935d 	.word	0x0802935d
 8029328:	08029355 	.word	0x08029355
 802932c:	2301      	movs	r3, #1
 802932e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029332:	e0bc      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029334:	2304      	movs	r3, #4
 8029336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802933a:	e0b8      	b.n	80294ae <UART_SetConfig+0x5a6>
 802933c:	2308      	movs	r3, #8
 802933e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029342:	e0b4      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029344:	2310      	movs	r3, #16
 8029346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802934a:	e0b0      	b.n	80294ae <UART_SetConfig+0x5a6>
 802934c:	2320      	movs	r3, #32
 802934e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029352:	e0ac      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029354:	2340      	movs	r3, #64	@ 0x40
 8029356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802935a:	e0a8      	b.n	80294ae <UART_SetConfig+0x5a6>
 802935c:	2380      	movs	r3, #128	@ 0x80
 802935e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029362:	e0a4      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029364:	697b      	ldr	r3, [r7, #20]
 8029366:	681b      	ldr	r3, [r3, #0]
 8029368:	4a8f      	ldr	r2, [pc, #572]	@ (80295a8 <UART_SetConfig+0x6a0>)
 802936a:	4293      	cmp	r3, r2
 802936c:	d130      	bne.n	80293d0 <UART_SetConfig+0x4c8>
 802936e:	4b8d      	ldr	r3, [pc, #564]	@ (80295a4 <UART_SetConfig+0x69c>)
 8029370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8029372:	f003 0307 	and.w	r3, r3, #7
 8029376:	2b05      	cmp	r3, #5
 8029378:	d826      	bhi.n	80293c8 <UART_SetConfig+0x4c0>
 802937a:	a201      	add	r2, pc, #4	@ (adr r2, 8029380 <UART_SetConfig+0x478>)
 802937c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029380:	08029399 	.word	0x08029399
 8029384:	080293a1 	.word	0x080293a1
 8029388:	080293a9 	.word	0x080293a9
 802938c:	080293b1 	.word	0x080293b1
 8029390:	080293b9 	.word	0x080293b9
 8029394:	080293c1 	.word	0x080293c1
 8029398:	2300      	movs	r3, #0
 802939a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802939e:	e086      	b.n	80294ae <UART_SetConfig+0x5a6>
 80293a0:	2304      	movs	r3, #4
 80293a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80293a6:	e082      	b.n	80294ae <UART_SetConfig+0x5a6>
 80293a8:	2308      	movs	r3, #8
 80293aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80293ae:	e07e      	b.n	80294ae <UART_SetConfig+0x5a6>
 80293b0:	2310      	movs	r3, #16
 80293b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80293b6:	e07a      	b.n	80294ae <UART_SetConfig+0x5a6>
 80293b8:	2320      	movs	r3, #32
 80293ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80293be:	e076      	b.n	80294ae <UART_SetConfig+0x5a6>
 80293c0:	2340      	movs	r3, #64	@ 0x40
 80293c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80293c6:	e072      	b.n	80294ae <UART_SetConfig+0x5a6>
 80293c8:	2380      	movs	r3, #128	@ 0x80
 80293ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80293ce:	e06e      	b.n	80294ae <UART_SetConfig+0x5a6>
 80293d0:	697b      	ldr	r3, [r7, #20]
 80293d2:	681b      	ldr	r3, [r3, #0]
 80293d4:	4a75      	ldr	r2, [pc, #468]	@ (80295ac <UART_SetConfig+0x6a4>)
 80293d6:	4293      	cmp	r3, r2
 80293d8:	d130      	bne.n	802943c <UART_SetConfig+0x534>
 80293da:	4b72      	ldr	r3, [pc, #456]	@ (80295a4 <UART_SetConfig+0x69c>)
 80293dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80293de:	f003 0307 	and.w	r3, r3, #7
 80293e2:	2b05      	cmp	r3, #5
 80293e4:	d826      	bhi.n	8029434 <UART_SetConfig+0x52c>
 80293e6:	a201      	add	r2, pc, #4	@ (adr r2, 80293ec <UART_SetConfig+0x4e4>)
 80293e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80293ec:	08029405 	.word	0x08029405
 80293f0:	0802940d 	.word	0x0802940d
 80293f4:	08029415 	.word	0x08029415
 80293f8:	0802941d 	.word	0x0802941d
 80293fc:	08029425 	.word	0x08029425
 8029400:	0802942d 	.word	0x0802942d
 8029404:	2300      	movs	r3, #0
 8029406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802940a:	e050      	b.n	80294ae <UART_SetConfig+0x5a6>
 802940c:	2304      	movs	r3, #4
 802940e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029412:	e04c      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029414:	2308      	movs	r3, #8
 8029416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802941a:	e048      	b.n	80294ae <UART_SetConfig+0x5a6>
 802941c:	2310      	movs	r3, #16
 802941e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029422:	e044      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029424:	2320      	movs	r3, #32
 8029426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802942a:	e040      	b.n	80294ae <UART_SetConfig+0x5a6>
 802942c:	2340      	movs	r3, #64	@ 0x40
 802942e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029432:	e03c      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029434:	2380      	movs	r3, #128	@ 0x80
 8029436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802943a:	e038      	b.n	80294ae <UART_SetConfig+0x5a6>
 802943c:	697b      	ldr	r3, [r7, #20]
 802943e:	681b      	ldr	r3, [r3, #0]
 8029440:	4a5b      	ldr	r2, [pc, #364]	@ (80295b0 <UART_SetConfig+0x6a8>)
 8029442:	4293      	cmp	r3, r2
 8029444:	d130      	bne.n	80294a8 <UART_SetConfig+0x5a0>
 8029446:	4b57      	ldr	r3, [pc, #348]	@ (80295a4 <UART_SetConfig+0x69c>)
 8029448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802944a:	f003 0307 	and.w	r3, r3, #7
 802944e:	2b05      	cmp	r3, #5
 8029450:	d826      	bhi.n	80294a0 <UART_SetConfig+0x598>
 8029452:	a201      	add	r2, pc, #4	@ (adr r2, 8029458 <UART_SetConfig+0x550>)
 8029454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029458:	08029471 	.word	0x08029471
 802945c:	08029479 	.word	0x08029479
 8029460:	08029481 	.word	0x08029481
 8029464:	08029489 	.word	0x08029489
 8029468:	08029491 	.word	0x08029491
 802946c:	08029499 	.word	0x08029499
 8029470:	2302      	movs	r3, #2
 8029472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029476:	e01a      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029478:	2304      	movs	r3, #4
 802947a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802947e:	e016      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029480:	2308      	movs	r3, #8
 8029482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029486:	e012      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029488:	2310      	movs	r3, #16
 802948a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802948e:	e00e      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029490:	2320      	movs	r3, #32
 8029492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8029496:	e00a      	b.n	80294ae <UART_SetConfig+0x5a6>
 8029498:	2340      	movs	r3, #64	@ 0x40
 802949a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802949e:	e006      	b.n	80294ae <UART_SetConfig+0x5a6>
 80294a0:	2380      	movs	r3, #128	@ 0x80
 80294a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80294a6:	e002      	b.n	80294ae <UART_SetConfig+0x5a6>
 80294a8:	2380      	movs	r3, #128	@ 0x80
 80294aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80294ae:	697b      	ldr	r3, [r7, #20]
 80294b0:	681b      	ldr	r3, [r3, #0]
 80294b2:	4a3f      	ldr	r2, [pc, #252]	@ (80295b0 <UART_SetConfig+0x6a8>)
 80294b4:	4293      	cmp	r3, r2
 80294b6:	f040 80f8 	bne.w	80296aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80294ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80294be:	2b20      	cmp	r3, #32
 80294c0:	dc46      	bgt.n	8029550 <UART_SetConfig+0x648>
 80294c2:	2b02      	cmp	r3, #2
 80294c4:	f2c0 8082 	blt.w	80295cc <UART_SetConfig+0x6c4>
 80294c8:	3b02      	subs	r3, #2
 80294ca:	2b1e      	cmp	r3, #30
 80294cc:	d87e      	bhi.n	80295cc <UART_SetConfig+0x6c4>
 80294ce:	a201      	add	r2, pc, #4	@ (adr r2, 80294d4 <UART_SetConfig+0x5cc>)
 80294d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80294d4:	08029557 	.word	0x08029557
 80294d8:	080295cd 	.word	0x080295cd
 80294dc:	0802955f 	.word	0x0802955f
 80294e0:	080295cd 	.word	0x080295cd
 80294e4:	080295cd 	.word	0x080295cd
 80294e8:	080295cd 	.word	0x080295cd
 80294ec:	0802956f 	.word	0x0802956f
 80294f0:	080295cd 	.word	0x080295cd
 80294f4:	080295cd 	.word	0x080295cd
 80294f8:	080295cd 	.word	0x080295cd
 80294fc:	080295cd 	.word	0x080295cd
 8029500:	080295cd 	.word	0x080295cd
 8029504:	080295cd 	.word	0x080295cd
 8029508:	080295cd 	.word	0x080295cd
 802950c:	0802957f 	.word	0x0802957f
 8029510:	080295cd 	.word	0x080295cd
 8029514:	080295cd 	.word	0x080295cd
 8029518:	080295cd 	.word	0x080295cd
 802951c:	080295cd 	.word	0x080295cd
 8029520:	080295cd 	.word	0x080295cd
 8029524:	080295cd 	.word	0x080295cd
 8029528:	080295cd 	.word	0x080295cd
 802952c:	080295cd 	.word	0x080295cd
 8029530:	080295cd 	.word	0x080295cd
 8029534:	080295cd 	.word	0x080295cd
 8029538:	080295cd 	.word	0x080295cd
 802953c:	080295cd 	.word	0x080295cd
 8029540:	080295cd 	.word	0x080295cd
 8029544:	080295cd 	.word	0x080295cd
 8029548:	080295cd 	.word	0x080295cd
 802954c:	080295bf 	.word	0x080295bf
 8029550:	2b40      	cmp	r3, #64	@ 0x40
 8029552:	d037      	beq.n	80295c4 <UART_SetConfig+0x6bc>
 8029554:	e03a      	b.n	80295cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8029556:	f7fe ff0f 	bl	8028378 <HAL_RCCEx_GetD3PCLK1Freq>
 802955a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 802955c:	e03c      	b.n	80295d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802955e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8029562:	4618      	mov	r0, r3
 8029564:	f7fe ff1e 	bl	80283a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8029568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802956a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802956c:	e034      	b.n	80295d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802956e:	f107 0318 	add.w	r3, r7, #24
 8029572:	4618      	mov	r0, r3
 8029574:	f7ff f86a 	bl	802864c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8029578:	69fb      	ldr	r3, [r7, #28]
 802957a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802957c:	e02c      	b.n	80295d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802957e:	4b09      	ldr	r3, [pc, #36]	@ (80295a4 <UART_SetConfig+0x69c>)
 8029580:	681b      	ldr	r3, [r3, #0]
 8029582:	f003 0320 	and.w	r3, r3, #32
 8029586:	2b00      	cmp	r3, #0
 8029588:	d016      	beq.n	80295b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802958a:	4b06      	ldr	r3, [pc, #24]	@ (80295a4 <UART_SetConfig+0x69c>)
 802958c:	681b      	ldr	r3, [r3, #0]
 802958e:	08db      	lsrs	r3, r3, #3
 8029590:	f003 0303 	and.w	r3, r3, #3
 8029594:	4a07      	ldr	r2, [pc, #28]	@ (80295b4 <UART_SetConfig+0x6ac>)
 8029596:	fa22 f303 	lsr.w	r3, r2, r3
 802959a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802959c:	e01c      	b.n	80295d8 <UART_SetConfig+0x6d0>
 802959e:	bf00      	nop
 80295a0:	40011400 	.word	0x40011400
 80295a4:	58024400 	.word	0x58024400
 80295a8:	40007800 	.word	0x40007800
 80295ac:	40007c00 	.word	0x40007c00
 80295b0:	58000c00 	.word	0x58000c00
 80295b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80295b8:	4b9d      	ldr	r3, [pc, #628]	@ (8029830 <UART_SetConfig+0x928>)
 80295ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80295bc:	e00c      	b.n	80295d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80295be:	4b9d      	ldr	r3, [pc, #628]	@ (8029834 <UART_SetConfig+0x92c>)
 80295c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80295c2:	e009      	b.n	80295d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80295c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80295c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80295ca:	e005      	b.n	80295d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80295cc:	2300      	movs	r3, #0
 80295ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80295d0:	2301      	movs	r3, #1
 80295d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80295d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80295d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80295da:	2b00      	cmp	r3, #0
 80295dc:	f000 81de 	beq.w	802999c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80295e0:	697b      	ldr	r3, [r7, #20]
 80295e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80295e4:	4a94      	ldr	r2, [pc, #592]	@ (8029838 <UART_SetConfig+0x930>)
 80295e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80295ea:	461a      	mov	r2, r3
 80295ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80295ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80295f2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80295f4:	697b      	ldr	r3, [r7, #20]
 80295f6:	685a      	ldr	r2, [r3, #4]
 80295f8:	4613      	mov	r3, r2
 80295fa:	005b      	lsls	r3, r3, #1
 80295fc:	4413      	add	r3, r2
 80295fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029600:	429a      	cmp	r2, r3
 8029602:	d305      	bcc.n	8029610 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8029604:	697b      	ldr	r3, [r7, #20]
 8029606:	685b      	ldr	r3, [r3, #4]
 8029608:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802960a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802960c:	429a      	cmp	r2, r3
 802960e:	d903      	bls.n	8029618 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8029610:	2301      	movs	r3, #1
 8029612:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8029616:	e1c1      	b.n	802999c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8029618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802961a:	2200      	movs	r2, #0
 802961c:	60bb      	str	r3, [r7, #8]
 802961e:	60fa      	str	r2, [r7, #12]
 8029620:	697b      	ldr	r3, [r7, #20]
 8029622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8029624:	4a84      	ldr	r2, [pc, #528]	@ (8029838 <UART_SetConfig+0x930>)
 8029626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802962a:	b29b      	uxth	r3, r3
 802962c:	2200      	movs	r2, #0
 802962e:	603b      	str	r3, [r7, #0]
 8029630:	607a      	str	r2, [r7, #4]
 8029632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8029636:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802963a:	f7f9 fbb9 	bl	8022db0 <__aeabi_uldivmod>
 802963e:	4602      	mov	r2, r0
 8029640:	460b      	mov	r3, r1
 8029642:	4610      	mov	r0, r2
 8029644:	4619      	mov	r1, r3
 8029646:	f04f 0200 	mov.w	r2, #0
 802964a:	f04f 0300 	mov.w	r3, #0
 802964e:	020b      	lsls	r3, r1, #8
 8029650:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8029654:	0202      	lsls	r2, r0, #8
 8029656:	6979      	ldr	r1, [r7, #20]
 8029658:	6849      	ldr	r1, [r1, #4]
 802965a:	0849      	lsrs	r1, r1, #1
 802965c:	2000      	movs	r0, #0
 802965e:	460c      	mov	r4, r1
 8029660:	4605      	mov	r5, r0
 8029662:	eb12 0804 	adds.w	r8, r2, r4
 8029666:	eb43 0905 	adc.w	r9, r3, r5
 802966a:	697b      	ldr	r3, [r7, #20]
 802966c:	685b      	ldr	r3, [r3, #4]
 802966e:	2200      	movs	r2, #0
 8029670:	469a      	mov	sl, r3
 8029672:	4693      	mov	fp, r2
 8029674:	4652      	mov	r2, sl
 8029676:	465b      	mov	r3, fp
 8029678:	4640      	mov	r0, r8
 802967a:	4649      	mov	r1, r9
 802967c:	f7f9 fb98 	bl	8022db0 <__aeabi_uldivmod>
 8029680:	4602      	mov	r2, r0
 8029682:	460b      	mov	r3, r1
 8029684:	4613      	mov	r3, r2
 8029686:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8029688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802968a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802968e:	d308      	bcc.n	80296a2 <UART_SetConfig+0x79a>
 8029690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8029696:	d204      	bcs.n	80296a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8029698:	697b      	ldr	r3, [r7, #20]
 802969a:	681b      	ldr	r3, [r3, #0]
 802969c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802969e:	60da      	str	r2, [r3, #12]
 80296a0:	e17c      	b.n	802999c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80296a2:	2301      	movs	r3, #1
 80296a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80296a8:	e178      	b.n	802999c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80296aa:	697b      	ldr	r3, [r7, #20]
 80296ac:	69db      	ldr	r3, [r3, #28]
 80296ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80296b2:	f040 80c5 	bne.w	8029840 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80296b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80296ba:	2b20      	cmp	r3, #32
 80296bc:	dc48      	bgt.n	8029750 <UART_SetConfig+0x848>
 80296be:	2b00      	cmp	r3, #0
 80296c0:	db7b      	blt.n	80297ba <UART_SetConfig+0x8b2>
 80296c2:	2b20      	cmp	r3, #32
 80296c4:	d879      	bhi.n	80297ba <UART_SetConfig+0x8b2>
 80296c6:	a201      	add	r2, pc, #4	@ (adr r2, 80296cc <UART_SetConfig+0x7c4>)
 80296c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80296cc:	08029757 	.word	0x08029757
 80296d0:	0802975f 	.word	0x0802975f
 80296d4:	080297bb 	.word	0x080297bb
 80296d8:	080297bb 	.word	0x080297bb
 80296dc:	08029767 	.word	0x08029767
 80296e0:	080297bb 	.word	0x080297bb
 80296e4:	080297bb 	.word	0x080297bb
 80296e8:	080297bb 	.word	0x080297bb
 80296ec:	08029777 	.word	0x08029777
 80296f0:	080297bb 	.word	0x080297bb
 80296f4:	080297bb 	.word	0x080297bb
 80296f8:	080297bb 	.word	0x080297bb
 80296fc:	080297bb 	.word	0x080297bb
 8029700:	080297bb 	.word	0x080297bb
 8029704:	080297bb 	.word	0x080297bb
 8029708:	080297bb 	.word	0x080297bb
 802970c:	08029787 	.word	0x08029787
 8029710:	080297bb 	.word	0x080297bb
 8029714:	080297bb 	.word	0x080297bb
 8029718:	080297bb 	.word	0x080297bb
 802971c:	080297bb 	.word	0x080297bb
 8029720:	080297bb 	.word	0x080297bb
 8029724:	080297bb 	.word	0x080297bb
 8029728:	080297bb 	.word	0x080297bb
 802972c:	080297bb 	.word	0x080297bb
 8029730:	080297bb 	.word	0x080297bb
 8029734:	080297bb 	.word	0x080297bb
 8029738:	080297bb 	.word	0x080297bb
 802973c:	080297bb 	.word	0x080297bb
 8029740:	080297bb 	.word	0x080297bb
 8029744:	080297bb 	.word	0x080297bb
 8029748:	080297bb 	.word	0x080297bb
 802974c:	080297ad 	.word	0x080297ad
 8029750:	2b40      	cmp	r3, #64	@ 0x40
 8029752:	d02e      	beq.n	80297b2 <UART_SetConfig+0x8aa>
 8029754:	e031      	b.n	80297ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8029756:	f7fd fbd9 	bl	8026f0c <HAL_RCC_GetPCLK1Freq>
 802975a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 802975c:	e033      	b.n	80297c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802975e:	f7fd fbeb 	bl	8026f38 <HAL_RCC_GetPCLK2Freq>
 8029762:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8029764:	e02f      	b.n	80297c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8029766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802976a:	4618      	mov	r0, r3
 802976c:	f7fe fe1a 	bl	80283a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8029770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8029774:	e027      	b.n	80297c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8029776:	f107 0318 	add.w	r3, r7, #24
 802977a:	4618      	mov	r0, r3
 802977c:	f7fe ff66 	bl	802864c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8029780:	69fb      	ldr	r3, [r7, #28]
 8029782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8029784:	e01f      	b.n	80297c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8029786:	4b2d      	ldr	r3, [pc, #180]	@ (802983c <UART_SetConfig+0x934>)
 8029788:	681b      	ldr	r3, [r3, #0]
 802978a:	f003 0320 	and.w	r3, r3, #32
 802978e:	2b00      	cmp	r3, #0
 8029790:	d009      	beq.n	80297a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8029792:	4b2a      	ldr	r3, [pc, #168]	@ (802983c <UART_SetConfig+0x934>)
 8029794:	681b      	ldr	r3, [r3, #0]
 8029796:	08db      	lsrs	r3, r3, #3
 8029798:	f003 0303 	and.w	r3, r3, #3
 802979c:	4a24      	ldr	r2, [pc, #144]	@ (8029830 <UART_SetConfig+0x928>)
 802979e:	fa22 f303 	lsr.w	r3, r2, r3
 80297a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80297a4:	e00f      	b.n	80297c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80297a6:	4b22      	ldr	r3, [pc, #136]	@ (8029830 <UART_SetConfig+0x928>)
 80297a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80297aa:	e00c      	b.n	80297c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80297ac:	4b21      	ldr	r3, [pc, #132]	@ (8029834 <UART_SetConfig+0x92c>)
 80297ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80297b0:	e009      	b.n	80297c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80297b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80297b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80297b8:	e005      	b.n	80297c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80297ba:	2300      	movs	r3, #0
 80297bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80297be:	2301      	movs	r3, #1
 80297c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80297c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80297c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80297c8:	2b00      	cmp	r3, #0
 80297ca:	f000 80e7 	beq.w	802999c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80297ce:	697b      	ldr	r3, [r7, #20]
 80297d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80297d2:	4a19      	ldr	r2, [pc, #100]	@ (8029838 <UART_SetConfig+0x930>)
 80297d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80297d8:	461a      	mov	r2, r3
 80297da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80297dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80297e0:	005a      	lsls	r2, r3, #1
 80297e2:	697b      	ldr	r3, [r7, #20]
 80297e4:	685b      	ldr	r3, [r3, #4]
 80297e6:	085b      	lsrs	r3, r3, #1
 80297e8:	441a      	add	r2, r3
 80297ea:	697b      	ldr	r3, [r7, #20]
 80297ec:	685b      	ldr	r3, [r3, #4]
 80297ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80297f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80297f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80297f6:	2b0f      	cmp	r3, #15
 80297f8:	d916      	bls.n	8029828 <UART_SetConfig+0x920>
 80297fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80297fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8029800:	d212      	bcs.n	8029828 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8029802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029804:	b29b      	uxth	r3, r3
 8029806:	f023 030f 	bic.w	r3, r3, #15
 802980a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802980e:	085b      	lsrs	r3, r3, #1
 8029810:	b29b      	uxth	r3, r3
 8029812:	f003 0307 	and.w	r3, r3, #7
 8029816:	b29a      	uxth	r2, r3
 8029818:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802981a:	4313      	orrs	r3, r2
 802981c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 802981e:	697b      	ldr	r3, [r7, #20]
 8029820:	681b      	ldr	r3, [r3, #0]
 8029822:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8029824:	60da      	str	r2, [r3, #12]
 8029826:	e0b9      	b.n	802999c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8029828:	2301      	movs	r3, #1
 802982a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 802982e:	e0b5      	b.n	802999c <UART_SetConfig+0xa94>
 8029830:	03d09000 	.word	0x03d09000
 8029834:	003d0900 	.word	0x003d0900
 8029838:	0802ae64 	.word	0x0802ae64
 802983c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8029840:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8029844:	2b20      	cmp	r3, #32
 8029846:	dc49      	bgt.n	80298dc <UART_SetConfig+0x9d4>
 8029848:	2b00      	cmp	r3, #0
 802984a:	db7c      	blt.n	8029946 <UART_SetConfig+0xa3e>
 802984c:	2b20      	cmp	r3, #32
 802984e:	d87a      	bhi.n	8029946 <UART_SetConfig+0xa3e>
 8029850:	a201      	add	r2, pc, #4	@ (adr r2, 8029858 <UART_SetConfig+0x950>)
 8029852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029856:	bf00      	nop
 8029858:	080298e3 	.word	0x080298e3
 802985c:	080298eb 	.word	0x080298eb
 8029860:	08029947 	.word	0x08029947
 8029864:	08029947 	.word	0x08029947
 8029868:	080298f3 	.word	0x080298f3
 802986c:	08029947 	.word	0x08029947
 8029870:	08029947 	.word	0x08029947
 8029874:	08029947 	.word	0x08029947
 8029878:	08029903 	.word	0x08029903
 802987c:	08029947 	.word	0x08029947
 8029880:	08029947 	.word	0x08029947
 8029884:	08029947 	.word	0x08029947
 8029888:	08029947 	.word	0x08029947
 802988c:	08029947 	.word	0x08029947
 8029890:	08029947 	.word	0x08029947
 8029894:	08029947 	.word	0x08029947
 8029898:	08029913 	.word	0x08029913
 802989c:	08029947 	.word	0x08029947
 80298a0:	08029947 	.word	0x08029947
 80298a4:	08029947 	.word	0x08029947
 80298a8:	08029947 	.word	0x08029947
 80298ac:	08029947 	.word	0x08029947
 80298b0:	08029947 	.word	0x08029947
 80298b4:	08029947 	.word	0x08029947
 80298b8:	08029947 	.word	0x08029947
 80298bc:	08029947 	.word	0x08029947
 80298c0:	08029947 	.word	0x08029947
 80298c4:	08029947 	.word	0x08029947
 80298c8:	08029947 	.word	0x08029947
 80298cc:	08029947 	.word	0x08029947
 80298d0:	08029947 	.word	0x08029947
 80298d4:	08029947 	.word	0x08029947
 80298d8:	08029939 	.word	0x08029939
 80298dc:	2b40      	cmp	r3, #64	@ 0x40
 80298de:	d02e      	beq.n	802993e <UART_SetConfig+0xa36>
 80298e0:	e031      	b.n	8029946 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80298e2:	f7fd fb13 	bl	8026f0c <HAL_RCC_GetPCLK1Freq>
 80298e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80298e8:	e033      	b.n	8029952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80298ea:	f7fd fb25 	bl	8026f38 <HAL_RCC_GetPCLK2Freq>
 80298ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80298f0:	e02f      	b.n	8029952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80298f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80298f6:	4618      	mov	r0, r3
 80298f8:	f7fe fd54 	bl	80283a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80298fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80298fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8029900:	e027      	b.n	8029952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8029902:	f107 0318 	add.w	r3, r7, #24
 8029906:	4618      	mov	r0, r3
 8029908:	f7fe fea0 	bl	802864c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802990c:	69fb      	ldr	r3, [r7, #28]
 802990e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8029910:	e01f      	b.n	8029952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8029912:	4b2d      	ldr	r3, [pc, #180]	@ (80299c8 <UART_SetConfig+0xac0>)
 8029914:	681b      	ldr	r3, [r3, #0]
 8029916:	f003 0320 	and.w	r3, r3, #32
 802991a:	2b00      	cmp	r3, #0
 802991c:	d009      	beq.n	8029932 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802991e:	4b2a      	ldr	r3, [pc, #168]	@ (80299c8 <UART_SetConfig+0xac0>)
 8029920:	681b      	ldr	r3, [r3, #0]
 8029922:	08db      	lsrs	r3, r3, #3
 8029924:	f003 0303 	and.w	r3, r3, #3
 8029928:	4a28      	ldr	r2, [pc, #160]	@ (80299cc <UART_SetConfig+0xac4>)
 802992a:	fa22 f303 	lsr.w	r3, r2, r3
 802992e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8029930:	e00f      	b.n	8029952 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8029932:	4b26      	ldr	r3, [pc, #152]	@ (80299cc <UART_SetConfig+0xac4>)
 8029934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8029936:	e00c      	b.n	8029952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8029938:	4b25      	ldr	r3, [pc, #148]	@ (80299d0 <UART_SetConfig+0xac8>)
 802993a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802993c:	e009      	b.n	8029952 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802993e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8029942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8029944:	e005      	b.n	8029952 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8029946:	2300      	movs	r3, #0
 8029948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802994a:	2301      	movs	r3, #1
 802994c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8029950:	bf00      	nop
    }

    if (pclk != 0U)
 8029952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8029954:	2b00      	cmp	r3, #0
 8029956:	d021      	beq.n	802999c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8029958:	697b      	ldr	r3, [r7, #20]
 802995a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802995c:	4a1d      	ldr	r2, [pc, #116]	@ (80299d4 <UART_SetConfig+0xacc>)
 802995e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8029962:	461a      	mov	r2, r3
 8029964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8029966:	fbb3 f2f2 	udiv	r2, r3, r2
 802996a:	697b      	ldr	r3, [r7, #20]
 802996c:	685b      	ldr	r3, [r3, #4]
 802996e:	085b      	lsrs	r3, r3, #1
 8029970:	441a      	add	r2, r3
 8029972:	697b      	ldr	r3, [r7, #20]
 8029974:	685b      	ldr	r3, [r3, #4]
 8029976:	fbb2 f3f3 	udiv	r3, r2, r3
 802997a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802997c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802997e:	2b0f      	cmp	r3, #15
 8029980:	d909      	bls.n	8029996 <UART_SetConfig+0xa8e>
 8029982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8029988:	d205      	bcs.n	8029996 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802998a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802998c:	b29a      	uxth	r2, r3
 802998e:	697b      	ldr	r3, [r7, #20]
 8029990:	681b      	ldr	r3, [r3, #0]
 8029992:	60da      	str	r2, [r3, #12]
 8029994:	e002      	b.n	802999c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8029996:	2301      	movs	r3, #1
 8029998:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802999c:	697b      	ldr	r3, [r7, #20]
 802999e:	2201      	movs	r2, #1
 80299a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80299a4:	697b      	ldr	r3, [r7, #20]
 80299a6:	2201      	movs	r2, #1
 80299a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80299ac:	697b      	ldr	r3, [r7, #20]
 80299ae:	2200      	movs	r2, #0
 80299b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80299b2:	697b      	ldr	r3, [r7, #20]
 80299b4:	2200      	movs	r2, #0
 80299b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80299b8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80299bc:	4618      	mov	r0, r3
 80299be:	3748      	adds	r7, #72	@ 0x48
 80299c0:	46bd      	mov	sp, r7
 80299c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80299c6:	bf00      	nop
 80299c8:	58024400 	.word	0x58024400
 80299cc:	03d09000 	.word	0x03d09000
 80299d0:	003d0900 	.word	0x003d0900
 80299d4:	0802ae64 	.word	0x0802ae64

080299d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80299d8:	b480      	push	{r7}
 80299da:	b083      	sub	sp, #12
 80299dc:	af00      	add	r7, sp, #0
 80299de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80299e0:	687b      	ldr	r3, [r7, #4]
 80299e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80299e4:	f003 0308 	and.w	r3, r3, #8
 80299e8:	2b00      	cmp	r3, #0
 80299ea:	d00a      	beq.n	8029a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80299ec:	687b      	ldr	r3, [r7, #4]
 80299ee:	681b      	ldr	r3, [r3, #0]
 80299f0:	685b      	ldr	r3, [r3, #4]
 80299f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80299f6:	687b      	ldr	r3, [r7, #4]
 80299f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80299fa:	687b      	ldr	r3, [r7, #4]
 80299fc:	681b      	ldr	r3, [r3, #0]
 80299fe:	430a      	orrs	r2, r1
 8029a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8029a02:	687b      	ldr	r3, [r7, #4]
 8029a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029a06:	f003 0301 	and.w	r3, r3, #1
 8029a0a:	2b00      	cmp	r3, #0
 8029a0c:	d00a      	beq.n	8029a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8029a0e:	687b      	ldr	r3, [r7, #4]
 8029a10:	681b      	ldr	r3, [r3, #0]
 8029a12:	685b      	ldr	r3, [r3, #4]
 8029a14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8029a18:	687b      	ldr	r3, [r7, #4]
 8029a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8029a1c:	687b      	ldr	r3, [r7, #4]
 8029a1e:	681b      	ldr	r3, [r3, #0]
 8029a20:	430a      	orrs	r2, r1
 8029a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8029a24:	687b      	ldr	r3, [r7, #4]
 8029a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029a28:	f003 0302 	and.w	r3, r3, #2
 8029a2c:	2b00      	cmp	r3, #0
 8029a2e:	d00a      	beq.n	8029a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8029a30:	687b      	ldr	r3, [r7, #4]
 8029a32:	681b      	ldr	r3, [r3, #0]
 8029a34:	685b      	ldr	r3, [r3, #4]
 8029a36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8029a3a:	687b      	ldr	r3, [r7, #4]
 8029a3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8029a3e:	687b      	ldr	r3, [r7, #4]
 8029a40:	681b      	ldr	r3, [r3, #0]
 8029a42:	430a      	orrs	r2, r1
 8029a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8029a46:	687b      	ldr	r3, [r7, #4]
 8029a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029a4a:	f003 0304 	and.w	r3, r3, #4
 8029a4e:	2b00      	cmp	r3, #0
 8029a50:	d00a      	beq.n	8029a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8029a52:	687b      	ldr	r3, [r7, #4]
 8029a54:	681b      	ldr	r3, [r3, #0]
 8029a56:	685b      	ldr	r3, [r3, #4]
 8029a58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8029a5c:	687b      	ldr	r3, [r7, #4]
 8029a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8029a60:	687b      	ldr	r3, [r7, #4]
 8029a62:	681b      	ldr	r3, [r3, #0]
 8029a64:	430a      	orrs	r2, r1
 8029a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8029a68:	687b      	ldr	r3, [r7, #4]
 8029a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029a6c:	f003 0310 	and.w	r3, r3, #16
 8029a70:	2b00      	cmp	r3, #0
 8029a72:	d00a      	beq.n	8029a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8029a74:	687b      	ldr	r3, [r7, #4]
 8029a76:	681b      	ldr	r3, [r3, #0]
 8029a78:	689b      	ldr	r3, [r3, #8]
 8029a7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8029a7e:	687b      	ldr	r3, [r7, #4]
 8029a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8029a82:	687b      	ldr	r3, [r7, #4]
 8029a84:	681b      	ldr	r3, [r3, #0]
 8029a86:	430a      	orrs	r2, r1
 8029a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8029a8a:	687b      	ldr	r3, [r7, #4]
 8029a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029a8e:	f003 0320 	and.w	r3, r3, #32
 8029a92:	2b00      	cmp	r3, #0
 8029a94:	d00a      	beq.n	8029aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8029a96:	687b      	ldr	r3, [r7, #4]
 8029a98:	681b      	ldr	r3, [r3, #0]
 8029a9a:	689b      	ldr	r3, [r3, #8]
 8029a9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8029aa0:	687b      	ldr	r3, [r7, #4]
 8029aa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8029aa4:	687b      	ldr	r3, [r7, #4]
 8029aa6:	681b      	ldr	r3, [r3, #0]
 8029aa8:	430a      	orrs	r2, r1
 8029aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8029aac:	687b      	ldr	r3, [r7, #4]
 8029aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8029ab4:	2b00      	cmp	r3, #0
 8029ab6:	d01a      	beq.n	8029aee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8029ab8:	687b      	ldr	r3, [r7, #4]
 8029aba:	681b      	ldr	r3, [r3, #0]
 8029abc:	685b      	ldr	r3, [r3, #4]
 8029abe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8029ac2:	687b      	ldr	r3, [r7, #4]
 8029ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8029ac6:	687b      	ldr	r3, [r7, #4]
 8029ac8:	681b      	ldr	r3, [r3, #0]
 8029aca:	430a      	orrs	r2, r1
 8029acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8029ace:	687b      	ldr	r3, [r7, #4]
 8029ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8029ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8029ad6:	d10a      	bne.n	8029aee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8029ad8:	687b      	ldr	r3, [r7, #4]
 8029ada:	681b      	ldr	r3, [r3, #0]
 8029adc:	685b      	ldr	r3, [r3, #4]
 8029ade:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8029ae2:	687b      	ldr	r3, [r7, #4]
 8029ae4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8029ae6:	687b      	ldr	r3, [r7, #4]
 8029ae8:	681b      	ldr	r3, [r3, #0]
 8029aea:	430a      	orrs	r2, r1
 8029aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8029aee:	687b      	ldr	r3, [r7, #4]
 8029af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8029af6:	2b00      	cmp	r3, #0
 8029af8:	d00a      	beq.n	8029b10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8029afa:	687b      	ldr	r3, [r7, #4]
 8029afc:	681b      	ldr	r3, [r3, #0]
 8029afe:	685b      	ldr	r3, [r3, #4]
 8029b00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8029b04:	687b      	ldr	r3, [r7, #4]
 8029b06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8029b08:	687b      	ldr	r3, [r7, #4]
 8029b0a:	681b      	ldr	r3, [r3, #0]
 8029b0c:	430a      	orrs	r2, r1
 8029b0e:	605a      	str	r2, [r3, #4]
  }
}
 8029b10:	bf00      	nop
 8029b12:	370c      	adds	r7, #12
 8029b14:	46bd      	mov	sp, r7
 8029b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b1a:	4770      	bx	lr

08029b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8029b1c:	b580      	push	{r7, lr}
 8029b1e:	b098      	sub	sp, #96	@ 0x60
 8029b20:	af02      	add	r7, sp, #8
 8029b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029b24:	687b      	ldr	r3, [r7, #4]
 8029b26:	2200      	movs	r2, #0
 8029b28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8029b2c:	f7fa fbfc 	bl	8024328 <HAL_GetTick>
 8029b30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8029b32:	687b      	ldr	r3, [r7, #4]
 8029b34:	681b      	ldr	r3, [r3, #0]
 8029b36:	681b      	ldr	r3, [r3, #0]
 8029b38:	f003 0308 	and.w	r3, r3, #8
 8029b3c:	2b08      	cmp	r3, #8
 8029b3e:	d12f      	bne.n	8029ba0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8029b40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8029b44:	9300      	str	r3, [sp, #0]
 8029b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029b48:	2200      	movs	r2, #0
 8029b4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8029b4e:	6878      	ldr	r0, [r7, #4]
 8029b50:	f000 f88e 	bl	8029c70 <UART_WaitOnFlagUntilTimeout>
 8029b54:	4603      	mov	r3, r0
 8029b56:	2b00      	cmp	r3, #0
 8029b58:	d022      	beq.n	8029ba0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8029b5a:	687b      	ldr	r3, [r7, #4]
 8029b5c:	681b      	ldr	r3, [r3, #0]
 8029b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029b62:	e853 3f00 	ldrex	r3, [r3]
 8029b66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8029b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029b6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8029b6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8029b70:	687b      	ldr	r3, [r7, #4]
 8029b72:	681b      	ldr	r3, [r3, #0]
 8029b74:	461a      	mov	r2, r3
 8029b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8029b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8029b7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029b7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8029b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8029b80:	e841 2300 	strex	r3, r2, [r1]
 8029b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8029b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8029b88:	2b00      	cmp	r3, #0
 8029b8a:	d1e6      	bne.n	8029b5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8029b8c:	687b      	ldr	r3, [r7, #4]
 8029b8e:	2220      	movs	r2, #32
 8029b90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8029b94:	687b      	ldr	r3, [r7, #4]
 8029b96:	2200      	movs	r2, #0
 8029b98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8029b9c:	2303      	movs	r3, #3
 8029b9e:	e063      	b.n	8029c68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8029ba0:	687b      	ldr	r3, [r7, #4]
 8029ba2:	681b      	ldr	r3, [r3, #0]
 8029ba4:	681b      	ldr	r3, [r3, #0]
 8029ba6:	f003 0304 	and.w	r3, r3, #4
 8029baa:	2b04      	cmp	r3, #4
 8029bac:	d149      	bne.n	8029c42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8029bae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8029bb2:	9300      	str	r3, [sp, #0]
 8029bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029bb6:	2200      	movs	r2, #0
 8029bb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8029bbc:	6878      	ldr	r0, [r7, #4]
 8029bbe:	f000 f857 	bl	8029c70 <UART_WaitOnFlagUntilTimeout>
 8029bc2:	4603      	mov	r3, r0
 8029bc4:	2b00      	cmp	r3, #0
 8029bc6:	d03c      	beq.n	8029c42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8029bc8:	687b      	ldr	r3, [r7, #4]
 8029bca:	681b      	ldr	r3, [r3, #0]
 8029bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029bd0:	e853 3f00 	ldrex	r3, [r3]
 8029bd4:	623b      	str	r3, [r7, #32]
   return(result);
 8029bd6:	6a3b      	ldr	r3, [r7, #32]
 8029bd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8029bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8029bde:	687b      	ldr	r3, [r7, #4]
 8029be0:	681b      	ldr	r3, [r3, #0]
 8029be2:	461a      	mov	r2, r3
 8029be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8029be6:	633b      	str	r3, [r7, #48]	@ 0x30
 8029be8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029bea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8029bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029bee:	e841 2300 	strex	r3, r2, [r1]
 8029bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8029bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029bf6:	2b00      	cmp	r3, #0
 8029bf8:	d1e6      	bne.n	8029bc8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029bfa:	687b      	ldr	r3, [r7, #4]
 8029bfc:	681b      	ldr	r3, [r3, #0]
 8029bfe:	3308      	adds	r3, #8
 8029c00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029c02:	693b      	ldr	r3, [r7, #16]
 8029c04:	e853 3f00 	ldrex	r3, [r3]
 8029c08:	60fb      	str	r3, [r7, #12]
   return(result);
 8029c0a:	68fb      	ldr	r3, [r7, #12]
 8029c0c:	f023 0301 	bic.w	r3, r3, #1
 8029c10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8029c12:	687b      	ldr	r3, [r7, #4]
 8029c14:	681b      	ldr	r3, [r3, #0]
 8029c16:	3308      	adds	r3, #8
 8029c18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8029c1a:	61fa      	str	r2, [r7, #28]
 8029c1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029c1e:	69b9      	ldr	r1, [r7, #24]
 8029c20:	69fa      	ldr	r2, [r7, #28]
 8029c22:	e841 2300 	strex	r3, r2, [r1]
 8029c26:	617b      	str	r3, [r7, #20]
   return(result);
 8029c28:	697b      	ldr	r3, [r7, #20]
 8029c2a:	2b00      	cmp	r3, #0
 8029c2c:	d1e5      	bne.n	8029bfa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8029c2e:	687b      	ldr	r3, [r7, #4]
 8029c30:	2220      	movs	r2, #32
 8029c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8029c36:	687b      	ldr	r3, [r7, #4]
 8029c38:	2200      	movs	r2, #0
 8029c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8029c3e:	2303      	movs	r3, #3
 8029c40:	e012      	b.n	8029c68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8029c42:	687b      	ldr	r3, [r7, #4]
 8029c44:	2220      	movs	r2, #32
 8029c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8029c4a:	687b      	ldr	r3, [r7, #4]
 8029c4c:	2220      	movs	r2, #32
 8029c4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029c52:	687b      	ldr	r3, [r7, #4]
 8029c54:	2200      	movs	r2, #0
 8029c56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8029c58:	687b      	ldr	r3, [r7, #4]
 8029c5a:	2200      	movs	r2, #0
 8029c5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8029c5e:	687b      	ldr	r3, [r7, #4]
 8029c60:	2200      	movs	r2, #0
 8029c62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8029c66:	2300      	movs	r3, #0
}
 8029c68:	4618      	mov	r0, r3
 8029c6a:	3758      	adds	r7, #88	@ 0x58
 8029c6c:	46bd      	mov	sp, r7
 8029c6e:	bd80      	pop	{r7, pc}

08029c70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8029c70:	b580      	push	{r7, lr}
 8029c72:	b084      	sub	sp, #16
 8029c74:	af00      	add	r7, sp, #0
 8029c76:	60f8      	str	r0, [r7, #12]
 8029c78:	60b9      	str	r1, [r7, #8]
 8029c7a:	603b      	str	r3, [r7, #0]
 8029c7c:	4613      	mov	r3, r2
 8029c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029c80:	e04f      	b.n	8029d22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8029c82:	69bb      	ldr	r3, [r7, #24]
 8029c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029c88:	d04b      	beq.n	8029d22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8029c8a:	f7fa fb4d 	bl	8024328 <HAL_GetTick>
 8029c8e:	4602      	mov	r2, r0
 8029c90:	683b      	ldr	r3, [r7, #0]
 8029c92:	1ad3      	subs	r3, r2, r3
 8029c94:	69ba      	ldr	r2, [r7, #24]
 8029c96:	429a      	cmp	r2, r3
 8029c98:	d302      	bcc.n	8029ca0 <UART_WaitOnFlagUntilTimeout+0x30>
 8029c9a:	69bb      	ldr	r3, [r7, #24]
 8029c9c:	2b00      	cmp	r3, #0
 8029c9e:	d101      	bne.n	8029ca4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8029ca0:	2303      	movs	r3, #3
 8029ca2:	e04e      	b.n	8029d42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8029ca4:	68fb      	ldr	r3, [r7, #12]
 8029ca6:	681b      	ldr	r3, [r3, #0]
 8029ca8:	681b      	ldr	r3, [r3, #0]
 8029caa:	f003 0304 	and.w	r3, r3, #4
 8029cae:	2b00      	cmp	r3, #0
 8029cb0:	d037      	beq.n	8029d22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8029cb2:	68bb      	ldr	r3, [r7, #8]
 8029cb4:	2b80      	cmp	r3, #128	@ 0x80
 8029cb6:	d034      	beq.n	8029d22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8029cb8:	68bb      	ldr	r3, [r7, #8]
 8029cba:	2b40      	cmp	r3, #64	@ 0x40
 8029cbc:	d031      	beq.n	8029d22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8029cbe:	68fb      	ldr	r3, [r7, #12]
 8029cc0:	681b      	ldr	r3, [r3, #0]
 8029cc2:	69db      	ldr	r3, [r3, #28]
 8029cc4:	f003 0308 	and.w	r3, r3, #8
 8029cc8:	2b08      	cmp	r3, #8
 8029cca:	d110      	bne.n	8029cee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8029ccc:	68fb      	ldr	r3, [r7, #12]
 8029cce:	681b      	ldr	r3, [r3, #0]
 8029cd0:	2208      	movs	r2, #8
 8029cd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8029cd4:	68f8      	ldr	r0, [r7, #12]
 8029cd6:	f000 f839 	bl	8029d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8029cda:	68fb      	ldr	r3, [r7, #12]
 8029cdc:	2208      	movs	r2, #8
 8029cde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8029ce2:	68fb      	ldr	r3, [r7, #12]
 8029ce4:	2200      	movs	r2, #0
 8029ce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8029cea:	2301      	movs	r3, #1
 8029cec:	e029      	b.n	8029d42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8029cee:	68fb      	ldr	r3, [r7, #12]
 8029cf0:	681b      	ldr	r3, [r3, #0]
 8029cf2:	69db      	ldr	r3, [r3, #28]
 8029cf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8029cf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8029cfc:	d111      	bne.n	8029d22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8029cfe:	68fb      	ldr	r3, [r7, #12]
 8029d00:	681b      	ldr	r3, [r3, #0]
 8029d02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8029d06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8029d08:	68f8      	ldr	r0, [r7, #12]
 8029d0a:	f000 f81f 	bl	8029d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8029d0e:	68fb      	ldr	r3, [r7, #12]
 8029d10:	2220      	movs	r2, #32
 8029d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8029d16:	68fb      	ldr	r3, [r7, #12]
 8029d18:	2200      	movs	r2, #0
 8029d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8029d1e:	2303      	movs	r3, #3
 8029d20:	e00f      	b.n	8029d42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029d22:	68fb      	ldr	r3, [r7, #12]
 8029d24:	681b      	ldr	r3, [r3, #0]
 8029d26:	69da      	ldr	r2, [r3, #28]
 8029d28:	68bb      	ldr	r3, [r7, #8]
 8029d2a:	4013      	ands	r3, r2
 8029d2c:	68ba      	ldr	r2, [r7, #8]
 8029d2e:	429a      	cmp	r2, r3
 8029d30:	bf0c      	ite	eq
 8029d32:	2301      	moveq	r3, #1
 8029d34:	2300      	movne	r3, #0
 8029d36:	b2db      	uxtb	r3, r3
 8029d38:	461a      	mov	r2, r3
 8029d3a:	79fb      	ldrb	r3, [r7, #7]
 8029d3c:	429a      	cmp	r2, r3
 8029d3e:	d0a0      	beq.n	8029c82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8029d40:	2300      	movs	r3, #0
}
 8029d42:	4618      	mov	r0, r3
 8029d44:	3710      	adds	r7, #16
 8029d46:	46bd      	mov	sp, r7
 8029d48:	bd80      	pop	{r7, pc}
	...

08029d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8029d4c:	b480      	push	{r7}
 8029d4e:	b095      	sub	sp, #84	@ 0x54
 8029d50:	af00      	add	r7, sp, #0
 8029d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8029d54:	687b      	ldr	r3, [r7, #4]
 8029d56:	681b      	ldr	r3, [r3, #0]
 8029d58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8029d5c:	e853 3f00 	ldrex	r3, [r3]
 8029d60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8029d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8029d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8029d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8029d6a:	687b      	ldr	r3, [r7, #4]
 8029d6c:	681b      	ldr	r3, [r3, #0]
 8029d6e:	461a      	mov	r2, r3
 8029d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8029d72:	643b      	str	r3, [r7, #64]	@ 0x40
 8029d74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029d76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8029d78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8029d7a:	e841 2300 	strex	r3, r2, [r1]
 8029d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8029d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8029d82:	2b00      	cmp	r3, #0
 8029d84:	d1e6      	bne.n	8029d54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8029d86:	687b      	ldr	r3, [r7, #4]
 8029d88:	681b      	ldr	r3, [r3, #0]
 8029d8a:	3308      	adds	r3, #8
 8029d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d8e:	6a3b      	ldr	r3, [r7, #32]
 8029d90:	e853 3f00 	ldrex	r3, [r3]
 8029d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8029d96:	69fa      	ldr	r2, [r7, #28]
 8029d98:	4b1e      	ldr	r3, [pc, #120]	@ (8029e14 <UART_EndRxTransfer+0xc8>)
 8029d9a:	4013      	ands	r3, r2
 8029d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8029d9e:	687b      	ldr	r3, [r7, #4]
 8029da0:	681b      	ldr	r3, [r3, #0]
 8029da2:	3308      	adds	r3, #8
 8029da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8029da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8029da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029daa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8029dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029dae:	e841 2300 	strex	r3, r2, [r1]
 8029db2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8029db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8029db6:	2b00      	cmp	r3, #0
 8029db8:	d1e5      	bne.n	8029d86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029dba:	687b      	ldr	r3, [r7, #4]
 8029dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8029dbe:	2b01      	cmp	r3, #1
 8029dc0:	d118      	bne.n	8029df4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029dc2:	687b      	ldr	r3, [r7, #4]
 8029dc4:	681b      	ldr	r3, [r3, #0]
 8029dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029dc8:	68fb      	ldr	r3, [r7, #12]
 8029dca:	e853 3f00 	ldrex	r3, [r3]
 8029dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8029dd0:	68bb      	ldr	r3, [r7, #8]
 8029dd2:	f023 0310 	bic.w	r3, r3, #16
 8029dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8029dd8:	687b      	ldr	r3, [r7, #4]
 8029dda:	681b      	ldr	r3, [r3, #0]
 8029ddc:	461a      	mov	r2, r3
 8029dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8029de0:	61bb      	str	r3, [r7, #24]
 8029de2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029de4:	6979      	ldr	r1, [r7, #20]
 8029de6:	69ba      	ldr	r2, [r7, #24]
 8029de8:	e841 2300 	strex	r3, r2, [r1]
 8029dec:	613b      	str	r3, [r7, #16]
   return(result);
 8029dee:	693b      	ldr	r3, [r7, #16]
 8029df0:	2b00      	cmp	r3, #0
 8029df2:	d1e6      	bne.n	8029dc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8029df4:	687b      	ldr	r3, [r7, #4]
 8029df6:	2220      	movs	r2, #32
 8029df8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029dfc:	687b      	ldr	r3, [r7, #4]
 8029dfe:	2200      	movs	r2, #0
 8029e00:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8029e02:	687b      	ldr	r3, [r7, #4]
 8029e04:	2200      	movs	r2, #0
 8029e06:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8029e08:	bf00      	nop
 8029e0a:	3754      	adds	r7, #84	@ 0x54
 8029e0c:	46bd      	mov	sp, r7
 8029e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e12:	4770      	bx	lr
 8029e14:	effffffe 	.word	0xeffffffe

08029e18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8029e18:	b480      	push	{r7}
 8029e1a:	b085      	sub	sp, #20
 8029e1c:	af00      	add	r7, sp, #0
 8029e1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8029e20:	687b      	ldr	r3, [r7, #4]
 8029e22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8029e26:	2b01      	cmp	r3, #1
 8029e28:	d101      	bne.n	8029e2e <HAL_UARTEx_DisableFifoMode+0x16>
 8029e2a:	2302      	movs	r3, #2
 8029e2c:	e027      	b.n	8029e7e <HAL_UARTEx_DisableFifoMode+0x66>
 8029e2e:	687b      	ldr	r3, [r7, #4]
 8029e30:	2201      	movs	r2, #1
 8029e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8029e36:	687b      	ldr	r3, [r7, #4]
 8029e38:	2224      	movs	r2, #36	@ 0x24
 8029e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8029e3e:	687b      	ldr	r3, [r7, #4]
 8029e40:	681b      	ldr	r3, [r3, #0]
 8029e42:	681b      	ldr	r3, [r3, #0]
 8029e44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8029e46:	687b      	ldr	r3, [r7, #4]
 8029e48:	681b      	ldr	r3, [r3, #0]
 8029e4a:	681a      	ldr	r2, [r3, #0]
 8029e4c:	687b      	ldr	r3, [r7, #4]
 8029e4e:	681b      	ldr	r3, [r3, #0]
 8029e50:	f022 0201 	bic.w	r2, r2, #1
 8029e54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8029e56:	68fb      	ldr	r3, [r7, #12]
 8029e58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8029e5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8029e5e:	687b      	ldr	r3, [r7, #4]
 8029e60:	2200      	movs	r2, #0
 8029e62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8029e64:	687b      	ldr	r3, [r7, #4]
 8029e66:	681b      	ldr	r3, [r3, #0]
 8029e68:	68fa      	ldr	r2, [r7, #12]
 8029e6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8029e6c:	687b      	ldr	r3, [r7, #4]
 8029e6e:	2220      	movs	r2, #32
 8029e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8029e74:	687b      	ldr	r3, [r7, #4]
 8029e76:	2200      	movs	r2, #0
 8029e78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8029e7c:	2300      	movs	r3, #0
}
 8029e7e:	4618      	mov	r0, r3
 8029e80:	3714      	adds	r7, #20
 8029e82:	46bd      	mov	sp, r7
 8029e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e88:	4770      	bx	lr

08029e8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8029e8a:	b580      	push	{r7, lr}
 8029e8c:	b084      	sub	sp, #16
 8029e8e:	af00      	add	r7, sp, #0
 8029e90:	6078      	str	r0, [r7, #4]
 8029e92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8029e94:	687b      	ldr	r3, [r7, #4]
 8029e96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8029e9a:	2b01      	cmp	r3, #1
 8029e9c:	d101      	bne.n	8029ea2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8029e9e:	2302      	movs	r3, #2
 8029ea0:	e02d      	b.n	8029efe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8029ea2:	687b      	ldr	r3, [r7, #4]
 8029ea4:	2201      	movs	r2, #1
 8029ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8029eaa:	687b      	ldr	r3, [r7, #4]
 8029eac:	2224      	movs	r2, #36	@ 0x24
 8029eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8029eb2:	687b      	ldr	r3, [r7, #4]
 8029eb4:	681b      	ldr	r3, [r3, #0]
 8029eb6:	681b      	ldr	r3, [r3, #0]
 8029eb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8029eba:	687b      	ldr	r3, [r7, #4]
 8029ebc:	681b      	ldr	r3, [r3, #0]
 8029ebe:	681a      	ldr	r2, [r3, #0]
 8029ec0:	687b      	ldr	r3, [r7, #4]
 8029ec2:	681b      	ldr	r3, [r3, #0]
 8029ec4:	f022 0201 	bic.w	r2, r2, #1
 8029ec8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8029eca:	687b      	ldr	r3, [r7, #4]
 8029ecc:	681b      	ldr	r3, [r3, #0]
 8029ece:	689b      	ldr	r3, [r3, #8]
 8029ed0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8029ed4:	687b      	ldr	r3, [r7, #4]
 8029ed6:	681b      	ldr	r3, [r3, #0]
 8029ed8:	683a      	ldr	r2, [r7, #0]
 8029eda:	430a      	orrs	r2, r1
 8029edc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8029ede:	6878      	ldr	r0, [r7, #4]
 8029ee0:	f000 f850 	bl	8029f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8029ee4:	687b      	ldr	r3, [r7, #4]
 8029ee6:	681b      	ldr	r3, [r3, #0]
 8029ee8:	68fa      	ldr	r2, [r7, #12]
 8029eea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8029eec:	687b      	ldr	r3, [r7, #4]
 8029eee:	2220      	movs	r2, #32
 8029ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8029ef4:	687b      	ldr	r3, [r7, #4]
 8029ef6:	2200      	movs	r2, #0
 8029ef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8029efc:	2300      	movs	r3, #0
}
 8029efe:	4618      	mov	r0, r3
 8029f00:	3710      	adds	r7, #16
 8029f02:	46bd      	mov	sp, r7
 8029f04:	bd80      	pop	{r7, pc}

08029f06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8029f06:	b580      	push	{r7, lr}
 8029f08:	b084      	sub	sp, #16
 8029f0a:	af00      	add	r7, sp, #0
 8029f0c:	6078      	str	r0, [r7, #4]
 8029f0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8029f10:	687b      	ldr	r3, [r7, #4]
 8029f12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8029f16:	2b01      	cmp	r3, #1
 8029f18:	d101      	bne.n	8029f1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8029f1a:	2302      	movs	r3, #2
 8029f1c:	e02d      	b.n	8029f7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8029f1e:	687b      	ldr	r3, [r7, #4]
 8029f20:	2201      	movs	r2, #1
 8029f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8029f26:	687b      	ldr	r3, [r7, #4]
 8029f28:	2224      	movs	r2, #36	@ 0x24
 8029f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8029f2e:	687b      	ldr	r3, [r7, #4]
 8029f30:	681b      	ldr	r3, [r3, #0]
 8029f32:	681b      	ldr	r3, [r3, #0]
 8029f34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8029f36:	687b      	ldr	r3, [r7, #4]
 8029f38:	681b      	ldr	r3, [r3, #0]
 8029f3a:	681a      	ldr	r2, [r3, #0]
 8029f3c:	687b      	ldr	r3, [r7, #4]
 8029f3e:	681b      	ldr	r3, [r3, #0]
 8029f40:	f022 0201 	bic.w	r2, r2, #1
 8029f44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8029f46:	687b      	ldr	r3, [r7, #4]
 8029f48:	681b      	ldr	r3, [r3, #0]
 8029f4a:	689b      	ldr	r3, [r3, #8]
 8029f4c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8029f50:	687b      	ldr	r3, [r7, #4]
 8029f52:	681b      	ldr	r3, [r3, #0]
 8029f54:	683a      	ldr	r2, [r7, #0]
 8029f56:	430a      	orrs	r2, r1
 8029f58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8029f5a:	6878      	ldr	r0, [r7, #4]
 8029f5c:	f000 f812 	bl	8029f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8029f60:	687b      	ldr	r3, [r7, #4]
 8029f62:	681b      	ldr	r3, [r3, #0]
 8029f64:	68fa      	ldr	r2, [r7, #12]
 8029f66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8029f68:	687b      	ldr	r3, [r7, #4]
 8029f6a:	2220      	movs	r2, #32
 8029f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8029f70:	687b      	ldr	r3, [r7, #4]
 8029f72:	2200      	movs	r2, #0
 8029f74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8029f78:	2300      	movs	r3, #0
}
 8029f7a:	4618      	mov	r0, r3
 8029f7c:	3710      	adds	r7, #16
 8029f7e:	46bd      	mov	sp, r7
 8029f80:	bd80      	pop	{r7, pc}
	...

08029f84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8029f84:	b480      	push	{r7}
 8029f86:	b085      	sub	sp, #20
 8029f88:	af00      	add	r7, sp, #0
 8029f8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8029f8c:	687b      	ldr	r3, [r7, #4]
 8029f8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8029f90:	2b00      	cmp	r3, #0
 8029f92:	d108      	bne.n	8029fa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8029f94:	687b      	ldr	r3, [r7, #4]
 8029f96:	2201      	movs	r2, #1
 8029f98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8029f9c:	687b      	ldr	r3, [r7, #4]
 8029f9e:	2201      	movs	r2, #1
 8029fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8029fa4:	e031      	b.n	802a00a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8029fa6:	2310      	movs	r3, #16
 8029fa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8029faa:	2310      	movs	r3, #16
 8029fac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8029fae:	687b      	ldr	r3, [r7, #4]
 8029fb0:	681b      	ldr	r3, [r3, #0]
 8029fb2:	689b      	ldr	r3, [r3, #8]
 8029fb4:	0e5b      	lsrs	r3, r3, #25
 8029fb6:	b2db      	uxtb	r3, r3
 8029fb8:	f003 0307 	and.w	r3, r3, #7
 8029fbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8029fbe:	687b      	ldr	r3, [r7, #4]
 8029fc0:	681b      	ldr	r3, [r3, #0]
 8029fc2:	689b      	ldr	r3, [r3, #8]
 8029fc4:	0f5b      	lsrs	r3, r3, #29
 8029fc6:	b2db      	uxtb	r3, r3
 8029fc8:	f003 0307 	and.w	r3, r3, #7
 8029fcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8029fce:	7bbb      	ldrb	r3, [r7, #14]
 8029fd0:	7b3a      	ldrb	r2, [r7, #12]
 8029fd2:	4911      	ldr	r1, [pc, #68]	@ (802a018 <UARTEx_SetNbDataToProcess+0x94>)
 8029fd4:	5c8a      	ldrb	r2, [r1, r2]
 8029fd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8029fda:	7b3a      	ldrb	r2, [r7, #12]
 8029fdc:	490f      	ldr	r1, [pc, #60]	@ (802a01c <UARTEx_SetNbDataToProcess+0x98>)
 8029fde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8029fe0:	fb93 f3f2 	sdiv	r3, r3, r2
 8029fe4:	b29a      	uxth	r2, r3
 8029fe6:	687b      	ldr	r3, [r7, #4]
 8029fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8029fec:	7bfb      	ldrb	r3, [r7, #15]
 8029fee:	7b7a      	ldrb	r2, [r7, #13]
 8029ff0:	4909      	ldr	r1, [pc, #36]	@ (802a018 <UARTEx_SetNbDataToProcess+0x94>)
 8029ff2:	5c8a      	ldrb	r2, [r1, r2]
 8029ff4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8029ff8:	7b7a      	ldrb	r2, [r7, #13]
 8029ffa:	4908      	ldr	r1, [pc, #32]	@ (802a01c <UARTEx_SetNbDataToProcess+0x98>)
 8029ffc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8029ffe:	fb93 f3f2 	sdiv	r3, r3, r2
 802a002:	b29a      	uxth	r2, r3
 802a004:	687b      	ldr	r3, [r7, #4]
 802a006:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 802a00a:	bf00      	nop
 802a00c:	3714      	adds	r7, #20
 802a00e:	46bd      	mov	sp, r7
 802a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a014:	4770      	bx	lr
 802a016:	bf00      	nop
 802a018:	0802ae7c 	.word	0x0802ae7c
 802a01c:	0802ae84 	.word	0x0802ae84

0802a020 <_vsiprintf_r>:
 802a020:	b500      	push	{lr}
 802a022:	b09b      	sub	sp, #108	@ 0x6c
 802a024:	9100      	str	r1, [sp, #0]
 802a026:	9104      	str	r1, [sp, #16]
 802a028:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802a02c:	9105      	str	r1, [sp, #20]
 802a02e:	9102      	str	r1, [sp, #8]
 802a030:	4905      	ldr	r1, [pc, #20]	@ (802a048 <_vsiprintf_r+0x28>)
 802a032:	9103      	str	r1, [sp, #12]
 802a034:	4669      	mov	r1, sp
 802a036:	f000 f9af 	bl	802a398 <_svfiprintf_r>
 802a03a:	9b00      	ldr	r3, [sp, #0]
 802a03c:	2200      	movs	r2, #0
 802a03e:	701a      	strb	r2, [r3, #0]
 802a040:	b01b      	add	sp, #108	@ 0x6c
 802a042:	f85d fb04 	ldr.w	pc, [sp], #4
 802a046:	bf00      	nop
 802a048:	ffff0208 	.word	0xffff0208

0802a04c <vsiprintf>:
 802a04c:	4613      	mov	r3, r2
 802a04e:	460a      	mov	r2, r1
 802a050:	4601      	mov	r1, r0
 802a052:	4802      	ldr	r0, [pc, #8]	@ (802a05c <vsiprintf+0x10>)
 802a054:	6800      	ldr	r0, [r0, #0]
 802a056:	f7ff bfe3 	b.w	802a020 <_vsiprintf_r>
 802a05a:	bf00      	nop
 802a05c:	24000034 	.word	0x24000034

0802a060 <memset>:
 802a060:	4402      	add	r2, r0
 802a062:	4603      	mov	r3, r0
 802a064:	4293      	cmp	r3, r2
 802a066:	d100      	bne.n	802a06a <memset+0xa>
 802a068:	4770      	bx	lr
 802a06a:	f803 1b01 	strb.w	r1, [r3], #1
 802a06e:	e7f9      	b.n	802a064 <memset+0x4>

0802a070 <__errno>:
 802a070:	4b01      	ldr	r3, [pc, #4]	@ (802a078 <__errno+0x8>)
 802a072:	6818      	ldr	r0, [r3, #0]
 802a074:	4770      	bx	lr
 802a076:	bf00      	nop
 802a078:	24000034 	.word	0x24000034

0802a07c <__libc_init_array>:
 802a07c:	b570      	push	{r4, r5, r6, lr}
 802a07e:	4d0d      	ldr	r5, [pc, #52]	@ (802a0b4 <__libc_init_array+0x38>)
 802a080:	4c0d      	ldr	r4, [pc, #52]	@ (802a0b8 <__libc_init_array+0x3c>)
 802a082:	1b64      	subs	r4, r4, r5
 802a084:	10a4      	asrs	r4, r4, #2
 802a086:	2600      	movs	r6, #0
 802a088:	42a6      	cmp	r6, r4
 802a08a:	d109      	bne.n	802a0a0 <__libc_init_array+0x24>
 802a08c:	4d0b      	ldr	r5, [pc, #44]	@ (802a0bc <__libc_init_array+0x40>)
 802a08e:	4c0c      	ldr	r4, [pc, #48]	@ (802a0c0 <__libc_init_array+0x44>)
 802a090:	f000 fc6c 	bl	802a96c <_init>
 802a094:	1b64      	subs	r4, r4, r5
 802a096:	10a4      	asrs	r4, r4, #2
 802a098:	2600      	movs	r6, #0
 802a09a:	42a6      	cmp	r6, r4
 802a09c:	d105      	bne.n	802a0aa <__libc_init_array+0x2e>
 802a09e:	bd70      	pop	{r4, r5, r6, pc}
 802a0a0:	f855 3b04 	ldr.w	r3, [r5], #4
 802a0a4:	4798      	blx	r3
 802a0a6:	3601      	adds	r6, #1
 802a0a8:	e7ee      	b.n	802a088 <__libc_init_array+0xc>
 802a0aa:	f855 3b04 	ldr.w	r3, [r5], #4
 802a0ae:	4798      	blx	r3
 802a0b0:	3601      	adds	r6, #1
 802a0b2:	e7f2      	b.n	802a09a <__libc_init_array+0x1e>
 802a0b4:	0802b3c8 	.word	0x0802b3c8
 802a0b8:	0802b3c8 	.word	0x0802b3c8
 802a0bc:	0802b3c8 	.word	0x0802b3c8
 802a0c0:	0802b3cc 	.word	0x0802b3cc

0802a0c4 <__retarget_lock_acquire_recursive>:
 802a0c4:	4770      	bx	lr

0802a0c6 <__retarget_lock_release_recursive>:
 802a0c6:	4770      	bx	lr

0802a0c8 <__aeabi_memcpy>:
 802a0c8:	f000 b803 	b.w	802a0d2 <memcpy>

0802a0cc <__aeabi_memclr>:
 802a0cc:	2200      	movs	r2, #0
 802a0ce:	f7f8 bdcc 	b.w	8022c6a <__aeabi_memset>

0802a0d2 <memcpy>:
 802a0d2:	440a      	add	r2, r1
 802a0d4:	4291      	cmp	r1, r2
 802a0d6:	f100 33ff 	add.w	r3, r0, #4294967295
 802a0da:	d100      	bne.n	802a0de <memcpy+0xc>
 802a0dc:	4770      	bx	lr
 802a0de:	b510      	push	{r4, lr}
 802a0e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a0e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a0e8:	4291      	cmp	r1, r2
 802a0ea:	d1f9      	bne.n	802a0e0 <memcpy+0xe>
 802a0ec:	bd10      	pop	{r4, pc}
	...

0802a0f0 <_free_r>:
 802a0f0:	b538      	push	{r3, r4, r5, lr}
 802a0f2:	4605      	mov	r5, r0
 802a0f4:	2900      	cmp	r1, #0
 802a0f6:	d041      	beq.n	802a17c <_free_r+0x8c>
 802a0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a0fc:	1f0c      	subs	r4, r1, #4
 802a0fe:	2b00      	cmp	r3, #0
 802a100:	bfb8      	it	lt
 802a102:	18e4      	addlt	r4, r4, r3
 802a104:	f000 f8e0 	bl	802a2c8 <__malloc_lock>
 802a108:	4a1d      	ldr	r2, [pc, #116]	@ (802a180 <_free_r+0x90>)
 802a10a:	6813      	ldr	r3, [r2, #0]
 802a10c:	b933      	cbnz	r3, 802a11c <_free_r+0x2c>
 802a10e:	6063      	str	r3, [r4, #4]
 802a110:	6014      	str	r4, [r2, #0]
 802a112:	4628      	mov	r0, r5
 802a114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a118:	f000 b8dc 	b.w	802a2d4 <__malloc_unlock>
 802a11c:	42a3      	cmp	r3, r4
 802a11e:	d908      	bls.n	802a132 <_free_r+0x42>
 802a120:	6820      	ldr	r0, [r4, #0]
 802a122:	1821      	adds	r1, r4, r0
 802a124:	428b      	cmp	r3, r1
 802a126:	bf01      	itttt	eq
 802a128:	6819      	ldreq	r1, [r3, #0]
 802a12a:	685b      	ldreq	r3, [r3, #4]
 802a12c:	1809      	addeq	r1, r1, r0
 802a12e:	6021      	streq	r1, [r4, #0]
 802a130:	e7ed      	b.n	802a10e <_free_r+0x1e>
 802a132:	461a      	mov	r2, r3
 802a134:	685b      	ldr	r3, [r3, #4]
 802a136:	b10b      	cbz	r3, 802a13c <_free_r+0x4c>
 802a138:	42a3      	cmp	r3, r4
 802a13a:	d9fa      	bls.n	802a132 <_free_r+0x42>
 802a13c:	6811      	ldr	r1, [r2, #0]
 802a13e:	1850      	adds	r0, r2, r1
 802a140:	42a0      	cmp	r0, r4
 802a142:	d10b      	bne.n	802a15c <_free_r+0x6c>
 802a144:	6820      	ldr	r0, [r4, #0]
 802a146:	4401      	add	r1, r0
 802a148:	1850      	adds	r0, r2, r1
 802a14a:	4283      	cmp	r3, r0
 802a14c:	6011      	str	r1, [r2, #0]
 802a14e:	d1e0      	bne.n	802a112 <_free_r+0x22>
 802a150:	6818      	ldr	r0, [r3, #0]
 802a152:	685b      	ldr	r3, [r3, #4]
 802a154:	6053      	str	r3, [r2, #4]
 802a156:	4408      	add	r0, r1
 802a158:	6010      	str	r0, [r2, #0]
 802a15a:	e7da      	b.n	802a112 <_free_r+0x22>
 802a15c:	d902      	bls.n	802a164 <_free_r+0x74>
 802a15e:	230c      	movs	r3, #12
 802a160:	602b      	str	r3, [r5, #0]
 802a162:	e7d6      	b.n	802a112 <_free_r+0x22>
 802a164:	6820      	ldr	r0, [r4, #0]
 802a166:	1821      	adds	r1, r4, r0
 802a168:	428b      	cmp	r3, r1
 802a16a:	bf04      	itt	eq
 802a16c:	6819      	ldreq	r1, [r3, #0]
 802a16e:	685b      	ldreq	r3, [r3, #4]
 802a170:	6063      	str	r3, [r4, #4]
 802a172:	bf04      	itt	eq
 802a174:	1809      	addeq	r1, r1, r0
 802a176:	6021      	streq	r1, [r4, #0]
 802a178:	6054      	str	r4, [r2, #4]
 802a17a:	e7ca      	b.n	802a112 <_free_r+0x22>
 802a17c:	bd38      	pop	{r3, r4, r5, pc}
 802a17e:	bf00      	nop
 802a180:	240005d4 	.word	0x240005d4

0802a184 <sbrk_aligned>:
 802a184:	b570      	push	{r4, r5, r6, lr}
 802a186:	4e0f      	ldr	r6, [pc, #60]	@ (802a1c4 <sbrk_aligned+0x40>)
 802a188:	460c      	mov	r4, r1
 802a18a:	6831      	ldr	r1, [r6, #0]
 802a18c:	4605      	mov	r5, r0
 802a18e:	b911      	cbnz	r1, 802a196 <sbrk_aligned+0x12>
 802a190:	f000 fba6 	bl	802a8e0 <_sbrk_r>
 802a194:	6030      	str	r0, [r6, #0]
 802a196:	4621      	mov	r1, r4
 802a198:	4628      	mov	r0, r5
 802a19a:	f000 fba1 	bl	802a8e0 <_sbrk_r>
 802a19e:	1c43      	adds	r3, r0, #1
 802a1a0:	d103      	bne.n	802a1aa <sbrk_aligned+0x26>
 802a1a2:	f04f 34ff 	mov.w	r4, #4294967295
 802a1a6:	4620      	mov	r0, r4
 802a1a8:	bd70      	pop	{r4, r5, r6, pc}
 802a1aa:	1cc4      	adds	r4, r0, #3
 802a1ac:	f024 0403 	bic.w	r4, r4, #3
 802a1b0:	42a0      	cmp	r0, r4
 802a1b2:	d0f8      	beq.n	802a1a6 <sbrk_aligned+0x22>
 802a1b4:	1a21      	subs	r1, r4, r0
 802a1b6:	4628      	mov	r0, r5
 802a1b8:	f000 fb92 	bl	802a8e0 <_sbrk_r>
 802a1bc:	3001      	adds	r0, #1
 802a1be:	d1f2      	bne.n	802a1a6 <sbrk_aligned+0x22>
 802a1c0:	e7ef      	b.n	802a1a2 <sbrk_aligned+0x1e>
 802a1c2:	bf00      	nop
 802a1c4:	240005d0 	.word	0x240005d0

0802a1c8 <_malloc_r>:
 802a1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a1cc:	1ccd      	adds	r5, r1, #3
 802a1ce:	f025 0503 	bic.w	r5, r5, #3
 802a1d2:	3508      	adds	r5, #8
 802a1d4:	2d0c      	cmp	r5, #12
 802a1d6:	bf38      	it	cc
 802a1d8:	250c      	movcc	r5, #12
 802a1da:	2d00      	cmp	r5, #0
 802a1dc:	4606      	mov	r6, r0
 802a1de:	db01      	blt.n	802a1e4 <_malloc_r+0x1c>
 802a1e0:	42a9      	cmp	r1, r5
 802a1e2:	d904      	bls.n	802a1ee <_malloc_r+0x26>
 802a1e4:	230c      	movs	r3, #12
 802a1e6:	6033      	str	r3, [r6, #0]
 802a1e8:	2000      	movs	r0, #0
 802a1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a1ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802a2c4 <_malloc_r+0xfc>
 802a1f2:	f000 f869 	bl	802a2c8 <__malloc_lock>
 802a1f6:	f8d8 3000 	ldr.w	r3, [r8]
 802a1fa:	461c      	mov	r4, r3
 802a1fc:	bb44      	cbnz	r4, 802a250 <_malloc_r+0x88>
 802a1fe:	4629      	mov	r1, r5
 802a200:	4630      	mov	r0, r6
 802a202:	f7ff ffbf 	bl	802a184 <sbrk_aligned>
 802a206:	1c43      	adds	r3, r0, #1
 802a208:	4604      	mov	r4, r0
 802a20a:	d158      	bne.n	802a2be <_malloc_r+0xf6>
 802a20c:	f8d8 4000 	ldr.w	r4, [r8]
 802a210:	4627      	mov	r7, r4
 802a212:	2f00      	cmp	r7, #0
 802a214:	d143      	bne.n	802a29e <_malloc_r+0xd6>
 802a216:	2c00      	cmp	r4, #0
 802a218:	d04b      	beq.n	802a2b2 <_malloc_r+0xea>
 802a21a:	6823      	ldr	r3, [r4, #0]
 802a21c:	4639      	mov	r1, r7
 802a21e:	4630      	mov	r0, r6
 802a220:	eb04 0903 	add.w	r9, r4, r3
 802a224:	f000 fb5c 	bl	802a8e0 <_sbrk_r>
 802a228:	4581      	cmp	r9, r0
 802a22a:	d142      	bne.n	802a2b2 <_malloc_r+0xea>
 802a22c:	6821      	ldr	r1, [r4, #0]
 802a22e:	1a6d      	subs	r5, r5, r1
 802a230:	4629      	mov	r1, r5
 802a232:	4630      	mov	r0, r6
 802a234:	f7ff ffa6 	bl	802a184 <sbrk_aligned>
 802a238:	3001      	adds	r0, #1
 802a23a:	d03a      	beq.n	802a2b2 <_malloc_r+0xea>
 802a23c:	6823      	ldr	r3, [r4, #0]
 802a23e:	442b      	add	r3, r5
 802a240:	6023      	str	r3, [r4, #0]
 802a242:	f8d8 3000 	ldr.w	r3, [r8]
 802a246:	685a      	ldr	r2, [r3, #4]
 802a248:	bb62      	cbnz	r2, 802a2a4 <_malloc_r+0xdc>
 802a24a:	f8c8 7000 	str.w	r7, [r8]
 802a24e:	e00f      	b.n	802a270 <_malloc_r+0xa8>
 802a250:	6822      	ldr	r2, [r4, #0]
 802a252:	1b52      	subs	r2, r2, r5
 802a254:	d420      	bmi.n	802a298 <_malloc_r+0xd0>
 802a256:	2a0b      	cmp	r2, #11
 802a258:	d917      	bls.n	802a28a <_malloc_r+0xc2>
 802a25a:	1961      	adds	r1, r4, r5
 802a25c:	42a3      	cmp	r3, r4
 802a25e:	6025      	str	r5, [r4, #0]
 802a260:	bf18      	it	ne
 802a262:	6059      	strne	r1, [r3, #4]
 802a264:	6863      	ldr	r3, [r4, #4]
 802a266:	bf08      	it	eq
 802a268:	f8c8 1000 	streq.w	r1, [r8]
 802a26c:	5162      	str	r2, [r4, r5]
 802a26e:	604b      	str	r3, [r1, #4]
 802a270:	4630      	mov	r0, r6
 802a272:	f000 f82f 	bl	802a2d4 <__malloc_unlock>
 802a276:	f104 000b 	add.w	r0, r4, #11
 802a27a:	1d23      	adds	r3, r4, #4
 802a27c:	f020 0007 	bic.w	r0, r0, #7
 802a280:	1ac2      	subs	r2, r0, r3
 802a282:	bf1c      	itt	ne
 802a284:	1a1b      	subne	r3, r3, r0
 802a286:	50a3      	strne	r3, [r4, r2]
 802a288:	e7af      	b.n	802a1ea <_malloc_r+0x22>
 802a28a:	6862      	ldr	r2, [r4, #4]
 802a28c:	42a3      	cmp	r3, r4
 802a28e:	bf0c      	ite	eq
 802a290:	f8c8 2000 	streq.w	r2, [r8]
 802a294:	605a      	strne	r2, [r3, #4]
 802a296:	e7eb      	b.n	802a270 <_malloc_r+0xa8>
 802a298:	4623      	mov	r3, r4
 802a29a:	6864      	ldr	r4, [r4, #4]
 802a29c:	e7ae      	b.n	802a1fc <_malloc_r+0x34>
 802a29e:	463c      	mov	r4, r7
 802a2a0:	687f      	ldr	r7, [r7, #4]
 802a2a2:	e7b6      	b.n	802a212 <_malloc_r+0x4a>
 802a2a4:	461a      	mov	r2, r3
 802a2a6:	685b      	ldr	r3, [r3, #4]
 802a2a8:	42a3      	cmp	r3, r4
 802a2aa:	d1fb      	bne.n	802a2a4 <_malloc_r+0xdc>
 802a2ac:	2300      	movs	r3, #0
 802a2ae:	6053      	str	r3, [r2, #4]
 802a2b0:	e7de      	b.n	802a270 <_malloc_r+0xa8>
 802a2b2:	230c      	movs	r3, #12
 802a2b4:	6033      	str	r3, [r6, #0]
 802a2b6:	4630      	mov	r0, r6
 802a2b8:	f000 f80c 	bl	802a2d4 <__malloc_unlock>
 802a2bc:	e794      	b.n	802a1e8 <_malloc_r+0x20>
 802a2be:	6005      	str	r5, [r0, #0]
 802a2c0:	e7d6      	b.n	802a270 <_malloc_r+0xa8>
 802a2c2:	bf00      	nop
 802a2c4:	240005d4 	.word	0x240005d4

0802a2c8 <__malloc_lock>:
 802a2c8:	4801      	ldr	r0, [pc, #4]	@ (802a2d0 <__malloc_lock+0x8>)
 802a2ca:	f7ff befb 	b.w	802a0c4 <__retarget_lock_acquire_recursive>
 802a2ce:	bf00      	nop
 802a2d0:	240005cc 	.word	0x240005cc

0802a2d4 <__malloc_unlock>:
 802a2d4:	4801      	ldr	r0, [pc, #4]	@ (802a2dc <__malloc_unlock+0x8>)
 802a2d6:	f7ff bef6 	b.w	802a0c6 <__retarget_lock_release_recursive>
 802a2da:	bf00      	nop
 802a2dc:	240005cc 	.word	0x240005cc

0802a2e0 <__ssputs_r>:
 802a2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a2e4:	688e      	ldr	r6, [r1, #8]
 802a2e6:	461f      	mov	r7, r3
 802a2e8:	42be      	cmp	r6, r7
 802a2ea:	680b      	ldr	r3, [r1, #0]
 802a2ec:	4682      	mov	sl, r0
 802a2ee:	460c      	mov	r4, r1
 802a2f0:	4690      	mov	r8, r2
 802a2f2:	d82d      	bhi.n	802a350 <__ssputs_r+0x70>
 802a2f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802a2f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802a2fc:	d026      	beq.n	802a34c <__ssputs_r+0x6c>
 802a2fe:	6965      	ldr	r5, [r4, #20]
 802a300:	6909      	ldr	r1, [r1, #16]
 802a302:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802a306:	eba3 0901 	sub.w	r9, r3, r1
 802a30a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802a30e:	1c7b      	adds	r3, r7, #1
 802a310:	444b      	add	r3, r9
 802a312:	106d      	asrs	r5, r5, #1
 802a314:	429d      	cmp	r5, r3
 802a316:	bf38      	it	cc
 802a318:	461d      	movcc	r5, r3
 802a31a:	0553      	lsls	r3, r2, #21
 802a31c:	d527      	bpl.n	802a36e <__ssputs_r+0x8e>
 802a31e:	4629      	mov	r1, r5
 802a320:	f7ff ff52 	bl	802a1c8 <_malloc_r>
 802a324:	4606      	mov	r6, r0
 802a326:	b360      	cbz	r0, 802a382 <__ssputs_r+0xa2>
 802a328:	6921      	ldr	r1, [r4, #16]
 802a32a:	464a      	mov	r2, r9
 802a32c:	f7ff fed1 	bl	802a0d2 <memcpy>
 802a330:	89a3      	ldrh	r3, [r4, #12]
 802a332:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802a336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a33a:	81a3      	strh	r3, [r4, #12]
 802a33c:	6126      	str	r6, [r4, #16]
 802a33e:	6165      	str	r5, [r4, #20]
 802a340:	444e      	add	r6, r9
 802a342:	eba5 0509 	sub.w	r5, r5, r9
 802a346:	6026      	str	r6, [r4, #0]
 802a348:	60a5      	str	r5, [r4, #8]
 802a34a:	463e      	mov	r6, r7
 802a34c:	42be      	cmp	r6, r7
 802a34e:	d900      	bls.n	802a352 <__ssputs_r+0x72>
 802a350:	463e      	mov	r6, r7
 802a352:	6820      	ldr	r0, [r4, #0]
 802a354:	4632      	mov	r2, r6
 802a356:	4641      	mov	r1, r8
 802a358:	f000 faa8 	bl	802a8ac <memmove>
 802a35c:	68a3      	ldr	r3, [r4, #8]
 802a35e:	1b9b      	subs	r3, r3, r6
 802a360:	60a3      	str	r3, [r4, #8]
 802a362:	6823      	ldr	r3, [r4, #0]
 802a364:	4433      	add	r3, r6
 802a366:	6023      	str	r3, [r4, #0]
 802a368:	2000      	movs	r0, #0
 802a36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a36e:	462a      	mov	r2, r5
 802a370:	f000 fac6 	bl	802a900 <_realloc_r>
 802a374:	4606      	mov	r6, r0
 802a376:	2800      	cmp	r0, #0
 802a378:	d1e0      	bne.n	802a33c <__ssputs_r+0x5c>
 802a37a:	6921      	ldr	r1, [r4, #16]
 802a37c:	4650      	mov	r0, sl
 802a37e:	f7ff feb7 	bl	802a0f0 <_free_r>
 802a382:	230c      	movs	r3, #12
 802a384:	f8ca 3000 	str.w	r3, [sl]
 802a388:	89a3      	ldrh	r3, [r4, #12]
 802a38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a38e:	81a3      	strh	r3, [r4, #12]
 802a390:	f04f 30ff 	mov.w	r0, #4294967295
 802a394:	e7e9      	b.n	802a36a <__ssputs_r+0x8a>
	...

0802a398 <_svfiprintf_r>:
 802a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a39c:	4698      	mov	r8, r3
 802a39e:	898b      	ldrh	r3, [r1, #12]
 802a3a0:	061b      	lsls	r3, r3, #24
 802a3a2:	b09d      	sub	sp, #116	@ 0x74
 802a3a4:	4607      	mov	r7, r0
 802a3a6:	460d      	mov	r5, r1
 802a3a8:	4614      	mov	r4, r2
 802a3aa:	d510      	bpl.n	802a3ce <_svfiprintf_r+0x36>
 802a3ac:	690b      	ldr	r3, [r1, #16]
 802a3ae:	b973      	cbnz	r3, 802a3ce <_svfiprintf_r+0x36>
 802a3b0:	2140      	movs	r1, #64	@ 0x40
 802a3b2:	f7ff ff09 	bl	802a1c8 <_malloc_r>
 802a3b6:	6028      	str	r0, [r5, #0]
 802a3b8:	6128      	str	r0, [r5, #16]
 802a3ba:	b930      	cbnz	r0, 802a3ca <_svfiprintf_r+0x32>
 802a3bc:	230c      	movs	r3, #12
 802a3be:	603b      	str	r3, [r7, #0]
 802a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 802a3c4:	b01d      	add	sp, #116	@ 0x74
 802a3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a3ca:	2340      	movs	r3, #64	@ 0x40
 802a3cc:	616b      	str	r3, [r5, #20]
 802a3ce:	2300      	movs	r3, #0
 802a3d0:	9309      	str	r3, [sp, #36]	@ 0x24
 802a3d2:	2320      	movs	r3, #32
 802a3d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802a3d8:	f8cd 800c 	str.w	r8, [sp, #12]
 802a3dc:	2330      	movs	r3, #48	@ 0x30
 802a3de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802a57c <_svfiprintf_r+0x1e4>
 802a3e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802a3e6:	f04f 0901 	mov.w	r9, #1
 802a3ea:	4623      	mov	r3, r4
 802a3ec:	469a      	mov	sl, r3
 802a3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a3f2:	b10a      	cbz	r2, 802a3f8 <_svfiprintf_r+0x60>
 802a3f4:	2a25      	cmp	r2, #37	@ 0x25
 802a3f6:	d1f9      	bne.n	802a3ec <_svfiprintf_r+0x54>
 802a3f8:	ebba 0b04 	subs.w	fp, sl, r4
 802a3fc:	d00b      	beq.n	802a416 <_svfiprintf_r+0x7e>
 802a3fe:	465b      	mov	r3, fp
 802a400:	4622      	mov	r2, r4
 802a402:	4629      	mov	r1, r5
 802a404:	4638      	mov	r0, r7
 802a406:	f7ff ff6b 	bl	802a2e0 <__ssputs_r>
 802a40a:	3001      	adds	r0, #1
 802a40c:	f000 80a7 	beq.w	802a55e <_svfiprintf_r+0x1c6>
 802a410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a412:	445a      	add	r2, fp
 802a414:	9209      	str	r2, [sp, #36]	@ 0x24
 802a416:	f89a 3000 	ldrb.w	r3, [sl]
 802a41a:	2b00      	cmp	r3, #0
 802a41c:	f000 809f 	beq.w	802a55e <_svfiprintf_r+0x1c6>
 802a420:	2300      	movs	r3, #0
 802a422:	f04f 32ff 	mov.w	r2, #4294967295
 802a426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a42a:	f10a 0a01 	add.w	sl, sl, #1
 802a42e:	9304      	str	r3, [sp, #16]
 802a430:	9307      	str	r3, [sp, #28]
 802a432:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802a436:	931a      	str	r3, [sp, #104]	@ 0x68
 802a438:	4654      	mov	r4, sl
 802a43a:	2205      	movs	r2, #5
 802a43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a440:	484e      	ldr	r0, [pc, #312]	@ (802a57c <_svfiprintf_r+0x1e4>)
 802a442:	f7f8 fc65 	bl	8022d10 <memchr>
 802a446:	9a04      	ldr	r2, [sp, #16]
 802a448:	b9d8      	cbnz	r0, 802a482 <_svfiprintf_r+0xea>
 802a44a:	06d0      	lsls	r0, r2, #27
 802a44c:	bf44      	itt	mi
 802a44e:	2320      	movmi	r3, #32
 802a450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802a454:	0711      	lsls	r1, r2, #28
 802a456:	bf44      	itt	mi
 802a458:	232b      	movmi	r3, #43	@ 0x2b
 802a45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802a45e:	f89a 3000 	ldrb.w	r3, [sl]
 802a462:	2b2a      	cmp	r3, #42	@ 0x2a
 802a464:	d015      	beq.n	802a492 <_svfiprintf_r+0xfa>
 802a466:	9a07      	ldr	r2, [sp, #28]
 802a468:	4654      	mov	r4, sl
 802a46a:	2000      	movs	r0, #0
 802a46c:	f04f 0c0a 	mov.w	ip, #10
 802a470:	4621      	mov	r1, r4
 802a472:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a476:	3b30      	subs	r3, #48	@ 0x30
 802a478:	2b09      	cmp	r3, #9
 802a47a:	d94b      	bls.n	802a514 <_svfiprintf_r+0x17c>
 802a47c:	b1b0      	cbz	r0, 802a4ac <_svfiprintf_r+0x114>
 802a47e:	9207      	str	r2, [sp, #28]
 802a480:	e014      	b.n	802a4ac <_svfiprintf_r+0x114>
 802a482:	eba0 0308 	sub.w	r3, r0, r8
 802a486:	fa09 f303 	lsl.w	r3, r9, r3
 802a48a:	4313      	orrs	r3, r2
 802a48c:	9304      	str	r3, [sp, #16]
 802a48e:	46a2      	mov	sl, r4
 802a490:	e7d2      	b.n	802a438 <_svfiprintf_r+0xa0>
 802a492:	9b03      	ldr	r3, [sp, #12]
 802a494:	1d19      	adds	r1, r3, #4
 802a496:	681b      	ldr	r3, [r3, #0]
 802a498:	9103      	str	r1, [sp, #12]
 802a49a:	2b00      	cmp	r3, #0
 802a49c:	bfbb      	ittet	lt
 802a49e:	425b      	neglt	r3, r3
 802a4a0:	f042 0202 	orrlt.w	r2, r2, #2
 802a4a4:	9307      	strge	r3, [sp, #28]
 802a4a6:	9307      	strlt	r3, [sp, #28]
 802a4a8:	bfb8      	it	lt
 802a4aa:	9204      	strlt	r2, [sp, #16]
 802a4ac:	7823      	ldrb	r3, [r4, #0]
 802a4ae:	2b2e      	cmp	r3, #46	@ 0x2e
 802a4b0:	d10a      	bne.n	802a4c8 <_svfiprintf_r+0x130>
 802a4b2:	7863      	ldrb	r3, [r4, #1]
 802a4b4:	2b2a      	cmp	r3, #42	@ 0x2a
 802a4b6:	d132      	bne.n	802a51e <_svfiprintf_r+0x186>
 802a4b8:	9b03      	ldr	r3, [sp, #12]
 802a4ba:	1d1a      	adds	r2, r3, #4
 802a4bc:	681b      	ldr	r3, [r3, #0]
 802a4be:	9203      	str	r2, [sp, #12]
 802a4c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802a4c4:	3402      	adds	r4, #2
 802a4c6:	9305      	str	r3, [sp, #20]
 802a4c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802a58c <_svfiprintf_r+0x1f4>
 802a4cc:	7821      	ldrb	r1, [r4, #0]
 802a4ce:	2203      	movs	r2, #3
 802a4d0:	4650      	mov	r0, sl
 802a4d2:	f7f8 fc1d 	bl	8022d10 <memchr>
 802a4d6:	b138      	cbz	r0, 802a4e8 <_svfiprintf_r+0x150>
 802a4d8:	9b04      	ldr	r3, [sp, #16]
 802a4da:	eba0 000a 	sub.w	r0, r0, sl
 802a4de:	2240      	movs	r2, #64	@ 0x40
 802a4e0:	4082      	lsls	r2, r0
 802a4e2:	4313      	orrs	r3, r2
 802a4e4:	3401      	adds	r4, #1
 802a4e6:	9304      	str	r3, [sp, #16]
 802a4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a4ec:	4824      	ldr	r0, [pc, #144]	@ (802a580 <_svfiprintf_r+0x1e8>)
 802a4ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802a4f2:	2206      	movs	r2, #6
 802a4f4:	f7f8 fc0c 	bl	8022d10 <memchr>
 802a4f8:	2800      	cmp	r0, #0
 802a4fa:	d036      	beq.n	802a56a <_svfiprintf_r+0x1d2>
 802a4fc:	4b21      	ldr	r3, [pc, #132]	@ (802a584 <_svfiprintf_r+0x1ec>)
 802a4fe:	bb1b      	cbnz	r3, 802a548 <_svfiprintf_r+0x1b0>
 802a500:	9b03      	ldr	r3, [sp, #12]
 802a502:	3307      	adds	r3, #7
 802a504:	f023 0307 	bic.w	r3, r3, #7
 802a508:	3308      	adds	r3, #8
 802a50a:	9303      	str	r3, [sp, #12]
 802a50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a50e:	4433      	add	r3, r6
 802a510:	9309      	str	r3, [sp, #36]	@ 0x24
 802a512:	e76a      	b.n	802a3ea <_svfiprintf_r+0x52>
 802a514:	fb0c 3202 	mla	r2, ip, r2, r3
 802a518:	460c      	mov	r4, r1
 802a51a:	2001      	movs	r0, #1
 802a51c:	e7a8      	b.n	802a470 <_svfiprintf_r+0xd8>
 802a51e:	2300      	movs	r3, #0
 802a520:	3401      	adds	r4, #1
 802a522:	9305      	str	r3, [sp, #20]
 802a524:	4619      	mov	r1, r3
 802a526:	f04f 0c0a 	mov.w	ip, #10
 802a52a:	4620      	mov	r0, r4
 802a52c:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a530:	3a30      	subs	r2, #48	@ 0x30
 802a532:	2a09      	cmp	r2, #9
 802a534:	d903      	bls.n	802a53e <_svfiprintf_r+0x1a6>
 802a536:	2b00      	cmp	r3, #0
 802a538:	d0c6      	beq.n	802a4c8 <_svfiprintf_r+0x130>
 802a53a:	9105      	str	r1, [sp, #20]
 802a53c:	e7c4      	b.n	802a4c8 <_svfiprintf_r+0x130>
 802a53e:	fb0c 2101 	mla	r1, ip, r1, r2
 802a542:	4604      	mov	r4, r0
 802a544:	2301      	movs	r3, #1
 802a546:	e7f0      	b.n	802a52a <_svfiprintf_r+0x192>
 802a548:	ab03      	add	r3, sp, #12
 802a54a:	9300      	str	r3, [sp, #0]
 802a54c:	462a      	mov	r2, r5
 802a54e:	4b0e      	ldr	r3, [pc, #56]	@ (802a588 <_svfiprintf_r+0x1f0>)
 802a550:	a904      	add	r1, sp, #16
 802a552:	4638      	mov	r0, r7
 802a554:	f3af 8000 	nop.w
 802a558:	1c42      	adds	r2, r0, #1
 802a55a:	4606      	mov	r6, r0
 802a55c:	d1d6      	bne.n	802a50c <_svfiprintf_r+0x174>
 802a55e:	89ab      	ldrh	r3, [r5, #12]
 802a560:	065b      	lsls	r3, r3, #25
 802a562:	f53f af2d 	bmi.w	802a3c0 <_svfiprintf_r+0x28>
 802a566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a568:	e72c      	b.n	802a3c4 <_svfiprintf_r+0x2c>
 802a56a:	ab03      	add	r3, sp, #12
 802a56c:	9300      	str	r3, [sp, #0]
 802a56e:	462a      	mov	r2, r5
 802a570:	4b05      	ldr	r3, [pc, #20]	@ (802a588 <_svfiprintf_r+0x1f0>)
 802a572:	a904      	add	r1, sp, #16
 802a574:	4638      	mov	r0, r7
 802a576:	f000 f879 	bl	802a66c <_printf_i>
 802a57a:	e7ed      	b.n	802a558 <_svfiprintf_r+0x1c0>
 802a57c:	0802ae8c 	.word	0x0802ae8c
 802a580:	0802ae96 	.word	0x0802ae96
 802a584:	00000000 	.word	0x00000000
 802a588:	0802a2e1 	.word	0x0802a2e1
 802a58c:	0802ae92 	.word	0x0802ae92

0802a590 <_printf_common>:
 802a590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a594:	4616      	mov	r6, r2
 802a596:	4698      	mov	r8, r3
 802a598:	688a      	ldr	r2, [r1, #8]
 802a59a:	690b      	ldr	r3, [r1, #16]
 802a59c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802a5a0:	4293      	cmp	r3, r2
 802a5a2:	bfb8      	it	lt
 802a5a4:	4613      	movlt	r3, r2
 802a5a6:	6033      	str	r3, [r6, #0]
 802a5a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802a5ac:	4607      	mov	r7, r0
 802a5ae:	460c      	mov	r4, r1
 802a5b0:	b10a      	cbz	r2, 802a5b6 <_printf_common+0x26>
 802a5b2:	3301      	adds	r3, #1
 802a5b4:	6033      	str	r3, [r6, #0]
 802a5b6:	6823      	ldr	r3, [r4, #0]
 802a5b8:	0699      	lsls	r1, r3, #26
 802a5ba:	bf42      	ittt	mi
 802a5bc:	6833      	ldrmi	r3, [r6, #0]
 802a5be:	3302      	addmi	r3, #2
 802a5c0:	6033      	strmi	r3, [r6, #0]
 802a5c2:	6825      	ldr	r5, [r4, #0]
 802a5c4:	f015 0506 	ands.w	r5, r5, #6
 802a5c8:	d106      	bne.n	802a5d8 <_printf_common+0x48>
 802a5ca:	f104 0a19 	add.w	sl, r4, #25
 802a5ce:	68e3      	ldr	r3, [r4, #12]
 802a5d0:	6832      	ldr	r2, [r6, #0]
 802a5d2:	1a9b      	subs	r3, r3, r2
 802a5d4:	42ab      	cmp	r3, r5
 802a5d6:	dc26      	bgt.n	802a626 <_printf_common+0x96>
 802a5d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802a5dc:	6822      	ldr	r2, [r4, #0]
 802a5de:	3b00      	subs	r3, #0
 802a5e0:	bf18      	it	ne
 802a5e2:	2301      	movne	r3, #1
 802a5e4:	0692      	lsls	r2, r2, #26
 802a5e6:	d42b      	bmi.n	802a640 <_printf_common+0xb0>
 802a5e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802a5ec:	4641      	mov	r1, r8
 802a5ee:	4638      	mov	r0, r7
 802a5f0:	47c8      	blx	r9
 802a5f2:	3001      	adds	r0, #1
 802a5f4:	d01e      	beq.n	802a634 <_printf_common+0xa4>
 802a5f6:	6823      	ldr	r3, [r4, #0]
 802a5f8:	6922      	ldr	r2, [r4, #16]
 802a5fa:	f003 0306 	and.w	r3, r3, #6
 802a5fe:	2b04      	cmp	r3, #4
 802a600:	bf02      	ittt	eq
 802a602:	68e5      	ldreq	r5, [r4, #12]
 802a604:	6833      	ldreq	r3, [r6, #0]
 802a606:	1aed      	subeq	r5, r5, r3
 802a608:	68a3      	ldr	r3, [r4, #8]
 802a60a:	bf0c      	ite	eq
 802a60c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a610:	2500      	movne	r5, #0
 802a612:	4293      	cmp	r3, r2
 802a614:	bfc4      	itt	gt
 802a616:	1a9b      	subgt	r3, r3, r2
 802a618:	18ed      	addgt	r5, r5, r3
 802a61a:	2600      	movs	r6, #0
 802a61c:	341a      	adds	r4, #26
 802a61e:	42b5      	cmp	r5, r6
 802a620:	d11a      	bne.n	802a658 <_printf_common+0xc8>
 802a622:	2000      	movs	r0, #0
 802a624:	e008      	b.n	802a638 <_printf_common+0xa8>
 802a626:	2301      	movs	r3, #1
 802a628:	4652      	mov	r2, sl
 802a62a:	4641      	mov	r1, r8
 802a62c:	4638      	mov	r0, r7
 802a62e:	47c8      	blx	r9
 802a630:	3001      	adds	r0, #1
 802a632:	d103      	bne.n	802a63c <_printf_common+0xac>
 802a634:	f04f 30ff 	mov.w	r0, #4294967295
 802a638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a63c:	3501      	adds	r5, #1
 802a63e:	e7c6      	b.n	802a5ce <_printf_common+0x3e>
 802a640:	18e1      	adds	r1, r4, r3
 802a642:	1c5a      	adds	r2, r3, #1
 802a644:	2030      	movs	r0, #48	@ 0x30
 802a646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802a64a:	4422      	add	r2, r4
 802a64c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802a650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802a654:	3302      	adds	r3, #2
 802a656:	e7c7      	b.n	802a5e8 <_printf_common+0x58>
 802a658:	2301      	movs	r3, #1
 802a65a:	4622      	mov	r2, r4
 802a65c:	4641      	mov	r1, r8
 802a65e:	4638      	mov	r0, r7
 802a660:	47c8      	blx	r9
 802a662:	3001      	adds	r0, #1
 802a664:	d0e6      	beq.n	802a634 <_printf_common+0xa4>
 802a666:	3601      	adds	r6, #1
 802a668:	e7d9      	b.n	802a61e <_printf_common+0x8e>
	...

0802a66c <_printf_i>:
 802a66c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a670:	7e0f      	ldrb	r7, [r1, #24]
 802a672:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802a674:	2f78      	cmp	r7, #120	@ 0x78
 802a676:	4691      	mov	r9, r2
 802a678:	4680      	mov	r8, r0
 802a67a:	460c      	mov	r4, r1
 802a67c:	469a      	mov	sl, r3
 802a67e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802a682:	d807      	bhi.n	802a694 <_printf_i+0x28>
 802a684:	2f62      	cmp	r7, #98	@ 0x62
 802a686:	d80a      	bhi.n	802a69e <_printf_i+0x32>
 802a688:	2f00      	cmp	r7, #0
 802a68a:	f000 80d2 	beq.w	802a832 <_printf_i+0x1c6>
 802a68e:	2f58      	cmp	r7, #88	@ 0x58
 802a690:	f000 80b9 	beq.w	802a806 <_printf_i+0x19a>
 802a694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802a698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802a69c:	e03a      	b.n	802a714 <_printf_i+0xa8>
 802a69e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802a6a2:	2b15      	cmp	r3, #21
 802a6a4:	d8f6      	bhi.n	802a694 <_printf_i+0x28>
 802a6a6:	a101      	add	r1, pc, #4	@ (adr r1, 802a6ac <_printf_i+0x40>)
 802a6a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802a6ac:	0802a705 	.word	0x0802a705
 802a6b0:	0802a719 	.word	0x0802a719
 802a6b4:	0802a695 	.word	0x0802a695
 802a6b8:	0802a695 	.word	0x0802a695
 802a6bc:	0802a695 	.word	0x0802a695
 802a6c0:	0802a695 	.word	0x0802a695
 802a6c4:	0802a719 	.word	0x0802a719
 802a6c8:	0802a695 	.word	0x0802a695
 802a6cc:	0802a695 	.word	0x0802a695
 802a6d0:	0802a695 	.word	0x0802a695
 802a6d4:	0802a695 	.word	0x0802a695
 802a6d8:	0802a819 	.word	0x0802a819
 802a6dc:	0802a743 	.word	0x0802a743
 802a6e0:	0802a7d3 	.word	0x0802a7d3
 802a6e4:	0802a695 	.word	0x0802a695
 802a6e8:	0802a695 	.word	0x0802a695
 802a6ec:	0802a83b 	.word	0x0802a83b
 802a6f0:	0802a695 	.word	0x0802a695
 802a6f4:	0802a743 	.word	0x0802a743
 802a6f8:	0802a695 	.word	0x0802a695
 802a6fc:	0802a695 	.word	0x0802a695
 802a700:	0802a7db 	.word	0x0802a7db
 802a704:	6833      	ldr	r3, [r6, #0]
 802a706:	1d1a      	adds	r2, r3, #4
 802a708:	681b      	ldr	r3, [r3, #0]
 802a70a:	6032      	str	r2, [r6, #0]
 802a70c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802a710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802a714:	2301      	movs	r3, #1
 802a716:	e09d      	b.n	802a854 <_printf_i+0x1e8>
 802a718:	6833      	ldr	r3, [r6, #0]
 802a71a:	6820      	ldr	r0, [r4, #0]
 802a71c:	1d19      	adds	r1, r3, #4
 802a71e:	6031      	str	r1, [r6, #0]
 802a720:	0606      	lsls	r6, r0, #24
 802a722:	d501      	bpl.n	802a728 <_printf_i+0xbc>
 802a724:	681d      	ldr	r5, [r3, #0]
 802a726:	e003      	b.n	802a730 <_printf_i+0xc4>
 802a728:	0645      	lsls	r5, r0, #25
 802a72a:	d5fb      	bpl.n	802a724 <_printf_i+0xb8>
 802a72c:	f9b3 5000 	ldrsh.w	r5, [r3]
 802a730:	2d00      	cmp	r5, #0
 802a732:	da03      	bge.n	802a73c <_printf_i+0xd0>
 802a734:	232d      	movs	r3, #45	@ 0x2d
 802a736:	426d      	negs	r5, r5
 802a738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a73c:	4859      	ldr	r0, [pc, #356]	@ (802a8a4 <_printf_i+0x238>)
 802a73e:	230a      	movs	r3, #10
 802a740:	e011      	b.n	802a766 <_printf_i+0xfa>
 802a742:	6821      	ldr	r1, [r4, #0]
 802a744:	6833      	ldr	r3, [r6, #0]
 802a746:	0608      	lsls	r0, r1, #24
 802a748:	f853 5b04 	ldr.w	r5, [r3], #4
 802a74c:	d402      	bmi.n	802a754 <_printf_i+0xe8>
 802a74e:	0649      	lsls	r1, r1, #25
 802a750:	bf48      	it	mi
 802a752:	b2ad      	uxthmi	r5, r5
 802a754:	2f6f      	cmp	r7, #111	@ 0x6f
 802a756:	4853      	ldr	r0, [pc, #332]	@ (802a8a4 <_printf_i+0x238>)
 802a758:	6033      	str	r3, [r6, #0]
 802a75a:	bf14      	ite	ne
 802a75c:	230a      	movne	r3, #10
 802a75e:	2308      	moveq	r3, #8
 802a760:	2100      	movs	r1, #0
 802a762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802a766:	6866      	ldr	r6, [r4, #4]
 802a768:	60a6      	str	r6, [r4, #8]
 802a76a:	2e00      	cmp	r6, #0
 802a76c:	bfa2      	ittt	ge
 802a76e:	6821      	ldrge	r1, [r4, #0]
 802a770:	f021 0104 	bicge.w	r1, r1, #4
 802a774:	6021      	strge	r1, [r4, #0]
 802a776:	b90d      	cbnz	r5, 802a77c <_printf_i+0x110>
 802a778:	2e00      	cmp	r6, #0
 802a77a:	d04b      	beq.n	802a814 <_printf_i+0x1a8>
 802a77c:	4616      	mov	r6, r2
 802a77e:	fbb5 f1f3 	udiv	r1, r5, r3
 802a782:	fb03 5711 	mls	r7, r3, r1, r5
 802a786:	5dc7      	ldrb	r7, [r0, r7]
 802a788:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802a78c:	462f      	mov	r7, r5
 802a78e:	42bb      	cmp	r3, r7
 802a790:	460d      	mov	r5, r1
 802a792:	d9f4      	bls.n	802a77e <_printf_i+0x112>
 802a794:	2b08      	cmp	r3, #8
 802a796:	d10b      	bne.n	802a7b0 <_printf_i+0x144>
 802a798:	6823      	ldr	r3, [r4, #0]
 802a79a:	07df      	lsls	r7, r3, #31
 802a79c:	d508      	bpl.n	802a7b0 <_printf_i+0x144>
 802a79e:	6923      	ldr	r3, [r4, #16]
 802a7a0:	6861      	ldr	r1, [r4, #4]
 802a7a2:	4299      	cmp	r1, r3
 802a7a4:	bfde      	ittt	le
 802a7a6:	2330      	movle	r3, #48	@ 0x30
 802a7a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 802a7ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 802a7b0:	1b92      	subs	r2, r2, r6
 802a7b2:	6122      	str	r2, [r4, #16]
 802a7b4:	f8cd a000 	str.w	sl, [sp]
 802a7b8:	464b      	mov	r3, r9
 802a7ba:	aa03      	add	r2, sp, #12
 802a7bc:	4621      	mov	r1, r4
 802a7be:	4640      	mov	r0, r8
 802a7c0:	f7ff fee6 	bl	802a590 <_printf_common>
 802a7c4:	3001      	adds	r0, #1
 802a7c6:	d14a      	bne.n	802a85e <_printf_i+0x1f2>
 802a7c8:	f04f 30ff 	mov.w	r0, #4294967295
 802a7cc:	b004      	add	sp, #16
 802a7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a7d2:	6823      	ldr	r3, [r4, #0]
 802a7d4:	f043 0320 	orr.w	r3, r3, #32
 802a7d8:	6023      	str	r3, [r4, #0]
 802a7da:	4833      	ldr	r0, [pc, #204]	@ (802a8a8 <_printf_i+0x23c>)
 802a7dc:	2778      	movs	r7, #120	@ 0x78
 802a7de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802a7e2:	6823      	ldr	r3, [r4, #0]
 802a7e4:	6831      	ldr	r1, [r6, #0]
 802a7e6:	061f      	lsls	r7, r3, #24
 802a7e8:	f851 5b04 	ldr.w	r5, [r1], #4
 802a7ec:	d402      	bmi.n	802a7f4 <_printf_i+0x188>
 802a7ee:	065f      	lsls	r7, r3, #25
 802a7f0:	bf48      	it	mi
 802a7f2:	b2ad      	uxthmi	r5, r5
 802a7f4:	6031      	str	r1, [r6, #0]
 802a7f6:	07d9      	lsls	r1, r3, #31
 802a7f8:	bf44      	itt	mi
 802a7fa:	f043 0320 	orrmi.w	r3, r3, #32
 802a7fe:	6023      	strmi	r3, [r4, #0]
 802a800:	b11d      	cbz	r5, 802a80a <_printf_i+0x19e>
 802a802:	2310      	movs	r3, #16
 802a804:	e7ac      	b.n	802a760 <_printf_i+0xf4>
 802a806:	4827      	ldr	r0, [pc, #156]	@ (802a8a4 <_printf_i+0x238>)
 802a808:	e7e9      	b.n	802a7de <_printf_i+0x172>
 802a80a:	6823      	ldr	r3, [r4, #0]
 802a80c:	f023 0320 	bic.w	r3, r3, #32
 802a810:	6023      	str	r3, [r4, #0]
 802a812:	e7f6      	b.n	802a802 <_printf_i+0x196>
 802a814:	4616      	mov	r6, r2
 802a816:	e7bd      	b.n	802a794 <_printf_i+0x128>
 802a818:	6833      	ldr	r3, [r6, #0]
 802a81a:	6825      	ldr	r5, [r4, #0]
 802a81c:	6961      	ldr	r1, [r4, #20]
 802a81e:	1d18      	adds	r0, r3, #4
 802a820:	6030      	str	r0, [r6, #0]
 802a822:	062e      	lsls	r6, r5, #24
 802a824:	681b      	ldr	r3, [r3, #0]
 802a826:	d501      	bpl.n	802a82c <_printf_i+0x1c0>
 802a828:	6019      	str	r1, [r3, #0]
 802a82a:	e002      	b.n	802a832 <_printf_i+0x1c6>
 802a82c:	0668      	lsls	r0, r5, #25
 802a82e:	d5fb      	bpl.n	802a828 <_printf_i+0x1bc>
 802a830:	8019      	strh	r1, [r3, #0]
 802a832:	2300      	movs	r3, #0
 802a834:	6123      	str	r3, [r4, #16]
 802a836:	4616      	mov	r6, r2
 802a838:	e7bc      	b.n	802a7b4 <_printf_i+0x148>
 802a83a:	6833      	ldr	r3, [r6, #0]
 802a83c:	1d1a      	adds	r2, r3, #4
 802a83e:	6032      	str	r2, [r6, #0]
 802a840:	681e      	ldr	r6, [r3, #0]
 802a842:	6862      	ldr	r2, [r4, #4]
 802a844:	2100      	movs	r1, #0
 802a846:	4630      	mov	r0, r6
 802a848:	f7f8 fa62 	bl	8022d10 <memchr>
 802a84c:	b108      	cbz	r0, 802a852 <_printf_i+0x1e6>
 802a84e:	1b80      	subs	r0, r0, r6
 802a850:	6060      	str	r0, [r4, #4]
 802a852:	6863      	ldr	r3, [r4, #4]
 802a854:	6123      	str	r3, [r4, #16]
 802a856:	2300      	movs	r3, #0
 802a858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802a85c:	e7aa      	b.n	802a7b4 <_printf_i+0x148>
 802a85e:	6923      	ldr	r3, [r4, #16]
 802a860:	4632      	mov	r2, r6
 802a862:	4649      	mov	r1, r9
 802a864:	4640      	mov	r0, r8
 802a866:	47d0      	blx	sl
 802a868:	3001      	adds	r0, #1
 802a86a:	d0ad      	beq.n	802a7c8 <_printf_i+0x15c>
 802a86c:	6823      	ldr	r3, [r4, #0]
 802a86e:	079b      	lsls	r3, r3, #30
 802a870:	d413      	bmi.n	802a89a <_printf_i+0x22e>
 802a872:	68e0      	ldr	r0, [r4, #12]
 802a874:	9b03      	ldr	r3, [sp, #12]
 802a876:	4298      	cmp	r0, r3
 802a878:	bfb8      	it	lt
 802a87a:	4618      	movlt	r0, r3
 802a87c:	e7a6      	b.n	802a7cc <_printf_i+0x160>
 802a87e:	2301      	movs	r3, #1
 802a880:	4632      	mov	r2, r6
 802a882:	4649      	mov	r1, r9
 802a884:	4640      	mov	r0, r8
 802a886:	47d0      	blx	sl
 802a888:	3001      	adds	r0, #1
 802a88a:	d09d      	beq.n	802a7c8 <_printf_i+0x15c>
 802a88c:	3501      	adds	r5, #1
 802a88e:	68e3      	ldr	r3, [r4, #12]
 802a890:	9903      	ldr	r1, [sp, #12]
 802a892:	1a5b      	subs	r3, r3, r1
 802a894:	42ab      	cmp	r3, r5
 802a896:	dcf2      	bgt.n	802a87e <_printf_i+0x212>
 802a898:	e7eb      	b.n	802a872 <_printf_i+0x206>
 802a89a:	2500      	movs	r5, #0
 802a89c:	f104 0619 	add.w	r6, r4, #25
 802a8a0:	e7f5      	b.n	802a88e <_printf_i+0x222>
 802a8a2:	bf00      	nop
 802a8a4:	0802ae9d 	.word	0x0802ae9d
 802a8a8:	0802aeae 	.word	0x0802aeae

0802a8ac <memmove>:
 802a8ac:	4288      	cmp	r0, r1
 802a8ae:	b510      	push	{r4, lr}
 802a8b0:	eb01 0402 	add.w	r4, r1, r2
 802a8b4:	d902      	bls.n	802a8bc <memmove+0x10>
 802a8b6:	4284      	cmp	r4, r0
 802a8b8:	4623      	mov	r3, r4
 802a8ba:	d807      	bhi.n	802a8cc <memmove+0x20>
 802a8bc:	1e43      	subs	r3, r0, #1
 802a8be:	42a1      	cmp	r1, r4
 802a8c0:	d008      	beq.n	802a8d4 <memmove+0x28>
 802a8c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a8c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a8ca:	e7f8      	b.n	802a8be <memmove+0x12>
 802a8cc:	4402      	add	r2, r0
 802a8ce:	4601      	mov	r1, r0
 802a8d0:	428a      	cmp	r2, r1
 802a8d2:	d100      	bne.n	802a8d6 <memmove+0x2a>
 802a8d4:	bd10      	pop	{r4, pc}
 802a8d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a8da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a8de:	e7f7      	b.n	802a8d0 <memmove+0x24>

0802a8e0 <_sbrk_r>:
 802a8e0:	b538      	push	{r3, r4, r5, lr}
 802a8e2:	4d06      	ldr	r5, [pc, #24]	@ (802a8fc <_sbrk_r+0x1c>)
 802a8e4:	2300      	movs	r3, #0
 802a8e6:	4604      	mov	r4, r0
 802a8e8:	4608      	mov	r0, r1
 802a8ea:	602b      	str	r3, [r5, #0]
 802a8ec:	f7f9 fb84 	bl	8023ff8 <_sbrk>
 802a8f0:	1c43      	adds	r3, r0, #1
 802a8f2:	d102      	bne.n	802a8fa <_sbrk_r+0x1a>
 802a8f4:	682b      	ldr	r3, [r5, #0]
 802a8f6:	b103      	cbz	r3, 802a8fa <_sbrk_r+0x1a>
 802a8f8:	6023      	str	r3, [r4, #0]
 802a8fa:	bd38      	pop	{r3, r4, r5, pc}
 802a8fc:	240005c8 	.word	0x240005c8

0802a900 <_realloc_r>:
 802a900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a904:	4680      	mov	r8, r0
 802a906:	4615      	mov	r5, r2
 802a908:	460c      	mov	r4, r1
 802a90a:	b921      	cbnz	r1, 802a916 <_realloc_r+0x16>
 802a90c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a910:	4611      	mov	r1, r2
 802a912:	f7ff bc59 	b.w	802a1c8 <_malloc_r>
 802a916:	b92a      	cbnz	r2, 802a924 <_realloc_r+0x24>
 802a918:	f7ff fbea 	bl	802a0f0 <_free_r>
 802a91c:	2400      	movs	r4, #0
 802a91e:	4620      	mov	r0, r4
 802a920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a924:	f000 f81a 	bl	802a95c <_malloc_usable_size_r>
 802a928:	4285      	cmp	r5, r0
 802a92a:	4606      	mov	r6, r0
 802a92c:	d802      	bhi.n	802a934 <_realloc_r+0x34>
 802a92e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802a932:	d8f4      	bhi.n	802a91e <_realloc_r+0x1e>
 802a934:	4629      	mov	r1, r5
 802a936:	4640      	mov	r0, r8
 802a938:	f7ff fc46 	bl	802a1c8 <_malloc_r>
 802a93c:	4607      	mov	r7, r0
 802a93e:	2800      	cmp	r0, #0
 802a940:	d0ec      	beq.n	802a91c <_realloc_r+0x1c>
 802a942:	42b5      	cmp	r5, r6
 802a944:	462a      	mov	r2, r5
 802a946:	4621      	mov	r1, r4
 802a948:	bf28      	it	cs
 802a94a:	4632      	movcs	r2, r6
 802a94c:	f7ff fbc1 	bl	802a0d2 <memcpy>
 802a950:	4621      	mov	r1, r4
 802a952:	4640      	mov	r0, r8
 802a954:	f7ff fbcc 	bl	802a0f0 <_free_r>
 802a958:	463c      	mov	r4, r7
 802a95a:	e7e0      	b.n	802a91e <_realloc_r+0x1e>

0802a95c <_malloc_usable_size_r>:
 802a95c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a960:	1f18      	subs	r0, r3, #4
 802a962:	2b00      	cmp	r3, #0
 802a964:	bfbc      	itt	lt
 802a966:	580b      	ldrlt	r3, [r1, r0]
 802a968:	18c0      	addlt	r0, r0, r3
 802a96a:	4770      	bx	lr

0802a96c <_init>:
 802a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a96e:	bf00      	nop
 802a970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a972:	bc08      	pop	{r3}
 802a974:	469e      	mov	lr, r3
 802a976:	4770      	bx	lr

0802a978 <_fini>:
 802a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a97a:	bf00      	nop
 802a97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a97e:	bc08      	pop	{r3}
 802a980:	469e      	mov	lr, r3
 802a982:	4770      	bx	lr
 802a984:	0000      	movs	r0, r0
	...

0802a988 <__Copy_FW_To_Flash_veneer>:
 802a988:	f85f f000 	ldr.w	pc, [pc]	@ 802a98c <__Copy_FW_To_Flash_veneer+0x4>
 802a98c:	00000001 	.word	0x00000001

Disassembly of section .itcm_code:

00000000 <Copy_FW_To_Flash>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;
  float_t fracn1, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
   6:	2300      	movs	r3, #0
   8:	607b      	str	r3, [r7, #4]
   a:	4b16      	ldr	r3, [pc, #88]	@ (64 <__iar_systems$$module+0x63>)
   c:	603b      	str	r3, [r7, #0]
   e:	f000 f837 	bl	80 <__HAL_FLASH_Unlock_veneer>
  12:	4603      	mov	r3, r0
  14:	2b00      	cmp	r3, #0
  16:	d019      	beq.n	4c <__iar_systems$$module+0x4b>
  18:	4813      	ldr	r0, [pc, #76]	@ (68 <__iar_systems$$module+0x67>)
  1a:	f000 f839 	bl	90 <__printmsg_veneer>
  1e:	2301      	movs	r3, #1
  20:	e01b      	b.n	5a <__iar_systems$$module+0x59>
  22:	687a      	ldr	r2, [r7, #4]
  24:	4b11      	ldr	r3, [pc, #68]	@ (6c <__iar_systems$$module+0x6b>)
  26:	4413      	add	r3, r2
  28:	687a      	ldr	r2, [r7, #4]
  2a:	4911      	ldr	r1, [pc, #68]	@ (70 <__iar_systems$$module+0x6f>)
  2c:	440a      	add	r2, r1
  2e:	4619      	mov	r1, r3
  30:	2001      	movs	r0, #1
  32:	f000 f821 	bl	78 <__HAL_FLASH_Program_veneer>
  36:	4603      	mov	r3, r0
  38:	2b00      	cmp	r3, #0
  3a:	d004      	beq.n	46 <__iar_systems$$module+0x45>
  3c:	480d      	ldr	r0, [pc, #52]	@ (74 <__iar_systems$$module+0x73>)
  3e:	f000 f827 	bl	90 <__printmsg_veneer>
  42:	2301      	movs	r3, #1
  44:	e009      	b.n	5a <__iar_systems$$module+0x59>
  46:	687b      	ldr	r3, [r7, #4]
  48:	3320      	adds	r3, #32
  4a:	607b      	str	r3, [r7, #4]
  4c:	687a      	ldr	r2, [r7, #4]
  4e:	683b      	ldr	r3, [r7, #0]
  50:	429a      	cmp	r2, r3
  52:	d3e6      	bcc.n	22 <__iar_systems$$module+0x21>
  54:	f000 f818 	bl	88 <__HAL_FLASH_Lock_veneer>
  58:	4603      	mov	r3, r0
  5a:	4618      	mov	r0, r3
  5c:	3708      	adds	r7, #8
  5e:	46bd      	mov	sp, r7
  60:	bd80      	pop	{r7, pc}
  62:	bf00      	nop
  64:	0003ffff 	.word	0x0003ffff
  68:	0802a990 	.word	0x0802a990
  6c:	080a0000 	.word	0x080a0000
  70:	30000000 	.word	0x30000000
  74:	0802a9b0 	.word	0x0802a9b0

00000078 <__HAL_FLASH_Program_veneer>:
  78:	f85f f000 	ldr.w	pc, [pc]	@ 7c <__HAL_FLASH_Program_veneer+0x4>
  7c:	08025515 	.word	0x08025515

00000080 <__HAL_FLASH_Unlock_veneer>:
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
  80:	f85f f000 	ldr.w	pc, [pc]	@ 84 <__HAL_FLASH_Unlock_veneer+0x4>
  84:	08025639 	.word	0x08025639

00000088 <__HAL_FLASH_Lock_veneer>:
  88:	f85f f000 	ldr.w	pc, [pc]	@ 8c <__HAL_FLASH_Lock_veneer+0x4>
  8c:	080256ad 	.word	0x080256ad

00000090 <__printmsg_veneer>:
  90:	f85f f000 	ldr.w	pc, [pc]	@ 94 <__printmsg_veneer+0x4>
    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
  94:	08023bb9 	.word	0x08023bb9
