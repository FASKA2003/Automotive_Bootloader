
BootManager_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008010  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080082b0  080082b0  000092b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000500  0800845c  0800845c  0000945c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800895c  0800895c  0000a080  2**0
                  CONTENTS
  5 .ARM          00000008  0800895c  0800895c  0000995c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08008964  08008964  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08008964  08008964  00009964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08008968  08008968  00009968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000080  24000000  0800896c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000260  24000080  080089ec  0000a080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  240002e0  080089ec  0000a2e0  2**0
                  ALLOC
 12 .ARM.attributes 00000032  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e31  00000000  00000000  0000a0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f7e  00000000  00000000  0001dee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00020e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0f  00000000  00000000  00021cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003cd73  00000000  00000000  00022807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000182bc  00000000  00000000  0005f57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018086f  00000000  00000000  00077836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001f80a5  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  001f80e8  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00003f64  00000000  00000000  001f810c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  001fc070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008298 	.word	0x08008298

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08008298 	.word	0x08008298

080002e0 <CMOX_CMAC_AESFAST_TABLE>:
 80002e0:	080083b8                                ....

080002e4 <cmox_cmac_aesfast_compute>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	4613      	mov	r3, r2
 80002ec:	460a      	mov	r2, r1
 80002ee:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80002f0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80002f2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80002f4:	4601      	mov	r1, r0
 80002f6:	9403      	str	r4, [sp, #12]
 80002f8:	9502      	str	r5, [sp, #8]
 80002fa:	4803      	ldr	r0, [pc, #12]	@ (8000308 <cmox_cmac_aesfast_compute+0x24>)
 80002fc:	9601      	str	r6, [sp, #4]
 80002fe:	f000 fcc5 	bl	8000c8c <cmox_cmac_compute>
 8000302:	b004      	add	sp, #16
 8000304:	bd70      	pop	{r4, r5, r6, pc}
 8000306:	bf00      	nop
 8000308:	080002e0 	.word	0x080002e0

0800030c <cmox_cmac_aesfast_verify>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	b083      	sub	sp, #12
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	4613      	mov	r3, r2
 8000314:	460a      	mov	r2, r1
 8000316:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8000318:	9d08      	ldr	r5, [sp, #32]
 800031a:	4601      	mov	r1, r0
 800031c:	9402      	str	r4, [sp, #8]
 800031e:	4803      	ldr	r0, [pc, #12]	@ (800032c <cmox_cmac_aesfast_verify+0x20>)
 8000320:	9501      	str	r5, [sp, #4]
 8000322:	f000 fcce 	bl	8000cc2 <cmox_cmac_verify>
 8000326:	b003      	add	sp, #12
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	bf00      	nop
 800032c:	080002e0 	.word	0x080002e0

08000330 <cmox_initialize>:
 8000330:	2800      	cmp	r0, #0
 8000332:	4a1a      	ldr	r2, [pc, #104]	@ (800039c <cmox_initialize+0x6c>)
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	bf1c      	itt	ne
 8000338:	6801      	ldrne	r1, [r0, #0]
 800033a:	2900      	cmpne	r1, #0
 800033c:	d123      	bne.n	8000386 <cmox_initialize+0x56>
 800033e:	4b18      	ldr	r3, [pc, #96]	@ (80003a0 <cmox_initialize+0x70>)
 8000340:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 8000344:	681c      	ldr	r4, [r3, #0]
 8000346:	f24c 2540 	movw	r5, #49728	@ 0xc240
 800034a:	400c      	ands	r4, r1
 800034c:	42ac      	cmp	r4, r5
 800034e:	bf1f      	itttt	ne
 8000350:	681b      	ldrne	r3, [r3, #0]
 8000352:	4019      	andne	r1, r3
 8000354:	f24c 2670 	movwne	r6, #49776	@ 0xc270
 8000358:	42b1      	cmpne	r1, r6
 800035a:	d112      	bne.n	8000382 <cmox_initialize+0x52>
 800035c:	4c11      	ldr	r4, [pc, #68]	@ (80003a4 <cmox_initialize+0x74>)
 800035e:	6821      	ldr	r1, [r4, #0]
 8000360:	b979      	cbnz	r1, 8000382 <cmox_initialize+0x52>
 8000362:	4911      	ldr	r1, [pc, #68]	@ (80003a8 <cmox_initialize+0x78>)
 8000364:	680b      	ldr	r3, [r1, #0]
 8000366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800036a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800036e:	bf1f      	itttt	ne
 8000370:	6809      	ldrne	r1, [r1, #0]
 8000372:	f3c1 010b 	ubfxne	r1, r1, #0, #12
 8000376:	f240 4383 	movwne	r3, #1155	@ 0x483
 800037a:	4299      	cmpne	r1, r3
 800037c:	bf04      	itt	eq
 800037e:	2401      	moveq	r4, #1
 8000380:	7014      	strbeq	r4, [r2, #0]
 8000382:	b928      	cbnz	r0, 8000390 <cmox_initialize+0x60>
 8000384:	e005      	b.n	8000392 <cmox_initialize+0x62>
 8000386:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <cmox_initialize+0x7c>)
 8000388:	4299      	cmp	r1, r3
 800038a:	bf04      	itt	eq
 800038c:	2101      	moveq	r1, #1
 800038e:	7011      	strbeq	r1, [r2, #0]
 8000390:	6840      	ldr	r0, [r0, #4]
 8000392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000396:	f001 bcfb 	b.w	8001d90 <cmox_ll_init>
 800039a:	bf00      	nop
 800039c:	2400009c 	.word	0x2400009c
 80003a0:	e000ed00 	.word	0xe000ed00
 80003a4:	e0042000 	.word	0xe0042000
 80003a8:	5c001000 	.word	0x5c001000
 80003ac:	48370000 	.word	0x48370000

080003b0 <cmox_mac_innerCompute>:
 80003b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003b4:	4604      	mov	r4, r0
 80003b6:	460d      	mov	r5, r1
 80003b8:	6821      	ldr	r1, [r4, #0]
 80003ba:	4616      	mov	r6, r2
 80003bc:	461f      	mov	r7, r3
 80003be:	684a      	ldr	r2, [r1, #4]
 80003c0:	4790      	blx	r2
 80003c2:	4680      	mov	r8, r0
 80003c4:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80003c8:	d12e      	bne.n	8000428 <cmox_mac_innerCompute+0x78>
 80003ca:	6822      	ldr	r2, [r4, #0]
 80003cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80003ce:	4620      	mov	r0, r4
 80003d0:	6893      	ldr	r3, [r2, #8]
 80003d2:	4798      	blx	r3
 80003d4:	4680      	mov	r8, r0
 80003d6:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80003da:	d125      	bne.n	8000428 <cmox_mac_innerCompute+0x78>
 80003dc:	6823      	ldr	r3, [r4, #0]
 80003de:	9a08      	ldr	r2, [sp, #32]
 80003e0:	9907      	ldr	r1, [sp, #28]
 80003e2:	4620      	mov	r0, r4
 80003e4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80003e8:	47e0      	blx	ip
 80003ea:	4680      	mov	r8, r0
 80003ec:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 80003f0:	d11a      	bne.n	8000428 <cmox_mac_innerCompute+0x78>
 80003f2:	6823      	ldr	r3, [r4, #0]
 80003f4:	4639      	mov	r1, r7
 80003f6:	9a06      	ldr	r2, [sp, #24]
 80003f8:	4620      	mov	r0, r4
 80003fa:	691f      	ldr	r7, [r3, #16]
 80003fc:	47b8      	blx	r7
 80003fe:	4680      	mov	r8, r0
 8000400:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000404:	d110      	bne.n	8000428 <cmox_mac_innerCompute+0x78>
 8000406:	6823      	ldr	r3, [r4, #0]
 8000408:	4629      	mov	r1, r5
 800040a:	4632      	mov	r2, r6
 800040c:	4620      	mov	r0, r4
 800040e:	695d      	ldr	r5, [r3, #20]
 8000410:	47a8      	blx	r5
 8000412:	4680      	mov	r8, r0
 8000414:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000418:	d106      	bne.n	8000428 <cmox_mac_innerCompute+0x78>
 800041a:	6823      	ldr	r3, [r4, #0]
 800041c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800041e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8000420:	4620      	mov	r0, r4
 8000422:	699d      	ldr	r5, [r3, #24]
 8000424:	47a8      	blx	r5
 8000426:	4680      	mov	r8, r0
 8000428:	6821      	ldr	r1, [r4, #0]
 800042a:	4620      	mov	r0, r4
 800042c:	680a      	ldr	r2, [r1, #0]
 800042e:	4790      	blx	r2
 8000430:	4640      	mov	r0, r8
 8000432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000436 <cmox_mac_innerVerify>:
 8000436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800043a:	4604      	mov	r4, r0
 800043c:	460d      	mov	r5, r1
 800043e:	6821      	ldr	r1, [r4, #0]
 8000440:	4616      	mov	r6, r2
 8000442:	461f      	mov	r7, r3
 8000444:	684a      	ldr	r2, [r1, #4]
 8000446:	4790      	blx	r2
 8000448:	4680      	mov	r8, r0
 800044a:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 800044e:	d12e      	bne.n	80004ae <cmox_mac_innerVerify+0x78>
 8000450:	6822      	ldr	r2, [r4, #0]
 8000452:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8000454:	4620      	mov	r0, r4
 8000456:	6893      	ldr	r3, [r2, #8]
 8000458:	4798      	blx	r3
 800045a:	4680      	mov	r8, r0
 800045c:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000460:	d125      	bne.n	80004ae <cmox_mac_innerVerify+0x78>
 8000462:	6823      	ldr	r3, [r4, #0]
 8000464:	9a08      	ldr	r2, [sp, #32]
 8000466:	9907      	ldr	r1, [sp, #28]
 8000468:	4620      	mov	r0, r4
 800046a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800046e:	47e0      	blx	ip
 8000470:	4680      	mov	r8, r0
 8000472:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 8000476:	d11a      	bne.n	80004ae <cmox_mac_innerVerify+0x78>
 8000478:	6823      	ldr	r3, [r4, #0]
 800047a:	4639      	mov	r1, r7
 800047c:	9a06      	ldr	r2, [sp, #24]
 800047e:	4620      	mov	r0, r4
 8000480:	691f      	ldr	r7, [r3, #16]
 8000482:	47b8      	blx	r7
 8000484:	4680      	mov	r8, r0
 8000486:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 800048a:	d110      	bne.n	80004ae <cmox_mac_innerVerify+0x78>
 800048c:	6823      	ldr	r3, [r4, #0]
 800048e:	4629      	mov	r1, r5
 8000490:	4632      	mov	r2, r6
 8000492:	4620      	mov	r0, r4
 8000494:	695d      	ldr	r5, [r3, #20]
 8000496:	47a8      	blx	r5
 8000498:	4680      	mov	r8, r0
 800049a:	f5b8 3f40 	cmp.w	r8, #196608	@ 0x30000
 800049e:	d106      	bne.n	80004ae <cmox_mac_innerVerify+0x78>
 80004a0:	6823      	ldr	r3, [r4, #0]
 80004a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80004a4:	2200      	movs	r2, #0
 80004a6:	4620      	mov	r0, r4
 80004a8:	69dd      	ldr	r5, [r3, #28]
 80004aa:	47a8      	blx	r5
 80004ac:	4680      	mov	r8, r0
 80004ae:	6821      	ldr	r1, [r4, #0]
 80004b0:	4620      	mov	r0, r4
 80004b2:	680a      	ldr	r2, [r1, #0]
 80004b4:	4790      	blx	r2
 80004b6:	4640      	mov	r0, r8
 80004b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080004bc <cmox_mac_setCustomData_empty>:
 80004bc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80004c0:	4770      	bx	lr
	...

080004c4 <cmox_mac_compute>:
 80004c4:	2800      	cmp	r0, #0
 80004c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c8:	b085      	sub	sp, #20
 80004ca:	460c      	mov	r4, r1
 80004cc:	4611      	mov	r1, r2
 80004ce:	461a      	mov	r2, r3
 80004d0:	bf1c      	itt	ne
 80004d2:	6805      	ldrne	r5, [r0, #0]
 80004d4:	2d00      	cmpne	r5, #0
 80004d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <cmox_mac_compute+0x40>)
 80004d8:	d011      	beq.n	80004fe <cmox_mac_compute+0x3a>
 80004da:	b182      	cbz	r2, 80004fe <cmox_mac_compute+0x3a>
 80004dc:	b904      	cbnz	r4, 80004e0 <cmox_mac_compute+0x1c>
 80004de:	b971      	cbnz	r1, 80004fe <cmox_mac_compute+0x3a>
 80004e0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80004e2:	b160      	cbz	r0, 80004fe <cmox_mac_compute+0x3a>
 80004e4:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80004e6:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80004e8:	9604      	str	r6, [sp, #16]
 80004ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80004ec:	9703      	str	r7, [sp, #12]
 80004ee:	9002      	str	r0, [sp, #8]
 80004f0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80004f2:	9001      	str	r0, [sp, #4]
 80004f4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80004f6:	9000      	str	r0, [sp, #0]
 80004f8:	4620      	mov	r0, r4
 80004fa:	47a8      	blx	r5
 80004fc:	4603      	mov	r3, r0
 80004fe:	4618      	mov	r0, r3
 8000500:	b005      	add	sp, #20
 8000502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000504:	00030002 	.word	0x00030002

08000508 <cmox_aesFast_encrypt>:
 8000508:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800050c:	f100 040c 	add.w	r4, r0, #12
 8000510:	b08c      	sub	sp, #48	@ 0x30
 8000512:	6822      	ldr	r2, [r4, #0]
 8000514:	6846      	ldr	r6, [r0, #4]
 8000516:	6808      	ldr	r0, [r1, #0]
 8000518:	68cd      	ldr	r5, [r1, #12]
 800051a:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800051e:	68a3      	ldr	r3, [r4, #8]
 8000520:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000524:	08f6      	lsrs	r6, r6, #3
 8000526:	4050      	eors	r0, r2
 8000528:	684a      	ldr	r2, [r1, #4]
 800052a:	68e1      	ldr	r1, [r4, #12]
 800052c:	1cf6      	adds	r6, r6, #3
 800052e:	ea83 0e0e 	eor.w	lr, r3, lr
 8000532:	4bba      	ldr	r3, [pc, #744]	@ (800081c <cmox_aesFast_encrypt+0x314>)
 8000534:	ea88 0202 	eor.w	r2, r8, r2
 8000538:	9600      	str	r6, [sp, #0]
 800053a:	404d      	eors	r5, r1
 800053c:	4601      	mov	r1, r0
 800053e:	e057      	b.n	80005f0 <cmox_aesFast_encrypt+0xe8>
 8000540:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8000542:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8000546:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800054a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800054e:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 8000552:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8000556:	f853 a020 	ldr.w	sl, [r3, r0, lsl #2]
 800055a:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
 800055e:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8000562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000566:	9e02      	ldr	r6, [sp, #8]
 8000568:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800056c:	ea4f 203a 	mov.w	r0, sl, ror #8
 8000570:	4078      	eors	r0, r7
 8000572:	ea80 403b 	eor.w	r0, r0, fp, ror #16
 8000576:	f853 a02c 	ldr.w	sl, [r3, ip, lsl #2]
 800057a:	ea4f 4c35 	mov.w	ip, r5, ror #16
 800057e:	9d06      	ldr	r5, [sp, #24]
 8000580:	ea80 6131 	eor.w	r1, r0, r1, ror #24
 8000584:	6820      	ldr	r0, [r4, #0]
 8000586:	4041      	eors	r1, r0
 8000588:	ea8e 203a 	eor.w	r0, lr, sl, ror #8
 800058c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8000590:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
 8000594:	ea8c 0000 	eor.w	r0, ip, r0
 8000598:	f8dd c020 	ldr.w	ip, [sp, #32]
 800059c:	ea80 6232 	eor.w	r2, r0, r2, ror #24
 80005a0:	6860      	ldr	r0, [r4, #4]
 80005a2:	f853 502a 	ldr.w	r5, [r3, sl, lsl #2]
 80005a6:	f853 e02c 	ldr.w	lr, [r3, ip, lsl #2]
 80005aa:	4042      	eors	r2, r0
 80005ac:	9807      	ldr	r0, [sp, #28]
 80005ae:	ea85 2e3e 	eor.w	lr, r5, lr, ror #8
 80005b2:	f853 c020 	ldr.w	ip, [r3, r0, lsl #2]
 80005b6:	ea4f 403c 	mov.w	r0, ip, ror #16
 80005ba:	f8dd c010 	ldr.w	ip, [sp, #16]
 80005be:	ea80 0e0e 	eor.w	lr, r0, lr
 80005c2:	68a0      	ldr	r0, [r4, #8]
 80005c4:	ea8e 6e37 	eor.w	lr, lr, r7, ror #24
 80005c8:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 80005cc:	f853 c026 	ldr.w	ip, [r3, r6, lsl #2]
 80005d0:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 80005d4:	ea80 0e0e 	eor.w	lr, r0, lr
 80005d8:	9803      	ldr	r0, [sp, #12]
 80005da:	ea96 2535 	eors.w	r5, r6, r5, ror #8
 80005de:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
 80005e2:	ea4f 4038 	mov.w	r0, r8, ror #16
 80005e6:	4045      	eors	r5, r0
 80005e8:	68e0      	ldr	r0, [r4, #12]
 80005ea:	ea85 653c 	eor.w	r5, r5, ip, ror #24
 80005ee:	4045      	eors	r5, r0
 80005f0:	b2ef      	uxtb	r7, r5
 80005f2:	ea4f 6b11 	mov.w	fp, r1, lsr #24
 80005f6:	f853 a027 	ldr.w	sl, [r3, r7, lsl #2]
 80005fa:	ea4f 2902 	mov.w	r9, r2, lsl #8
 80005fe:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8000602:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8000606:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 800060a:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 800060e:	ea4f 673a 	mov.w	r7, sl, ror #24
 8000612:	f853 902c 	ldr.w	r9, [r3, ip, lsl #2]
 8000616:	f853 a02b 	ldr.w	sl, [r3, fp, lsl #2]
 800061a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800061e:	ea8a 2036 	eor.w	r0, sl, r6, ror #8
 8000622:	ea80 4039 	eor.w	r0, r0, r9, ror #16
 8000626:	4078      	eors	r0, r7
 8000628:	ea8c 0000 	eor.w	r0, ip, r0
 800062c:	ea4f 4c05 	mov.w	ip, r5, lsl #16
 8000630:	ea4f 270e 	mov.w	r7, lr, lsl #8
 8000634:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8000638:	0e3f      	lsrs	r7, r7, #24
 800063a:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
 800063e:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8000642:	ea4f 4c37 	mov.w	ip, r7, ror #16
 8000646:	b2cf      	uxtb	r7, r1
 8000648:	ea4f 2a3b 	mov.w	sl, fp, ror #8
 800064c:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
 8000650:	ea4f 673b 	mov.w	r7, fp, ror #24
 8000654:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8000658:	f853 b02b 	ldr.w	fp, [r3, fp, lsl #2]
 800065c:	ea8a 0a0b 	eor.w	sl, sl, fp
 8000660:	ea8c 0a0a 	eor.w	sl, ip, sl
 8000664:	f8d4 c014 	ldr.w	ip, [r4, #20]
 8000668:	ea87 0a0a 	eor.w	sl, r7, sl
 800066c:	022f      	lsls	r7, r5, #8
 800066e:	0e3f      	lsrs	r7, r7, #24
 8000670:	0e2d      	lsrs	r5, r5, #24
 8000672:	ea8c 0a0a 	eor.w	sl, ip, sl
 8000676:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
 800067a:	ea4f 2b3c 	mov.w	fp, ip, ror #8
 800067e:	ea4f 4c01 	mov.w	ip, r1, lsl #16
 8000682:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8000686:	0209      	lsls	r1, r1, #8
 8000688:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800068c:	fa5f fc82 	uxtb.w	ip, r2
 8000690:	0e09      	lsrs	r1, r1, #24
 8000692:	0412      	lsls	r2, r2, #16
 8000694:	0e12      	lsrs	r2, r2, #24
 8000696:	ea4f 4737 	mov.w	r7, r7, ror #16
 800069a:	9701      	str	r7, [sp, #4]
 800069c:	ea4f 671e 	mov.w	r7, lr, lsr #24
 80006a0:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80006a4:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80006a8:	fa5f fe8e 	uxtb.w	lr, lr
 80006ac:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80006b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006b4:	ea8b 0b07 	eor.w	fp, fp, r7
 80006b8:	9f01      	ldr	r7, [sp, #4]
 80006ba:	ea87 0b0b 	eor.w	fp, r7, fp
 80006be:	ea8b 6b3c 	eor.w	fp, fp, ip, ror #24
 80006c2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80006c6:	ea8c 0b0b 	eor.w	fp, ip, fp
 80006ca:	f853 c02e 	ldr.w	ip, [r3, lr, lsl #2]
 80006ce:	f853 e025 	ldr.w	lr, [r3, r5, lsl #2]
 80006d2:	9d00      	ldr	r5, [sp, #0]
 80006d4:	ea8e 2131 	eor.w	r1, lr, r1, ror #8
 80006d8:	ea4f 6e1a 	mov.w	lr, sl, lsr #24
 80006dc:	ea91 4132 	eors.w	r1, r1, r2, ror #16
 80006e0:	69e2      	ldr	r2, [r4, #28]
 80006e2:	1e6d      	subs	r5, r5, #1
 80006e4:	3420      	adds	r4, #32
 80006e6:	ea81 613c 	eor.w	r1, r1, ip, ror #24
 80006ea:	9500      	str	r5, [sp, #0]
 80006ec:	ea4f 4c0a 	mov.w	ip, sl, lsl #16
 80006f0:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 80006f4:	0205      	lsls	r5, r0, #8
 80006f6:	0e2d      	lsrs	r5, r5, #24
 80006f8:	4051      	eors	r1, r2
 80006fa:	ea4f 220b 	mov.w	r2, fp, lsl #8
 80006fe:	0e0f      	lsrs	r7, r1, #24
 8000700:	0e12      	lsrs	r2, r2, #24
 8000702:	9701      	str	r7, [sp, #4]
 8000704:	ea4f 671b 	mov.w	r7, fp, lsr #24
 8000708:	f8cd c00c 	str.w	ip, [sp, #12]
 800070c:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 8000710:	9504      	str	r5, [sp, #16]
 8000712:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8000716:	9705      	str	r7, [sp, #20]
 8000718:	020d      	lsls	r5, r1, #8
 800071a:	f8cd c01c 	str.w	ip, [sp, #28]
 800071e:	0e2d      	lsrs	r5, r5, #24
 8000720:	0e07      	lsrs	r7, r0, #24
 8000722:	9508      	str	r5, [sp, #32]
 8000724:	9209      	str	r2, [sp, #36]	@ 0x24
 8000726:	ea4f 420b 	mov.w	r2, fp, lsl #16
 800072a:	0e12      	lsrs	r2, r2, #24
 800072c:	040d      	lsls	r5, r1, #16
 800072e:	920a      	str	r2, [sp, #40]	@ 0x28
 8000730:	b2c2      	uxtb	r2, r0
 8000732:	9800      	ldr	r0, [sp, #0]
 8000734:	ea4f 2c0a 	mov.w	ip, sl, lsl #8
 8000738:	0e2d      	lsrs	r5, r5, #24
 800073a:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 800073e:	fa5f fb8b 	uxtb.w	fp, fp
 8000742:	fa5f fa8a 	uxtb.w	sl, sl
 8000746:	2800      	cmp	r0, #0
 8000748:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 800074c:	f8cd b008 	str.w	fp, [sp, #8]
 8000750:	b2c9      	uxtb	r1, r1
 8000752:	f8cd a018 	str.w	sl, [sp, #24]
 8000756:	f47f aef3 	bne.w	8000540 <cmox_aesFast_encrypt+0x38>
 800075a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800075c:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8000820 <cmox_aesFast_encrypt+0x318>
 8000760:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8000764:	f818 0007 	ldrb.w	r0, [r8, r7]
 8000768:	f818 1001 	ldrb.w	r1, [r8, r1]
 800076c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800076e:	f818 9006 	ldrb.w	r9, [r8, r6]
 8000772:	f818 700c 	ldrb.w	r7, [r8, ip]
 8000776:	ea4f 4909 	mov.w	r9, r9, lsl #16
 800077a:	ea49 6900 	orr.w	r9, r9, r0, lsl #24
 800077e:	6820      	ldr	r0, [r4, #0]
 8000780:	ea49 2907 	orr.w	r9, r9, r7, lsl #8
 8000784:	ea41 0909 	orr.w	r9, r1, r9
 8000788:	ea80 0909 	eor.w	r9, r0, r9
 800078c:	f8c3 9000 	str.w	r9, [r3]
 8000790:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8000794:	f818 600e 	ldrb.w	r6, [r8, lr]
 8000798:	f818 1002 	ldrb.w	r1, [r8, r2]
 800079c:	6860      	ldr	r0, [r4, #4]
 800079e:	f818 c009 	ldrb.w	ip, [r8, r9]
 80007a2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80007a6:	ea4c 6c06 	orr.w	ip, ip, r6, lsl #24
 80007aa:	f818 6005 	ldrb.w	r6, [r8, r5]
 80007ae:	ea4c 2c06 	orr.w	ip, ip, r6, lsl #8
 80007b2:	ea41 0c0c 	orr.w	ip, r1, ip
 80007b6:	ea80 0c0c 	eor.w	ip, r0, ip
 80007ba:	f8c3 c004 	str.w	ip, [r3, #4]
 80007be:	9808      	ldr	r0, [sp, #32]
 80007c0:	9a05      	ldr	r2, [sp, #20]
 80007c2:	f8dd c018 	ldr.w	ip, [sp, #24]
 80007c6:	f818 6000 	ldrb.w	r6, [r8, r0]
 80007ca:	68a0      	ldr	r0, [r4, #8]
 80007cc:	f818 1002 	ldrb.w	r1, [r8, r2]
 80007d0:	9a07      	ldr	r2, [sp, #28]
 80007d2:	0436      	lsls	r6, r6, #16
 80007d4:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 80007d8:	f818 100c 	ldrb.w	r1, [r8, ip]
 80007dc:	f818 9002 	ldrb.w	r9, [r8, r2]
 80007e0:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 80007e4:	430e      	orrs	r6, r1
 80007e6:	4046      	eors	r6, r0
 80007e8:	609e      	str	r6, [r3, #8]
 80007ea:	9804      	ldr	r0, [sp, #16]
 80007ec:	9a01      	ldr	r2, [sp, #4]
 80007ee:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80007f2:	f818 6000 	ldrb.w	r6, [r8, r0]
 80007f6:	f818 1002 	ldrb.w	r1, [r8, r2]
 80007fa:	f818 0009 	ldrb.w	r0, [r8, r9]
 80007fe:	0436      	lsls	r6, r6, #16
 8000800:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 8000804:	9903      	ldr	r1, [sp, #12]
 8000806:	f818 2001 	ldrb.w	r2, [r8, r1]
 800080a:	68e1      	ldr	r1, [r4, #12]
 800080c:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8000810:	4306      	orrs	r6, r0
 8000812:	404e      	eors	r6, r1
 8000814:	60de      	str	r6, [r3, #12]
 8000816:	b00d      	add	sp, #52	@ 0x34
 8000818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800081c:	0800845c 	.word	0x0800845c
 8000820:	0800885c 	.word	0x0800885c

08000824 <cmox_cmac_cleanup>:
 8000824:	b510      	push	{r4, lr}
 8000826:	f000 fa1f 	bl	8000c68 <cmox_cmac_getByMAC>
 800082a:	f44f 3440 	mov.w	r4, #196608	@ 0x30000
 800082e:	2800      	cmp	r0, #0
 8000830:	bf0e      	itee	eq
 8000832:	4c03      	ldreq	r4, [pc, #12]	@ (8000840 <cmox_cmac_cleanup+0x1c>)
 8000834:	f44f 7196 	movne.w	r1, #300	@ 0x12c
 8000838:	f007 f8de 	blne	80079f8 <__aeabi_memclr>
 800083c:	4620      	mov	r0, r4
 800083e:	bd10      	pop	{r4, pc}
 8000840:	00030002 	.word	0x00030002

08000844 <cmox_cmac_init>:
 8000844:	b510      	push	{r4, lr}
 8000846:	4604      	mov	r4, r0
 8000848:	f000 fa0e 	bl	8000c68 <cmox_cmac_getByMAC>
 800084c:	b908      	cbnz	r0, 8000852 <cmox_cmac_init+0xe>
 800084e:	480a      	ldr	r0, [pc, #40]	@ (8000878 <cmox_cmac_init+0x34>)
 8000850:	bd10      	pop	{r4, pc}
 8000852:	2100      	movs	r1, #0
 8000854:	2210      	movs	r2, #16
 8000856:	60a1      	str	r1, [r4, #8]
 8000858:	2300      	movs	r3, #0
 800085a:	6062      	str	r2, [r4, #4]
 800085c:	2101      	movs	r1, #1
 800085e:	f8c0 3128 	str.w	r3, [r0, #296]	@ 0x128
 8000862:	2200      	movs	r2, #0
 8000864:	6141      	str	r1, [r0, #20]
 8000866:	f500 7084 	add.w	r0, r0, #264	@ 0x108
 800086a:	2100      	movs	r1, #0
 800086c:	2400      	movs	r4, #0
 800086e:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
 8000872:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000876:	bd10      	pop	{r4, pc}
 8000878:	00030002 	.word	0x00030002

0800087c <cmox_cmac_setTagLen>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	4605      	mov	r5, r0
 8000880:	460c      	mov	r4, r1
 8000882:	f000 f9f1 	bl	8000c68 <cmox_cmac_getByMAC>
 8000886:	2800      	cmp	r0, #0
 8000888:	4e05      	ldr	r6, [pc, #20]	@ (80008a0 <cmox_cmac_setTagLen+0x24>)
 800088a:	bf18      	it	ne
 800088c:	2c00      	cmpne	r4, #0
 800088e:	d004      	beq.n	800089a <cmox_cmac_setTagLen+0x1e>
 8000890:	2c11      	cmp	r4, #17
 8000892:	bf3c      	itt	cc
 8000894:	606c      	strcc	r4, [r5, #4]
 8000896:	f44f 3640 	movcc.w	r6, #196608	@ 0x30000
 800089a:	4630      	mov	r0, r6
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	bf00      	nop
 80008a0:	00030002 	.word	0x00030002

080008a4 <cmox_cmac_setKey>:
 80008a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a6:	4604      	mov	r4, r0
 80008a8:	460d      	mov	r5, r1
 80008aa:	4616      	mov	r6, r2
 80008ac:	4f09      	ldr	r7, [pc, #36]	@ (80008d4 <cmox_cmac_setKey+0x30>)
 80008ae:	f000 f9db 	bl	8000c68 <cmox_cmac_getByMAC>
 80008b2:	b168      	cbz	r0, 80008d0 <cmox_cmac_setKey+0x2c>
 80008b4:	4632      	mov	r2, r6
 80008b6:	4629      	mov	r1, r5
 80008b8:	300c      	adds	r0, #12
 80008ba:	f000 fb5b 	bl	8000f74 <cmox_cipherMode_setKey>
 80008be:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80008c2:	d105      	bne.n	80008d0 <cmox_cmac_setKey+0x2c>
 80008c4:	68a0      	ldr	r0, [r4, #8]
 80008c6:	f44f 3740 	mov.w	r7, #196608	@ 0x30000
 80008ca:	f040 0001 	orr.w	r0, r0, #1
 80008ce:	60a0      	str	r0, [r4, #8]
 80008d0:	4638      	mov	r0, r7
 80008d2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80008d4:	00030002 	.word	0x00030002

080008d8 <cmox_cmac_encryptBlock>:
 80008d8:	b538      	push	{r3, r4, r5, lr}
 80008da:	4604      	mov	r4, r0
 80008dc:	b084      	sub	sp, #16
 80008de:	4608      	mov	r0, r1
 80008e0:	4615      	mov	r5, r2
 80008e2:	4669      	mov	r1, sp
 80008e4:	f000 fd2e 	bl	8001344 <convert_block_2_words>
 80008e8:	4629      	mov	r1, r5
 80008ea:	4668      	mov	r0, sp
 80008ec:	f000 fd3e 	bl	800136c <xor_blocks>
 80008f0:	6823      	ldr	r3, [r4, #0]
 80008f2:	4620      	mov	r0, r4
 80008f4:	462a      	mov	r2, r5
 80008f6:	4669      	mov	r1, sp
 80008f8:	681c      	ldr	r4, [r3, #0]
 80008fa:	47a0      	blx	r4
 80008fc:	b005      	add	sp, #20
 80008fe:	bd30      	pop	{r4, r5, pc}

08000900 <cmox_cmac_append>:
 8000900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000904:	4617      	mov	r7, r2
 8000906:	2600      	movs	r6, #0
 8000908:	2f00      	cmp	r7, #0
 800090a:	460d      	mov	r5, r1
 800090c:	f44f 3a40 	mov.w	sl, #196608	@ 0x30000
 8000910:	d053      	beq.n	80009ba <cmox_cmac_append+0xba>
 8000912:	7a01      	ldrb	r1, [r0, #8]
 8000914:	07ca      	lsls	r2, r1, #31
 8000916:	d504      	bpl.n	8000922 <cmox_cmac_append+0x22>
 8000918:	f000 f9a6 	bl	8000c68 <cmox_cmac_getByMAC>
 800091c:	ea5f 0800 	movs.w	r8, r0
 8000920:	d101      	bne.n	8000926 <cmox_cmac_append+0x26>
 8000922:	4827      	ldr	r0, [pc, #156]	@ (80009c0 <cmox_cmac_append+0xc0>)
 8000924:	e04a      	b.n	80009bc <cmox_cmac_append+0xbc>
 8000926:	f8d8 0128 	ldr.w	r0, [r8, #296]	@ 0x128
 800092a:	f508 748c 	add.w	r4, r8, #280	@ 0x118
 800092e:	f508 7984 	add.w	r9, r8, #264	@ 0x108
 8000932:	2810      	cmp	r0, #16
 8000934:	d107      	bne.n	8000946 <cmox_cmac_append+0x46>
 8000936:	464a      	mov	r2, r9
 8000938:	4621      	mov	r1, r4
 800093a:	f108 000c 	add.w	r0, r8, #12
 800093e:	f7ff ffcb 	bl	80008d8 <cmox_cmac_encryptBlock>
 8000942:	f8c8 6128 	str.w	r6, [r8, #296]	@ 0x128
 8000946:	f8d8 0128 	ldr.w	r0, [r8, #296]	@ 0x128
 800094a:	b1c0      	cbz	r0, 800097e <cmox_cmac_append+0x7e>
 800094c:	2000      	movs	r0, #0
 800094e:	e003      	b.n	8000958 <cmox_cmac_append+0x58>
 8000950:	5c2a      	ldrb	r2, [r5, r0]
 8000952:	1841      	adds	r1, r0, r1
 8000954:	1c40      	adds	r0, r0, #1
 8000956:	5462      	strb	r2, [r4, r1]
 8000958:	f8d8 1128 	ldr.w	r1, [r8, #296]	@ 0x128
 800095c:	f1c1 0310 	rsb	r3, r1, #16
 8000960:	4298      	cmp	r0, r3
 8000962:	d3f5      	bcc.n	8000950 <cmox_cmac_append+0x50>
 8000964:	464a      	mov	r2, r9
 8000966:	4621      	mov	r1, r4
 8000968:	f108 000c 	add.w	r0, r8, #12
 800096c:	f7ff ffb4 	bl	80008d8 <cmox_cmac_encryptBlock>
 8000970:	f8d8 6128 	ldr.w	r6, [r8, #296]	@ 0x128
 8000974:	2000      	movs	r0, #0
 8000976:	f8c8 0128 	str.w	r0, [r8, #296]	@ 0x128
 800097a:	f1c6 0610 	rsb	r6, r6, #16
 800097e:	1bb9      	subs	r1, r7, r6
 8000980:	f011 070f 	ands.w	r7, r1, #15
 8000984:	46b3      	mov	fp, r6
 8000986:	bf08      	it	eq
 8000988:	2710      	moveq	r7, #16
 800098a:	1bc9      	subs	r1, r1, r7
 800098c:	198e      	adds	r6, r1, r6
 800098e:	e008      	b.n	80009a2 <cmox_cmac_append+0xa2>
 8000990:	464a      	mov	r2, r9
 8000992:	eb05 010b 	add.w	r1, r5, fp
 8000996:	f108 000c 	add.w	r0, r8, #12
 800099a:	f10b 0b10 	add.w	fp, fp, #16
 800099e:	f7ff ff9b 	bl	80008d8 <cmox_cmac_encryptBlock>
 80009a2:	45b3      	cmp	fp, r6
 80009a4:	d3f4      	bcc.n	8000990 <cmox_cmac_append+0x90>
 80009a6:	2000      	movs	r0, #0
 80009a8:	e003      	b.n	80009b2 <cmox_cmac_append+0xb2>
 80009aa:	1981      	adds	r1, r0, r6
 80009ac:	5c69      	ldrb	r1, [r5, r1]
 80009ae:	5421      	strb	r1, [r4, r0]
 80009b0:	1c40      	adds	r0, r0, #1
 80009b2:	42b8      	cmp	r0, r7
 80009b4:	d3f9      	bcc.n	80009aa <cmox_cmac_append+0xaa>
 80009b6:	f8c8 7128 	str.w	r7, [r8, #296]	@ 0x128
 80009ba:	4650      	mov	r0, sl
 80009bc:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009c0:	00030002 	.word	0x00030002

080009c4 <cmox_cmac_generateTag>:
 80009c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c8:	b084      	sub	sp, #16
 80009ca:	4606      	mov	r6, r0
 80009cc:	4688      	mov	r8, r1
 80009ce:	4614      	mov	r4, r2
 80009d0:	4668      	mov	r0, sp
 80009d2:	2100      	movs	r1, #0
 80009d4:	2200      	movs	r2, #0
 80009d6:	2300      	movs	r3, #0
 80009d8:	2500      	movs	r5, #0
 80009da:	e880 002e 	stmia.w	r0, {r1, r2, r3, r5}
 80009de:	7a31      	ldrb	r1, [r6, #8]
 80009e0:	07ca      	lsls	r2, r1, #31
 80009e2:	d504      	bpl.n	80009ee <cmox_cmac_generateTag+0x2a>
 80009e4:	4630      	mov	r0, r6
 80009e6:	f000 f93f 	bl	8000c68 <cmox_cmac_getByMAC>
 80009ea:	0005      	movs	r5, r0
 80009ec:	d101      	bne.n	80009f2 <cmox_cmac_generateTag+0x2e>
 80009ee:	4840      	ldr	r0, [pc, #256]	@ (8000af0 <cmox_cmac_generateTag+0x12c>)
 80009f0:	e07a      	b.n	8000ae8 <cmox_cmac_generateTag+0x124>
 80009f2:	b10c      	cbz	r4, 80009f8 <cmox_cmac_generateTag+0x34>
 80009f4:	2000      	movs	r0, #0
 80009f6:	6020      	str	r0, [r4, #0]
 80009f8:	68eb      	ldr	r3, [r5, #12]
 80009fa:	466a      	mov	r2, sp
 80009fc:	4669      	mov	r1, sp
 80009fe:	f105 000c 	add.w	r0, r5, #12
 8000a02:	f505 798c 	add.w	r9, r5, #280	@ 0x118
 8000a06:	681f      	ldr	r7, [r3, #0]
 8000a08:	47b8      	blx	r7
 8000a0a:	9f01      	ldr	r7, [sp, #4]
 8000a0c:	9b00      	ldr	r3, [sp, #0]
 8000a0e:	9900      	ldr	r1, [sp, #0]
 8000a10:	2087      	movs	r0, #135	@ 0x87
 8000a12:	0ffa      	lsrs	r2, r7, #31
 8000a14:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8000a18:	9200      	str	r2, [sp, #0]
 8000a1a:	0fc9      	lsrs	r1, r1, #31
 8000a1c:	9a02      	ldr	r2, [sp, #8]
 8000a1e:	4341      	muls	r1, r0
 8000a20:	0fd3      	lsrs	r3, r2, #31
 8000a22:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 8000a26:	9f03      	ldr	r7, [sp, #12]
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	ea81 0147 	eor.w	r1, r1, r7, lsl #1
 8000a2e:	ea4f 7ed7 	mov.w	lr, r7, lsr #31
 8000a32:	f505 7784 	add.w	r7, r5, #264	@ 0x108
 8000a36:	ea4e 0242 	orr.w	r2, lr, r2, lsl #1
 8000a3a:	9202      	str	r2, [sp, #8]
 8000a3c:	9103      	str	r1, [sp, #12]
 8000a3e:	f8d5 c128 	ldr.w	ip, [r5, #296]	@ 0x128
 8000a42:	f1bc 0f10 	cmp.w	ip, #16
 8000a46:	d104      	bne.n	8000a52 <cmox_cmac_generateTag+0x8e>
 8000a48:	4669      	mov	r1, sp
 8000a4a:	4638      	mov	r0, r7
 8000a4c:	f000 fc8e 	bl	800136c <xor_blocks>
 8000a50:	e02c      	b.n	8000aac <cmox_cmac_generateTag+0xe8>
 8000a52:	f8dd c000 	ldr.w	ip, [sp]
 8000a56:	f8dd a000 	ldr.w	sl, [sp]
 8000a5a:	ea4f 7bd3 	mov.w	fp, r3, lsr #31
 8000a5e:	ea4b 0b4a 	orr.w	fp, fp, sl, lsl #1
 8000a62:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8000a66:	f8cd b000 	str.w	fp, [sp]
 8000a6a:	fb10 f00c 	smulbb	r0, r0, ip
 8000a6e:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
 8000a72:	ea4c 0343 	orr.w	r3, ip, r3, lsl #1
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	0fcb      	lsrs	r3, r1, #31
 8000a7a:	ea80 0041 	eor.w	r0, r0, r1, lsl #1
 8000a7e:	4669      	mov	r1, sp
 8000a80:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8000a84:	9003      	str	r0, [sp, #12]
 8000a86:	9302      	str	r3, [sp, #8]
 8000a88:	4638      	mov	r0, r7
 8000a8a:	f000 fc6f 	bl	800136c <xor_blocks>
 8000a8e:	f8d5 1128 	ldr.w	r1, [r5, #296]	@ 0x128
 8000a92:	2080      	movs	r0, #128	@ 0x80
 8000a94:	f809 0001 	strb.w	r0, [r9, r1]
 8000a98:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 8000a9c:	1c40      	adds	r0, r0, #1
 8000a9e:	2810      	cmp	r0, #16
 8000aa0:	d204      	bcs.n	8000aac <cmox_cmac_generateTag+0xe8>
 8000aa2:	f1c0 0110 	rsb	r1, r0, #16
 8000aa6:	4448      	add	r0, r9
 8000aa8:	f006 ffa6 	bl	80079f8 <__aeabi_memclr>
 8000aac:	463a      	mov	r2, r7
 8000aae:	4649      	mov	r1, r9
 8000ab0:	f105 000c 	add.w	r0, r5, #12
 8000ab4:	f7ff ff10 	bl	80008d8 <cmox_cmac_encryptBlock>
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4620      	mov	r0, r4
 8000abc:	e00f      	b.n	8000ade <cmox_cmac_generateTag+0x11a>
 8000abe:	088a      	lsrs	r2, r1, #2
 8000ac0:	00cc      	lsls	r4, r1, #3
 8000ac2:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8000ac6:	f004 0418 	and.w	r4, r4, #24
 8000aca:	f1c4 0418 	rsb	r4, r4, #24
 8000ace:	40e3      	lsrs	r3, r4
 8000ad0:	f808 3001 	strb.w	r3, [r8, r1]
 8000ad4:	b110      	cbz	r0, 8000adc <cmox_cmac_generateTag+0x118>
 8000ad6:	6802      	ldr	r2, [r0, #0]
 8000ad8:	1c52      	adds	r2, r2, #1
 8000ada:	6002      	str	r2, [r0, #0]
 8000adc:	1c49      	adds	r1, r1, #1
 8000ade:	6872      	ldr	r2, [r6, #4]
 8000ae0:	4291      	cmp	r1, r2
 8000ae2:	d3ec      	bcc.n	8000abe <cmox_cmac_generateTag+0xfa>
 8000ae4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000ae8:	b005      	add	sp, #20
 8000aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aee:	bf00      	nop
 8000af0:	00030002 	.word	0x00030002

08000af4 <cmox_cmac_verifyTag>:
 8000af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000af8:	b088      	sub	sp, #32
 8000afa:	4606      	mov	r6, r0
 8000afc:	460f      	mov	r7, r1
 8000afe:	4690      	mov	r8, r2
 8000b00:	a804      	add	r0, sp, #16
 8000b02:	2100      	movs	r1, #0
 8000b04:	2200      	movs	r2, #0
 8000b06:	2300      	movs	r3, #0
 8000b08:	2400      	movs	r4, #0
 8000b0a:	2500      	movs	r5, #0
 8000b0c:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
 8000b10:	4669      	mov	r1, sp
 8000b12:	2000      	movs	r0, #0
 8000b14:	e881 002d 	stmia.w	r1, {r0, r2, r3, r5}
 8000b18:	7a30      	ldrb	r0, [r6, #8]
 8000b1a:	07c2      	lsls	r2, r0, #31
 8000b1c:	f140 8087 	bpl.w	8000c2e <cmox_cmac_verifyTag+0x13a>
 8000b20:	4630      	mov	r0, r6
 8000b22:	f000 f8a1 	bl	8000c68 <cmox_cmac_getByMAC>
 8000b26:	0005      	movs	r5, r0
 8000b28:	f000 8081 	beq.w	8000c2e <cmox_cmac_verifyTag+0x13a>
 8000b2c:	68eb      	ldr	r3, [r5, #12]
 8000b2e:	466a      	mov	r2, sp
 8000b30:	4669      	mov	r1, sp
 8000b32:	f105 000c 	add.w	r0, r5, #12
 8000b36:	f505 7a8c 	add.w	sl, r5, #280	@ 0x118
 8000b3a:	f8d3 c000 	ldr.w	ip, [r3]
 8000b3e:	47e0      	blx	ip
 8000b40:	9801      	ldr	r0, [sp, #4]
 8000b42:	9b00      	ldr	r3, [sp, #0]
 8000b44:	9a00      	ldr	r2, [sp, #0]
 8000b46:	2187      	movs	r1, #135	@ 0x87
 8000b48:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8000b4c:	ea49 0343 	orr.w	r3, r9, r3, lsl #1
 8000b50:	f505 7984 	add.w	r9, r5, #264	@ 0x108
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	0fd2      	lsrs	r2, r2, #31
 8000b58:	f8dd c008 	ldr.w	ip, [sp, #8]
 8000b5c:	434a      	muls	r2, r1
 8000b5e:	ea4f 73dc 	mov.w	r3, ip, lsr #31
 8000b62:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	9803      	ldr	r0, [sp, #12]
 8000b6a:	ea82 0240 	eor.w	r2, r2, r0, lsl #1
 8000b6e:	9203      	str	r2, [sp, #12]
 8000b70:	ea4f 7ed0 	mov.w	lr, r0, lsr #31
 8000b74:	ea4e 0e4c 	orr.w	lr, lr, ip, lsl #1
 8000b78:	f8cd e008 	str.w	lr, [sp, #8]
 8000b7c:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 8000b80:	2810      	cmp	r0, #16
 8000b82:	d104      	bne.n	8000b8e <cmox_cmac_verifyTag+0x9a>
 8000b84:	4669      	mov	r1, sp
 8000b86:	4648      	mov	r0, r9
 8000b88:	f000 fbf0 	bl	800136c <xor_blocks>
 8000b8c:	e028      	b.n	8000be0 <cmox_cmac_verifyTag+0xec>
 8000b8e:	9800      	ldr	r0, [sp, #0]
 8000b90:	ea4f 7bd3 	mov.w	fp, r3, lsr #31
 8000b94:	0fc0      	lsrs	r0, r0, #31
 8000b96:	fb11 f100 	smulbb	r1, r1, r0
 8000b9a:	9800      	ldr	r0, [sp, #0]
 8000b9c:	ea4b 0040 	orr.w	r0, fp, r0, lsl #1
 8000ba0:	9000      	str	r0, [sp, #0]
 8000ba2:	ea4f 70de 	mov.w	r0, lr, lsr #31
 8000ba6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8000baa:	0fd3      	lsrs	r3, r2, #31
 8000bac:	ea81 0142 	eor.w	r1, r1, r2, lsl #1
 8000bb0:	9001      	str	r0, [sp, #4]
 8000bb2:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 8000bb6:	9103      	str	r1, [sp, #12]
 8000bb8:	9302      	str	r3, [sp, #8]
 8000bba:	4669      	mov	r1, sp
 8000bbc:	4648      	mov	r0, r9
 8000bbe:	f000 fbd5 	bl	800136c <xor_blocks>
 8000bc2:	f8d5 1128 	ldr.w	r1, [r5, #296]	@ 0x128
 8000bc6:	2080      	movs	r0, #128	@ 0x80
 8000bc8:	f80a 0001 	strb.w	r0, [sl, r1]
 8000bcc:	f8d5 0128 	ldr.w	r0, [r5, #296]	@ 0x128
 8000bd0:	1c40      	adds	r0, r0, #1
 8000bd2:	2810      	cmp	r0, #16
 8000bd4:	d204      	bcs.n	8000be0 <cmox_cmac_verifyTag+0xec>
 8000bd6:	f1c0 0110 	rsb	r1, r0, #16
 8000bda:	4450      	add	r0, sl
 8000bdc:	f006 ff0c 	bl	80079f8 <__aeabi_memclr>
 8000be0:	464a      	mov	r2, r9
 8000be2:	4651      	mov	r1, sl
 8000be4:	f105 000c 	add.w	r0, r5, #12
 8000be8:	f7ff fe76 	bl	80008d8 <cmox_cmac_encryptBlock>
 8000bec:	2000      	movs	r0, #0
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e00c      	b.n	8000c0c <cmox_cmac_verifyTag+0x118>
 8000bf2:	0881      	lsrs	r1, r0, #2
 8000bf4:	00c4      	lsls	r4, r0, #3
 8000bf6:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 8000bfa:	f004 0418 	and.w	r4, r4, #24
 8000bfe:	f1c4 0418 	rsb	r4, r4, #24
 8000c02:	a904      	add	r1, sp, #16
 8000c04:	1c5b      	adds	r3, r3, #1
 8000c06:	40e2      	lsrs	r2, r4
 8000c08:	540a      	strb	r2, [r1, r0]
 8000c0a:	1c40      	adds	r0, r0, #1
 8000c0c:	6871      	ldr	r1, [r6, #4]
 8000c0e:	4288      	cmp	r0, r1
 8000c10:	d3ef      	bcc.n	8000bf2 <cmox_cmac_verifyTag+0xfe>
 8000c12:	4a09      	ldr	r2, [pc, #36]	@ (8000c38 <cmox_cmac_verifyTag+0x144>)
 8000c14:	4d09      	ldr	r5, [pc, #36]	@ (8000c3c <cmox_cmac_verifyTag+0x148>)
 8000c16:	9202      	str	r2, [sp, #8]
 8000c18:	4c09      	ldr	r4, [pc, #36]	@ (8000c40 <cmox_cmac_verifyTag+0x14c>)
 8000c1a:	682e      	ldr	r6, [r5, #0]
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c22:	aa04      	add	r2, sp, #16
 8000c24:	9401      	str	r4, [sp, #4]
 8000c26:	9600      	str	r6, [sp, #0]
 8000c28:	f000 f89e 	bl	8000d68 <cmox_utils_robustCmp>
 8000c2c:	e000      	b.n	8000c30 <cmox_cmac_verifyTag+0x13c>
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <cmox_cmac_verifyTag+0x150>)
 8000c30:	b009      	add	sp, #36	@ 0x24
 8000c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c36:	bf00      	nop
 8000c38:	00036e93 	.word	0x00036e93
 8000c3c:	080083bc 	.word	0x080083bc
 8000c40:	0003c726 	.word	0x0003c726
 8000c44:	00030002 	.word	0x00030002

08000c48 <cmac_table>:
 8000c48:	08000825 08000845 0800087d 080004bd     %...E...}.......
 8000c58:	080008a5 08000901 080009c5 08000af5     ................

08000c68 <cmox_cmac_getByMAC>:
 8000c68:	6801      	ldr	r1, [r0, #0]
 8000c6a:	4a02      	ldr	r2, [pc, #8]	@ (8000c74 <cmox_cmac_getByMAC+0xc>)
 8000c6c:	4291      	cmp	r1, r2
 8000c6e:	bf18      	it	ne
 8000c70:	2000      	movne	r0, #0
 8000c72:	4770      	bx	lr
 8000c74:	08000c48 	.word	0x08000c48

08000c78 <cmox_cmac_construct>:
 8000c78:	b120      	cbz	r0, 8000c84 <cmox_cmac_construct+0xc>
 8000c7a:	4a03      	ldr	r2, [pc, #12]	@ (8000c88 <cmox_cmac_construct+0x10>)
 8000c7c:	6002      	str	r2, [r0, #0]
 8000c7e:	6809      	ldr	r1, [r1, #0]
 8000c80:	680b      	ldr	r3, [r1, #0]
 8000c82:	60c3      	str	r3, [r0, #12]
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	08000c48 	.word	0x08000c48

08000c8c <cmox_cmac_compute>:
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	460c      	mov	r4, r1
 8000c90:	b0d1      	sub	sp, #324	@ 0x144
 8000c92:	4601      	mov	r1, r0
 8000c94:	4615      	mov	r5, r2
 8000c96:	461e      	mov	r6, r3
 8000c98:	a806      	add	r0, sp, #24
 8000c9a:	f7ff ffed 	bl	8000c78 <cmox_cmac_construct>
 8000c9e:	9a58      	ldr	r2, [sp, #352]	@ 0x160
 8000ca0:	9959      	ldr	r1, [sp, #356]	@ 0x164
 8000ca2:	9204      	str	r2, [sp, #16]
 8000ca4:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 8000ca6:	9a56      	ldr	r2, [sp, #344]	@ 0x158
 8000ca8:	9105      	str	r1, [sp, #20]
 8000caa:	9303      	str	r3, [sp, #12]
 8000cac:	2700      	movs	r7, #0
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	4633      	mov	r3, r6
 8000cb2:	9702      	str	r7, [sp, #8]
 8000cb4:	462a      	mov	r2, r5
 8000cb6:	9701      	str	r7, [sp, #4]
 8000cb8:	4621      	mov	r1, r4
 8000cba:	f7ff fb79 	bl	80003b0 <cmox_mac_innerCompute>
 8000cbe:	b051      	add	sp, #324	@ 0x144
 8000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cc2 <cmox_cmac_verify>:
 8000cc2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000cc4:	460c      	mov	r4, r1
 8000cc6:	b0d0      	sub	sp, #320	@ 0x140
 8000cc8:	4601      	mov	r1, r0
 8000cca:	4615      	mov	r5, r2
 8000ccc:	461e      	mov	r6, r3
 8000cce:	a805      	add	r0, sp, #20
 8000cd0:	f7ff ffd2 	bl	8000c78 <cmox_cmac_construct>
 8000cd4:	9958      	ldr	r1, [sp, #352]	@ 0x160
 8000cd6:	9a57      	ldr	r2, [sp, #348]	@ 0x15c
 8000cd8:	9104      	str	r1, [sp, #16]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	9956      	ldr	r1, [sp, #344]	@ 0x158
 8000cde:	9203      	str	r2, [sp, #12]
 8000ce0:	9302      	str	r3, [sp, #8]
 8000ce2:	462a      	mov	r2, r5
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	4633      	mov	r3, r6
 8000ce8:	9100      	str	r1, [sp, #0]
 8000cea:	4621      	mov	r1, r4
 8000cec:	f7ff fba3 	bl	8000436 <cmox_mac_innerVerify>
 8000cf0:	b052      	add	sp, #328	@ 0x148
 8000cf2:	bd70      	pop	{r4, r5, r6, pc}

08000cf4 <firstloop_bb_cmp>:
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	2401      	movs	r4, #1
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9400      	str	r4, [sp, #0]
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	e00d      	b.n	8000d1c <firstloop_bb_cmp+0x28>
 8000d00:	9d00      	ldr	r5, [sp, #0]
 8000d02:	5d06      	ldrb	r6, [r0, r4]
 8000d04:	5d0f      	ldrb	r7, [r1, r4]
 8000d06:	1c64      	adds	r4, r4, #1
 8000d08:	407e      	eors	r6, r7
 8000d0a:	43f6      	mvns	r6, r6
 8000d0c:	1c76      	adds	r6, r6, #1
 8000d0e:	0ff6      	lsrs	r6, r6, #31
 8000d10:	f086 0601 	eor.w	r6, r6, #1
 8000d14:	4035      	ands	r5, r6
 8000d16:	9500      	str	r5, [sp, #0]
 8000d18:	9d00      	ldr	r5, [sp, #0]
 8000d1a:	18eb      	adds	r3, r5, r3
 8000d1c:	4294      	cmp	r4, r2
 8000d1e:	d3ef      	bcc.n	8000d00 <firstloop_bb_cmp+0xc>
 8000d20:	4618      	mov	r0, r3
 8000d22:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000d24 <secondloop_bb_cmp>:
 8000d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d26:	2300      	movs	r3, #0
 8000d28:	2401      	movs	r4, #1
 8000d2a:	9400      	str	r4, [sp, #0]
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	e011      	b.n	8000d54 <secondloop_bb_cmp+0x30>
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	1886      	adds	r6, r0, r2
 8000d34:	f816 4c01 	ldrb.w	r4, [r6, #-1]
 8000d38:	188f      	adds	r7, r1, r2
 8000d3a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8000d3e:	4074      	eors	r4, r6
 8000d40:	43e4      	mvns	r4, r4
 8000d42:	1c64      	adds	r4, r4, #1
 8000d44:	0fe4      	lsrs	r4, r4, #31
 8000d46:	f084 0401 	eor.w	r4, r4, #1
 8000d4a:	4025      	ands	r5, r4
 8000d4c:	9500      	str	r5, [sp, #0]
 8000d4e:	9c00      	ldr	r4, [sp, #0]
 8000d50:	18e3      	adds	r3, r4, r3
 8000d52:	1e52      	subs	r2, r2, #1
 8000d54:	d1ec      	bne.n	8000d30 <secondloop_bb_cmp+0xc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08000d5c <bufType_bb>:
 8000d5c:	0cf5 0800 0d25 0800 0001 0000               ....%.......

08000d68 <cmox_utils_robustCmp>:
 8000d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d6c:	461c      	mov	r4, r3
 8000d6e:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8000d72:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8000d74:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	460e      	mov	r6, r1
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	f8d9 b000 	ldr.w	fp, [r9]
 8000d84:	4692      	mov	sl, r2
 8000d86:	4605      	mov	r5, r0
 8000d88:	4632      	mov	r2, r6
 8000d8a:	4651      	mov	r1, sl
 8000d8c:	47d8      	blx	fp
 8000d8e:	f1b8 0f00 	cmp.w	r8, #0
 8000d92:	4683      	mov	fp, r0
 8000d94:	d02d      	beq.n	8000df2 <cmox_utils_robustCmp+0x8a>
 8000d96:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d9a:	4632      	mov	r2, r6
 8000d9c:	4651      	mov	r1, sl
 8000d9e:	4628      	mov	r0, r5
 8000da0:	4798      	blx	r3
 8000da2:	ea6f 020b 	mvn.w	r2, fp
 8000da6:	1c52      	adds	r2, r2, #1
 8000da8:	ea42 020b 	orr.w	r2, r2, fp
 8000dac:	9900      	ldr	r1, [sp, #0]
 8000dae:	ea6f 75d2 	mvn.w	r5, r2, lsr #31
 8000db2:	43c3      	mvns	r3, r0
 8000db4:	1c5b      	adds	r3, r3, #1
 8000db6:	4303      	orrs	r3, r0
 8000db8:	1c6d      	adds	r5, r5, #1
 8000dba:	4029      	ands	r1, r5
 8000dbc:	9100      	str	r1, [sp, #0]
 8000dbe:	ea6f 75d3 	mvn.w	r5, r3, lsr #31
 8000dc2:	9a00      	ldr	r2, [sp, #0]
 8000dc4:	f086 3155 	eor.w	r1, r6, #1431655765	@ 0x55555555
 8000dc8:	4048      	eors	r0, r1
 8000dca:	f080 3355 	eor.w	r3, r0, #1431655765	@ 0x55555555
 8000dce:	1c6d      	adds	r5, r5, #1
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	402a      	ands	r2, r5
 8000dd4:	ea87 0100 	eor.w	r1, r7, r0
 8000dd8:	1c5b      	adds	r3, r3, #1
 8000dda:	9200      	str	r2, [sp, #0]
 8000ddc:	f081 3155 	eor.w	r1, r1, #1431655765	@ 0x55555555
 8000de0:	4318      	orrs	r0, r3
 8000de2:	f8c8 1000 	str.w	r1, [r8]
 8000de6:	ea6f 70d0 	mvn.w	r0, r0, lsr #31
 8000dea:	9a00      	ldr	r2, [sp, #0]
 8000dec:	1c40      	adds	r0, r0, #1
 8000dee:	4382      	bics	r2, r0
 8000df0:	9200      	str	r2, [sp, #0]
 8000df2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8000df6:	2901      	cmp	r1, #1
 8000df8:	d109      	bne.n	8000e0e <cmox_utils_robustCmp+0xa6>
 8000dfa:	4074      	eors	r4, r6
 8000dfc:	43e2      	mvns	r2, r4
 8000dfe:	1c52      	adds	r2, r2, #1
 8000e00:	4314      	orrs	r4, r2
 8000e02:	ea6f 71d4 	mvn.w	r1, r4, lsr #31
 8000e06:	9800      	ldr	r0, [sp, #0]
 8000e08:	1c49      	adds	r1, r1, #1
 8000e0a:	4388      	bics	r0, r1
 8000e0c:	e00a      	b.n	8000e24 <cmox_utils_robustCmp+0xbc>
 8000e0e:	1cf1      	adds	r1, r6, #3
 8000e10:	9800      	ldr	r0, [sp, #0]
 8000e12:	ea84 0291 	eor.w	r2, r4, r1, lsr #2
 8000e16:	43d2      	mvns	r2, r2
 8000e18:	1c52      	adds	r2, r2, #1
 8000e1a:	4314      	orrs	r4, r2
 8000e1c:	ea6f 73d4 	mvn.w	r3, r4, lsr #31
 8000e20:	1c5b      	adds	r3, r3, #1
 8000e22:	4398      	bics	r0, r3
 8000e24:	f086 36aa 	eor.w	r6, r6, #2863311530	@ 0xaaaaaaaa
 8000e28:	ea86 060b 	eor.w	r6, r6, fp
 8000e2c:	f086 33aa 	eor.w	r3, r6, #2863311530	@ 0xaaaaaaaa
 8000e30:	43f2      	mvns	r2, r6
 8000e32:	43db      	mvns	r3, r3
 8000e34:	f3c2 72c0 	ubfx	r2, r2, #31, #1
 8000e38:	1c5b      	adds	r3, r3, #1
 8000e3a:	9000      	str	r0, [sp, #0]
 8000e3c:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 8000e40:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8000e42:	9900      	ldr	r1, [sp, #0]
 8000e44:	4077      	eors	r7, r6
 8000e46:	f087 37aa 	eor.w	r7, r7, #2863311530	@ 0xaaaaaaaa
 8000e4a:	43d2      	mvns	r2, r2
 8000e4c:	1c52      	adds	r2, r2, #1
 8000e4e:	4391      	bics	r1, r2
 8000e50:	9100      	str	r1, [sp, #0]
 8000e52:	9900      	ldr	r1, [sp, #0]
 8000e54:	4388      	bics	r0, r1
 8000e56:	9900      	ldr	r1, [sp, #0]
 8000e58:	400f      	ands	r7, r1
 8000e5a:	4338      	orrs	r0, r7
 8000e5c:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e60 <cmox_aesSmall_keySchedule>:
 8000e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e64:	f100 050c 	add.w	r5, r0, #12
 8000e68:	f04f 0800 	mov.w	r8, #0
 8000e6c:	0892      	lsrs	r2, r2, #2
 8000e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f68 <cmox_aesSmall_keySchedule+0x108>)
 8000e70:	2000      	movs	r0, #0
 8000e72:	e005      	b.n	8000e80 <cmox_aesSmall_keySchedule+0x20>
 8000e74:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8000e78:	ba24      	rev	r4, r4
 8000e7a:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
 8000e7e:	1c40      	adds	r0, r0, #1
 8000e80:	4290      	cmp	r0, r2
 8000e82:	d3f7      	bcc.n	8000e74 <cmox_aesSmall_keySchedule+0x14>
 8000e84:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 8000e88:	4f38      	ldr	r7, [pc, #224]	@ (8000f6c <cmox_aesSmall_keySchedule+0x10c>)
 8000e8a:	f8d5 c000 	ldr.w	ip, [r5]
 8000e8e:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8000e92:	0404      	lsls	r4, r0, #16
 8000e94:	0e24      	lsrs	r4, r4, #24
 8000e96:	5d3e      	ldrb	r6, [r7, r4]
 8000e98:	4c35      	ldr	r4, [pc, #212]	@ (8000f70 <cmox_aesSmall_keySchedule+0x110>)
 8000e9a:	0201      	lsls	r1, r0, #8
 8000e9c:	0e09      	lsrs	r1, r1, #24
 8000e9e:	5c79      	ldrb	r1, [r7, r1]
 8000ea0:	0436      	lsls	r6, r6, #16
 8000ea2:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 8000ea6:	b2c1      	uxtb	r1, r0
 8000ea8:	5c79      	ldrb	r1, [r7, r1]
 8000eaa:	0e00      	lsrs	r0, r0, #24
 8000eac:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 8000eb0:	5c39      	ldrb	r1, [r7, r0]
 8000eb2:	f854 0028 	ldr.w	r0, [r4, r8, lsl #2]
 8000eb6:	f108 0801 	add.w	r8, r8, #1
 8000eba:	430e      	orrs	r6, r1
 8000ebc:	ea86 010c 	eor.w	r1, r6, ip
 8000ec0:	1f2e      	subs	r6, r5, #4
 8000ec2:	4048      	eors	r0, r1
 8000ec4:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 8000ec8:	2001      	movs	r0, #1
 8000eca:	1881      	adds	r1, r0, r2
 8000ecc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8000ed0:	f856 e021 	ldr.w	lr, [r6, r1, lsl #2]
 8000ed4:	1c40      	adds	r0, r0, #1
 8000ed6:	2804      	cmp	r0, #4
 8000ed8:	ea84 040e 	eor.w	r4, r4, lr
 8000edc:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
 8000ee0:	d3f3      	bcc.n	8000eca <cmox_aesSmall_keySchedule+0x6a>
 8000ee2:	2a04      	cmp	r2, #4
 8000ee4:	d004      	beq.n	8000ef0 <cmox_aesSmall_keySchedule+0x90>
 8000ee6:	2a06      	cmp	r2, #6
 8000ee8:	d00c      	beq.n	8000f04 <cmox_aesSmall_keySchedule+0xa4>
 8000eea:	2a08      	cmp	r2, #8
 8000eec:	d016      	beq.n	8000f1c <cmox_aesSmall_keySchedule+0xbc>
 8000eee:	e038      	b.n	8000f62 <cmox_aesSmall_keySchedule+0x102>
 8000ef0:	f1b8 0f0a 	cmp.w	r8, #10
 8000ef4:	d204      	bcs.n	8000f00 <cmox_aesSmall_keySchedule+0xa0>
 8000ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000efa:	d001      	beq.n	8000f00 <cmox_aesSmall_keySchedule+0xa0>
 8000efc:	464d      	mov	r5, r9
 8000efe:	e7c1      	b.n	8000e84 <cmox_aesSmall_keySchedule+0x24>
 8000f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f04:	f1b8 0f07 	cmp.w	r8, #7
 8000f08:	d8fa      	bhi.n	8000f00 <cmox_aesSmall_keySchedule+0xa0>
 8000f0a:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8000f0c:	6928      	ldr	r0, [r5, #16]
 8000f0e:	4047      	eors	r7, r0
 8000f10:	62af      	str	r7, [r5, #40]	@ 0x28
 8000f12:	6968      	ldr	r0, [r5, #20]
 8000f14:	ea80 0107 	eor.w	r1, r0, r7
 8000f18:	62e9      	str	r1, [r5, #44]	@ 0x2c
 8000f1a:	e7ec      	b.n	8000ef6 <cmox_aesSmall_keySchedule+0x96>
 8000f1c:	f1b8 0f07 	cmp.w	r8, #7
 8000f20:	d2ee      	bcs.n	8000f00 <cmox_aesSmall_keySchedule+0xa0>
 8000f22:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8000f24:	6929      	ldr	r1, [r5, #16]
 8000f26:	0e04      	lsrs	r4, r0, #24
 8000f28:	f817 e004 	ldrb.w	lr, [r7, r4]
 8000f2c:	0204      	lsls	r4, r0, #8
 8000f2e:	0e24      	lsrs	r4, r4, #24
 8000f30:	5d3e      	ldrb	r6, [r7, r4]
 8000f32:	0404      	lsls	r4, r0, #16
 8000f34:	0e24      	lsrs	r4, r4, #24
 8000f36:	b2c0      	uxtb	r0, r0
 8000f38:	5d3c      	ldrb	r4, [r7, r4]
 8000f3a:	5c38      	ldrb	r0, [r7, r0]
 8000f3c:	0436      	lsls	r6, r6, #16
 8000f3e:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8000f42:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
 8000f46:	4306      	orrs	r6, r0
 8000f48:	4071      	eors	r1, r6
 8000f4a:	6329      	str	r1, [r5, #48]	@ 0x30
 8000f4c:	2005      	movs	r0, #5
 8000f4e:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8000f52:	1c40      	adds	r0, r0, #1
 8000f54:	69cf      	ldr	r7, [r1, #28]
 8000f56:	680c      	ldr	r4, [r1, #0]
 8000f58:	4067      	eors	r7, r4
 8000f5a:	2807      	cmp	r0, #7
 8000f5c:	620f      	str	r7, [r1, #32]
 8000f5e:	d9f6      	bls.n	8000f4e <cmox_aesSmall_keySchedule+0xee>
 8000f60:	e7c9      	b.n	8000ef6 <cmox_aesSmall_keySchedule+0x96>
 8000f62:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000f66:	e7c9      	b.n	8000efc <cmox_aesSmall_keySchedule+0x9c>
 8000f68:	00010004 	.word	0x00010004
 8000f6c:	0800885c 	.word	0x0800885c
 8000f70:	080083c0 	.word	0x080083c0

08000f74 <cmox_cipherMode_setKey>:
 8000f74:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f78:	b08c      	sub	sp, #48	@ 0x30
 8000f7a:	4692      	mov	sl, r2
 8000f7c:	f1ba 0f10 	cmp.w	sl, #16
 8000f80:	4ae7      	ldr	r2, [pc, #924]	@ (8001320 <cmox_cipherMode_setKey+0x3ac>)
 8000f82:	4be8      	ldr	r3, [pc, #928]	@ (8001324 <cmox_cipherMode_setKey+0x3b0>)
 8000f84:	4de8      	ldr	r5, [pc, #928]	@ (8001328 <cmox_cipherMode_setKey+0x3b4>)
 8000f86:	f8df 83a4 	ldr.w	r8, [pc, #932]	@ 800132c <cmox_cipherMode_setKey+0x3b8>
 8000f8a:	4ee9      	ldr	r6, [pc, #932]	@ (8001330 <cmox_cipherMode_setKey+0x3bc>)
 8000f8c:	f8df b3a4 	ldr.w	fp, [pc, #932]	@ 8001334 <cmox_cipherMode_setKey+0x3c0>
 8000f90:	f10d 0c04 	add.w	ip, sp, #4
 8000f94:	d008      	beq.n	8000fa8 <cmox_cipherMode_setKey+0x34>
 8000f96:	f1ba 0f18 	cmp.w	sl, #24
 8000f9a:	f000 8092 	beq.w	80010c2 <cmox_cipherMode_setKey+0x14e>
 8000f9e:	f1ba 0f20 	cmp.w	sl, #32
 8000fa2:	f000 8118 	beq.w	80011d6 <cmox_cipherMode_setKey+0x262>
 8000fa6:	e1a8      	b.n	80012fa <cmox_cipherMode_setKey+0x386>
 8000fa8:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8000fac:	4fe2      	ldr	r7, [pc, #904]	@ (8001338 <cmox_cipherMode_setKey+0x3c4>)
 8000fae:	e9db 0400 	ldrd	r0, r4, [fp]
 8000fb2:	e9ce 0400 	strd	r0, r4, [lr]
 8000fb6:	7838      	ldrb	r0, [r7, #0]
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	bf0c      	ite	eq
 8000fbc:	f04f 0900 	moveq.w	r9, #0
 8000fc0:	f04f 0904 	movne.w	r9, #4
 8000fc4:	f856 4009 	ldr.w	r4, [r6, r9]
 8000fc8:	f85e 7009 	ldr.w	r7, [lr, r9]
 8000fcc:	443c      	add	r4, r7
 8000fce:	6023      	str	r3, [r4, #0]
 8000fd0:	6827      	ldr	r7, [r4, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60a3      	str	r3, [r4, #8]
 8000fd6:	7b8c      	ldrb	r4, [r1, #14]
 8000fd8:	6873      	ldr	r3, [r6, #4]
 8000fda:	f8d6 9000 	ldr.w	r9, [r6]
 8000fde:	9400      	str	r4, [sp, #0]
 8000fe0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8000fe2:	405f      	eors	r7, r3
 8000fe4:	407c      	eors	r4, r7
 8000fe6:	f8de 7004 	ldr.w	r7, [lr, #4]
 8000fea:	f084 0404 	eor.w	r4, r4, #4
 8000fee:	ea87 0709 	eor.w	r7, r7, r9
 8000ff2:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8000ff6:	4474      	add	r4, lr
 8000ff8:	f084 0e52 	eor.w	lr, r4, #82	@ 0x52
 8000ffc:	9c00      	ldr	r4, [sp, #0]
 8000ffe:	4474      	add	r4, lr
 8001000:	f04f 0e01 	mov.w	lr, #1
 8001004:	f88c 400e 	strb.w	r4, [ip, #14]
 8001008:	f811 700e 	ldrb.w	r7, [r1, lr]
 800100c:	f80c 700e 	strb.w	r7, [ip, lr]
 8001010:	f10e 0e01 	add.w	lr, lr, #1
 8001014:	f1be 0f0e 	cmp.w	lr, #14
 8001018:	d3f6      	bcc.n	8001008 <cmox_cipherMode_setKey+0x94>
 800101a:	2800      	cmp	r0, #0
 800101c:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8001020:	e9db 4700 	ldrd	r4, r7, [fp]
 8001024:	e9ce 4700 	strd	r4, r7, [lr]
 8001028:	bf0c      	ite	eq
 800102a:	2700      	moveq	r7, #0
 800102c:	2704      	movne	r7, #4
 800102e:	463c      	mov	r4, r7
 8001030:	59f7      	ldr	r7, [r6, r7]
 8001032:	f85e 4004 	ldr.w	r4, [lr, r4]
 8001036:	19e4      	adds	r4, r4, r7
 8001038:	2701      	movs	r7, #1
 800103a:	f8c4 8000 	str.w	r8, [r4]
 800103e:	f8d4 8000 	ldr.w	r8, [r4]
 8001042:	60a7      	str	r7, [r4, #8]
 8001044:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8001046:	780f      	ldrb	r7, [r1, #0]
 8001048:	2800      	cmp	r0, #0
 800104a:	ea83 0808 	eor.w	r8, r3, r8
 800104e:	ea84 0408 	eor.w	r4, r4, r8
 8001052:	f084 0804 	eor.w	r8, r4, #4
 8001056:	f8de 4004 	ldr.w	r4, [lr, #4]
 800105a:	ea84 0409 	eor.w	r4, r4, r9
 800105e:	f084 04fc 	eor.w	r4, r4, #252	@ 0xfc
 8001062:	4444      	add	r4, r8
 8001064:	f084 080b 	eor.w	r8, r4, #11
 8001068:	e9db 4e00 	ldrd	r4, lr, [fp]
 800106c:	44b8      	add	r8, r7
 800106e:	af09      	add	r7, sp, #36	@ 0x24
 8001070:	e9c7 4e00 	strd	r4, lr, [r7]
 8001074:	f88d 8004 	strb.w	r8, [sp, #4]
 8001078:	ac09      	add	r4, sp, #36	@ 0x24
 800107a:	bf0e      	itee	eq
 800107c:	f04f 0e00 	moveq.w	lr, #0
 8001080:	2004      	movne	r0, #4
 8001082:	4686      	movne	lr, r0
 8001084:	5836      	ldr	r6, [r6, r0]
 8001086:	f854 000e 	ldr.w	r0, [r4, lr]
 800108a:	1986      	adds	r6, r0, r6
 800108c:	6035      	str	r5, [r6, #0]
 800108e:	6830      	ldr	r0, [r6, #0]
 8001090:	2501      	movs	r5, #1
 8001092:	60b5      	str	r5, [r6, #8]
 8001094:	7bce      	ldrb	r6, [r1, #15]
 8001096:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8001098:	4043      	eors	r3, r0
 800109a:	6860      	ldr	r0, [r4, #4]
 800109c:	404b      	eors	r3, r1
 800109e:	f083 0304 	eor.w	r3, r3, #4
 80010a2:	ea80 0009 	eor.w	r0, r0, r9
 80010a6:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 80010aa:	4403      	add	r3, r0
 80010ac:	f083 0385 	eor.w	r3, r3, #133	@ 0x85
 80010b0:	199b      	adds	r3, r3, r6
 80010b2:	f88c 300f 	strb.w	r3, [ip, #15]
 80010b6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80010b8:	7a28      	ldrb	r0, [r5, #8]
 80010ba:	07c1      	lsls	r1, r0, #31
 80010bc:	f100 811f 	bmi.w	80012fe <cmox_cipherMode_setKey+0x38a>
 80010c0:	e11b      	b.n	80012fa <cmox_cipherMode_setKey+0x386>
 80010c2:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80010c6:	4f9c      	ldr	r7, [pc, #624]	@ (8001338 <cmox_cipherMode_setKey+0x3c4>)
 80010c8:	e9db 0400 	ldrd	r0, r4, [fp]
 80010cc:	e9ce 0400 	strd	r0, r4, [lr]
 80010d0:	7838      	ldrb	r0, [r7, #0]
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf0c      	ite	eq
 80010d6:	f04f 0900 	moveq.w	r9, #0
 80010da:	f04f 0904 	movne.w	r9, #4
 80010de:	f856 4009 	ldr.w	r4, [r6, r9]
 80010e2:	f85e 7009 	ldr.w	r7, [lr, r9]
 80010e6:	443c      	add	r4, r7
 80010e8:	6025      	str	r5, [r4, #0]
 80010ea:	6827      	ldr	r7, [r4, #0]
 80010ec:	2501      	movs	r5, #1
 80010ee:	60a5      	str	r5, [r4, #8]
 80010f0:	7b8c      	ldrb	r4, [r1, #14]
 80010f2:	6875      	ldr	r5, [r6, #4]
 80010f4:	f8d6 9000 	ldr.w	r9, [r6]
 80010f8:	9400      	str	r4, [sp, #0]
 80010fa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80010fc:	406f      	eors	r7, r5
 80010fe:	407c      	eors	r4, r7
 8001100:	f8de 7004 	ldr.w	r7, [lr, #4]
 8001104:	f084 0404 	eor.w	r4, r4, #4
 8001108:	ea87 0709 	eor.w	r7, r7, r9
 800110c:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8001110:	4474      	add	r4, lr
 8001112:	f084 0e85 	eor.w	lr, r4, #133	@ 0x85
 8001116:	9c00      	ldr	r4, [sp, #0]
 8001118:	4474      	add	r4, lr
 800111a:	f04f 0e01 	mov.w	lr, #1
 800111e:	f88c 400e 	strb.w	r4, [ip, #14]
 8001122:	f811 700e 	ldrb.w	r7, [r1, lr]
 8001126:	f80c 700e 	strb.w	r7, [ip, lr]
 800112a:	f10e 0e01 	add.w	lr, lr, #1
 800112e:	f1be 0f0e 	cmp.w	lr, #14
 8001132:	d3f6      	bcc.n	8001122 <cmox_cipherMode_setKey+0x1ae>
 8001134:	2800      	cmp	r0, #0
 8001136:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 800113a:	e9db 4700 	ldrd	r4, r7, [fp]
 800113e:	e9ce 4700 	strd	r4, r7, [lr]
 8001142:	bf0c      	ite	eq
 8001144:	2700      	moveq	r7, #0
 8001146:	2704      	movne	r7, #4
 8001148:	463c      	mov	r4, r7
 800114a:	59f7      	ldr	r7, [r6, r7]
 800114c:	f85e 4004 	ldr.w	r4, [lr, r4]
 8001150:	19e4      	adds	r4, r4, r7
 8001152:	6023      	str	r3, [r4, #0]
 8001154:	6827      	ldr	r7, [r4, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	60a3      	str	r3, [r4, #8]
 800115a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800115c:	406f      	eors	r7, r5
 800115e:	780c      	ldrb	r4, [r1, #0]
 8001160:	405f      	eors	r7, r3
 8001162:	f8de 3004 	ldr.w	r3, [lr, #4]
 8001166:	f087 0704 	eor.w	r7, r7, #4
 800116a:	ea83 0309 	eor.w	r3, r3, r9
 800116e:	f083 03fc 	eor.w	r3, r3, #252	@ 0xfc
 8001172:	441f      	add	r7, r3
 8001174:	f087 0752 	eor.w	r7, r7, #82	@ 0x52
 8001178:	193f      	adds	r7, r7, r4
 800117a:	2800      	cmp	r0, #0
 800117c:	f88d 7004 	strb.w	r7, [sp, #4]
 8001180:	af09      	add	r7, sp, #36	@ 0x24
 8001182:	e9db 3400 	ldrd	r3, r4, [fp]
 8001186:	e9c7 3400 	strd	r3, r4, [r7]
 800118a:	ac09      	add	r4, sp, #36	@ 0x24
 800118c:	bf0e      	itee	eq
 800118e:	2300      	moveq	r3, #0
 8001190:	2004      	movne	r0, #4
 8001192:	2304      	movne	r3, #4
 8001194:	5836      	ldr	r6, [r6, r0]
 8001196:	58e0      	ldr	r0, [r4, r3]
 8001198:	2301      	movs	r3, #1
 800119a:	1986      	adds	r6, r0, r6
 800119c:	f8c6 8000 	str.w	r8, [r6]
 80011a0:	6830      	ldr	r0, [r6, #0]
 80011a2:	60b3      	str	r3, [r6, #8]
 80011a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80011a6:	7bce      	ldrb	r6, [r1, #15]
 80011a8:	4045      	eors	r5, r0
 80011aa:	6860      	ldr	r0, [r4, #4]
 80011ac:	405d      	eors	r5, r3
 80011ae:	f085 0504 	eor.w	r5, r5, #4
 80011b2:	ea80 0009 	eor.w	r0, r0, r9
 80011b6:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 80011ba:	4405      	add	r5, r0
 80011bc:	f085 050b 	eor.w	r5, r5, #11
 80011c0:	19ad      	adds	r5, r5, r6
 80011c2:	2010      	movs	r0, #16
 80011c4:	f88c 500f 	strb.w	r5, [ip, #15]
 80011c8:	5c0b      	ldrb	r3, [r1, r0]
 80011ca:	f80c 3000 	strb.w	r3, [ip, r0]
 80011ce:	1c40      	adds	r0, r0, #1
 80011d0:	2818      	cmp	r0, #24
 80011d2:	d3f9      	bcc.n	80011c8 <cmox_cipherMode_setKey+0x254>
 80011d4:	e76f      	b.n	80010b6 <cmox_cipherMode_setKey+0x142>
 80011d6:	a809      	add	r0, sp, #36	@ 0x24
 80011d8:	4c57      	ldr	r4, [pc, #348]	@ (8001338 <cmox_cipherMode_setKey+0x3c4>)
 80011da:	e9db e900 	ldrd	lr, r9, [fp]
 80011de:	e9c0 e900 	strd	lr, r9, [r0]
 80011e2:	7820      	ldrb	r0, [r4, #0]
 80011e4:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80011e8:	2800      	cmp	r0, #0
 80011ea:	bf0c      	ite	eq
 80011ec:	f04f 0900 	moveq.w	r9, #0
 80011f0:	f04f 0904 	movne.w	r9, #4
 80011f4:	f856 4009 	ldr.w	r4, [r6, r9]
 80011f8:	f85e 7009 	ldr.w	r7, [lr, r9]
 80011fc:	443c      	add	r4, r7
 80011fe:	f8c4 8000 	str.w	r8, [r4]
 8001202:	6827      	ldr	r7, [r4, #0]
 8001204:	f04f 0801 	mov.w	r8, #1
 8001208:	f8c4 8008 	str.w	r8, [r4, #8]
 800120c:	7fcc      	ldrb	r4, [r1, #31]
 800120e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8001212:	f8d6 9000 	ldr.w	r9, [r6]
 8001216:	9400      	str	r4, [sp, #0]
 8001218:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800121a:	ea88 0707 	eor.w	r7, r8, r7
 800121e:	407c      	eors	r4, r7
 8001220:	f8de 7004 	ldr.w	r7, [lr, #4]
 8001224:	f084 0404 	eor.w	r4, r4, #4
 8001228:	ea87 0709 	eor.w	r7, r7, r9
 800122c:	f087 0efc 	eor.w	lr, r7, #252	@ 0xfc
 8001230:	4474      	add	r4, lr
 8001232:	f084 0e0b 	eor.w	lr, r4, #11
 8001236:	9c00      	ldr	r4, [sp, #0]
 8001238:	4474      	add	r4, lr
 800123a:	f04f 0e00 	mov.w	lr, #0
 800123e:	f88c 401f 	strb.w	r4, [ip, #31]
 8001242:	f811 700e 	ldrb.w	r7, [r1, lr]
 8001246:	f80c 700e 	strb.w	r7, [ip, lr]
 800124a:	f10e 0e01 	add.w	lr, lr, #1
 800124e:	f1be 0f10 	cmp.w	lr, #16
 8001252:	d3f6      	bcc.n	8001242 <cmox_cipherMode_setKey+0x2ce>
 8001254:	2800      	cmp	r0, #0
 8001256:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 800125a:	e9db 4700 	ldrd	r4, r7, [fp]
 800125e:	e9ce 4700 	strd	r4, r7, [lr]
 8001262:	bf0c      	ite	eq
 8001264:	2700      	moveq	r7, #0
 8001266:	2704      	movne	r7, #4
 8001268:	463c      	mov	r4, r7
 800126a:	59f7      	ldr	r7, [r6, r7]
 800126c:	f85e 4004 	ldr.w	r4, [lr, r4]
 8001270:	19e4      	adds	r4, r4, r7
 8001272:	6025      	str	r5, [r4, #0]
 8001274:	6827      	ldr	r7, [r4, #0]
 8001276:	2501      	movs	r5, #1
 8001278:	60a5      	str	r5, [r4, #8]
 800127a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800127c:	ea88 0707 	eor.w	r7, r8, r7
 8001280:	7c4c      	ldrb	r4, [r1, #17]
 8001282:	406f      	eors	r7, r5
 8001284:	f8de 5004 	ldr.w	r5, [lr, #4]
 8001288:	f087 0704 	eor.w	r7, r7, #4
 800128c:	ea85 0509 	eor.w	r5, r5, r9
 8001290:	f085 05fc 	eor.w	r5, r5, #252	@ 0xfc
 8001294:	442f      	add	r7, r5
 8001296:	f087 0785 	eor.w	r7, r7, #133	@ 0x85
 800129a:	193f      	adds	r7, r7, r4
 800129c:	2800      	cmp	r0, #0
 800129e:	f88c 7011 	strb.w	r7, [ip, #17]
 80012a2:	ad09      	add	r5, sp, #36	@ 0x24
 80012a4:	e9db 7400 	ldrd	r7, r4, [fp]
 80012a8:	e9c5 7400 	strd	r7, r4, [r5]
 80012ac:	bf0e      	itee	eq
 80012ae:	f04f 0b00 	moveq.w	fp, #0
 80012b2:	2004      	movne	r0, #4
 80012b4:	4683      	movne	fp, r0
 80012b6:	5836      	ldr	r6, [r6, r0]
 80012b8:	f855 000b 	ldr.w	r0, [r5, fp]
 80012bc:	1986      	adds	r6, r0, r6
 80012be:	6033      	str	r3, [r6, #0]
 80012c0:	6830      	ldr	r0, [r6, #0]
 80012c2:	2301      	movs	r3, #1
 80012c4:	60b3      	str	r3, [r6, #8]
 80012c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80012c8:	ea88 0000 	eor.w	r0, r8, r0
 80012cc:	7c0e      	ldrb	r6, [r1, #16]
 80012ce:	4058      	eors	r0, r3
 80012d0:	f080 0804 	eor.w	r8, r0, #4
 80012d4:	6868      	ldr	r0, [r5, #4]
 80012d6:	ea80 0009 	eor.w	r0, r0, r9
 80012da:	f080 00fc 	eor.w	r0, r0, #252	@ 0xfc
 80012de:	4440      	add	r0, r8
 80012e0:	f080 0852 	eor.w	r8, r0, #82	@ 0x52
 80012e4:	44b0      	add	r8, r6
 80012e6:	2012      	movs	r0, #18
 80012e8:	f88c 8010 	strb.w	r8, [ip, #16]
 80012ec:	5c0b      	ldrb	r3, [r1, r0]
 80012ee:	f80c 3000 	strb.w	r3, [ip, r0]
 80012f2:	1c40      	adds	r0, r0, #1
 80012f4:	281f      	cmp	r0, #31
 80012f6:	d3f9      	bcc.n	80012ec <cmox_cipherMode_setKey+0x378>
 80012f8:	e6dd      	b.n	80010b6 <cmox_cipherMode_setKey+0x142>
 80012fa:	4610      	mov	r0, r2
 80012fc:	e00d      	b.n	800131a <cmox_cipherMode_setKey+0x3a6>
 80012fe:	682e      	ldr	r6, [r5, #0]
 8001300:	4652      	mov	r2, sl
 8001302:	a901      	add	r1, sp, #4
 8001304:	4628      	mov	r0, r5
 8001306:	6873      	ldr	r3, [r6, #4]
 8001308:	4798      	blx	r3
 800130a:	68a8      	ldr	r0, [r5, #8]
 800130c:	f8c5 a004 	str.w	sl, [r5, #4]
 8001310:	f040 0004 	orr.w	r0, r0, #4
 8001314:	60a8      	str	r0, [r5, #8]
 8001316:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800131a:	b00d      	add	sp, #52	@ 0x34
 800131c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001320:	00010003 	.word	0x00010003
 8001324:	f78e2254 	.word	0xf78e2254
 8001328:	2e8f137d 	.word	0x2e8f137d
 800132c:	910e0ba4 	.word	0x910e0ba4
 8001330:	080083a8 	.word	0x080083a8
 8001334:	0800133c 	.word	0x0800133c
 8001338:	2400009c 	.word	0x2400009c
 800133c:	0101b004 	.word	0x0101b004
 8001340:	45011700 	.word	0x45011700

08001344 <convert_block_2_words>:
 8001344:	b530      	push	{r4, r5, lr}
 8001346:	2200      	movs	r2, #0
 8001348:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800134c:	785d      	ldrb	r5, [r3, #1]
 800134e:	781c      	ldrb	r4, [r3, #0]
 8001350:	042d      	lsls	r5, r5, #16
 8001352:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
 8001356:	789c      	ldrb	r4, [r3, #2]
 8001358:	78db      	ldrb	r3, [r3, #3]
 800135a:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
 800135e:	431d      	orrs	r5, r3
 8001360:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 8001364:	1c52      	adds	r2, r2, #1
 8001366:	2a04      	cmp	r2, #4
 8001368:	d3ee      	bcc.n	8001348 <convert_block_2_words+0x4>
 800136a:	bd30      	pop	{r4, r5, pc}

0800136c <xor_blocks>:
 800136c:	b510      	push	{r4, lr}
 800136e:	2200      	movs	r2, #0
 8001370:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8001374:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8001378:	4063      	eors	r3, r4
 800137a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800137e:	1c52      	adds	r2, r2, #1
 8001380:	2a04      	cmp	r2, #4
 8001382:	d3f5      	bcc.n	8001370 <xor_blocks+0x4>
 8001384:	bd10      	pop	{r4, pc}

08001386 <strlen>:
 8001386:	4603      	mov	r3, r0
 8001388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800138c:	2a00      	cmp	r2, #0
 800138e:	d1fb      	bne.n	8001388 <strlen+0x2>
 8001390:	1a18      	subs	r0, r3, r0
 8001392:	3801      	subs	r0, #1
 8001394:	4770      	bx	lr

08001396 <__aeabi_memset>:
 8001396:	b470      	push	{r4, r5, r6}
 8001398:	0784      	lsls	r4, r0, #30
 800139a:	d046      	beq.n	800142a <__aeabi_memset+0x94>
 800139c:	1e4c      	subs	r4, r1, #1
 800139e:	2900      	cmp	r1, #0
 80013a0:	d041      	beq.n	8001426 <__aeabi_memset+0x90>
 80013a2:	b2d5      	uxtb	r5, r2
 80013a4:	4603      	mov	r3, r0
 80013a6:	e002      	b.n	80013ae <__aeabi_memset+0x18>
 80013a8:	1e61      	subs	r1, r4, #1
 80013aa:	b3e4      	cbz	r4, 8001426 <__aeabi_memset+0x90>
 80013ac:	460c      	mov	r4, r1
 80013ae:	f803 5b01 	strb.w	r5, [r3], #1
 80013b2:	0799      	lsls	r1, r3, #30
 80013b4:	d1f8      	bne.n	80013a8 <__aeabi_memset+0x12>
 80013b6:	2c03      	cmp	r4, #3
 80013b8:	d92e      	bls.n	8001418 <__aeabi_memset+0x82>
 80013ba:	b2d5      	uxtb	r5, r2
 80013bc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80013c0:	2c0f      	cmp	r4, #15
 80013c2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80013c6:	d919      	bls.n	80013fc <__aeabi_memset+0x66>
 80013c8:	4626      	mov	r6, r4
 80013ca:	f103 0110 	add.w	r1, r3, #16
 80013ce:	3e10      	subs	r6, #16
 80013d0:	2e0f      	cmp	r6, #15
 80013d2:	f841 5c10 	str.w	r5, [r1, #-16]
 80013d6:	f841 5c0c 	str.w	r5, [r1, #-12]
 80013da:	f841 5c08 	str.w	r5, [r1, #-8]
 80013de:	f841 5c04 	str.w	r5, [r1, #-4]
 80013e2:	f101 0110 	add.w	r1, r1, #16
 80013e6:	d8f2      	bhi.n	80013ce <__aeabi_memset+0x38>
 80013e8:	f1a4 0110 	sub.w	r1, r4, #16
 80013ec:	f021 010f 	bic.w	r1, r1, #15
 80013f0:	f004 040f 	and.w	r4, r4, #15
 80013f4:	3110      	adds	r1, #16
 80013f6:	2c03      	cmp	r4, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	d90d      	bls.n	8001418 <__aeabi_memset+0x82>
 80013fc:	461e      	mov	r6, r3
 80013fe:	4621      	mov	r1, r4
 8001400:	3904      	subs	r1, #4
 8001402:	2903      	cmp	r1, #3
 8001404:	f846 5b04 	str.w	r5, [r6], #4
 8001408:	d8fa      	bhi.n	8001400 <__aeabi_memset+0x6a>
 800140a:	1f21      	subs	r1, r4, #4
 800140c:	f021 0103 	bic.w	r1, r1, #3
 8001410:	3104      	adds	r1, #4
 8001412:	440b      	add	r3, r1
 8001414:	f004 0403 	and.w	r4, r4, #3
 8001418:	b12c      	cbz	r4, 8001426 <__aeabi_memset+0x90>
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	441c      	add	r4, r3
 800141e:	f803 2b01 	strb.w	r2, [r3], #1
 8001422:	42a3      	cmp	r3, r4
 8001424:	d1fb      	bne.n	800141e <__aeabi_memset+0x88>
 8001426:	bc70      	pop	{r4, r5, r6}
 8001428:	4770      	bx	lr
 800142a:	460c      	mov	r4, r1
 800142c:	4603      	mov	r3, r0
 800142e:	e7c2      	b.n	80013b6 <__aeabi_memset+0x20>

08001430 <memchr>:
 8001430:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8001434:	2a10      	cmp	r2, #16
 8001436:	db2b      	blt.n	8001490 <memchr+0x60>
 8001438:	f010 0f07 	tst.w	r0, #7
 800143c:	d008      	beq.n	8001450 <memchr+0x20>
 800143e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001442:	3a01      	subs	r2, #1
 8001444:	428b      	cmp	r3, r1
 8001446:	d02d      	beq.n	80014a4 <memchr+0x74>
 8001448:	f010 0f07 	tst.w	r0, #7
 800144c:	b342      	cbz	r2, 80014a0 <memchr+0x70>
 800144e:	d1f6      	bne.n	800143e <memchr+0xe>
 8001450:	b4f0      	push	{r4, r5, r6, r7}
 8001452:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001456:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800145a:	f022 0407 	bic.w	r4, r2, #7
 800145e:	f07f 0700 	mvns.w	r7, #0
 8001462:	2300      	movs	r3, #0
 8001464:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001468:	3c08      	subs	r4, #8
 800146a:	ea85 0501 	eor.w	r5, r5, r1
 800146e:	ea86 0601 	eor.w	r6, r6, r1
 8001472:	fa85 f547 	uadd8	r5, r5, r7
 8001476:	faa3 f587 	sel	r5, r3, r7
 800147a:	fa86 f647 	uadd8	r6, r6, r7
 800147e:	faa5 f687 	sel	r6, r5, r7
 8001482:	b98e      	cbnz	r6, 80014a8 <memchr+0x78>
 8001484:	d1ee      	bne.n	8001464 <memchr+0x34>
 8001486:	bcf0      	pop	{r4, r5, r6, r7}
 8001488:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800148c:	f002 0207 	and.w	r2, r2, #7
 8001490:	b132      	cbz	r2, 80014a0 <memchr+0x70>
 8001492:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001496:	3a01      	subs	r2, #1
 8001498:	ea83 0301 	eor.w	r3, r3, r1
 800149c:	b113      	cbz	r3, 80014a4 <memchr+0x74>
 800149e:	d1f8      	bne.n	8001492 <memchr+0x62>
 80014a0:	2000      	movs	r0, #0
 80014a2:	4770      	bx	lr
 80014a4:	3801      	subs	r0, #1
 80014a6:	4770      	bx	lr
 80014a8:	2d00      	cmp	r5, #0
 80014aa:	bf06      	itte	eq
 80014ac:	4635      	moveq	r5, r6
 80014ae:	3803      	subeq	r0, #3
 80014b0:	3807      	subne	r0, #7
 80014b2:	f015 0f01 	tst.w	r5, #1
 80014b6:	d107      	bne.n	80014c8 <memchr+0x98>
 80014b8:	3001      	adds	r0, #1
 80014ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80014be:	bf02      	ittt	eq
 80014c0:	3001      	addeq	r0, #1
 80014c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80014c6:	3001      	addeq	r0, #1
 80014c8:	bcf0      	pop	{r4, r5, r6, r7}
 80014ca:	3801      	subs	r0, #1
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop

080014d0 <__aeabi_uldivmod>:
 80014d0:	b953      	cbnz	r3, 80014e8 <__aeabi_uldivmod+0x18>
 80014d2:	b94a      	cbnz	r2, 80014e8 <__aeabi_uldivmod+0x18>
 80014d4:	2900      	cmp	r1, #0
 80014d6:	bf08      	it	eq
 80014d8:	2800      	cmpeq	r0, #0
 80014da:	bf1c      	itt	ne
 80014dc:	f04f 31ff 	movne.w	r1, #4294967295
 80014e0:	f04f 30ff 	movne.w	r0, #4294967295
 80014e4:	f000 b96a 	b.w	80017bc <__aeabi_idiv0>
 80014e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80014ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80014f0:	f000 f806 	bl	8001500 <__udivmoddi4>
 80014f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80014f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80014fc:	b004      	add	sp, #16
 80014fe:	4770      	bx	lr

08001500 <__udivmoddi4>:
 8001500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001504:	9d08      	ldr	r5, [sp, #32]
 8001506:	460c      	mov	r4, r1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d14e      	bne.n	80015aa <__udivmoddi4+0xaa>
 800150c:	4694      	mov	ip, r2
 800150e:	458c      	cmp	ip, r1
 8001510:	4686      	mov	lr, r0
 8001512:	fab2 f282 	clz	r2, r2
 8001516:	d962      	bls.n	80015de <__udivmoddi4+0xde>
 8001518:	b14a      	cbz	r2, 800152e <__udivmoddi4+0x2e>
 800151a:	f1c2 0320 	rsb	r3, r2, #32
 800151e:	4091      	lsls	r1, r2
 8001520:	fa20 f303 	lsr.w	r3, r0, r3
 8001524:	fa0c fc02 	lsl.w	ip, ip, r2
 8001528:	4319      	orrs	r1, r3
 800152a:	fa00 fe02 	lsl.w	lr, r0, r2
 800152e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001532:	fa1f f68c 	uxth.w	r6, ip
 8001536:	fbb1 f4f7 	udiv	r4, r1, r7
 800153a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800153e:	fb07 1114 	mls	r1, r7, r4, r1
 8001542:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001546:	fb04 f106 	mul.w	r1, r4, r6
 800154a:	4299      	cmp	r1, r3
 800154c:	d90a      	bls.n	8001564 <__udivmoddi4+0x64>
 800154e:	eb1c 0303 	adds.w	r3, ip, r3
 8001552:	f104 30ff 	add.w	r0, r4, #4294967295
 8001556:	f080 8112 	bcs.w	800177e <__udivmoddi4+0x27e>
 800155a:	4299      	cmp	r1, r3
 800155c:	f240 810f 	bls.w	800177e <__udivmoddi4+0x27e>
 8001560:	3c02      	subs	r4, #2
 8001562:	4463      	add	r3, ip
 8001564:	1a59      	subs	r1, r3, r1
 8001566:	fa1f f38e 	uxth.w	r3, lr
 800156a:	fbb1 f0f7 	udiv	r0, r1, r7
 800156e:	fb07 1110 	mls	r1, r7, r0, r1
 8001572:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001576:	fb00 f606 	mul.w	r6, r0, r6
 800157a:	429e      	cmp	r6, r3
 800157c:	d90a      	bls.n	8001594 <__udivmoddi4+0x94>
 800157e:	eb1c 0303 	adds.w	r3, ip, r3
 8001582:	f100 31ff 	add.w	r1, r0, #4294967295
 8001586:	f080 80fc 	bcs.w	8001782 <__udivmoddi4+0x282>
 800158a:	429e      	cmp	r6, r3
 800158c:	f240 80f9 	bls.w	8001782 <__udivmoddi4+0x282>
 8001590:	4463      	add	r3, ip
 8001592:	3802      	subs	r0, #2
 8001594:	1b9b      	subs	r3, r3, r6
 8001596:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800159a:	2100      	movs	r1, #0
 800159c:	b11d      	cbz	r5, 80015a6 <__udivmoddi4+0xa6>
 800159e:	40d3      	lsrs	r3, r2
 80015a0:	2200      	movs	r2, #0
 80015a2:	e9c5 3200 	strd	r3, r2, [r5]
 80015a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015aa:	428b      	cmp	r3, r1
 80015ac:	d905      	bls.n	80015ba <__udivmoddi4+0xba>
 80015ae:	b10d      	cbz	r5, 80015b4 <__udivmoddi4+0xb4>
 80015b0:	e9c5 0100 	strd	r0, r1, [r5]
 80015b4:	2100      	movs	r1, #0
 80015b6:	4608      	mov	r0, r1
 80015b8:	e7f5      	b.n	80015a6 <__udivmoddi4+0xa6>
 80015ba:	fab3 f183 	clz	r1, r3
 80015be:	2900      	cmp	r1, #0
 80015c0:	d146      	bne.n	8001650 <__udivmoddi4+0x150>
 80015c2:	42a3      	cmp	r3, r4
 80015c4:	d302      	bcc.n	80015cc <__udivmoddi4+0xcc>
 80015c6:	4290      	cmp	r0, r2
 80015c8:	f0c0 80f0 	bcc.w	80017ac <__udivmoddi4+0x2ac>
 80015cc:	1a86      	subs	r6, r0, r2
 80015ce:	eb64 0303 	sbc.w	r3, r4, r3
 80015d2:	2001      	movs	r0, #1
 80015d4:	2d00      	cmp	r5, #0
 80015d6:	d0e6      	beq.n	80015a6 <__udivmoddi4+0xa6>
 80015d8:	e9c5 6300 	strd	r6, r3, [r5]
 80015dc:	e7e3      	b.n	80015a6 <__udivmoddi4+0xa6>
 80015de:	2a00      	cmp	r2, #0
 80015e0:	f040 8090 	bne.w	8001704 <__udivmoddi4+0x204>
 80015e4:	eba1 040c 	sub.w	r4, r1, ip
 80015e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80015ec:	fa1f f78c 	uxth.w	r7, ip
 80015f0:	2101      	movs	r1, #1
 80015f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80015f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80015fa:	fb08 4416 	mls	r4, r8, r6, r4
 80015fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001602:	fb07 f006 	mul.w	r0, r7, r6
 8001606:	4298      	cmp	r0, r3
 8001608:	d908      	bls.n	800161c <__udivmoddi4+0x11c>
 800160a:	eb1c 0303 	adds.w	r3, ip, r3
 800160e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001612:	d202      	bcs.n	800161a <__udivmoddi4+0x11a>
 8001614:	4298      	cmp	r0, r3
 8001616:	f200 80cd 	bhi.w	80017b4 <__udivmoddi4+0x2b4>
 800161a:	4626      	mov	r6, r4
 800161c:	1a1c      	subs	r4, r3, r0
 800161e:	fa1f f38e 	uxth.w	r3, lr
 8001622:	fbb4 f0f8 	udiv	r0, r4, r8
 8001626:	fb08 4410 	mls	r4, r8, r0, r4
 800162a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800162e:	fb00 f707 	mul.w	r7, r0, r7
 8001632:	429f      	cmp	r7, r3
 8001634:	d908      	bls.n	8001648 <__udivmoddi4+0x148>
 8001636:	eb1c 0303 	adds.w	r3, ip, r3
 800163a:	f100 34ff 	add.w	r4, r0, #4294967295
 800163e:	d202      	bcs.n	8001646 <__udivmoddi4+0x146>
 8001640:	429f      	cmp	r7, r3
 8001642:	f200 80b0 	bhi.w	80017a6 <__udivmoddi4+0x2a6>
 8001646:	4620      	mov	r0, r4
 8001648:	1bdb      	subs	r3, r3, r7
 800164a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800164e:	e7a5      	b.n	800159c <__udivmoddi4+0x9c>
 8001650:	f1c1 0620 	rsb	r6, r1, #32
 8001654:	408b      	lsls	r3, r1
 8001656:	fa22 f706 	lsr.w	r7, r2, r6
 800165a:	431f      	orrs	r7, r3
 800165c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001660:	fa04 f301 	lsl.w	r3, r4, r1
 8001664:	ea43 030c 	orr.w	r3, r3, ip
 8001668:	40f4      	lsrs	r4, r6
 800166a:	fa00 f801 	lsl.w	r8, r0, r1
 800166e:	0c38      	lsrs	r0, r7, #16
 8001670:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001674:	fbb4 fef0 	udiv	lr, r4, r0
 8001678:	fa1f fc87 	uxth.w	ip, r7
 800167c:	fb00 441e 	mls	r4, r0, lr, r4
 8001680:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001684:	fb0e f90c 	mul.w	r9, lr, ip
 8001688:	45a1      	cmp	r9, r4
 800168a:	fa02 f201 	lsl.w	r2, r2, r1
 800168e:	d90a      	bls.n	80016a6 <__udivmoddi4+0x1a6>
 8001690:	193c      	adds	r4, r7, r4
 8001692:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001696:	f080 8084 	bcs.w	80017a2 <__udivmoddi4+0x2a2>
 800169a:	45a1      	cmp	r9, r4
 800169c:	f240 8081 	bls.w	80017a2 <__udivmoddi4+0x2a2>
 80016a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80016a4:	443c      	add	r4, r7
 80016a6:	eba4 0409 	sub.w	r4, r4, r9
 80016aa:	fa1f f983 	uxth.w	r9, r3
 80016ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80016b2:	fb00 4413 	mls	r4, r0, r3, r4
 80016b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80016ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80016be:	45a4      	cmp	ip, r4
 80016c0:	d907      	bls.n	80016d2 <__udivmoddi4+0x1d2>
 80016c2:	193c      	adds	r4, r7, r4
 80016c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80016c8:	d267      	bcs.n	800179a <__udivmoddi4+0x29a>
 80016ca:	45a4      	cmp	ip, r4
 80016cc:	d965      	bls.n	800179a <__udivmoddi4+0x29a>
 80016ce:	3b02      	subs	r3, #2
 80016d0:	443c      	add	r4, r7
 80016d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80016d6:	fba0 9302 	umull	r9, r3, r0, r2
 80016da:	eba4 040c 	sub.w	r4, r4, ip
 80016de:	429c      	cmp	r4, r3
 80016e0:	46ce      	mov	lr, r9
 80016e2:	469c      	mov	ip, r3
 80016e4:	d351      	bcc.n	800178a <__udivmoddi4+0x28a>
 80016e6:	d04e      	beq.n	8001786 <__udivmoddi4+0x286>
 80016e8:	b155      	cbz	r5, 8001700 <__udivmoddi4+0x200>
 80016ea:	ebb8 030e 	subs.w	r3, r8, lr
 80016ee:	eb64 040c 	sbc.w	r4, r4, ip
 80016f2:	fa04 f606 	lsl.w	r6, r4, r6
 80016f6:	40cb      	lsrs	r3, r1
 80016f8:	431e      	orrs	r6, r3
 80016fa:	40cc      	lsrs	r4, r1
 80016fc:	e9c5 6400 	strd	r6, r4, [r5]
 8001700:	2100      	movs	r1, #0
 8001702:	e750      	b.n	80015a6 <__udivmoddi4+0xa6>
 8001704:	f1c2 0320 	rsb	r3, r2, #32
 8001708:	fa20 f103 	lsr.w	r1, r0, r3
 800170c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001710:	fa24 f303 	lsr.w	r3, r4, r3
 8001714:	4094      	lsls	r4, r2
 8001716:	430c      	orrs	r4, r1
 8001718:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800171c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001720:	fa1f f78c 	uxth.w	r7, ip
 8001724:	fbb3 f0f8 	udiv	r0, r3, r8
 8001728:	fb08 3110 	mls	r1, r8, r0, r3
 800172c:	0c23      	lsrs	r3, r4, #16
 800172e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001732:	fb00 f107 	mul.w	r1, r0, r7
 8001736:	4299      	cmp	r1, r3
 8001738:	d908      	bls.n	800174c <__udivmoddi4+0x24c>
 800173a:	eb1c 0303 	adds.w	r3, ip, r3
 800173e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001742:	d22c      	bcs.n	800179e <__udivmoddi4+0x29e>
 8001744:	4299      	cmp	r1, r3
 8001746:	d92a      	bls.n	800179e <__udivmoddi4+0x29e>
 8001748:	3802      	subs	r0, #2
 800174a:	4463      	add	r3, ip
 800174c:	1a5b      	subs	r3, r3, r1
 800174e:	b2a4      	uxth	r4, r4
 8001750:	fbb3 f1f8 	udiv	r1, r3, r8
 8001754:	fb08 3311 	mls	r3, r8, r1, r3
 8001758:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800175c:	fb01 f307 	mul.w	r3, r1, r7
 8001760:	42a3      	cmp	r3, r4
 8001762:	d908      	bls.n	8001776 <__udivmoddi4+0x276>
 8001764:	eb1c 0404 	adds.w	r4, ip, r4
 8001768:	f101 36ff 	add.w	r6, r1, #4294967295
 800176c:	d213      	bcs.n	8001796 <__udivmoddi4+0x296>
 800176e:	42a3      	cmp	r3, r4
 8001770:	d911      	bls.n	8001796 <__udivmoddi4+0x296>
 8001772:	3902      	subs	r1, #2
 8001774:	4464      	add	r4, ip
 8001776:	1ae4      	subs	r4, r4, r3
 8001778:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800177c:	e739      	b.n	80015f2 <__udivmoddi4+0xf2>
 800177e:	4604      	mov	r4, r0
 8001780:	e6f0      	b.n	8001564 <__udivmoddi4+0x64>
 8001782:	4608      	mov	r0, r1
 8001784:	e706      	b.n	8001594 <__udivmoddi4+0x94>
 8001786:	45c8      	cmp	r8, r9
 8001788:	d2ae      	bcs.n	80016e8 <__udivmoddi4+0x1e8>
 800178a:	ebb9 0e02 	subs.w	lr, r9, r2
 800178e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001792:	3801      	subs	r0, #1
 8001794:	e7a8      	b.n	80016e8 <__udivmoddi4+0x1e8>
 8001796:	4631      	mov	r1, r6
 8001798:	e7ed      	b.n	8001776 <__udivmoddi4+0x276>
 800179a:	4603      	mov	r3, r0
 800179c:	e799      	b.n	80016d2 <__udivmoddi4+0x1d2>
 800179e:	4630      	mov	r0, r6
 80017a0:	e7d4      	b.n	800174c <__udivmoddi4+0x24c>
 80017a2:	46d6      	mov	lr, sl
 80017a4:	e77f      	b.n	80016a6 <__udivmoddi4+0x1a6>
 80017a6:	4463      	add	r3, ip
 80017a8:	3802      	subs	r0, #2
 80017aa:	e74d      	b.n	8001648 <__udivmoddi4+0x148>
 80017ac:	4606      	mov	r6, r0
 80017ae:	4623      	mov	r3, r4
 80017b0:	4608      	mov	r0, r1
 80017b2:	e70f      	b.n	80015d4 <__udivmoddi4+0xd4>
 80017b4:	3e02      	subs	r6, #2
 80017b6:	4463      	add	r3, ip
 80017b8:	e730      	b.n	800161c <__udivmoddi4+0x11c>
 80017ba:	bf00      	nop

080017bc <__aeabi_idiv0>:
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop

080017c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017c4:	4b3d      	ldr	r3, [pc, #244]	@ (80018bc <SystemInit+0xfc>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ca:	4a3c      	ldr	r2, [pc, #240]	@ (80018bc <SystemInit+0xfc>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80017d4:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <SystemInit+0xfc>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	4a38      	ldr	r2, [pc, #224]	@ (80018bc <SystemInit+0xfc>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017e0:	4b37      	ldr	r3, [pc, #220]	@ (80018c0 <SystemInit+0x100>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	d807      	bhi.n	80017fc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ec:	4b34      	ldr	r3, [pc, #208]	@ (80018c0 <SystemInit+0x100>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 030f 	bic.w	r3, r3, #15
 80017f4:	4a32      	ldr	r2, [pc, #200]	@ (80018c0 <SystemInit+0x100>)
 80017f6:	f043 0307 	orr.w	r3, r3, #7
 80017fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017fc:	4b31      	ldr	r3, [pc, #196]	@ (80018c4 <SystemInit+0x104>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a30      	ldr	r2, [pc, #192]	@ (80018c4 <SystemInit+0x104>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001808:	4b2e      	ldr	r3, [pc, #184]	@ (80018c4 <SystemInit+0x104>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800180e:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <SystemInit+0x104>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	492c      	ldr	r1, [pc, #176]	@ (80018c4 <SystemInit+0x104>)
 8001814:	4b2c      	ldr	r3, [pc, #176]	@ (80018c8 <SystemInit+0x108>)
 8001816:	4013      	ands	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800181a:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <SystemInit+0x100>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001826:	4b26      	ldr	r3, [pc, #152]	@ (80018c0 <SystemInit+0x100>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 030f 	bic.w	r3, r3, #15
 800182e:	4a24      	ldr	r2, [pc, #144]	@ (80018c0 <SystemInit+0x100>)
 8001830:	f043 0307 	orr.w	r3, r3, #7
 8001834:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001836:	4b23      	ldr	r3, [pc, #140]	@ (80018c4 <SystemInit+0x104>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800183c:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <SystemInit+0x104>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001842:	4b20      	ldr	r3, [pc, #128]	@ (80018c4 <SystemInit+0x104>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001848:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <SystemInit+0x104>)
 800184a:	4a20      	ldr	r2, [pc, #128]	@ (80018cc <SystemInit+0x10c>)
 800184c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800184e:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <SystemInit+0x104>)
 8001850:	4a1f      	ldr	r2, [pc, #124]	@ (80018d0 <SystemInit+0x110>)
 8001852:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <SystemInit+0x104>)
 8001856:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <SystemInit+0x114>)
 8001858:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <SystemInit+0x104>)
 800185c:	2200      	movs	r2, #0
 800185e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <SystemInit+0x104>)
 8001862:	4a1c      	ldr	r2, [pc, #112]	@ (80018d4 <SystemInit+0x114>)
 8001864:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <SystemInit+0x104>)
 8001868:	2200      	movs	r2, #0
 800186a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <SystemInit+0x104>)
 800186e:	4a19      	ldr	r2, [pc, #100]	@ (80018d4 <SystemInit+0x114>)
 8001870:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001872:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <SystemInit+0x104>)
 8001874:	2200      	movs	r2, #0
 8001876:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <SystemInit+0x104>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a11      	ldr	r2, [pc, #68]	@ (80018c4 <SystemInit+0x104>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001882:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001884:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <SystemInit+0x104>)
 8001886:	2200      	movs	r2, #0
 8001888:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <SystemInit+0x118>)
 800188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188e:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <SystemInit+0x118>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001894:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <SystemInit+0x11c>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <SystemInit+0x120>)
 800189c:	4013      	ands	r3, r2
 800189e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018a2:	d202      	bcs.n	80018aa <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <SystemInit+0x124>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018aa:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <SystemInit+0x128>)
 80018ac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018b0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00
 80018c0:	52002000 	.word	0x52002000
 80018c4:	58024400 	.word	0x58024400
 80018c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80018cc:	02020200 	.word	0x02020200
 80018d0:	01ff0000 	.word	0x01ff0000
 80018d4:	01010280 	.word	0x01010280
 80018d8:	580000c0 	.word	0x580000c0
 80018dc:	5c001000 	.word	0x5c001000
 80018e0:	ffff0000 	.word	0xffff0000
 80018e4:	51008108 	.word	0x51008108
 80018e8:	52004000 	.word	0x52004000

080018ec <BootManager_FSM>:
void FBL_Check_Fails(void);
void CAL_Check_Fails(void);
HAL_StatusTypeDef calcalute_store_MAC(uint8_t* buffer, size_t size);

// BootManager_FSM implementation
void BootManager_FSM(void){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0

  switch(State) {
 80018f0:	4b2d      	ldr	r3, [pc, #180]	@ (80019a8 <BootManager_FSM+0xbc>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d854      	bhi.n	80019a2 <BootManager_FSM+0xb6>
 80018f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001900 <BootManager_FSM+0x14>)
 80018fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fe:	bf00      	nop
 8001900:	08001915 	.word	0x08001915
 8001904:	0800191f 	.word	0x0800191f
 8001908:	08001937 	.word	0x08001937
 800190c:	0800194f 	.word	0x0800194f
 8001910:	0800197d 	.word	0x0800197d

    	case State_Init :
    		Initialize();
 8001914:	f000 f84e 	bl	80019b4 <Initialize>
    		State = State_FBLCheck;
 8001918:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <BootManager_FSM+0xbc>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]

    	case State_FBLCheck :
    		if(FBL_Check()){
 800191e:	f000 f8a1 	bl	8001a64 <FBL_Check>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <BootManager_FSM+0x44>
    			State = State_ProgRequest_Check;
 8001928:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <BootManager_FSM+0xbc>)
 800192a:	2202      	movs	r2, #2
 800192c:	701a      	strb	r2, [r3, #0]
    		}else{
    			FBL_Check_Fails();
    		}
    		break;
 800192e:	e038      	b.n	80019a2 <BootManager_FSM+0xb6>
    			FBL_Check_Fails();
 8001930:	f000 f9c4 	bl	8001cbc <FBL_Check_Fails>
    		break;
 8001934:	e035      	b.n	80019a2 <BootManager_FSM+0xb6>

    	case State_ProgRequest_Check :
    		if(ProgRequest_Check()){
 8001936:	f000 f975 	bl	8001c24 <ProgRequest_Check>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <BootManager_FSM+0x5a>
    			// Call FBL To update the APP
    			JumpToFW();
 8001940:	f000 f860 	bl	8001a04 <JumpToFW>
    		}else{
    			State = State_CALIB_Check;
    		}
    		break;
 8001944:	e02d      	b.n	80019a2 <BootManager_FSM+0xb6>
    			State = State_CALIB_Check;
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <BootManager_FSM+0xbc>)
 8001948:	2204      	movs	r2, #4
 800194a:	701a      	strb	r2, [r3, #0]
    		break;
 800194c:	e029      	b.n	80019a2 <BootManager_FSM+0xb6>

    	case State_APP_Check :

    		if(APP_Check()){
 800194e:	f000 f8cd 	bl	8001aec <APP_Check>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <BootManager_FSM+0x7c>
    			Set_Target_FW(APP_START_ADDR, APP_START_ADDR, APP_START_ADDR);
 8001958:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <BootManager_FSM+0xc0>)
 800195a:	4914      	ldr	r1, [pc, #80]	@ (80019ac <BootManager_FSM+0xc0>)
 800195c:	4813      	ldr	r0, [pc, #76]	@ (80019ac <BootManager_FSM+0xc0>)
 800195e:	f000 f945 	bl	8001bec <Set_Target_FW>
    			JumpToFW();
 8001962:	f000 f84f 	bl	8001a04 <JumpToFW>
    			//Indicate integrity check fails
    			APP_Check_Fails();
    			Set_Target_FW(FBL_START_ADDR, FBL_START_ADDR, FBL_START_ADDR);
    			JumpToFW();
    		}
    		break;
 8001966:	e01c      	b.n	80019a2 <BootManager_FSM+0xb6>
    			APP_Check_Fails();
 8001968:	f000 f998 	bl	8001c9c <APP_Check_Fails>
    			Set_Target_FW(FBL_START_ADDR, FBL_START_ADDR, FBL_START_ADDR);
 800196c:	4a10      	ldr	r2, [pc, #64]	@ (80019b0 <BootManager_FSM+0xc4>)
 800196e:	4910      	ldr	r1, [pc, #64]	@ (80019b0 <BootManager_FSM+0xc4>)
 8001970:	480f      	ldr	r0, [pc, #60]	@ (80019b0 <BootManager_FSM+0xc4>)
 8001972:	f000 f93b 	bl	8001bec <Set_Target_FW>
    			JumpToFW();
 8001976:	f000 f845 	bl	8001a04 <JumpToFW>
    		break;
 800197a:	e012      	b.n	80019a2 <BootManager_FSM+0xb6>


    	case State_CALIB_Check:
    		if (CAL_Check()) {
 800197c:	f000 f8f6 	bl	8001b6c <CAL_Check>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <BootManager_FSM+0xa2>
    			State = State_APP_Check;
 8001986:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <BootManager_FSM+0xbc>)
 8001988:	2203      	movs	r2, #3
 800198a:	701a      	strb	r2, [r3, #0]
    			//Indicate integrity check fails
    			CAL_Check_Fails();
    			Set_Target_FW(APP_START_ADDR, APP_START_ADDR, APP_START_ADDR);
    			JumpToFW();
    		}
    		break;
 800198c:	e008      	b.n	80019a0 <BootManager_FSM+0xb4>
    			CAL_Check_Fails();
 800198e:	f000 f9a5 	bl	8001cdc <CAL_Check_Fails>
    			Set_Target_FW(APP_START_ADDR, APP_START_ADDR, APP_START_ADDR);
 8001992:	4a06      	ldr	r2, [pc, #24]	@ (80019ac <BootManager_FSM+0xc0>)
 8001994:	4905      	ldr	r1, [pc, #20]	@ (80019ac <BootManager_FSM+0xc0>)
 8001996:	4805      	ldr	r0, [pc, #20]	@ (80019ac <BootManager_FSM+0xc0>)
 8001998:	f000 f928 	bl	8001bec <Set_Target_FW>
    			JumpToFW();
 800199c:	f000 f832 	bl	8001a04 <JumpToFW>
    		break;
 80019a0:	bf00      	nop

  }
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2400009d 	.word	0x2400009d
 80019ac:	080a0000 	.word	0x080a0000
 80019b0:	08020000 	.word	0x08020000

080019b4 <Initialize>:

void Initialize(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 80019b8:	f001 f906 	bl	8002bc8 <HAL_Init>

	  SystemClock_Config();
 80019bc:	f000 fdde 	bl	800257c <SystemClock_Config>
	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 80019c0:	f000 feb4 	bl	800272c <MX_GPIO_Init>
	  MX_USART3_UART_Init();
 80019c4:	f000 fe66 	bl	8002694 <MX_USART3_UART_Init>
	  MX_CRC_Init();
 80019c8:	f000 fe42 	bl	8002650 <MX_CRC_Init>

	  printmsg("The BootManager has started");
 80019cc:	480b      	ldr	r0, [pc, #44]	@ (80019fc <Initialize+0x48>)
 80019ce:	f000 fed7 	bl	8002780 <printmsg>

	  BSP_LED_Init(LED_GREEN);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f001 f882 	bl	8002adc <BSP_LED_Init>
	  BSP_LED_Init(LED_RED);
 80019d8:	2002      	movs	r0, #2
 80019da:	f001 f87f 	bl	8002adc <BSP_LED_Init>

	  // Initialize eeprom_flash
	  if (EE_Init() != HAL_OK) {
 80019de:	f000 f9fb 	bl	8001dd8 <EE_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <Initialize+0x3e>
		  printmsg("Unable to initialize eeprom-flash\n");
 80019e8:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <Initialize+0x4c>)
 80019ea:	f000 fec9 	bl	8002780 <printmsg>
		  Error_Handler();
 80019ee:	f000 fee9 	bl	80027c4 <Error_Handler>
	  }

	  //Initialize cmac routine
	  AES_CMAC_Init();
 80019f2:	f000 f983 	bl	8001cfc <AES_CMAC_Init>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	080082b0 	.word	0x080082b0
 8001a00:	080082cc 	.word	0x080082cc

08001a04 <JumpToFW>:

void JumpToFW(void){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0a:	b672      	cpsid	i
}
 8001a0c:	bf00      	nop

	/* Disable Systick interrupt */
	__disable_irq();
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001a0e:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <JumpToFW+0x54>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a11      	ldr	r2, [pc, #68]	@ (8001a58 <JumpToFW+0x54>)
 8001a14:	f023 0302 	bic.w	r3, r3, #2
 8001a18:	6013      	str	r3, [r2, #0]

	/* Initialize user application's Stack Pointer & Jump to user application */
	JumpToApplication = (pFunction) (*(__IO uint32_t*) (JumpAddress + 4));
 8001a1a:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <JumpToFW+0x58>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <JumpToFW+0x5c>)
 8001a26:	601a      	str	r2, [r3, #0]

	__set_MSP(*(__IO uint32_t*) JumpAddress);
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <JumpToFW+0x58>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f383 8808 	msr	MSP, r3
}
 8001a36:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a38:	f3bf 8f4f 	dsb	sy
}
 8001a3c:	bf00      	nop
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a3e:	f3bf 8f5f 	dmb	sy
}
 8001a42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a44:	f3bf 8f6f 	isb	sy
}
 8001a48:	bf00      	nop
	__DSB();
	__DMB();
	__ISB();
	//while(1);
	JumpToApplication();
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <JumpToFW+0x5c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4798      	blx	r3
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	e000e010 	.word	0xe000e010
 8001a5c:	240000a8 	.word	0x240000a8
 8001a60:	240000a0 	.word	0x240000a0

08001a64 <FBL_Check>:

uint8_t FBL_Check(void){
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b091      	sub	sp, #68	@ 0x44
 8001a68:	af00      	add	r7, sp, #0

	uint8_t mac_result[MAC_SIZE*2] = {0x0};
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	615a      	str	r2, [r3, #20]
 8001a80:	619a      	str	r2, [r3, #24]
	uint8_t expected_mac[MAC_SIZE] = {0x0};
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
	int32_t inputSize = 0x80000 - 0x00020;
 8001a92:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <FBL_Check+0x80>)
 8001a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int32_t outputSize = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
	uint8_t *buffer = (uint8_t*)(FBL_START_ADDR);
 8001a9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <FBL_Check+0x84>)
 8001a9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	// Load expected MAC from the last 16 bytes of the FBL section
	memcpy(expected_mac, (uint8_t*)(buffer + inputSize), MAC_SIZE);
 8001a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f107 0408 	add.w	r4, r7, #8
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// Calculate MAC over the FBL section
	AES_CMAC_Encrypt((uint8_t*)buffer, inputSize, mac_result, &outputSize);
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	f107 0218 	add.w	r2, r7, #24
 8001ab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001aba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001abc:	f000 f930 	bl	8001d20 <AES_CMAC_Encrypt>

	//memcpy(expected_mac, mac_result,MAC_SIZE);
	//memcpy(expected_mac, (uint8_t*)(buffer + inputSize), MAC_SIZE);

	// Compare the calculated MAC with the expected MAC
	if (memcmp(mac_result, expected_mac, MAC_SIZE) == 0) {
 8001ac0:	f107 0108 	add.w	r1, r7, #8
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	2210      	movs	r2, #16
 8001aca:	4618      	mov	r0, r3
 8001acc:	f005 ff50 	bl	8007970 <memcmp>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <FBL_Check+0x76>
		return 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <FBL_Check+0x78>
	}
	return 0;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3744      	adds	r7, #68	@ 0x44
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd90      	pop	{r4, r7, pc}
 8001ae4:	0007ffe0 	.word	0x0007ffe0
 8001ae8:	08020000 	.word	0x08020000

08001aec <APP_Check>:

uint8_t APP_Check(void){
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b08d      	sub	sp, #52	@ 0x34
 8001af0:	af00      	add	r7, sp, #0

	uint8_t mac_result[MAC_SIZE] = {0x0};
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
	uint8_t expected_mac[MAC_SIZE] = {0x0};
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
	int32_t inputSize = 0x40000 - 0x00010;
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <APP_Check+0x78>)
 8001b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t outputSize = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
	uint8_t* buffer = (uint8_t*)(APP_START_ADDR);
 8001b1a:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <APP_Check+0x7c>)
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28

	// Load expected MAC from the last 16 bytes of the APP section
	memcpy(expected_mac, (uint8_t*)(buffer + inputSize), MAC_SIZE);
 8001b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b22:	4413      	add	r3, r2
 8001b24:	f107 0408 	add.w	r4, r7, #8
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// Calculate MAC over the APP section
	AES_CMAC_Encrypt(buffer, inputSize, mac_result, &outputSize);
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	f107 0218 	add.w	r2, r7, #24
 8001b38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b3c:	f000 f8f0 	bl	8001d20 <AES_CMAC_Encrypt>

	// Compare the calculated MAC with the expected MAC
	if (memcmp(mac_result, expected_mac, MAC_SIZE) == 0) {
 8001b40:	f107 0108 	add.w	r1, r7, #8
 8001b44:	f107 0318 	add.w	r3, r7, #24
 8001b48:	2210      	movs	r2, #16
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f005 ff10 	bl	8007970 <memcmp>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <APP_Check+0x6e>
		return 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <APP_Check+0x70>
	}

	return 0;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3734      	adds	r7, #52	@ 0x34
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	0003fff0 	.word	0x0003fff0
 8001b68:	080a0000 	.word	0x080a0000

08001b6c <CAL_Check>:

uint8_t CAL_Check(void) {
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b08d      	sub	sp, #52	@ 0x34
 8001b70:	af00      	add	r7, sp, #0
	uint8_t mac_result[MAC_SIZE] = {0x0};
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
	uint8_t expected_mac[MAC_SIZE] = {0x0};
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
	int32_t inputSize = 0x10000 - 0x00010;
 8001b92:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t outputSize = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	607b      	str	r3, [r7, #4]
	uint8_t* buffer = (uint8_t*)(CALIB_START_ADDR);
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <CAL_Check+0x7c>)
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	// Load expected MAC from the last 16 bytes of the CALIB section
	memcpy(expected_mac, (uint8_t*)(buffer + inputSize), MAC_SIZE);
 8001ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f107 0408 	add.w	r4, r7, #8
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	6859      	ldr	r1, [r3, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	// Calculate MAC over the CALIB section
	AES_CMAC_Encrypt((uint8_t*)buffer, inputSize, mac_result, &outputSize);
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	f107 0218 	add.w	r2, r7, #24
 8001bba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001bbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bbe:	f000 f8af 	bl	8001d20 <AES_CMAC_Encrypt>
  
	// Compare the calculated MAC with the expected MAC
	if (memcmp(mac_result, expected_mac, MAC_SIZE) == 0) {
 8001bc2:	f107 0108 	add.w	r1, r7, #8
 8001bc6:	f107 0318 	add.w	r3, r7, #24
 8001bca:	2210      	movs	r2, #16
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 fecf 	bl	8007970 <memcmp>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <CAL_Check+0x70>
		return 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <CAL_Check+0x72>
	}
	return 0;
 8001bdc:	2300      	movs	r3, #0
} 
 8001bde:	4618      	mov	r0, r3
 8001be0:	3734      	adds	r7, #52	@ 0x34
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd90      	pop	{r4, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	080e0000 	.word	0x080e0000

08001bec <Set_Target_FW>:

/* For this moment this function is not needed */
void Set_Target_FW(uint32_t LoadAddr, uint32_t JumpAddr, uint32_t TargetAddr){
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]

	LoadAddress   = LoadAddr;
 8001bf8:	4a07      	ldr	r2, [pc, #28]	@ (8001c18 <Set_Target_FW+0x2c>)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6013      	str	r3, [r2, #0]
	JumpAddress   = JumpAddr;
 8001bfe:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <Set_Target_FW+0x30>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	6013      	str	r3, [r2, #0]
	TargetAddress = TargetAddr;
 8001c04:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <Set_Target_FW+0x34>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	240000ac 	.word	0x240000ac
 8001c1c:	240000a8 	.word	0x240000a8
 8001c20:	240000b0 	.word	0x240000b0

08001c24 <ProgRequest_Check>:


uint32_t ProgRequest_Check(void){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0

  /* Choose the Entry Point */
  uint8_t IsFlag_Set = FALSE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if (EE_ReadVariable(VirtAddVarTab[0], data) != EE_OK) {
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <ProgRequest_Check+0x60>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	4915      	ldr	r1, [pc, #84]	@ (8001c88 <ProgRequest_Check+0x64>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fb33 	bl	80022a0 <EE_ReadVariable>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <ProgRequest_Check+0x26>
	  printmsg("Unable to read variable from eeprom!!\n");
 8001c40:	4812      	ldr	r0, [pc, #72]	@ (8001c8c <ProgRequest_Check+0x68>)
 8001c42:	f000 fd9d 	bl	8002780 <printmsg>
	  return IsFlag_Set;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	e018      	b.n	8001c7c <ProgRequest_Check+0x58>
  }
  ProgrammingMode = (data[1] << 16) | data[0];
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <ProgRequest_Check+0x64>)
 8001c4c:	885b      	ldrh	r3, [r3, #2]
 8001c4e:	041b      	lsls	r3, r3, #16
 8001c50:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <ProgRequest_Check+0x64>)
 8001c52:	8812      	ldrh	r2, [r2, #0]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <ProgRequest_Check+0x6c>)
 8001c5a:	601a      	str	r2, [r3, #0]
  if (ProgrammingMode == ProgFlag){
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <ProgRequest_Check+0x6c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0c      	ldr	r2, [pc, #48]	@ (8001c94 <ProgRequest_Check+0x70>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d109      	bne.n	8001c7a <ProgRequest_Check+0x56>
    Set_Target_FW(FBL_START_ADDR, FBL_TARGET_ADDR, FBL_TARGET_ADDR);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	480b      	ldr	r0, [pc, #44]	@ (8001c98 <ProgRequest_Check+0x74>)
 8001c6c:	f7ff ffbe 	bl	8001bec <Set_Target_FW>
    IsFlag_Set = TRUE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	71fb      	strb	r3, [r7, #7]
    ProgrammingMode = 0;
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <ProgRequest_Check+0x6c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
  }

  return IsFlag_Set;
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	24000008 	.word	0x24000008
 8001c88:	240000b4 	.word	0x240000b4
 8001c8c:	080082f0 	.word	0x080082f0
 8001c90:	240000a4 	.word	0x240000a4
 8001c94:	aa55aa55 	.word	0xaa55aa55
 8001c98:	08020000 	.word	0x08020000

08001c9c <APP_Check_Fails>:


void APP_Check_Fails(void) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
	uint8_t counter = 0xF;
 8001ca2:	230f      	movs	r3, #15
 8001ca4:	71fb      	strb	r3, [r7, #7]
	while(counter-- >= 0) {
 8001ca6:	e002      	b.n	8001cae <APP_Check_Fails+0x12>
		printmsg("Application Integrity check has failed!!\n");
 8001ca8:	4803      	ldr	r0, [pc, #12]	@ (8001cb8 <APP_Check_Fails+0x1c>)
 8001caa:	f000 fd69 	bl	8002780 <printmsg>
	while(counter-- >= 0) {
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	71fb      	strb	r3, [r7, #7]
 8001cb4:	e7f8      	b.n	8001ca8 <APP_Check_Fails+0xc>
 8001cb6:	bf00      	nop
 8001cb8:	08008318 	.word	0x08008318

08001cbc <FBL_Check_Fails>:
	}

}

void FBL_Check_Fails(void) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0

	uint8_t counter = 0xF;
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	71fb      	strb	r3, [r7, #7]
	while(counter-- >= 0) {
 8001cc6:	e002      	b.n	8001cce <FBL_Check_Fails+0x12>
		printmsg("BootUpdater Integrity check has failed!!\n");
 8001cc8:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <FBL_Check_Fails+0x1c>)
 8001cca:	f000 fd59 	bl	8002780 <printmsg>
	while(counter-- >= 0) {
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	e7f8      	b.n	8001cc8 <FBL_Check_Fails+0xc>
 8001cd6:	bf00      	nop
 8001cd8:	08008344 	.word	0x08008344

08001cdc <CAL_Check_Fails>:
	}

}
void CAL_Check_Fails(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
	uint8_t counter = 0xF;
 8001ce2:	230f      	movs	r3, #15
 8001ce4:	71fb      	strb	r3, [r7, #7]
	while(counter-- >= 0) {
 8001ce6:	e002      	b.n	8001cee <CAL_Check_Fails+0x12>
		printmsg("Calibration Integrity check has failed!!\n");
 8001ce8:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <CAL_Check_Fails+0x1c>)
 8001cea:	f000 fd49 	bl	8002780 <printmsg>
	while(counter-- >= 0) {
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	e7f8      	b.n	8001ce8 <CAL_Check_Fails+0xc>
 8001cf6:	bf00      	nop
 8001cf8:	08008370 	.word	0x08008370

08001cfc <AES_CMAC_Init>:
  ******************************************************************************/
#include "cmac_check.h"
uint8_t crypt_key[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};

/* Initialization for AES-CMAC for Authentication TAG Generation*/
cmox_cmac_retval_t AES_CMAC_Init(void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
	  int32_t retval;

	  if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS) {
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7fe fb14 	bl	8000330 <cmox_initialize>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <AES_CMAC_Init+0x18>
		  retval = AES_ERR_BAD_CONTEXT;
 8001d0e:	f640 431f 	movw	r3, #3103	@ 0xc1f
 8001d12:	607b      	str	r3, [r7, #4]
	  }
	  return retval;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <AES_CMAC_Encrypt>:


/* AES-CMAC Authentication TAG generation */
cmox_cmac_retval_t AES_CMAC_Encrypt(const uint8_t *P_pInputBuffer,  int32_t P_inputSize, uint8_t *P_pOutputBuffer, int32_t *P_pOutputSize) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	@ 0x30
 8001d24:	af06      	add	r7, sp, #24
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]

	  int32_t retval;
	  size_t computed_size;
	  retval = cmox_mac_compute(CMOX_CMAC_AES_ALGO, P_pInputBuffer, P_inputSize, crypt_key, CRL_AES128_KEY, NULL, 0, P_pOutputBuffer, MAC_SIZE, &computed_size);
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <AES_CMAC_Encrypt+0x68>)
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	9305      	str	r3, [sp, #20]
 8001d3a:	2310      	movs	r3, #16
 8001d3c:	9304      	str	r3, [sp, #16]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	9303      	str	r3, [sp, #12]
 8001d42:	2300      	movs	r3, #0
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	2300      	movs	r3, #0
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	2310      	movs	r3, #16
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <AES_CMAC_Encrypt+0x6c>)
 8001d50:	68f9      	ldr	r1, [r7, #12]
 8001d52:	f7fe fbb7 	bl	80004c4 <cmox_mac_compute>
 8001d56:	4603      	mov	r3, r0
 8001d58:	617b      	str	r3, [r7, #20]
	  /* Verify API returned value */
	  if (retval != CMOX_MAC_SUCCESS)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001d60:	d002      	beq.n	8001d68 <AES_CMAC_Encrypt+0x48>
	  {
		  retval = AES_ERR_BAD_OPERATION;
 8001d62:	f640 431e 	movw	r3, #3102	@ 0xc1e
 8001d66:	617b      	str	r3, [r7, #20]
	  }

	  /* Verify generated data size is the expected one */
	  if (computed_size != MAC_SIZE)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d002      	beq.n	8001d74 <AES_CMAC_Encrypt+0x54>
	  {
		  retval = AES_ERR_BAD_OPERATION;
 8001d6e:	f640 431e 	movw	r3, #3102	@ 0xc1e
 8001d72:	617b      	str	r3, [r7, #20]
	  }
	  *P_pOutputSize = computed_size;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	461a      	mov	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	601a      	str	r2, [r3, #0]
	  return retval;
 8001d7c:	697b      	ldr	r3, [r7, #20]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	080083a4 	.word	0x080083a4
 8001d8c:	2400000c 	.word	0x2400000c

08001d90 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <cmox_ll_init+0x44>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <cmox_ll_init+0x44>)
 8001da0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  __HAL_RCC_CRC_CLK_ENABLE();
 8001da8:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <cmox_ll_init+0x44>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dae:	4a09      	ldr	r2, [pc, #36]	@ (8001dd4 <cmox_ll_init+0x44>)
 8001db0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <cmox_ll_init+0x44>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	58024400 	.word	0x58024400

08001dd8 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b092      	sub	sp, #72	@ 0x48
 8001ddc:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001dde:	2306      	movs	r3, #6
 8001de0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001de4:	2306      	movs	r3, #6
 8001de6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t VarIdx = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001df4:	2300      	movs	r3, #0
 8001df6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  int16_t x = -1;
 8001df8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dfc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	@ 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001e04:	463b      	mov	r3, r7
 8001e06:	2220      	movs	r2, #32
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f005 fdc0 	bl	8007990 <memset>
 
  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001e10:	4bc0      	ldr	r3, [pc, #768]	@ (8002114 <EE_Init+0x33c>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001e18:	4bbf      	ldr	r3, [pc, #764]	@ (8002118 <EE_Init+0x340>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001e24:	2302      	movs	r3, #2
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
  pEraseInit.Sector = PAGE0_ID;
 8001e28:	2306      	movs	r3, #6
 8001e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pEraseInit.NbSectors = 1;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001e30:	2320      	movs	r3, #32
 8001e32:	633b      	str	r3, [r7, #48]	@ 0x30
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8001e34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001e38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d00b      	beq.n	8001e58 <EE_Init+0x80>
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e44:	f280 81df 	bge.w	8002206 <EE_Init+0x42e>
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 8123 	beq.w	8002094 <EE_Init+0x2bc>
 8001e4e:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d05e      	beq.n	8001f14 <EE_Init+0x13c>
 8001e56:	e1d6      	b.n	8002206 <EE_Init+0x42e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8001e58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d11a      	bne.n	8001e96 <EE_Init+0xbe>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001e60:	48ac      	ldr	r0, [pc, #688]	@ (8002114 <EE_Init+0x33c>)
 8001e62:	f000 f9f3 	bl	800224c <EE_VerifyPageFullyErased>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f040 81d9 	bne.w	8002220 <EE_Init+0x448>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e6e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 fa47 	bl	800330c <HAL_FLASHEx_Erase>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001e84:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 81c9 	beq.w	8002220 <EE_Init+0x448>
          {
            return FlashStatus;
 8001e8e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	e1cc      	b.n	8002230 <EE_Init+0x458>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8001e96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e9a:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d12a      	bne.n	8001ef8 <EE_Init+0x120>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001ea2:	489c      	ldr	r0, [pc, #624]	@ (8002114 <EE_Init+0x33c>)
 8001ea4:	f000 f9d2 	bl	800224c <EE_VerifyPageFullyErased>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d112      	bne.n	8001ed4 <EE_Init+0xfc>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001eae:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001eb2:	f107 0320 	add.w	r3, r7, #32
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 fa27 	bl	800330c <HAL_FLASHEx_Erase>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001ec4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <EE_Init+0xfc>
          {
            return FlashStatus;
 8001ecc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	e1ad      	b.n	8002230 <EE_Init+0x458>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	498f      	ldr	r1, [pc, #572]	@ (8002118 <EE_Init+0x340>)
 8001eda:	2001      	movs	r0, #1
 8001edc:	f001 f8e8 	bl	80030b0 <HAL_FLASH_Program>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001ee6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8198 	beq.w	8002220 <EE_Init+0x448>
        {
          return FlashStatus;
 8001ef0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	e19b      	b.n	8002230 <EE_Init+0x458>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001ef8:	f000 fa1a 	bl	8002330 <EE_Format>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001f02:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 818a 	beq.w	8002220 <EE_Init+0x448>
        {
          return FlashStatus;
 8001f0c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	e18d      	b.n	8002230 <EE_Init+0x458>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001f14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d174      	bne.n	8002006 <EE_Init+0x22e>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001f22:	e038      	b.n	8001f96 <EE_Init+0x1be>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001f24:	4b7d      	ldr	r3, [pc, #500]	@ (800211c <EE_Init+0x344>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f2e:	497c      	ldr	r1, [pc, #496]	@ (8002120 <EE_Init+0x348>)
 8001f30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d103      	bne.n	8001f40 <EE_Init+0x168>
          {
            x = VarIdx;
 8001f38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f3c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
          }
          if (VarIdx != x)
 8001f40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001f44:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d01f      	beq.n	8001f8c <EE_Init+0x1b4>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001f4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f50:	4a73      	ldr	r2, [pc, #460]	@ (8002120 <EE_Init+0x348>)
 8001f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f56:	4973      	ldr	r1, [pc, #460]	@ (8002124 <EE_Init+0x34c>)
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f9a1 	bl	80022a0 <EE_ReadVariable>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001f62:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d011      	beq.n	8001f8c <EE_Init+0x1b4>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001f68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f6c:	4a6c      	ldr	r2, [pc, #432]	@ (8002120 <EE_Init+0x348>)
 8001f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f72:	4a6c      	ldr	r2, [pc, #432]	@ (8002124 <EE_Init+0x34c>)
 8001f74:	8812      	ldrh	r2, [r2, #0]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fa83 	bl	8002484 <EE_VerifyPageFullWriteVariable>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	87fb      	strh	r3, [r7, #62]	@ 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001f82:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <EE_Init+0x1b4>
              {
                return EepromStatus;
 8001f88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001f8a:	e151      	b.n	8002230 <EE_Init+0x458>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001f8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f90:	3301      	adds	r3, #1
 8001f92:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001f96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0c2      	beq.n	8001f24 <EE_Init+0x14c>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	495c      	ldr	r1, [pc, #368]	@ (8002114 <EE_Init+0x33c>)
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f001 f883 	bl	80030b0 <HAL_FLASH_Program>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
     
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001fb0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <EE_Init+0x1e8>
        {
          return FlashStatus;
 8001fb8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	e137      	b.n	8002230 <EE_Init+0x458>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001fc0:	2307      	movs	r3, #7
 8001fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        pEraseInit.NbSectors = 1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001fcc:	2320      	movs	r3, #32
 8001fce:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001fd0:	4851      	ldr	r0, [pc, #324]	@ (8002118 <EE_Init+0x340>)
 8001fd2:	f000 f93b 	bl	800224c <EE_VerifyPageFullyErased>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f040 8123 	bne.w	8002224 <EE_Init+0x44c>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001fde:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001fe2:	f107 0320 	add.w	r3, r7, #32
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 f98f 	bl	800330c <HAL_FLASHEx_Erase>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001ff4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8113 	beq.w	8002224 <EE_Init+0x44c>
          {
            return FlashStatus;
 8001ffe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002002:	b29b      	uxth	r3, r3
 8002004:	e114      	b.n	8002230 <EE_Init+0x458>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8002006:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800200a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800200e:	4293      	cmp	r3, r2
 8002010:	d132      	bne.n	8002078 <EE_Init+0x2a0>
      {
        pEraseInit.Sector = PAGE1_ID;
 8002012:	2307      	movs	r3, #7
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8002016:	2302      	movs	r3, #2
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
        pEraseInit.NbSectors = 1;
 800201a:	2301      	movs	r3, #1
 800201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800201e:	2320      	movs	r3, #32
 8002020:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002022:	483d      	ldr	r0, [pc, #244]	@ (8002118 <EE_Init+0x340>)
 8002024:	f000 f912 	bl	800224c <EE_VerifyPageFullyErased>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d112      	bne.n	8002054 <EE_Init+0x27c>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800202e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002032:	f107 0320 	add.w	r3, r7, #32
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f001 f967 	bl	800330c <HAL_FLASHEx_Erase>
 800203e:	4603      	mov	r3, r0
 8002040:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002044:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <EE_Init+0x27c>
          {
            return FlashStatus;
 800204c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002050:	b29b      	uxth	r3, r3
 8002052:	e0ed      	b.n	8002230 <EE_Init+0x458>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8002054:	463b      	mov	r3, r7
 8002056:	461a      	mov	r2, r3
 8002058:	492e      	ldr	r1, [pc, #184]	@ (8002114 <EE_Init+0x33c>)
 800205a:	2001      	movs	r0, #1
 800205c:	f001 f828 	bl	80030b0 <HAL_FLASH_Program>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002066:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 80da 	beq.w	8002224 <EE_Init+0x44c>
        {
          return FlashStatus;
 8002070:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002074:	b29b      	uxth	r3, r3
 8002076:	e0db      	b.n	8002230 <EE_Init+0x458>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8002078:	f000 f95a 	bl	8002330 <EE_Format>
 800207c:	4603      	mov	r3, r0
 800207e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002082:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80cc 	beq.w	8002224 <EE_Init+0x44c>
        {
          return FlashStatus;
 800208c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002090:	b29b      	uxth	r3, r3
 8002092:	e0cd      	b.n	8002230 <EE_Init+0x458>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8002094:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10d      	bne.n	80020b8 <EE_Init+0x2e0>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800209c:	f000 f948 	bl	8002330 <EE_Format>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80020a6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80bc 	beq.w	8002228 <EE_Init+0x450>
        {
          return FlashStatus;
 80020b0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	e0bb      	b.n	8002230 <EE_Init+0x458>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80020b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d122      	bne.n	800210a <EE_Init+0x332>
      {
        pEraseInit.Sector = PAGE1_ID;
 80020c4:	2307      	movs	r3, #7
 80020c6:	62bb      	str	r3, [r7, #40]	@ 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80020c8:	2302      	movs	r3, #2
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
        pEraseInit.NbSectors = 1;
 80020cc:	2301      	movs	r3, #1
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80020d0:	2320      	movs	r3, #32
 80020d2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80020d4:	4810      	ldr	r0, [pc, #64]	@ (8002118 <EE_Init+0x340>)
 80020d6:	f000 f8b9 	bl	800224c <EE_VerifyPageFullyErased>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 80a3 	bne.w	8002228 <EE_Init+0x450>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80020e2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80020e6:	f107 0320 	add.w	r3, r7, #32
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f001 f90d 	bl	800330c <HAL_FLASHEx_Erase>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80020f8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8093 	beq.w	8002228 <EE_Init+0x450>
          {
            return FlashStatus;
 8002102:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002106:	b29b      	uxth	r3, r3
 8002108:	e092      	b.n	8002230 <EE_Init+0x458>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800210a:	2300      	movs	r3, #0
 800210c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002110:	e043      	b.n	800219a <EE_Init+0x3c2>
 8002112:	bf00      	nop
 8002114:	081c0000 	.word	0x081c0000
 8002118:	081e0000 	.word	0x081e0000
 800211c:	081c0006 	.word	0x081c0006
 8002120:	24000008 	.word	0x24000008
 8002124:	240000b8 	.word	0x240000b8
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8002128:	4b43      	ldr	r3, [pc, #268]	@ (8002238 <EE_Init+0x460>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29a      	uxth	r2, r3
 800212e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002132:	4942      	ldr	r1, [pc, #264]	@ (800223c <EE_Init+0x464>)
 8002134:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002138:	429a      	cmp	r2, r3
 800213a:	d103      	bne.n	8002144 <EE_Init+0x36c>
          {
            x = VarIdx;
 800213c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002140:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
          }
          if (VarIdx != x)
 8002144:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002148:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800214c:	429a      	cmp	r2, r3
 800214e:	d01f      	beq.n	8002190 <EE_Init+0x3b8>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8002150:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002154:	4a39      	ldr	r2, [pc, #228]	@ (800223c <EE_Init+0x464>)
 8002156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800215a:	4939      	ldr	r1, [pc, #228]	@ (8002240 <EE_Init+0x468>)
 800215c:	4618      	mov	r0, r3
 800215e:	f000 f89f 	bl	80022a0 <EE_ReadVariable>
 8002162:	4603      	mov	r3, r0
 8002164:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8002166:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d011      	beq.n	8002190 <EE_Init+0x3b8>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800216c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002170:	4a32      	ldr	r2, [pc, #200]	@ (800223c <EE_Init+0x464>)
 8002172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002176:	4a32      	ldr	r2, [pc, #200]	@ (8002240 <EE_Init+0x468>)
 8002178:	8812      	ldrh	r2, [r2, #0]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f000 f981 	bl	8002484 <EE_VerifyPageFullWriteVariable>
 8002182:	4603      	mov	r3, r0
 8002184:	87fb      	strh	r3, [r7, #62]	@ 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8002186:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <EE_Init+0x3b8>
              {
                return EepromStatus;
 800218c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800218e:	e04f      	b.n	8002230 <EE_Init+0x458>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002190:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002194:	3301      	adds	r3, #1
 8002196:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800219a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0c2      	beq.n	8002128 <EE_Init+0x350>
              }
            }
          }
        }
        /* Mark Page1 as valid */         
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 80021a2:	463b      	mov	r3, r7
 80021a4:	461a      	mov	r2, r3
 80021a6:	4927      	ldr	r1, [pc, #156]	@ (8002244 <EE_Init+0x46c>)
 80021a8:	2001      	movs	r0, #1
 80021aa:	f000 ff81 	bl	80030b0 <HAL_FLASH_Program>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80021b4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <EE_Init+0x3ec>
        {
          return FlashStatus;
 80021bc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	e035      	b.n	8002230 <EE_Init+0x458>
        }
        pEraseInit.Sector = PAGE0_ID;
 80021c4:	2306      	movs	r3, #6
 80021c6:	62bb      	str	r3, [r7, #40]	@ 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80021c8:	2302      	movs	r3, #2
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
        pEraseInit.NbSectors = 1;
 80021cc:	2301      	movs	r3, #1
 80021ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80021d0:	2320      	movs	r3, #32
 80021d2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80021d4:	481c      	ldr	r0, [pc, #112]	@ (8002248 <EE_Init+0x470>)
 80021d6:	f000 f839 	bl	800224c <EE_VerifyPageFullyErased>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d123      	bne.n	8002228 <EE_Init+0x450>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80021e0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80021e4:	f107 0320 	add.w	r3, r7, #32
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f001 f88e 	bl	800330c <HAL_FLASHEx_Erase>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80021f6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d014      	beq.n	8002228 <EE_Init+0x450>
          {
            return FlashStatus;
 80021fe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002202:	b29b      	uxth	r3, r3
 8002204:	e014      	b.n	8002230 <EE_Init+0x458>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8002206:	f000 f893 	bl	8002330 <EE_Format>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8002210:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <EE_Init+0x454>
      {
        return FlashStatus;
 8002218:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800221c:	b29b      	uxth	r3, r3
 800221e:	e007      	b.n	8002230 <EE_Init+0x458>
      break;
 8002220:	bf00      	nop
 8002222:	e004      	b.n	800222e <EE_Init+0x456>
      break;
 8002224:	bf00      	nop
 8002226:	e002      	b.n	800222e <EE_Init+0x456>
      break;
 8002228:	bf00      	nop
 800222a:	e000      	b.n	800222e <EE_Init+0x456>
      }
      break;
 800222c:	bf00      	nop
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3748      	adds	r7, #72	@ 0x48
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	081e0006 	.word	0x081e0006
 800223c:	24000008 	.word	0x24000008
 8002240:	240000b8 	.word	0x240000b8
 8002244:	081e0000 	.word	0x081e0000
 8002248:	081c0000 	.word	0x081c0000

0800224c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 8002254:	2301      	movs	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 8002258:	f245 5355 	movw	r3, #21845	@ 0x5555
 800225c:	827b      	strh	r3, [r7, #18]
   
  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <EE_VerifyPageFullyErased+0x50>)
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  
  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 8002266:	e00d      	b.n	8002284 <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800226e:	8a7b      	ldrh	r3, [r7, #18]
 8002270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002274:	4293      	cmp	r3, r2
 8002276:	d002      	beq.n	800227e <EE_VerifyPageFullyErased+0x32>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

      break;
 800227c:	e006      	b.n	800228c <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3304      	adds	r3, #4
 8002282:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d9ed      	bls.n	8002268 <EE_VerifyPageFullyErased+0x1c>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	b29b      	uxth	r3, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	0001fffc 	.word	0x0001fffc

080022a0 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80022b0:	f245 5355 	movw	r3, #21845	@ 0x5555
 80022b4:	81bb      	strh	r3, [r7, #12]
 80022b6:	2301      	movs	r3, #1
 80022b8:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80022ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <EE_ReadVariable+0x88>)
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <EE_ReadVariable+0x88>)
 80022c0:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f000 f898 	bl	80023f8 <EE_FindValidPage>
 80022c8:	4603      	mov	r3, r0
 80022ca:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80022cc:	89fb      	ldrh	r3, [r7, #14]
 80022ce:	2bab      	cmp	r3, #171	@ 0xab
 80022d0:	d101      	bne.n	80022d6 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80022d2:	23ab      	movs	r3, #171	@ 0xab
 80022d4:	e024      	b.n	8002320 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80022d6:	89fb      	ldrh	r3, [r7, #14]
 80022d8:	f203 430e 	addw	r3, r3, #1038	@ 0x40e
 80022dc:	045b      	lsls	r3, r3, #17
 80022de:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80022e0:	89fb      	ldrh	r3, [r7, #14]
 80022e2:	3301      	adds	r3, #1
 80022e4:	045a      	lsls	r2, r3, #17
 80022e6:	4b11      	ldr	r3, [pc, #68]	@ (800232c <EE_ReadVariable+0x8c>)
 80022e8:	4413      	add	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 80022ec:	e012      	b.n	8002314 <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80022f4:	89ba      	ldrh	r2, [r7, #12]
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d108      	bne.n	800230e <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	3b20      	subs	r3, #32
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29a      	uxth	r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	82fb      	strh	r3, [r7, #22]

      break;
 800230c:	e007      	b.n	800231e <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;  
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3b40      	subs	r3, #64	@ 0x40
 8002312:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3320      	adds	r3, #32
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	429a      	cmp	r2, r3
 800231c:	d8e7      	bhi.n	80022ee <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800231e:	8afb      	ldrh	r3, [r7, #22]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	081c0000 	.word	0x081c0000
 800232c:	081bffe0 	.word	0x081bffe0

08002330 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b090      	sub	sp, #64	@ 0x40
 8002334:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t SectorError = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	63bb      	str	r3, [r7, #56]	@ 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	2220      	movs	r2, #32
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f005 fb22 	bl	8007990 <memset>
  
  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; 
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 8002350:	2302      	movs	r3, #2
 8002352:	62bb      	str	r3, [r7, #40]	@ 0x28
  pEraseInit.Sector = PAGE0_ID;
 8002354:	2306      	movs	r3, #6
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pEraseInit.NbSectors = 1;
 8002358:	2301      	movs	r3, #1
 800235a:	633b      	str	r3, [r7, #48]	@ 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800235c:	2320      	movs	r3, #32
 800235e:	637b      	str	r3, [r7, #52]	@ 0x34
  
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002360:	4823      	ldr	r0, [pc, #140]	@ (80023f0 <EE_Format+0xc0>)
 8002362:	f7ff ff73 	bl	800224c <EE_VerifyPageFullyErased>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d111      	bne.n	8002390 <EE_Format+0x60>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800236c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f000 ffc8 	bl	800330c <HAL_FLASHEx_Erase>
 800237c:	4603      	mov	r3, r0
 800237e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8002382:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <EE_Format+0x60>
    {
      return FlashStatus;
 800238a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800238e:	e02a      	b.n	80023e6 <EE_Format+0xb6>
    }
  }
  
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */  
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	461a      	mov	r2, r3
 8002394:	4916      	ldr	r1, [pc, #88]	@ (80023f0 <EE_Format+0xc0>)
 8002396:	2001      	movs	r0, #1
 8002398:	f000 fe8a 	bl	80030b0 <HAL_FLASH_Program>
 800239c:	4603      	mov	r3, r0
 800239e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80023a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <EE_Format+0x80>
  {
    return FlashStatus;
 80023aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80023ae:	e01a      	b.n	80023e6 <EE_Format+0xb6>
  }

  pEraseInit.Sector = PAGE1_ID;
 80023b0:	2307      	movs	r3, #7
 80023b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80023b4:	480f      	ldr	r0, [pc, #60]	@ (80023f4 <EE_Format+0xc4>)
 80023b6:	f7ff ff49 	bl	800224c <EE_VerifyPageFullyErased>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d111      	bne.n	80023e4 <EE_Format+0xb4>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80023c0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80023c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 ff9e 	bl	800330c <HAL_FLASHEx_Erase>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80023d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <EE_Format+0xb4>
    {
      return FlashStatus;
 80023de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80023e2:	e000      	b.n	80023e6 <EE_Format+0xb6>
    }
  }
  
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3740      	adds	r7, #64	@ 0x40
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	081c0000 	.word	0x081c0000
 80023f4:	081e0000 	.word	0x081e0000

080023f8 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8002402:	2306      	movs	r3, #6
 8002404:	81fb      	strh	r3, [r7, #14]
 8002406:	2306      	movs	r3, #6
 8002408:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800240a:	4b1c      	ldr	r3, [pc, #112]	@ (800247c <EE_FindValidPage+0x84>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002410:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <EE_FindValidPage+0x88>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01b      	beq.n	8002454 <EE_FindValidPage+0x5c>
 800241c:	2b01      	cmp	r3, #1
 800241e:	d125      	bne.n	800246c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8002420:	89bb      	ldrh	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d108      	bne.n	8002438 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8002426:	89fb      	ldrh	r3, [r7, #14]
 8002428:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800242c:	4293      	cmp	r3, r2
 800242e:	d101      	bne.n	8002434 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8002430:	2300      	movs	r3, #0
 8002432:	e01c      	b.n	800246e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8002434:	2301      	movs	r3, #1
 8002436:	e01a      	b.n	800246e <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8002438:	89fb      	ldrh	r3, [r7, #14]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800243e:	89bb      	ldrh	r3, [r7, #12]
 8002440:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8002444:	4293      	cmp	r3, r2
 8002446:	d101      	bne.n	800244c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8002448:	2301      	movs	r3, #1
 800244a:	e010      	b.n	800246e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800244c:	2300      	movs	r3, #0
 800244e:	e00e      	b.n	800246e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8002450:	23ab      	movs	r3, #171	@ 0xab
 8002452:	e00c      	b.n	800246e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8002454:	89fb      	ldrh	r3, [r7, #14]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800245a:	2300      	movs	r3, #0
 800245c:	e007      	b.n	800246e <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800245e:	89bb      	ldrh	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8002464:	2301      	movs	r3, #1
 8002466:	e002      	b.n	800246e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8002468:	23ab      	movs	r3, #171	@ 0xab
 800246a:	e000      	b.n	800246e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800246c:	2300      	movs	r3, #0
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	081c0000 	.word	0x081c0000
 8002480:	081e0000 	.word	0x081e0000

08002484 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b096      	sub	sp, #88	@ 0x58
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	460a      	mov	r2, r1
 800248e:	80fb      	strh	r3, [r7, #6]
 8002490:	4613      	mov	r3, r2
 8002492:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  uint16_t ValidPage = PAGE0;
 800249a:	2300      	movs	r3, #0
 800249c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80024a0:	4b30      	ldr	r3, [pc, #192]	@ (8002564 <EE_VerifyPageFullWriteVariable+0xe0>)
 80024a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80024a4:	4b30      	ldr	r3, [pc, #192]	@ (8002568 <EE_VerifyPageFullWriteVariable+0xe4>)
 80024a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 
  uint32_t data32[8] = {Data};
 80024a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ac:	2220      	movs	r2, #32
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f005 fa6d 	bl	8007990 <memset>
 80024b6:	88bb      	ldrh	r3, [r7, #4]
 80024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	2220      	movs	r2, #32
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f005 fa64 	bl	8007990 <memset>
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7ff ff93 	bl	80023f8 <EE_FindValidPage>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80024d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024dc:	2bab      	cmp	r3, #171	@ 0xab
 80024de:	d101      	bne.n	80024e4 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 80024e0:	23ab      	movs	r3, #171	@ 0xab
 80024e2:	e03b      	b.n	800255c <EE_VerifyPageFullWriteVariable+0xd8>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80024e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024e8:	f203 430e 	addw	r3, r3, #1038	@ 0x40e
 80024ec:	045b      	lsls	r3, r3, #17
 80024ee:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80024f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80024f4:	3301      	adds	r3, #1
 80024f6:	045a      	lsls	r2, r3, #17
 80024f8:	4b1c      	ldr	r3, [pc, #112]	@ (800256c <EE_VerifyPageFullWriteVariable+0xe8>)
 80024fa:	4413      	add	r3, r2
 80024fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 80024fe:	e028      	b.n	8002552 <EE_VerifyPageFullWriteVariable+0xce>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF) 
 8002500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d120      	bne.n	800254c <EE_VerifyPageFullWriteVariable+0xc8>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 800250a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800250e:	461a      	mov	r2, r3
 8002510:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002512:	2001      	movs	r0, #1
 8002514:	f000 fdcc 	bl	80030b0 <HAL_FLASH_Program>
 8002518:	4603      	mov	r3, r0
 800251a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
   
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800251e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <EE_VerifyPageFullWriteVariable+0xaa>
      {
        return FlashStatus;
 8002526:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800252a:	b29b      	uxth	r3, r3
 800252c:	e016      	b.n	800255c <EE_VerifyPageFullWriteVariable+0xd8>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 800252e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002530:	3320      	adds	r3, #32
 8002532:	f107 020c 	add.w	r2, r7, #12
 8002536:	4619      	mov	r1, r3
 8002538:	2001      	movs	r0, #1
 800253a:	f000 fdb9 	bl	80030b0 <HAL_FLASH_Program>
 800253e:	4603      	mov	r3, r0
 8002540:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

      /* Return program operation status */
     return FlashStatus;
 8002544:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002548:	b29b      	uxth	r3, r3
 800254a:	e007      	b.n	800255c <EE_VerifyPageFullWriteVariable+0xd8>
    }
    else
    {
      /* Next address location */
      Address = Address + 64; 
 800254c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254e:	3340      	adds	r3, #64	@ 0x40
 8002550:	657b      	str	r3, [r7, #84]	@ 0x54
  while (Address < PageEndAddress)
 8002552:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002556:	429a      	cmp	r2, r3
 8002558:	d3d2      	bcc.n	8002500 <EE_VerifyPageFullWriteVariable+0x7c>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800255a:	2380      	movs	r3, #128	@ 0x80
}
 800255c:	4618      	mov	r0, r3
 800255e:	3758      	adds	r7, #88	@ 0x58
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	081c0000 	.word	0x081c0000
 8002568:	081e0000 	.word	0x081e0000
 800256c:	081bffff 	.word	0x081bffff

08002570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BootManager_FSM();
 8002574:	f7ff f9ba 	bl	80018ec <BootManager_FSM>
 8002578:	e7fc      	b.n	8002574 <main+0x4>
	...

0800257c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b09c      	sub	sp, #112	@ 0x70
 8002580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002586:	224c      	movs	r2, #76	@ 0x4c
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f005 fa00 	bl	8007990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	2220      	movs	r2, #32
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f005 f9fa 	bl	8007990 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800259c:	2004      	movs	r0, #4
 800259e:	f001 f9f1 	bl	8003984 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80025a2:	2300      	movs	r3, #0
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	4b28      	ldr	r3, [pc, #160]	@ (8002648 <SystemClock_Config+0xcc>)
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	4a27      	ldr	r2, [pc, #156]	@ (8002648 <SystemClock_Config+0xcc>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80025b2:	4b25      	ldr	r3, [pc, #148]	@ (8002648 <SystemClock_Config+0xcc>)
 80025b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	4b23      	ldr	r3, [pc, #140]	@ (800264c <SystemClock_Config+0xd0>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80025c4:	4a21      	ldr	r2, [pc, #132]	@ (800264c <SystemClock_Config+0xd0>)
 80025c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b1f      	ldr	r3, [pc, #124]	@ (800264c <SystemClock_Config+0xd0>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025d8:	bf00      	nop
 80025da:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <SystemClock_Config+0xd0>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e6:	d1f8      	bne.n	80025da <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025e8:	2302      	movs	r3, #2
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80025ec:	2301      	movs	r3, #1
 80025ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025f0:	2340      	movs	r3, #64	@ 0x40
 80025f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025fc:	4618      	mov	r0, r3
 80025fe:	f001 fa1b 	bl	8003a38 <HAL_RCC_OscConfig>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002608:	f000 f8dc 	bl	80027c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800260c:	233f      	movs	r3, #63	@ 0x3f
 800260e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002620:	2340      	movs	r3, #64	@ 0x40
 8002622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002628:	2300      	movs	r3, #0
 800262a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2101      	movs	r1, #1
 8002630:	4618      	mov	r0, r3
 8002632:	f001 fe5b 	bl	80042ec <HAL_RCC_ClockConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800263c:	f000 f8c2 	bl	80027c4 <Error_Handler>
  }
}
 8002640:	bf00      	nop
 8002642:	3770      	adds	r7, #112	@ 0x70
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	58000400 	.word	0x58000400
 800264c:	58024800 	.word	0x58024800

08002650 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
void MX_CRC_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002654:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <MX_CRC_Init+0x3c>)
 8002656:	4a0e      	ldr	r2, [pc, #56]	@ (8002690 <MX_CRC_Init+0x40>)
 8002658:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800265a:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <MX_CRC_Init+0x3c>)
 800265c:	2200      	movs	r2, #0
 800265e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002660:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <MX_CRC_Init+0x3c>)
 8002662:	2200      	movs	r2, #0
 8002664:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002666:	4b09      	ldr	r3, [pc, #36]	@ (800268c <MX_CRC_Init+0x3c>)
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800266c:	4b07      	ldr	r3, [pc, #28]	@ (800268c <MX_CRC_Init+0x3c>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <MX_CRC_Init+0x3c>)
 8002674:	2201      	movs	r2, #1
 8002676:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002678:	4804      	ldr	r0, [pc, #16]	@ (800268c <MX_CRC_Init+0x3c>)
 800267a:	f000 fc27 	bl	8002ecc <HAL_CRC_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002684:	f000 f89e 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	240000bc 	.word	0x240000bc
 8002690:	58024c00 	.word	0x58024c00

08002694 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002698:	4b22      	ldr	r3, [pc, #136]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 800269a:	4a23      	ldr	r2, [pc, #140]	@ (8002728 <MX_USART3_UART_Init+0x94>)
 800269c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800269e:	4b21      	ldr	r3, [pc, #132]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026ba:	220c      	movs	r2, #12
 80026bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026be:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c4:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ca:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026d0:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026d6:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026d8:	2200      	movs	r2, #0
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026dc:	4811      	ldr	r0, [pc, #68]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026de:	f003 ffbd 	bl	800665c <HAL_UART_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80026e8:	f000 f86c 	bl	80027c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ec:	2100      	movs	r1, #0
 80026ee:	480d      	ldr	r0, [pc, #52]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 80026f0:	f005 f853 	bl	800779a <HAL_UARTEx_SetTxFifoThreshold>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80026fa:	f000 f863 	bl	80027c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026fe:	2100      	movs	r1, #0
 8002700:	4808      	ldr	r0, [pc, #32]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 8002702:	f005 f888 	bl	8007816 <HAL_UARTEx_SetRxFifoThreshold>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800270c:	f000 f85a 	bl	80027c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002710:	4804      	ldr	r0, [pc, #16]	@ (8002724 <MX_USART3_UART_Init+0x90>)
 8002712:	f005 f809 	bl	8007728 <HAL_UARTEx_DisableFifoMode>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800271c:	f000 f852 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	240000e0 	.word	0x240000e0
 8002728:	40004800 	.word	0x40004800

0800272c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	4b12      	ldr	r3, [pc, #72]	@ (800277c <MX_GPIO_Init+0x50>)
 8002734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002738:	4a10      	ldr	r2, [pc, #64]	@ (800277c <MX_GPIO_Init+0x50>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002742:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <MX_GPIO_Init+0x50>)
 8002744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002750:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <MX_GPIO_Init+0x50>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002756:	4a09      	ldr	r2, [pc, #36]	@ (800277c <MX_GPIO_Init+0x50>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <MX_GPIO_Init+0x50>)
 8002762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	58024400 	.word	0x58024400

08002780 <printmsg>:

/* USER CODE BEGIN 4 */
void printmsg(char *format, ...) {
 8002780:	b40f      	push	{r0, r1, r2, r3}
 8002782:	b580      	push	{r7, lr}
 8002784:	b09a      	sub	sp, #104	@ 0x68
 8002786:	af00      	add	r7, sp, #0
  char str[100];
  va_list args;
  va_start(args, format);
 8002788:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800278c:	603b      	str	r3, [r7, #0]
  vsprintf(str, format, args);
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002794:	4618      	mov	r0, r3
 8002796:	f005 f8e1 	bl	800795c <vsiprintf>
  HAL_UART_Transmit(D_UART, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fdf2 	bl	8001386 <strlen>
 80027a2:	4603      	mov	r3, r0
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	1d39      	adds	r1, r7, #4
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	4804      	ldr	r0, [pc, #16]	@ (80027c0 <printmsg+0x40>)
 80027ae:	f003 ffa5 	bl	80066fc <HAL_UART_Transmit>
  va_end(args);
}
 80027b2:	bf00      	nop
 80027b4:	3768      	adds	r7, #104	@ 0x68
 80027b6:	46bd      	mov	sp, r7
 80027b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027bc:	b004      	add	sp, #16
 80027be:	4770      	bx	lr
 80027c0:	240000e0 	.word	0x240000e0

080027c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027c8:	b672      	cpsid	i
}
 80027ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <Error_Handler+0x8>

080027d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <HAL_MspInit+0x30>)
 80027d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027dc:	4a08      	ldr	r2, [pc, #32]	@ (8002800 <HAL_MspInit+0x30>)
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <HAL_MspInit+0x30>)
 80027e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	58024400 	.word	0x58024400

08002804 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0b      	ldr	r2, [pc, #44]	@ (8002840 <HAL_CRC_MspInit+0x3c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10e      	bne.n	8002834 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002816:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_CRC_MspInit+0x40>)
 8002818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800281c:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <HAL_CRC_MspInit+0x40>)
 800281e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002822:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002826:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <HAL_CRC_MspInit+0x40>)
 8002828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800282c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	58024c00 	.word	0x58024c00
 8002844:	58024400 	.word	0x58024400

08002848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b0bc      	sub	sp, #240	@ 0xf0
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002860:	f107 0318 	add.w	r3, r7, #24
 8002864:	22c0      	movs	r2, #192	@ 0xc0
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f005 f891 	bl	8007990 <memset>
  if(huart->Instance==USART2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a4d      	ldr	r2, [pc, #308]	@ (80029a8 <HAL_UART_MspInit+0x160>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d146      	bne.n	8002906 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002878:	f04f 0202 	mov.w	r2, #2
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002884:	2300      	movs	r3, #0
 8002886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800288a:	f107 0318 	add.w	r3, r7, #24
 800288e:	4618      	mov	r0, r3
 8002890:	f002 f8b8 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800289a:	f7ff ff93 	bl	80027c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800289e:	4b43      	ldr	r3, [pc, #268]	@ (80029ac <HAL_UART_MspInit+0x164>)
 80028a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028a4:	4a41      	ldr	r2, [pc, #260]	@ (80029ac <HAL_UART_MspInit+0x164>)
 80028a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028ae:	4b3f      	ldr	r3, [pc, #252]	@ (80029ac <HAL_UART_MspInit+0x164>)
 80028b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028bc:	4b3b      	ldr	r3, [pc, #236]	@ (80029ac <HAL_UART_MspInit+0x164>)
 80028be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c2:	4a3a      	ldr	r2, [pc, #232]	@ (80029ac <HAL_UART_MspInit+0x164>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028cc:	4b37      	ldr	r3, [pc, #220]	@ (80029ac <HAL_UART_MspInit+0x164>)
 80028ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028da:	230c      	movs	r3, #12
 80028dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028f2:	2307      	movs	r3, #7
 80028f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80028fc:	4619      	mov	r1, r3
 80028fe:	482c      	ldr	r0, [pc, #176]	@ (80029b0 <HAL_UART_MspInit+0x168>)
 8002900:	f000 fe76 	bl	80035f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002904:	e04b      	b.n	800299e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a2a      	ldr	r2, [pc, #168]	@ (80029b4 <HAL_UART_MspInit+0x16c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d146      	bne.n	800299e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002910:	f04f 0202 	mov.w	r2, #2
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002922:	f107 0318 	add.w	r3, r7, #24
 8002926:	4618      	mov	r0, r3
 8002928:	f002 f86c 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8002932:	f7ff ff47 	bl	80027c4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002936:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <HAL_UART_MspInit+0x164>)
 8002938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800293c:	4a1b      	ldr	r2, [pc, #108]	@ (80029ac <HAL_UART_MspInit+0x164>)
 800293e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002942:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002946:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <HAL_UART_MspInit+0x164>)
 8002948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800294c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002954:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <HAL_UART_MspInit+0x164>)
 8002956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295a:	4a14      	ldr	r2, [pc, #80]	@ (80029ac <HAL_UART_MspInit+0x164>)
 800295c:	f043 0308 	orr.w	r3, r3, #8
 8002960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_UART_MspInit+0x164>)
 8002966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002972:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002976:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800298c:	2307      	movs	r3, #7
 800298e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002992:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002996:	4619      	mov	r1, r3
 8002998:	4807      	ldr	r0, [pc, #28]	@ (80029b8 <HAL_UART_MspInit+0x170>)
 800299a:	f000 fe29 	bl	80035f0 <HAL_GPIO_Init>
}
 800299e:	bf00      	nop
 80029a0:	37f0      	adds	r7, #240	@ 0xf0
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40004400 	.word	0x40004400
 80029ac:	58024400 	.word	0x58024400
 80029b0:	58020000 	.word	0x58020000
 80029b4:	40004800 	.word	0x40004800
 80029b8:	58020c00 	.word	0x58020c00

080029bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <NMI_Handler+0x4>

080029c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <HardFault_Handler+0x4>

080029cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <MemManage_Handler+0x4>

080029d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <BusFault_Handler+0x4>

080029dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <UsageFault_Handler+0x4>

080029e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a12:	f000 f94b 	bl	8002cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a24:	4a14      	ldr	r2, [pc, #80]	@ (8002a78 <_sbrk+0x5c>)
 8002a26:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <_sbrk+0x60>)
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a30:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <_sbrk+0x64>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d102      	bne.n	8002a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <_sbrk+0x64>)
 8002a3a:	4a12      	ldr	r2, [pc, #72]	@ (8002a84 <_sbrk+0x68>)
 8002a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <_sbrk+0x64>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d207      	bcs.n	8002a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a4c:	f004 ffa8 	bl	80079a0 <__errno>
 8002a50:	4603      	mov	r3, r0
 8002a52:	220c      	movs	r2, #12
 8002a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e009      	b.n	8002a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a5c:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <_sbrk+0x64>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a62:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <_sbrk+0x64>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	4a05      	ldr	r2, [pc, #20]	@ (8002a80 <_sbrk+0x64>)
 8002a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	24080000 	.word	0x24080000
 8002a7c:	00000400 	.word	0x00000400
 8002a80:	24000174 	.word	0x24000174
 8002a84:	240002e0 	.word	0x240002e0

08002a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ac0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a8c:	f7fe fe98 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a90:	480c      	ldr	r0, [pc, #48]	@ (8002ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a92:	490d      	ldr	r1, [pc, #52]	@ (8002ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a94:	4a0d      	ldr	r2, [pc, #52]	@ (8002acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a98:	e002      	b.n	8002aa0 <LoopCopyDataInit>

08002a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9e:	3304      	adds	r3, #4

08002aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa4:	d3f9      	bcc.n	8002a9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aac:	e001      	b.n	8002ab2 <LoopFillZerobss>

08002aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab0:	3204      	adds	r2, #4

08002ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab4:	d3fb      	bcc.n	8002aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ab6:	f004 ff79 	bl	80079ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aba:	f7ff fd59 	bl	8002570 <main>
  bx  lr
 8002abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ac0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002ac4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ac8:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8002acc:	0800896c 	.word	0x0800896c
  ldr r2, =_sbss
 8002ad0:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8002ad4:	240002e0 	.word	0x240002e0

08002ad8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ad8:	e7fe      	b.n	8002ad8 <ADC3_IRQHandler>
	...

08002adc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	@ 0x30
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <BSP_LED_Init+0x28>
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d006      	beq.n	8002b04 <BSP_LED_Init+0x28>
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d003      	beq.n	8002b04 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002afc:	f06f 0301 	mvn.w	r3, #1
 8002b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b02:	e055      	b.n	8002bb0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8002b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bbc <BSP_LED_Init+0xe0>)
 8002b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b10:	4a2a      	ldr	r2, [pc, #168]	@ (8002bbc <BSP_LED_Init+0xe0>)
 8002b12:	f043 0302 	orr.w	r3, r3, #2
 8002b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b1a:	4b28      	ldr	r3, [pc, #160]	@ (8002bbc <BSP_LED_Init+0xe0>)
 8002b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	e021      	b.n	8002b6e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d10f      	bne.n	8002b50 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002b30:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <BSP_LED_Init+0xe0>)
 8002b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b36:	4a21      	ldr	r2, [pc, #132]	@ (8002bbc <BSP_LED_Init+0xe0>)
 8002b38:	f043 0310 	orr.w	r3, r3, #16
 8002b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b40:	4b1e      	ldr	r3, [pc, #120]	@ (8002bbc <BSP_LED_Init+0xe0>)
 8002b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	e00e      	b.n	8002b6e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002b50:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <BSP_LED_Init+0xe0>)
 8002b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b56:	4a19      	ldr	r2, [pc, #100]	@ (8002bbc <BSP_LED_Init+0xe0>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b60:	4b16      	ldr	r3, [pc, #88]	@ (8002bbc <BSP_LED_Init+0xe0>)
 8002b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	4a13      	ldr	r2, [pc, #76]	@ (8002bc0 <BSP_LED_Init+0xe4>)
 8002b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b76:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	4a0f      	ldr	r2, [pc, #60]	@ (8002bc4 <BSP_LED_Init+0xe8>)
 8002b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8c:	f107 0218 	add.w	r2, r7, #24
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fd2c 	bl	80035f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc4 <BSP_LED_Init+0xe8>)
 8002b9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	4a07      	ldr	r2, [pc, #28]	@ (8002bc0 <BSP_LED_Init+0xe4>)
 8002ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	4619      	mov	r1, r3
 8002bac:	f000 fed0 	bl	8003950 <HAL_GPIO_WritePin>
  }

  return ret;
 8002bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3730      	adds	r7, #48	@ 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	080083f8 	.word	0x080083f8
 8002bc4:	2400001c 	.word	0x2400001c

08002bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bce:	2003      	movs	r0, #3
 8002bd0:	f000 f94a 	bl	8002e68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bd4:	f001 fd40 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_Init+0x68>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	4913      	ldr	r1, [pc, #76]	@ (8002c34 <HAL_Init+0x6c>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <HAL_Init+0x68>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8002c34 <HAL_Init+0x6c>)
 8002bfc:	5cd3      	ldrb	r3, [r2, r3]
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
 8002c08:	4a0b      	ldr	r2, [pc, #44]	@ (8002c38 <HAL_Init+0x70>)
 8002c0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c3c <HAL_Init+0x74>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c12:	2000      	movs	r0, #0
 8002c14:	f000 f814 	bl	8002c40 <HAL_InitTick>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e002      	b.n	8002c28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c22:	f7ff fdd5 	bl	80027d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	58024400 	.word	0x58024400
 8002c34:	080083e8 	.word	0x080083e8
 8002c38:	24000004 	.word	0x24000004
 8002c3c:	24000000 	.word	0x24000000

08002c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c48:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <HAL_InitTick+0x60>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e021      	b.n	8002c98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c54:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <HAL_InitTick+0x64>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <HAL_InitTick+0x60>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f921 	bl	8002eb2 <HAL_SYSTICK_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00e      	b.n	8002c98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	d80a      	bhi.n	8002c96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c80:	2200      	movs	r2, #0
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	f000 f8f9 	bl	8002e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ca8 <HAL_InitTick+0x68>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	2400002c 	.word	0x2400002c
 8002ca4:	24000000 	.word	0x24000000
 8002ca8:	24000028 	.word	0x24000028

08002cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_IncTick+0x20>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_IncTick+0x24>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <HAL_IncTick+0x24>)
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	2400002c 	.word	0x2400002c
 8002cd0:	24000178 	.word	0x24000178

08002cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	@ (8002ce8 <HAL_GetTick+0x14>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	24000178 	.word	0x24000178

08002cec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002cf0:	4b03      	ldr	r3, [pc, #12]	@ (8002d00 <HAL_GetREVID+0x14>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0c1b      	lsrs	r3, r3, #16
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	5c001000 	.word	0x5c001000

08002d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <__NVIC_SetPriorityGrouping+0x40>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d32:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <__NVIC_SetPriorityGrouping+0x40>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00
 8002d48:	05fa0000 	.word	0x05fa0000

08002d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d50:	4b04      	ldr	r3, [pc, #16]	@ (8002d64 <__NVIC_GetPriorityGrouping+0x18>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 0307 	and.w	r3, r3, #7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0a      	blt.n	8002d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	490c      	ldr	r1, [pc, #48]	@ (8002db4 <__NVIC_SetPriority+0x4c>)
 8002d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d90:	e00a      	b.n	8002da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4908      	ldr	r1, [pc, #32]	@ (8002db8 <__NVIC_SetPriority+0x50>)
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	3b04      	subs	r3, #4
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	761a      	strb	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000e100 	.word	0xe000e100
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	@ 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f1c3 0307 	rsb	r3, r3, #7
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	bf28      	it	cs
 8002dda:	2304      	movcs	r3, #4
 8002ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d902      	bls.n	8002dec <NVIC_EncodePriority+0x30>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3b03      	subs	r3, #3
 8002dea:	e000      	b.n	8002dee <NVIC_EncodePriority+0x32>
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	4313      	orrs	r3, r2
         );
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	@ 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e34:	d301      	bcc.n	8002e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00f      	b.n	8002e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e64 <SysTick_Config+0x40>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e42:	210f      	movs	r1, #15
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	f7ff ff8e 	bl	8002d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e4c:	4b05      	ldr	r3, [pc, #20]	@ (8002e64 <SysTick_Config+0x40>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e52:	4b04      	ldr	r3, [pc, #16]	@ (8002e64 <SysTick_Config+0x40>)
 8002e54:	2207      	movs	r2, #7
 8002e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	e000e010 	.word	0xe000e010

08002e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff47 	bl	8002d04 <__NVIC_SetPriorityGrouping>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff5e 	bl	8002d4c <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff90 	bl	8002dbc <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff5f 	bl	8002d68 <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ffb2 	bl	8002e24 <SysTick_Config>
 8002ec0:	4603      	mov	r3, r0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e054      	b.n	8002f88 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7f5b      	ldrb	r3, [r3, #29]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fc88 	bl	8002804 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	791b      	ldrb	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a22      	ldr	r2, [pc, #136]	@ (8002f90 <HAL_CRC_Init+0xc4>)
 8002f08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0218 	bic.w	r2, r2, #24
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	e00c      	b.n	8002f36 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6899      	ldr	r1, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	461a      	mov	r2, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f834 	bl	8002f94 <HAL_CRCEx_Polynomial_Set>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e028      	b.n	8002f88 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	795b      	ldrb	r3, [r3, #5]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d105      	bne.n	8002f4a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f04f 32ff 	mov.w	r2, #4294967295
 8002f46:	611a      	str	r2, [r3, #16]
 8002f48:	e004      	b.n	8002f54 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6912      	ldr	r2, [r2, #16]
 8002f52:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	04c11db7 	.word	0x04c11db7

08002f94 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002fa4:	231f      	movs	r3, #31
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	75fb      	strb	r3, [r7, #23]
 8002fb6:	e063      	b.n	8003080 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002fb8:	bf00      	nop
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1e5a      	subs	r2, r3, #1
 8002fbe:	613a      	str	r2, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <HAL_CRCEx_Polynomial_Set+0x44>
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b18      	cmp	r3, #24
 8002fdc:	d846      	bhi.n	800306c <HAL_CRCEx_Polynomial_Set+0xd8>
 8002fde:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe4:	08003073 	.word	0x08003073
 8002fe8:	0800306d 	.word	0x0800306d
 8002fec:	0800306d 	.word	0x0800306d
 8002ff0:	0800306d 	.word	0x0800306d
 8002ff4:	0800306d 	.word	0x0800306d
 8002ff8:	0800306d 	.word	0x0800306d
 8002ffc:	0800306d 	.word	0x0800306d
 8003000:	0800306d 	.word	0x0800306d
 8003004:	08003061 	.word	0x08003061
 8003008:	0800306d 	.word	0x0800306d
 800300c:	0800306d 	.word	0x0800306d
 8003010:	0800306d 	.word	0x0800306d
 8003014:	0800306d 	.word	0x0800306d
 8003018:	0800306d 	.word	0x0800306d
 800301c:	0800306d 	.word	0x0800306d
 8003020:	0800306d 	.word	0x0800306d
 8003024:	08003055 	.word	0x08003055
 8003028:	0800306d 	.word	0x0800306d
 800302c:	0800306d 	.word	0x0800306d
 8003030:	0800306d 	.word	0x0800306d
 8003034:	0800306d 	.word	0x0800306d
 8003038:	0800306d 	.word	0x0800306d
 800303c:	0800306d 	.word	0x0800306d
 8003040:	0800306d 	.word	0x0800306d
 8003044:	08003049 	.word	0x08003049
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b06      	cmp	r3, #6
 800304c:	d913      	bls.n	8003076 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003052:	e010      	b.n	8003076 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b07      	cmp	r3, #7
 8003058:	d90f      	bls.n	800307a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800305e:	e00c      	b.n	800307a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b0f      	cmp	r3, #15
 8003064:	d90b      	bls.n	800307e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800306a:	e008      	b.n	800307e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	75fb      	strb	r3, [r7, #23]
        break;
 8003070:	e006      	b.n	8003080 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003072:	bf00      	nop
 8003074:	e004      	b.n	8003080 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003076:	bf00      	nop
 8003078:	e002      	b.n	8003080 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800307e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10d      	bne.n	80030a2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 0118 	bic.w	r1, r3, #24
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	430a      	orrs	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	@ 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80030c4:	2308      	movs	r3, #8
 80030c6:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030c8:	4b40      	ldr	r3, [pc, #256]	@ (80031cc <HAL_FLASH_Program+0x11c>)
 80030ca:	7d1b      	ldrb	r3, [r3, #20]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_FLASH_Program+0x24>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e076      	b.n	80031c2 <HAL_FLASH_Program+0x112>
 80030d4:	4b3d      	ldr	r3, [pc, #244]	@ (80031cc <HAL_FLASH_Program+0x11c>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030e0:	d306      	bcc.n	80030f0 <HAL_FLASH_Program+0x40>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80030e8:	d202      	bcs.n	80030f0 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80030ea:	2301      	movs	r3, #1
 80030ec:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 80030ee:	e00c      	b.n	800310a <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80030f6:	d306      	bcc.n	8003106 <HAL_FLASH_Program+0x56>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 80030fe:	d202      	bcs.n	8003106 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8003100:	2302      	movs	r3, #2
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	e001      	b.n	800310a <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e05b      	b.n	80031c2 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800310a:	4b30      	ldr	r3, [pc, #192]	@ (80031cc <HAL_FLASH_Program+0x11c>)
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8003110:	69b9      	ldr	r1, [r7, #24]
 8003112:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003116:	f000 f85d 	bl	80031d4 <FLASH_WaitForLastOperation>
 800311a:	4603      	mov	r3, r0
 800311c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8003120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003124:	2b00      	cmp	r3, #0
 8003126:	d147      	bne.n	80031b8 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d106      	bne.n	800313c <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800312e:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <HAL_FLASH_Program+0x120>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	4a27      	ldr	r2, [pc, #156]	@ (80031d0 <HAL_FLASH_Program+0x120>)
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	60d3      	str	r3, [r2, #12]
 800313a:	e007      	b.n	800314c <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800313c:	4b24      	ldr	r3, [pc, #144]	@ (80031d0 <HAL_FLASH_Program+0x120>)
 800313e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003142:	4a23      	ldr	r2, [pc, #140]	@ (80031d0 <HAL_FLASH_Program+0x120>)
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800314c:	f3bf 8f6f 	isb	sy
}
 8003150:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8003152:	f3bf 8f4f 	dsb	sy
}
 8003156:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	3304      	adds	r3, #4
 8003164:	623b      	str	r3, [r7, #32]
        src_addr++;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3304      	adds	r3, #4
 800316a:	61fb      	str	r3, [r7, #28]
        row_index--;
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	3b01      	subs	r3, #1
 8003170:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8003172:	7dfb      	ldrb	r3, [r7, #23]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1ef      	bne.n	8003158 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8003178:	f3bf 8f6f 	isb	sy
}
 800317c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800317e:	f3bf 8f4f 	dsb	sy
}
 8003182:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8003184:	69b9      	ldr	r1, [r7, #24]
 8003186:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800318a:	f000 f823 	bl	80031d4 <FLASH_WaitForLastOperation>
 800318e:	4603      	mov	r3, r0
 8003190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d106      	bne.n	80031a8 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800319a:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <HAL_FLASH_Program+0x120>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	4a0c      	ldr	r2, [pc, #48]	@ (80031d0 <HAL_FLASH_Program+0x120>)
 80031a0:	f023 0302 	bic.w	r3, r3, #2
 80031a4:	60d3      	str	r3, [r2, #12]
 80031a6:	e007      	b.n	80031b8 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 80031a8:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <HAL_FLASH_Program+0x120>)
 80031aa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80031ae:	4a08      	ldr	r2, [pc, #32]	@ (80031d0 <HAL_FLASH_Program+0x120>)
 80031b0:	f023 0302 	bic.w	r3, r3, #2
 80031b4:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <HAL_FLASH_Program+0x11c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	751a      	strb	r2, [r3, #20]

  return status;
 80031be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3728      	adds	r7, #40	@ 0x28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	2400017c 	.word	0x2400017c
 80031d0:	52002000 	.word	0x52002000

080031d4 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80031de:	2304      	movs	r3, #4
 80031e0:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 80031e6:	f7ff fd75 	bl	8002cd4 <HAL_GetTick>
 80031ea:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d113      	bne.n	800321a <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 80031f2:	4b41      	ldr	r3, [pc, #260]	@ (80032f8 <FLASH_WaitForLastOperation+0x124>)
 80031f4:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80031f6:	e010      	b.n	800321a <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d00c      	beq.n	800321a <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003200:	f7ff fd68 	bl	8002cd4 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d302      	bcc.n	8003216 <FLASH_WaitForLastOperation+0x42>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e06a      	b.n	80032f0 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4b37      	ldr	r3, [pc, #220]	@ (80032fc <FLASH_WaitForLastOperation+0x128>)
 800321e:	4013      	ands	r3, r2
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	429a      	cmp	r2, r3
 8003224:	d10a      	bne.n	800323c <FLASH_WaitForLastOperation+0x68>
 8003226:	4b36      	ldr	r3, [pc, #216]	@ (8003300 <FLASH_WaitForLastOperation+0x12c>)
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4013      	ands	r3, r2
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	429a      	cmp	r2, r3
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e00c      	b.n	8003256 <FLASH_WaitForLastOperation+0x82>
 800323c:	4b30      	ldr	r3, [pc, #192]	@ (8003300 <FLASH_WaitForLastOperation+0x12c>)
 800323e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003242:	43da      	mvns	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	4013      	ands	r3, r2
 8003248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf0c      	ite	eq
 8003250:	2301      	moveq	r3, #1
 8003252:	2300      	movne	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ce      	bne.n	80031f8 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8003260:	4b27      	ldr	r3, [pc, #156]	@ (8003300 <FLASH_WaitForLastOperation+0x12c>)
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	4b27      	ldr	r3, [pc, #156]	@ (8003304 <FLASH_WaitForLastOperation+0x130>)
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	e007      	b.n	800327c <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800326c:	4b24      	ldr	r3, [pc, #144]	@ (8003300 <FLASH_WaitForLastOperation+0x12c>)
 800326e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003272:	4b24      	ldr	r3, [pc, #144]	@ (8003304 <FLASH_WaitForLastOperation+0x130>)
 8003274:	4013      	ands	r3, r2
 8003276:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800327a:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d017      	beq.n	80032b6 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8003286:	4b20      	ldr	r3, [pc, #128]	@ (8003308 <FLASH_WaitForLastOperation+0x134>)
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	4a1e      	ldr	r2, [pc, #120]	@ (8003308 <FLASH_WaitForLastOperation+0x134>)
 8003290:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <FLASH_WaitForLastOperation+0x128>)
 8003296:	4013      	ands	r3, r2
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	429a      	cmp	r2, r3
 800329c:	d103      	bne.n	80032a6 <FLASH_WaitForLastOperation+0xd2>
 800329e:	4a18      	ldr	r2, [pc, #96]	@ (8003300 <FLASH_WaitForLastOperation+0x12c>)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	6153      	str	r3, [r2, #20]
 80032a4:	e005      	b.n	80032b2 <FLASH_WaitForLastOperation+0xde>
 80032a6:	4a16      	ldr	r2, [pc, #88]	@ (8003300 <FLASH_WaitForLastOperation+0x12c>)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032ae:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e01c      	b.n	80032f0 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d10b      	bne.n	80032d4 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80032bc:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <FLASH_WaitForLastOperation+0x12c>)
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c8:	d111      	bne.n	80032ee <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80032ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <FLASH_WaitForLastOperation+0x12c>)
 80032cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032d0:	615a      	str	r2, [r3, #20]
 80032d2:	e00c      	b.n	80032ee <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 80032d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <FLASH_WaitForLastOperation+0x12c>)
 80032d6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80032da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e2:	d104      	bne.n	80032ee <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <FLASH_WaitForLastOperation+0x12c>)
 80032e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032ea:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	80000004 	.word	0x80000004
 80032fc:	1fef000f 	.word	0x1fef000f
 8003300:	52002000 	.word	0x52002000
 8003304:	17ee0000 	.word	0x17ee0000
 8003308:	2400017c 	.word	0x2400017c

0800330c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800331a:	4b5e      	ldr	r3, [pc, #376]	@ (8003494 <HAL_FLASHEx_Erase+0x188>)
 800331c:	7d1b      	ldrb	r3, [r3, #20]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_FLASHEx_Erase+0x1a>
 8003322:	2302      	movs	r3, #2
 8003324:	e0b2      	b.n	800348c <HAL_FLASHEx_Erase+0x180>
 8003326:	4b5b      	ldr	r3, [pc, #364]	@ (8003494 <HAL_FLASHEx_Erase+0x188>)
 8003328:	2201      	movs	r2, #1
 800332a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800332c:	4b59      	ldr	r3, [pc, #356]	@ (8003494 <HAL_FLASHEx_Erase+0x188>)
 800332e:	2200      	movs	r2, #0
 8003330:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800333e:	2101      	movs	r1, #1
 8003340:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003344:	f7ff ff46 	bl	80031d4 <FLASH_WaitForLastOperation>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800335e:	2102      	movs	r1, #2
 8003360:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003364:	f7ff ff36 	bl	80031d4 <FLASH_WaitForLastOperation>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f040 8085 	bne.w	8003484 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d136      	bne.n	80033f0 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4619      	mov	r1, r3
 800338c:	4610      	mov	r0, r2
 800338e:	f000 f887 	bl	80034a0 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00f      	beq.n	80033be <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800339e:	2101      	movs	r1, #1
 80033a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80033a4:	f7ff ff16 	bl	80031d4 <FLASH_WaitForLastOperation>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80033b2:	4b39      	ldr	r3, [pc, #228]	@ (8003498 <HAL_FLASHEx_Erase+0x18c>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	4a38      	ldr	r2, [pc, #224]	@ (8003498 <HAL_FLASHEx_Erase+0x18c>)
 80033b8:	f023 0308 	bic.w	r3, r3, #8
 80033bc:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d05c      	beq.n	8003484 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 80033ca:	2102      	movs	r1, #2
 80033cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80033d0:	f7ff ff00 	bl	80031d4 <FLASH_WaitForLastOperation>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 80033de:	4b2e      	ldr	r3, [pc, #184]	@ (8003498 <HAL_FLASHEx_Erase+0x18c>)
 80033e0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80033e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003498 <HAL_FLASHEx_Erase+0x18c>)
 80033e6:	f023 0308 	bic.w	r3, r3, #8
 80033ea:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
 80033ee:	e049      	b.n	8003484 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f04f 32ff 	mov.w	r2, #4294967295
 80033f6:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	e039      	b.n	8003474 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	461a      	mov	r2, r3
 800340a:	68b8      	ldr	r0, [r7, #8]
 800340c:	f000 f8b2 	bl	8003574 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00c      	beq.n	8003436 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800341c:	2101      	movs	r1, #1
 800341e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003422:	f7ff fed7 	bl	80031d4 <FLASH_WaitForLastOperation>
 8003426:	4603      	mov	r3, r0
 8003428:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800342a:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <HAL_FLASHEx_Erase+0x18c>)
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	491a      	ldr	r1, [pc, #104]	@ (8003498 <HAL_FLASHEx_Erase+0x18c>)
 8003430:	4b1a      	ldr	r3, [pc, #104]	@ (800349c <HAL_FLASHEx_Erase+0x190>)
 8003432:	4013      	ands	r3, r2
 8003434:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00e      	beq.n	8003460 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8003442:	2102      	movs	r1, #2
 8003444:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003448:	f7ff fec4 	bl	80031d4 <FLASH_WaitForLastOperation>
 800344c:	4603      	mov	r3, r0
 800344e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8003450:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <HAL_FLASHEx_Erase+0x18c>)
 8003452:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8003456:	4910      	ldr	r1, [pc, #64]	@ (8003498 <HAL_FLASHEx_Erase+0x18c>)
 8003458:	4b10      	ldr	r3, [pc, #64]	@ (800349c <HAL_FLASHEx_Erase+0x190>)
 800345a:	4013      	ands	r3, r2
 800345c:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	601a      	str	r2, [r3, #0]
          break;
 800346c:	e00a      	b.n	8003484 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	3301      	adds	r3, #1
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4413      	add	r3, r2
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d3bd      	bcc.n	8003400 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003484:	4b03      	ldr	r3, [pc, #12]	@ (8003494 <HAL_FLASHEx_Erase+0x188>)
 8003486:	2200      	movs	r2, #0
 8003488:	751a      	strb	r2, [r3, #20]

  return status;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	2400017c 	.word	0x2400017c
 8003498:	52002000 	.word	0x52002000
 800349c:	fffff8fb 	.word	0xfffff8fb

080034a0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d122      	bne.n	80034fa <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80034b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003570 <FLASH_MassErase+0xd0>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003570 <FLASH_MassErase+0xd0>)
 80034ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80034be:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 80034c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003570 <FLASH_MassErase+0xd0>)
 80034c2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80034c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003570 <FLASH_MassErase+0xd0>)
 80034c8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80034cc:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 80034d0:	4b27      	ldr	r3, [pc, #156]	@ (8003570 <FLASH_MassErase+0xd0>)
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	4926      	ldr	r1, [pc, #152]	@ (8003570 <FLASH_MassErase+0xd0>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 80034dc:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <FLASH_MassErase+0xd0>)
 80034de:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 80034e2:	4923      	ldr	r1, [pc, #140]	@ (8003570 <FLASH_MassErase+0xd0>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 80034ec:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <FLASH_MassErase+0xd0>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003570 <FLASH_MassErase+0xd0>)
 80034f2:	f043 0310 	orr.w	r3, r3, #16
 80034f6:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 80034f8:	e033      	b.n	8003562 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d011      	beq.n	8003528 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <FLASH_MassErase+0xd0>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a19      	ldr	r2, [pc, #100]	@ (8003570 <FLASH_MassErase+0xd0>)
 800350a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800350e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8003510:	4b17      	ldr	r3, [pc, #92]	@ (8003570 <FLASH_MassErase+0xd0>)
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	4916      	ldr	r1, [pc, #88]	@ (8003570 <FLASH_MassErase+0xd0>)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4313      	orrs	r3, r2
 800351a:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800351c:	4b14      	ldr	r3, [pc, #80]	@ (8003570 <FLASH_MassErase+0xd0>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a13      	ldr	r2, [pc, #76]	@ (8003570 <FLASH_MassErase+0xd0>)
 8003522:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8003526:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d017      	beq.n	8003562 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8003532:	4b0f      	ldr	r3, [pc, #60]	@ (8003570 <FLASH_MassErase+0xd0>)
 8003534:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003538:	4a0d      	ldr	r2, [pc, #52]	@ (8003570 <FLASH_MassErase+0xd0>)
 800353a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800353e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
      FLASH->CR2 |= VoltageRange;
 8003542:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <FLASH_MassErase+0xd0>)
 8003544:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8003548:	4909      	ldr	r1, [pc, #36]	@ (8003570 <FLASH_MassErase+0xd0>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 310c 	str.w	r3, [r1, #268]	@ 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8003552:	4b07      	ldr	r3, [pc, #28]	@ (8003570 <FLASH_MassErase+0xd0>)
 8003554:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003558:	4a05      	ldr	r2, [pc, #20]	@ (8003570 <FLASH_MassErase+0xd0>)
 800355a:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800355e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	52002000 	.word	0x52002000

08003574 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d010      	beq.n	80035ac <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800358a:	4b18      	ldr	r3, [pc, #96]	@ (80035ec <FLASH_Erase_Sector+0x78>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	4a17      	ldr	r2, [pc, #92]	@ (80035ec <FLASH_Erase_Sector+0x78>)
 8003590:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8003594:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8003596:	4b15      	ldr	r3, [pc, #84]	@ (80035ec <FLASH_Erase_Sector+0x78>)
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	0219      	lsls	r1, r3, #8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	430b      	orrs	r3, r1
 80035a2:	4313      	orrs	r3, r2
 80035a4:	4a11      	ldr	r2, [pc, #68]	@ (80035ec <FLASH_Erase_Sector+0x78>)
 80035a6:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80035aa:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d014      	beq.n	80035e0 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80035b6:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <FLASH_Erase_Sector+0x78>)
 80035b8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80035bc:	4a0b      	ldr	r2, [pc, #44]	@ (80035ec <FLASH_Erase_Sector+0x78>)
 80035be:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 80035c2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80035c6:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <FLASH_Erase_Sector+0x78>)
 80035c8:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	0219      	lsls	r1, r3, #8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	430b      	orrs	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	4a05      	ldr	r2, [pc, #20]	@ (80035ec <FLASH_Erase_Sector+0x78>)
 80035d8:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80035dc:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	52002000 	.word	0x52002000

080035f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b089      	sub	sp, #36	@ 0x24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035fe:	4b89      	ldr	r3, [pc, #548]	@ (8003824 <HAL_GPIO_Init+0x234>)
 8003600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003602:	e194      	b.n	800392e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2101      	movs	r1, #1
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8186 	beq.w	8003928 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d005      	beq.n	8003634 <HAL_GPIO_Init+0x44>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d130      	bne.n	8003696 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800366a:	2201      	movs	r2, #1
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0201 	and.w	r2, r3, #1
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d017      	beq.n	80036d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2203      	movs	r2, #3
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d123      	bne.n	8003726 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	08da      	lsrs	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3208      	adds	r2, #8
 80036e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	220f      	movs	r2, #15
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	08da      	lsrs	r2, r3, #3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3208      	adds	r2, #8
 8003720:	69b9      	ldr	r1, [r7, #24]
 8003722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0203 	and.w	r2, r3, #3
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80e0 	beq.w	8003928 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003768:	4b2f      	ldr	r3, [pc, #188]	@ (8003828 <HAL_GPIO_Init+0x238>)
 800376a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800376e:	4a2e      	ldr	r2, [pc, #184]	@ (8003828 <HAL_GPIO_Init+0x238>)
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003778:	4b2b      	ldr	r3, [pc, #172]	@ (8003828 <HAL_GPIO_Init+0x238>)
 800377a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003786:	4a29      	ldr	r2, [pc, #164]	@ (800382c <HAL_GPIO_Init+0x23c>)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	089b      	lsrs	r3, r3, #2
 800378c:	3302      	adds	r3, #2
 800378e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	220f      	movs	r2, #15
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a20      	ldr	r2, [pc, #128]	@ (8003830 <HAL_GPIO_Init+0x240>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d052      	beq.n	8003858 <HAL_GPIO_Init+0x268>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003834 <HAL_GPIO_Init+0x244>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_GPIO_Init+0x22e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003838 <HAL_GPIO_Init+0x248>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02b      	beq.n	800381a <HAL_GPIO_Init+0x22a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1d      	ldr	r2, [pc, #116]	@ (800383c <HAL_GPIO_Init+0x24c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d025      	beq.n	8003816 <HAL_GPIO_Init+0x226>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003840 <HAL_GPIO_Init+0x250>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01f      	beq.n	8003812 <HAL_GPIO_Init+0x222>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003844 <HAL_GPIO_Init+0x254>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d019      	beq.n	800380e <HAL_GPIO_Init+0x21e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003848 <HAL_GPIO_Init+0x258>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_GPIO_Init+0x21a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a19      	ldr	r2, [pc, #100]	@ (800384c <HAL_GPIO_Init+0x25c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00d      	beq.n	8003806 <HAL_GPIO_Init+0x216>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a18      	ldr	r2, [pc, #96]	@ (8003850 <HAL_GPIO_Init+0x260>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <HAL_GPIO_Init+0x212>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a17      	ldr	r2, [pc, #92]	@ (8003854 <HAL_GPIO_Init+0x264>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_GPIO_Init+0x20e>
 80037fa:	2309      	movs	r3, #9
 80037fc:	e02d      	b.n	800385a <HAL_GPIO_Init+0x26a>
 80037fe:	230a      	movs	r3, #10
 8003800:	e02b      	b.n	800385a <HAL_GPIO_Init+0x26a>
 8003802:	2308      	movs	r3, #8
 8003804:	e029      	b.n	800385a <HAL_GPIO_Init+0x26a>
 8003806:	2307      	movs	r3, #7
 8003808:	e027      	b.n	800385a <HAL_GPIO_Init+0x26a>
 800380a:	2306      	movs	r3, #6
 800380c:	e025      	b.n	800385a <HAL_GPIO_Init+0x26a>
 800380e:	2305      	movs	r3, #5
 8003810:	e023      	b.n	800385a <HAL_GPIO_Init+0x26a>
 8003812:	2304      	movs	r3, #4
 8003814:	e021      	b.n	800385a <HAL_GPIO_Init+0x26a>
 8003816:	2303      	movs	r3, #3
 8003818:	e01f      	b.n	800385a <HAL_GPIO_Init+0x26a>
 800381a:	2302      	movs	r3, #2
 800381c:	e01d      	b.n	800385a <HAL_GPIO_Init+0x26a>
 800381e:	2301      	movs	r3, #1
 8003820:	e01b      	b.n	800385a <HAL_GPIO_Init+0x26a>
 8003822:	bf00      	nop
 8003824:	58000080 	.word	0x58000080
 8003828:	58024400 	.word	0x58024400
 800382c:	58000400 	.word	0x58000400
 8003830:	58020000 	.word	0x58020000
 8003834:	58020400 	.word	0x58020400
 8003838:	58020800 	.word	0x58020800
 800383c:	58020c00 	.word	0x58020c00
 8003840:	58021000 	.word	0x58021000
 8003844:	58021400 	.word	0x58021400
 8003848:	58021800 	.word	0x58021800
 800384c:	58021c00 	.word	0x58021c00
 8003850:	58022000 	.word	0x58022000
 8003854:	58022400 	.word	0x58022400
 8003858:	2300      	movs	r3, #0
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	f002 0203 	and.w	r2, r2, #3
 8003860:	0092      	lsls	r2, r2, #2
 8003862:	4093      	lsls	r3, r2
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800386a:	4938      	ldr	r1, [pc, #224]	@ (800394c <HAL_GPIO_Init+0x35c>)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	3302      	adds	r3, #2
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800389e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	3301      	adds	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	f47f ae63 	bne.w	8003604 <HAL_GPIO_Init+0x14>
  }
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	3724      	adds	r7, #36	@ 0x24
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	58000400 	.word	0x58000400

08003950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	807b      	strh	r3, [r7, #2]
 800395c:	4613      	mov	r3, r2
 800395e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003960:	787b      	ldrb	r3, [r7, #1]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800396c:	e003      	b.n	8003976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	041a      	lsls	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	619a      	str	r2, [r3, #24]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800398c:	4b29      	ldr	r3, [pc, #164]	@ (8003a34 <HAL_PWREx_ConfigSupply+0xb0>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	2b06      	cmp	r3, #6
 8003996:	d00a      	beq.n	80039ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003998:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <HAL_PWREx_ConfigSupply+0xb0>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e040      	b.n	8003a2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e03e      	b.n	8003a2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039ae:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80039b6:	491f      	ldr	r1, [pc, #124]	@ (8003a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039be:	f7ff f989 	bl	8002cd4 <HAL_GetTick>
 80039c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039c4:	e009      	b.n	80039da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039c6:	f7ff f985 	bl	8002cd4 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039d4:	d901      	bls.n	80039da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e028      	b.n	8003a2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039da:	4b16      	ldr	r3, [pc, #88]	@ (8003a34 <HAL_PWREx_ConfigSupply+0xb0>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039e6:	d1ee      	bne.n	80039c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b1e      	cmp	r3, #30
 80039ec:	d008      	beq.n	8003a00 <HAL_PWREx_ConfigSupply+0x7c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80039f2:	d005      	beq.n	8003a00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b1d      	cmp	r3, #29
 80039f8:	d002      	beq.n	8003a00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80039fe:	d114      	bne.n	8003a2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a00:	f7ff f968 	bl	8002cd4 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a06:	e009      	b.n	8003a1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a08:	f7ff f964 	bl	8002cd4 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a16:	d901      	bls.n	8003a1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e007      	b.n	8003a2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a28:	d1ee      	bne.n	8003a08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	58024800 	.word	0x58024800

08003a38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08c      	sub	sp, #48	@ 0x30
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	f000 bc48 	b.w	80042dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8088 	beq.w	8003b6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5a:	4b99      	ldr	r3, [pc, #612]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a64:	4b96      	ldr	r3, [pc, #600]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d007      	beq.n	8003a80 <HAL_RCC_OscConfig+0x48>
 8003a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a72:	2b18      	cmp	r3, #24
 8003a74:	d111      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62>
 8003a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d10c      	bne.n	8003a9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d06d      	beq.n	8003b68 <HAL_RCC_OscConfig+0x130>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d169      	bne.n	8003b68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f000 bc21 	b.w	80042dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x7a>
 8003aa4:	4b86      	ldr	r3, [pc, #536]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a85      	ldr	r2, [pc, #532]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	e02e      	b.n	8003b10 <HAL_RCC_OscConfig+0xd8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x9c>
 8003aba:	4b81      	ldr	r3, [pc, #516]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a80      	ldr	r2, [pc, #512]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b7e      	ldr	r3, [pc, #504]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a7d      	ldr	r2, [pc, #500]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003acc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e01d      	b.n	8003b10 <HAL_RCC_OscConfig+0xd8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCC_OscConfig+0xc0>
 8003ade:	4b78      	ldr	r3, [pc, #480]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a77      	ldr	r2, [pc, #476]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	4b75      	ldr	r3, [pc, #468]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a74      	ldr	r2, [pc, #464]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e00b      	b.n	8003b10 <HAL_RCC_OscConfig+0xd8>
 8003af8:	4b71      	ldr	r3, [pc, #452]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a70      	ldr	r2, [pc, #448]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	4b6e      	ldr	r3, [pc, #440]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a6d      	ldr	r2, [pc, #436]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d013      	beq.n	8003b40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7ff f8dc 	bl	8002cd4 <HAL_GetTick>
 8003b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b20:	f7ff f8d8 	bl	8002cd4 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b64      	cmp	r3, #100	@ 0x64
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e3d4      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b32:	4b63      	ldr	r3, [pc, #396]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0xe8>
 8003b3e:	e014      	b.n	8003b6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7ff f8c8 	bl	8002cd4 <HAL_GetTick>
 8003b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b48:	f7ff f8c4 	bl	8002cd4 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	@ 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e3c0      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b5a:	4b59      	ldr	r3, [pc, #356]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x110>
 8003b66:	e000      	b.n	8003b6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 80ca 	beq.w	8003d0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b78:	4b51      	ldr	r3, [pc, #324]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b82:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <HAL_RCC_OscConfig+0x166>
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	2b18      	cmp	r3, #24
 8003b92:	d156      	bne.n	8003c42 <HAL_RCC_OscConfig+0x20a>
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d151      	bne.n	8003c42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b9e:	4b48      	ldr	r3, [pc, #288]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x17e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e392      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bb6:	4b42      	ldr	r3, [pc, #264]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 0219 	bic.w	r2, r3, #25
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	493f      	ldr	r1, [pc, #252]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7ff f884 	bl	8002cd4 <HAL_GetTick>
 8003bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7ff f880 	bl	8002cd4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e37c      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003be2:	4b37      	ldr	r3, [pc, #220]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	f7ff f87d 	bl	8002cec <HAL_GetREVID>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d817      	bhi.n	8003c2c <HAL_RCC_OscConfig+0x1f4>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b40      	cmp	r3, #64	@ 0x40
 8003c02:	d108      	bne.n	8003c16 <HAL_RCC_OscConfig+0x1de>
 8003c04:	4b2e      	ldr	r3, [pc, #184]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c14:	e07a      	b.n	8003d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	031b      	lsls	r3, r3, #12
 8003c24:	4926      	ldr	r1, [pc, #152]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2a:	e06f      	b.n	8003d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2c:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	4921      	ldr	r1, [pc, #132]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c40:	e064      	b.n	8003d0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d047      	beq.n	8003cda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 0219 	bic.w	r2, r3, #25
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	491a      	ldr	r1, [pc, #104]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7ff f83a 	bl	8002cd4 <HAL_GetTick>
 8003c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c64:	f7ff f836 	bl	8002cd4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e332      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c76:	4b12      	ldr	r3, [pc, #72]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	f7ff f833 	bl	8002cec <HAL_GetREVID>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d819      	bhi.n	8003cc4 <HAL_RCC_OscConfig+0x28c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b40      	cmp	r3, #64	@ 0x40
 8003c96:	d108      	bne.n	8003caa <HAL_RCC_OscConfig+0x272>
 8003c98:	4b09      	ldr	r3, [pc, #36]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003ca0:	4a07      	ldr	r2, [pc, #28]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca6:	6053      	str	r3, [r2, #4]
 8003ca8:	e030      	b.n	8003d0c <HAL_RCC_OscConfig+0x2d4>
 8003caa:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	031b      	lsls	r3, r3, #12
 8003cb8:	4901      	ldr	r1, [pc, #4]	@ (8003cc0 <HAL_RCC_OscConfig+0x288>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
 8003cbe:	e025      	b.n	8003d0c <HAL_RCC_OscConfig+0x2d4>
 8003cc0:	58024400 	.word	0x58024400
 8003cc4:	4b9a      	ldr	r3, [pc, #616]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	061b      	lsls	r3, r3, #24
 8003cd2:	4997      	ldr	r1, [pc, #604]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]
 8003cd8:	e018      	b.n	8003d0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cda:	4b95      	ldr	r3, [pc, #596]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a94      	ldr	r2, [pc, #592]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fe fff5 	bl	8002cd4 <HAL_GetTick>
 8003cea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cee:	f7fe fff1 	bl	8002cd4 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e2ed      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d00:	4b8b      	ldr	r3, [pc, #556]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f0      	bne.n	8003cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80a9 	beq.w	8003e6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d1a:	4b85      	ldr	r3, [pc, #532]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d24:	4b82      	ldr	r3, [pc, #520]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d007      	beq.n	8003d40 <HAL_RCC_OscConfig+0x308>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b18      	cmp	r3, #24
 8003d34:	d13a      	bne.n	8003dac <HAL_RCC_OscConfig+0x374>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d135      	bne.n	8003dac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d40:	4b7b      	ldr	r3, [pc, #492]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_OscConfig+0x320>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	2b80      	cmp	r3, #128	@ 0x80
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e2c1      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d58:	f7fe ffc8 	bl	8002cec <HAL_GetREVID>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d817      	bhi.n	8003d96 <HAL_RCC_OscConfig+0x35e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d108      	bne.n	8003d80 <HAL_RCC_OscConfig+0x348>
 8003d6e:	4b70      	ldr	r3, [pc, #448]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003d76:	4a6e      	ldr	r2, [pc, #440]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003d78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d7c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d7e:	e075      	b.n	8003e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d80:	4b6b      	ldr	r3, [pc, #428]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	069b      	lsls	r3, r3, #26
 8003d8e:	4968      	ldr	r1, [pc, #416]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d94:	e06a      	b.n	8003e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d96:	4b66      	ldr	r3, [pc, #408]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	061b      	lsls	r3, r3, #24
 8003da4:	4962      	ldr	r1, [pc, #392]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003daa:	e05f      	b.n	8003e6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d042      	beq.n	8003e3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003db4:	4b5e      	ldr	r3, [pc, #376]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a5d      	ldr	r2, [pc, #372]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe ff88 	bl	8002cd4 <HAL_GetTick>
 8003dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dc8:	f7fe ff84 	bl	8002cd4 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e280      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dda:	4b55      	ldr	r3, [pc, #340]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003de6:	f7fe ff81 	bl	8002cec <HAL_GetREVID>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d817      	bhi.n	8003e24 <HAL_RCC_OscConfig+0x3ec>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d108      	bne.n	8003e0e <HAL_RCC_OscConfig+0x3d6>
 8003dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e04:	4a4a      	ldr	r2, [pc, #296]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003e06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e0a:	6053      	str	r3, [r2, #4]
 8003e0c:	e02e      	b.n	8003e6c <HAL_RCC_OscConfig+0x434>
 8003e0e:	4b48      	ldr	r3, [pc, #288]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	069b      	lsls	r3, r3, #26
 8003e1c:	4944      	ldr	r1, [pc, #272]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
 8003e22:	e023      	b.n	8003e6c <HAL_RCC_OscConfig+0x434>
 8003e24:	4b42      	ldr	r3, [pc, #264]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	061b      	lsls	r3, r3, #24
 8003e32:	493f      	ldr	r1, [pc, #252]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60cb      	str	r3, [r1, #12]
 8003e38:	e018      	b.n	8003e6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003e40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fe ff45 	bl	8002cd4 <HAL_GetTick>
 8003e4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e4e:	f7fe ff41 	bl	8002cd4 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e23d      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e60:	4b33      	ldr	r3, [pc, #204]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d036      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d019      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e80:	4b2b      	ldr	r3, [pc, #172]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e84:	4a2a      	ldr	r2, [pc, #168]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fe ff22 	bl	8002cd4 <HAL_GetTick>
 8003e90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e94:	f7fe ff1e 	bl	8002cd4 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e21a      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ea6:	4b22      	ldr	r3, [pc, #136]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x45c>
 8003eb2:	e018      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fe ff08 	bl	8002cd4 <HAL_GetTick>
 8003ec4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec8:	f7fe ff04 	bl	8002cd4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e200      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003eda:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d039      	beq.n	8003f66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01c      	beq.n	8003f34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003efa:	4b0d      	ldr	r3, [pc, #52]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a0c      	ldr	r2, [pc, #48]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003f00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f06:	f7fe fee5 	bl	8002cd4 <HAL_GetTick>
 8003f0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f0e:	f7fe fee1 	bl	8002cd4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e1dd      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f20:	4b03      	ldr	r3, [pc, #12]	@ (8003f30 <HAL_RCC_OscConfig+0x4f8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x4d6>
 8003f2c:	e01b      	b.n	8003f66 <HAL_RCC_OscConfig+0x52e>
 8003f2e:	bf00      	nop
 8003f30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f34:	4b9b      	ldr	r3, [pc, #620]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a9a      	ldr	r2, [pc, #616]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003f3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f40:	f7fe fec8 	bl	8002cd4 <HAL_GetTick>
 8003f44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f48:	f7fe fec4 	bl	8002cd4 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e1c0      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f5a:	4b92      	ldr	r3, [pc, #584]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8081 	beq.w	8004076 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f74:	4b8c      	ldr	r3, [pc, #560]	@ (80041a8 <HAL_RCC_OscConfig+0x770>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a8b      	ldr	r2, [pc, #556]	@ (80041a8 <HAL_RCC_OscConfig+0x770>)
 8003f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f80:	f7fe fea8 	bl	8002cd4 <HAL_GetTick>
 8003f84:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f88:	f7fe fea4 	bl	8002cd4 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	@ 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e1a0      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9a:	4b83      	ldr	r3, [pc, #524]	@ (80041a8 <HAL_RCC_OscConfig+0x770>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d106      	bne.n	8003fbc <HAL_RCC_OscConfig+0x584>
 8003fae:	4b7d      	ldr	r3, [pc, #500]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb2:	4a7c      	ldr	r2, [pc, #496]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fba:	e02d      	b.n	8004018 <HAL_RCC_OscConfig+0x5e0>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10c      	bne.n	8003fde <HAL_RCC_OscConfig+0x5a6>
 8003fc4:	4b77      	ldr	r3, [pc, #476]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc8:	4a76      	ldr	r2, [pc, #472]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd0:	4b74      	ldr	r3, [pc, #464]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	4a73      	ldr	r2, [pc, #460]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003fd6:	f023 0304 	bic.w	r3, r3, #4
 8003fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fdc:	e01c      	b.n	8004018 <HAL_RCC_OscConfig+0x5e0>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x5c8>
 8003fe6:	4b6f      	ldr	r3, [pc, #444]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fea:	4a6e      	ldr	r2, [pc, #440]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003fec:	f043 0304 	orr.w	r3, r3, #4
 8003ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a6b      	ldr	r2, [pc, #428]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0x5e0>
 8004000:	4b68      	ldr	r3, [pc, #416]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	4a67      	ldr	r2, [pc, #412]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	6713      	str	r3, [r2, #112]	@ 0x70
 800400c:	4b65      	ldr	r3, [pc, #404]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004010:	4a64      	ldr	r2, [pc, #400]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004012:	f023 0304 	bic.w	r3, r3, #4
 8004016:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004020:	f7fe fe58 	bl	8002cd4 <HAL_GetTick>
 8004024:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004026:	e00a      	b.n	800403e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004028:	f7fe fe54 	bl	8002cd4 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e14e      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800403e:	4b59      	ldr	r3, [pc, #356]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ee      	beq.n	8004028 <HAL_RCC_OscConfig+0x5f0>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404c:	f7fe fe42 	bl	8002cd4 <HAL_GetTick>
 8004050:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004052:	e00a      	b.n	800406a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004054:	f7fe fe3e 	bl	8002cd4 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e138      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800406a:	4b4e      	ldr	r3, [pc, #312]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1ee      	bne.n	8004054 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 812d 	beq.w	80042da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004080:	4b48      	ldr	r3, [pc, #288]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004088:	2b18      	cmp	r3, #24
 800408a:	f000 80bd 	beq.w	8004208 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	2b02      	cmp	r3, #2
 8004094:	f040 809e 	bne.w	80041d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004098:	4b42      	ldr	r3, [pc, #264]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a41      	ldr	r2, [pc, #260]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 800409e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fe fe16 	bl	8002cd4 <HAL_GetTick>
 80040a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fe fe12 	bl	8002cd4 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e10e      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040be:	4b39      	ldr	r3, [pc, #228]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040ca:	4b36      	ldr	r3, [pc, #216]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 80040cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040ce:	4b37      	ldr	r3, [pc, #220]	@ (80041ac <HAL_RCC_OscConfig+0x774>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040da:	0112      	lsls	r2, r2, #4
 80040dc:	430a      	orrs	r2, r1
 80040de:	4931      	ldr	r1, [pc, #196]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e8:	3b01      	subs	r3, #1
 80040ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f2:	3b01      	subs	r3, #1
 80040f4:	025b      	lsls	r3, r3, #9
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	3b01      	subs	r3, #1
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410c:	3b01      	subs	r3, #1
 800410e:	061b      	lsls	r3, r3, #24
 8004110:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004114:	4923      	ldr	r1, [pc, #140]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800411a:	4b22      	ldr	r3, [pc, #136]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	4a21      	ldr	r2, [pc, #132]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004126:	4b1f      	ldr	r3, [pc, #124]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800412a:	4b21      	ldr	r3, [pc, #132]	@ (80041b0 <HAL_RCC_OscConfig+0x778>)
 800412c:	4013      	ands	r3, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004132:	00d2      	lsls	r2, r2, #3
 8004134:	491b      	ldr	r1, [pc, #108]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800413a:	4b1a      	ldr	r3, [pc, #104]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	f023 020c 	bic.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	4917      	ldr	r1, [pc, #92]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004148:	4313      	orrs	r3, r2
 800414a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800414c:	4b15      	ldr	r3, [pc, #84]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	f023 0202 	bic.w	r2, r3, #2
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004158:	4912      	ldr	r1, [pc, #72]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 800415a:	4313      	orrs	r3, r2
 800415c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800415e:	4b11      	ldr	r3, [pc, #68]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	4a10      	ldr	r2, [pc, #64]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416a:	4b0e      	ldr	r3, [pc, #56]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 800416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416e:	4a0d      	ldr	r2, [pc, #52]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004174:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004176:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	4a0a      	ldr	r2, [pc, #40]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 800417c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004182:	4b08      	ldr	r3, [pc, #32]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004186:	4a07      	ldr	r2, [pc, #28]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800418e:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a04      	ldr	r2, [pc, #16]	@ (80041a4 <HAL_RCC_OscConfig+0x76c>)
 8004194:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fe fd9b 	bl	8002cd4 <HAL_GetTick>
 800419e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041a0:	e011      	b.n	80041c6 <HAL_RCC_OscConfig+0x78e>
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	58024800 	.word	0x58024800
 80041ac:	fffffc0c 	.word	0xfffffc0c
 80041b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fe fd8e 	bl	8002cd4 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e08a      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041c6:	4b47      	ldr	r3, [pc, #284]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x77c>
 80041d2:	e082      	b.n	80042da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d4:	4b43      	ldr	r3, [pc, #268]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a42      	ldr	r2, [pc, #264]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 80041da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fe fd78 	bl	8002cd4 <HAL_GetTick>
 80041e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fe fd74 	bl	8002cd4 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e070      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041fa:	4b3a      	ldr	r3, [pc, #232]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x7b0>
 8004206:	e068      	b.n	80042da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004208:	4b36      	ldr	r3, [pc, #216]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800420e:	4b35      	ldr	r3, [pc, #212]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	2b01      	cmp	r3, #1
 800421a:	d031      	beq.n	8004280 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f003 0203 	and.w	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d12a      	bne.n	8004280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d122      	bne.n	8004280 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d11a      	bne.n	8004280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	0a5b      	lsrs	r3, r3, #9
 800424e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004256:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d111      	bne.n	8004280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	0c1b      	lsrs	r3, r3, #16
 8004260:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004268:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d108      	bne.n	8004280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	0e1b      	lsrs	r3, r3, #24
 8004272:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e02b      	b.n	80042dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004284:	4b17      	ldr	r3, [pc, #92]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 8004286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004288:	08db      	lsrs	r3, r3, #3
 800428a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800428e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	429a      	cmp	r2, r3
 8004298:	d01f      	beq.n	80042da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800429a:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 800429c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429e:	4a11      	ldr	r2, [pc, #68]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042a6:	f7fe fd15 	bl	8002cd4 <HAL_GetTick>
 80042aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042ac:	bf00      	nop
 80042ae:	f7fe fd11 	bl	8002cd4 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d0f9      	beq.n	80042ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042ba:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 80042bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042be:	4b0a      	ldr	r3, [pc, #40]	@ (80042e8 <HAL_RCC_OscConfig+0x8b0>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042c6:	00d2      	lsls	r2, r2, #3
 80042c8:	4906      	ldr	r1, [pc, #24]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80042ce:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	4a04      	ldr	r2, [pc, #16]	@ (80042e4 <HAL_RCC_OscConfig+0x8ac>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3730      	adds	r7, #48	@ 0x30
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	58024400 	.word	0x58024400
 80042e8:	ffff0007 	.word	0xffff0007

080042ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e19c      	b.n	800463a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004300:	4b8a      	ldr	r3, [pc, #552]	@ (800452c <HAL_RCC_ClockConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d910      	bls.n	8004330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b87      	ldr	r3, [pc, #540]	@ (800452c <HAL_RCC_ClockConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 020f 	bic.w	r2, r3, #15
 8004316:	4985      	ldr	r1, [pc, #532]	@ (800452c <HAL_RCC_ClockConfig+0x240>)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	4313      	orrs	r3, r2
 800431c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b83      	ldr	r3, [pc, #524]	@ (800452c <HAL_RCC_ClockConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e184      	b.n	800463a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d010      	beq.n	800435e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	4b7b      	ldr	r3, [pc, #492]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004348:	429a      	cmp	r2, r3
 800434a:	d908      	bls.n	800435e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800434c:	4b78      	ldr	r3, [pc, #480]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	4975      	ldr	r1, [pc, #468]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 800435a:	4313      	orrs	r3, r2
 800435c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d010      	beq.n	800438c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	4b70      	ldr	r3, [pc, #448]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004376:	429a      	cmp	r2, r3
 8004378:	d908      	bls.n	800438c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800437a:	4b6d      	ldr	r3, [pc, #436]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	496a      	ldr	r1, [pc, #424]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 8004388:	4313      	orrs	r3, r2
 800438a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	d010      	beq.n	80043ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699a      	ldr	r2, [r3, #24]
 800439c:	4b64      	ldr	r3, [pc, #400]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d908      	bls.n	80043ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043a8:	4b61      	ldr	r3, [pc, #388]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	495e      	ldr	r1, [pc, #376]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d010      	beq.n	80043e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	4b59      	ldr	r3, [pc, #356]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d908      	bls.n	80043e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043d6:	4b56      	ldr	r3, [pc, #344]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	4953      	ldr	r1, [pc, #332]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d010      	beq.n	8004416 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	4b4d      	ldr	r3, [pc, #308]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	429a      	cmp	r2, r3
 8004402:	d908      	bls.n	8004416 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004404:	4b4a      	ldr	r3, [pc, #296]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f023 020f 	bic.w	r2, r3, #15
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4947      	ldr	r1, [pc, #284]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 8004412:	4313      	orrs	r3, r2
 8004414:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d055      	beq.n	80044ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004422:	4b43      	ldr	r3, [pc, #268]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	4940      	ldr	r1, [pc, #256]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 8004430:	4313      	orrs	r3, r2
 8004432:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d107      	bne.n	800444c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800443c:	4b3c      	ldr	r3, [pc, #240]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d121      	bne.n	800448c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0f6      	b.n	800463a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d107      	bne.n	8004464 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004454:	4b36      	ldr	r3, [pc, #216]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d115      	bne.n	800448c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0ea      	b.n	800463a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d107      	bne.n	800447c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800446c:	4b30      	ldr	r3, [pc, #192]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d109      	bne.n	800448c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0de      	b.n	800463a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800447c:	4b2c      	ldr	r3, [pc, #176]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0d6      	b.n	800463a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800448c:	4b28      	ldr	r3, [pc, #160]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f023 0207 	bic.w	r2, r3, #7
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4925      	ldr	r1, [pc, #148]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 800449a:	4313      	orrs	r3, r2
 800449c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449e:	f7fe fc19 	bl	8002cd4 <HAL_GetTick>
 80044a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a4:	e00a      	b.n	80044bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a6:	f7fe fc15 	bl	8002cd4 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e0be      	b.n	800463a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d1eb      	bne.n	80044a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d010      	beq.n	80044fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	4b14      	ldr	r3, [pc, #80]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d208      	bcs.n	80044fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ea:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f023 020f 	bic.w	r2, r3, #15
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	490e      	ldr	r1, [pc, #56]	@ (8004530 <HAL_RCC_ClockConfig+0x244>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044fc:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <HAL_RCC_ClockConfig+0x240>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d214      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b08      	ldr	r3, [pc, #32]	@ (800452c <HAL_RCC_ClockConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 020f 	bic.w	r2, r3, #15
 8004512:	4906      	ldr	r1, [pc, #24]	@ (800452c <HAL_RCC_ClockConfig+0x240>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b04      	ldr	r3, [pc, #16]	@ (800452c <HAL_RCC_ClockConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e086      	b.n	800463a <HAL_RCC_ClockConfig+0x34e>
 800452c:	52002000 	.word	0x52002000
 8004530:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d010      	beq.n	8004562 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	4b3f      	ldr	r3, [pc, #252]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800454c:	429a      	cmp	r2, r3
 800454e:	d208      	bcs.n	8004562 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004550:	4b3c      	ldr	r3, [pc, #240]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	4939      	ldr	r1, [pc, #228]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 800455e:	4313      	orrs	r3, r2
 8004560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d010      	beq.n	8004590 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	4b34      	ldr	r3, [pc, #208]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800457a:	429a      	cmp	r2, r3
 800457c:	d208      	bcs.n	8004590 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800457e:	4b31      	ldr	r3, [pc, #196]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	492e      	ldr	r1, [pc, #184]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 800458c:	4313      	orrs	r3, r2
 800458e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	d010      	beq.n	80045be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	4b28      	ldr	r3, [pc, #160]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d208      	bcs.n	80045be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045ac:	4b25      	ldr	r3, [pc, #148]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	4922      	ldr	r1, [pc, #136]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d010      	beq.n	80045ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69da      	ldr	r2, [r3, #28]
 80045ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d208      	bcs.n	80045ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80045da:	4b1a      	ldr	r3, [pc, #104]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	4917      	ldr	r1, [pc, #92]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045ec:	f000 f834 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b14      	ldr	r3, [pc, #80]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	4912      	ldr	r1, [pc, #72]	@ (8004648 <HAL_RCC_ClockConfig+0x35c>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
 8004608:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800460a:	4b0e      	ldr	r3, [pc, #56]	@ (8004644 <HAL_RCC_ClockConfig+0x358>)
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	4a0d      	ldr	r2, [pc, #52]	@ (8004648 <HAL_RCC_ClockConfig+0x35c>)
 8004614:	5cd3      	ldrb	r3, [r2, r3]
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
 8004620:	4a0a      	ldr	r2, [pc, #40]	@ (800464c <HAL_RCC_ClockConfig+0x360>)
 8004622:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004624:	4a0a      	ldr	r2, [pc, #40]	@ (8004650 <HAL_RCC_ClockConfig+0x364>)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800462a:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <HAL_RCC_ClockConfig+0x368>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fb06 	bl	8002c40 <HAL_InitTick>
 8004634:	4603      	mov	r3, r0
 8004636:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004638:	7bfb      	ldrb	r3, [r7, #15]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	58024400 	.word	0x58024400
 8004648:	080083e8 	.word	0x080083e8
 800464c:	24000004 	.word	0x24000004
 8004650:	24000000 	.word	0x24000000
 8004654:	24000028 	.word	0x24000028

08004658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004658:	b480      	push	{r7}
 800465a:	b089      	sub	sp, #36	@ 0x24
 800465c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800465e:	4bb3      	ldr	r3, [pc, #716]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004666:	2b18      	cmp	r3, #24
 8004668:	f200 8155 	bhi.w	8004916 <HAL_RCC_GetSysClockFreq+0x2be>
 800466c:	a201      	add	r2, pc, #4	@ (adr r2, 8004674 <HAL_RCC_GetSysClockFreq+0x1c>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	080046d9 	.word	0x080046d9
 8004678:	08004917 	.word	0x08004917
 800467c:	08004917 	.word	0x08004917
 8004680:	08004917 	.word	0x08004917
 8004684:	08004917 	.word	0x08004917
 8004688:	08004917 	.word	0x08004917
 800468c:	08004917 	.word	0x08004917
 8004690:	08004917 	.word	0x08004917
 8004694:	080046ff 	.word	0x080046ff
 8004698:	08004917 	.word	0x08004917
 800469c:	08004917 	.word	0x08004917
 80046a0:	08004917 	.word	0x08004917
 80046a4:	08004917 	.word	0x08004917
 80046a8:	08004917 	.word	0x08004917
 80046ac:	08004917 	.word	0x08004917
 80046b0:	08004917 	.word	0x08004917
 80046b4:	08004705 	.word	0x08004705
 80046b8:	08004917 	.word	0x08004917
 80046bc:	08004917 	.word	0x08004917
 80046c0:	08004917 	.word	0x08004917
 80046c4:	08004917 	.word	0x08004917
 80046c8:	08004917 	.word	0x08004917
 80046cc:	08004917 	.word	0x08004917
 80046d0:	08004917 	.word	0x08004917
 80046d4:	0800470b 	.word	0x0800470b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046d8:	4b94      	ldr	r3, [pc, #592]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d009      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046e4:	4b91      	ldr	r3, [pc, #580]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	08db      	lsrs	r3, r3, #3
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	4a90      	ldr	r2, [pc, #576]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
 80046f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80046f6:	e111      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046f8:	4b8d      	ldr	r3, [pc, #564]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046fa:	61bb      	str	r3, [r7, #24]
      break;
 80046fc:	e10e      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80046fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004700:	61bb      	str	r3, [r7, #24]
      break;
 8004702:	e10b      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004704:	4b8c      	ldr	r3, [pc, #560]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004706:	61bb      	str	r3, [r7, #24]
      break;
 8004708:	e108      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800470a:	4b88      	ldr	r3, [pc, #544]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004714:	4b85      	ldr	r3, [pc, #532]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800471e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004720:	4b82      	ldr	r3, [pc, #520]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800472a:	4b80      	ldr	r3, [pc, #512]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800472e:	08db      	lsrs	r3, r3, #3
 8004730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80e1 	beq.w	8004910 <HAL_RCC_GetSysClockFreq+0x2b8>
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b02      	cmp	r3, #2
 8004752:	f000 8083 	beq.w	800485c <HAL_RCC_GetSysClockFreq+0x204>
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b02      	cmp	r3, #2
 800475a:	f200 80a1 	bhi.w	80048a0 <HAL_RCC_GetSysClockFreq+0x248>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0x114>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d056      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x1c0>
 800476a:	e099      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800476c:	4b6f      	ldr	r3, [pc, #444]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02d      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004778:	4b6c      	ldr	r3, [pc, #432]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	08db      	lsrs	r3, r3, #3
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	4a6b      	ldr	r2, [pc, #428]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
 8004788:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b62      	ldr	r3, [pc, #392]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800493c <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80047d2:	e087      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004940 <HAL_RCC_GetSysClockFreq+0x2e8>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b51      	ldr	r3, [pc, #324]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800493c <HAL_RCC_GetSysClockFreq+0x2e4>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004816:	e065      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004944 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b40      	ldr	r3, [pc, #256]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a02 	vldr	s12, [r7, #8]
 800483e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800493c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800485a:	e043      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004948 <HAL_RCC_GetSysClockFreq+0x2f0>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b2f      	ldr	r3, [pc, #188]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004882:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800493c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800489e:	e021      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004944 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b1e      	ldr	r3, [pc, #120]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800493c <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80048e4:	4b11      	ldr	r3, [pc, #68]	@ (800492c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e8:	0a5b      	lsrs	r3, r3, #9
 80048ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ee:	3301      	adds	r3, #1
 80048f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004908:	ee17 3a90 	vmov	r3, s15
 800490c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800490e:	e005      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
      break;
 8004914:	e002      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004916:	4b07      	ldr	r3, [pc, #28]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004918:	61bb      	str	r3, [r7, #24]
      break;
 800491a:	bf00      	nop
  }

  return sysclockfreq;
 800491c:	69bb      	ldr	r3, [r7, #24]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3724      	adds	r7, #36	@ 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	58024400 	.word	0x58024400
 8004930:	03d09000 	.word	0x03d09000
 8004934:	003d0900 	.word	0x003d0900
 8004938:	017d7840 	.word	0x017d7840
 800493c:	46000000 	.word	0x46000000
 8004940:	4c742400 	.word	0x4c742400
 8004944:	4a742400 	.word	0x4a742400
 8004948:	4bbebc20 	.word	0x4bbebc20

0800494c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004952:	f7ff fe81 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8004956:	4602      	mov	r2, r0
 8004958:	4b10      	ldr	r3, [pc, #64]	@ (800499c <HAL_RCC_GetHCLKFreq+0x50>)
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	0a1b      	lsrs	r3, r3, #8
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	490f      	ldr	r1, [pc, #60]	@ (80049a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004964:	5ccb      	ldrb	r3, [r1, r3]
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	fa22 f303 	lsr.w	r3, r2, r3
 800496e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004970:	4b0a      	ldr	r3, [pc, #40]	@ (800499c <HAL_RCC_GetHCLKFreq+0x50>)
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	4a09      	ldr	r2, [pc, #36]	@ (80049a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800497a:	5cd3      	ldrb	r3, [r2, r3]
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	fa22 f303 	lsr.w	r3, r2, r3
 8004986:	4a07      	ldr	r2, [pc, #28]	@ (80049a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004988:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800498a:	4a07      	ldr	r2, [pc, #28]	@ (80049a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004990:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004992:	681b      	ldr	r3, [r3, #0]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	58024400 	.word	0x58024400
 80049a0:	080083e8 	.word	0x080083e8
 80049a4:	24000004 	.word	0x24000004
 80049a8:	24000000 	.word	0x24000000

080049ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049b0:	f7ff ffcc 	bl	800494c <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4904      	ldr	r1, [pc, #16]	@ (80049d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	58024400 	.word	0x58024400
 80049d4:	080083e8 	.word	0x080083e8

080049d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80049dc:	f7ff ffb6 	bl	800494c <HAL_RCC_GetHCLKFreq>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	4904      	ldr	r1, [pc, #16]	@ (8004a00 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049ee:	5ccb      	ldrb	r3, [r1, r3]
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	58024400 	.word	0x58024400
 8004a00:	080083e8 	.word	0x080083e8

08004a04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a08:	b0ca      	sub	sp, #296	@ 0x128
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a10:	2300      	movs	r3, #0
 8004a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a16:	2300      	movs	r3, #0
 8004a18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004a28:	2500      	movs	r5, #0
 8004a2a:	ea54 0305 	orrs.w	r3, r4, r5
 8004a2e:	d049      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a3a:	d02f      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a40:	d828      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a46:	d01a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a4c:	d822      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a56:	d007      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a58:	e01c      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a5a:	4bb8      	ldr	r3, [pc, #736]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5e:	4ab7      	ldr	r2, [pc, #732]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a66:	e01a      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	2102      	movs	r1, #2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 fc8f 	bl	8006394 <RCCEx_PLL2_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a7c:	e00f      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a82:	3328      	adds	r3, #40	@ 0x28
 8004a84:	2102      	movs	r1, #2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 fd36 	bl	80064f8 <RCCEx_PLL3_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a92:	e004      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a9a:	e000      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004aa6:	4ba5      	ldr	r3, [pc, #660]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aaa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ab4:	4aa1      	ldr	r2, [pc, #644]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004aba:	e003      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004ad0:	f04f 0900 	mov.w	r9, #0
 8004ad4:	ea58 0309 	orrs.w	r3, r8, r9
 8004ad8:	d047      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d82a      	bhi.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8004aec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004b01 	.word	0x08004b01
 8004af0:	08004b0f 	.word	0x08004b0f
 8004af4:	08004b25 	.word	0x08004b25
 8004af8:	08004b43 	.word	0x08004b43
 8004afc:	08004b43 	.word	0x08004b43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b00:	4b8e      	ldr	r3, [pc, #568]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b04:	4a8d      	ldr	r2, [pc, #564]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b0c:	e01a      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	3308      	adds	r3, #8
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f001 fc3c 	bl	8006394 <RCCEx_PLL2_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b22:	e00f      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b28:	3328      	adds	r3, #40	@ 0x28
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fce3 	bl	80064f8 <RCCEx_PLL3_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b38:	e004      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b4c:	4b7b      	ldr	r3, [pc, #492]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b50:	f023 0107 	bic.w	r1, r3, #7
 8004b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5a:	4a78      	ldr	r2, [pc, #480]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b60:	e003      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004b76:	f04f 0b00 	mov.w	fp, #0
 8004b7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b7e:	d04c      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b8a:	d030      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004b8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b90:	d829      	bhi.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b92:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b94:	d02d      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b96:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b98:	d825      	bhi.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b9a:	2b80      	cmp	r3, #128	@ 0x80
 8004b9c:	d018      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004b9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ba0:	d821      	bhi.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004ba6:	2b40      	cmp	r3, #64	@ 0x40
 8004ba8:	d007      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004baa:	e01c      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bac:	4b63      	ldr	r3, [pc, #396]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb0:	4a62      	ldr	r2, [pc, #392]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004bb8:	e01c      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f001 fbe6 	bl	8006394 <RCCEx_PLL2_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004bce:	e011      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd4:	3328      	adds	r3, #40	@ 0x28
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f001 fc8d 	bl	80064f8 <RCCEx_PLL3_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004be4:	e006      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bec:	e002      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004bee:	bf00      	nop
 8004bf0:	e000      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c00:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0a:	4a4c      	ldr	r2, [pc, #304]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c10:	e003      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004c26:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004c30:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004c34:	460b      	mov	r3, r1
 8004c36:	4313      	orrs	r3, r2
 8004c38:	d053      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c46:	d035      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004c48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c4c:	d82e      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c52:	d031      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004c54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c58:	d828      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c5e:	d01a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004c60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c64:	d822      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004c6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c6e:	d007      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004c70:	e01c      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c72:	4b32      	ldr	r3, [pc, #200]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c76:	4a31      	ldr	r2, [pc, #196]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c7e:	e01c      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c84:	3308      	adds	r3, #8
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 fb83 	bl	8006394 <RCCEx_PLL2_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c94:	e011      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9a:	3328      	adds	r3, #40	@ 0x28
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 fc2a 	bl	80064f8 <RCCEx_PLL3_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004caa:	e006      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cb2:	e002      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cd8:	e003      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004cee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004cf8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	d056      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d0e:	d038      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004d10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d14:	d831      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d1a:	d034      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004d1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d20:	d82b      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d26:	d01d      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d2c:	d825      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d006      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d36:	d00a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d38:	e01f      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d3a:	bf00      	nop
 8004d3c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d40:	4ba2      	ldr	r3, [pc, #648]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	4aa1      	ldr	r2, [pc, #644]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d4c:	e01c      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d52:	3308      	adds	r3, #8
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 fb1c 	bl	8006394 <RCCEx_PLL2_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d62:	e011      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d68:	3328      	adds	r3, #40	@ 0x28
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f001 fbc3 	bl	80064f8 <RCCEx_PLL3_Config>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d78:	e006      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d80:	e002      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d90:	4b8e      	ldr	r3, [pc, #568]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d94:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004da0:	4a8a      	ldr	r2, [pc, #552]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004da2:	430b      	orrs	r3, r1
 8004da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004da6:	e003      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004dbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004dc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	d03a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd6:	2b30      	cmp	r3, #48	@ 0x30
 8004dd8:	d01f      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004dda:	2b30      	cmp	r3, #48	@ 0x30
 8004ddc:	d819      	bhi.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d00c      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d815      	bhi.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d019      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d111      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dee:	4b77      	ldr	r3, [pc, #476]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	4a76      	ldr	r2, [pc, #472]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004dfa:	e011      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e00:	3308      	adds	r3, #8
 8004e02:	2102      	movs	r1, #2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 fac5 	bl	8006394 <RCCEx_PLL2_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e10:	e006      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e18:	e002      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e1a:	bf00      	nop
 8004e1c:	e000      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e28:	4b68      	ldr	r3, [pc, #416]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e36:	4a65      	ldr	r2, [pc, #404]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e3c:	e003      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004e52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004e56:	2300      	movs	r3, #0
 8004e58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004e5c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4313      	orrs	r3, r2
 8004e64:	d051      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e70:	d035      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004e72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e76:	d82e      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e7c:	d031      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004e7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e82:	d828      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e88:	d01a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e8e:	d822      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e98:	d007      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004e9a:	e01c      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ea8:	e01c      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eae:	3308      	adds	r3, #8
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 fa6e 	bl	8006394 <RCCEx_PLL2_Config>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ebe:	e011      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec4:	3328      	adds	r3, #40	@ 0x28
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 fb15 	bl	80064f8 <RCCEx_PLL3_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ed4:	e006      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004edc:	e002      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004eec:	4b37      	ldr	r3, [pc, #220]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004efa:	4a34      	ldr	r2, [pc, #208]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004efc:	430b      	orrs	r3, r1
 8004efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004f24:	460b      	mov	r3, r1
 8004f26:	4313      	orrs	r3, r2
 8004f28:	d056      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f34:	d033      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004f36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f3a:	d82c      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f40:	d02f      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004f42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f46:	d826      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f4c:	d02b      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004f4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f52:	d820      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f58:	d012      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004f5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f5e:	d81a      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d022      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f68:	d115      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6e:	3308      	adds	r3, #8
 8004f70:	2101      	movs	r1, #1
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 fa0e 	bl	8006394 <RCCEx_PLL2_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f7e:	e015      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f84:	3328      	adds	r3, #40	@ 0x28
 8004f86:	2101      	movs	r1, #1
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f001 fab5 	bl	80064f8 <RCCEx_PLL3_Config>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f94:	e00a      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f9c:	e006      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004f9e:	bf00      	nop
 8004fa0:	e004      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fa2:	bf00      	nop
 8004fa4:	e002      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fa6:	bf00      	nop
 8004fa8:	e000      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004fb4:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fc2:	4a02      	ldr	r2, [pc, #8]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fc8:	e006      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004fca:	bf00      	nop
 8004fcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d055      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005000:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005004:	d033      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800500a:	d82c      	bhi.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005010:	d02f      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005016:	d826      	bhi.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005018:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800501c:	d02b      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800501e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005022:	d820      	bhi.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005028:	d012      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800502a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800502e:	d81a      	bhi.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d022      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005038:	d115      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800503a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503e:	3308      	adds	r3, #8
 8005040:	2101      	movs	r1, #1
 8005042:	4618      	mov	r0, r3
 8005044:	f001 f9a6 	bl	8006394 <RCCEx_PLL2_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800504e:	e015      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005054:	3328      	adds	r3, #40	@ 0x28
 8005056:	2101      	movs	r1, #1
 8005058:	4618      	mov	r0, r3
 800505a:	f001 fa4d 	bl	80064f8 <RCCEx_PLL3_Config>
 800505e:	4603      	mov	r3, r0
 8005060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005064:	e00a      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800506c:	e006      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800506e:	bf00      	nop
 8005070:	e004      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005072:	bf00      	nop
 8005074:	e002      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005076:	bf00      	nop
 8005078:	e000      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800507a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800507c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10b      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005084:	4ba3      	ldr	r3, [pc, #652]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005088:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800508c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005094:	4a9f      	ldr	r2, [pc, #636]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005096:	430b      	orrs	r3, r1
 8005098:	6593      	str	r3, [r2, #88]	@ 0x58
 800509a:	e003      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80050b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050b4:	2300      	movs	r3, #0
 80050b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80050ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050be:	460b      	mov	r3, r1
 80050c0:	4313      	orrs	r3, r2
 80050c2:	d037      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80050c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050ce:	d00e      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80050d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050d4:	d816      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d018      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80050da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050de:	d111      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e0:	4b8c      	ldr	r3, [pc, #560]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	4a8b      	ldr	r2, [pc, #556]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80050ec:	e00f      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f2:	3308      	adds	r3, #8
 80050f4:	2101      	movs	r1, #1
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 f94c 	bl	8006394 <RCCEx_PLL2_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005102:	e004      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800510a:	e000      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800510c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800510e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005116:	4b7f      	ldr	r3, [pc, #508]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800511a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005124:	4a7b      	ldr	r2, [pc, #492]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005126:	430b      	orrs	r3, r1
 8005128:	6513      	str	r3, [r2, #80]	@ 0x50
 800512a:	e003      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005140:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005144:	2300      	movs	r3, #0
 8005146:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800514a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800514e:	460b      	mov	r3, r1
 8005150:	4313      	orrs	r3, r2
 8005152:	d039      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800515a:	2b03      	cmp	r3, #3
 800515c:	d81c      	bhi.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800515e:	a201      	add	r2, pc, #4	@ (adr r2, 8005164 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	080051a1 	.word	0x080051a1
 8005168:	08005175 	.word	0x08005175
 800516c:	08005183 	.word	0x08005183
 8005170:	080051a1 	.word	0x080051a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005174:	4b67      	ldr	r3, [pc, #412]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005178:	4a66      	ldr	r2, [pc, #408]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800517a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800517e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005180:	e00f      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005186:	3308      	adds	r3, #8
 8005188:	2102      	movs	r1, #2
 800518a:	4618      	mov	r0, r3
 800518c:	f001 f902 	bl	8006394 <RCCEx_PLL2_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005196:	e004      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800519e:	e000      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80051a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051aa:	4b5a      	ldr	r3, [pc, #360]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ae:	f023 0103 	bic.w	r1, r3, #3
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b8:	4a56      	ldr	r2, [pc, #344]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ba:	430b      	orrs	r3, r1
 80051bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051be:	e003      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80051d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051d8:	2300      	movs	r3, #0
 80051da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80051e2:	460b      	mov	r3, r1
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f000 809f 	beq.w	8005328 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80051f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051f6:	f7fd fd6d 	bl	8002cd4 <HAL_GetTick>
 80051fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051fe:	e00b      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005200:	f7fd fd68 	bl	8002cd4 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b64      	cmp	r3, #100	@ 0x64
 800520e:	d903      	bls.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005216:	e005      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005218:	4b3f      	ldr	r3, [pc, #252]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0ed      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005228:	2b00      	cmp	r3, #0
 800522a:	d179      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800522c:	4b39      	ldr	r3, [pc, #228]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800522e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005234:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005238:	4053      	eors	r3, r2
 800523a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523e:	2b00      	cmp	r3, #0
 8005240:	d015      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005242:	4b34      	ldr	r3, [pc, #208]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800524a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800524e:	4b31      	ldr	r3, [pc, #196]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005252:	4a30      	ldr	r2, [pc, #192]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005258:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800525a:	4b2e      	ldr	r3, [pc, #184]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	4a2d      	ldr	r2, [pc, #180]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005264:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005266:	4a2b      	ldr	r2, [pc, #172]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005268:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800526c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005272:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800527a:	d118      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527c:	f7fd fd2a 	bl	8002cd4 <HAL_GetTick>
 8005280:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005284:	e00d      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005286:	f7fd fd25 	bl	8002cd4 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005290:	1ad2      	subs	r2, r2, r3
 8005292:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005296:	429a      	cmp	r2, r3
 8005298:	d903      	bls.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80052a0:	e005      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0eb      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80052ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d129      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052c6:	d10e      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80052c8:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80052d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052d8:	091a      	lsrs	r2, r3, #4
 80052da:	4b10      	ldr	r3, [pc, #64]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80052dc:	4013      	ands	r3, r2
 80052de:	4a0d      	ldr	r2, [pc, #52]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052e0:	430b      	orrs	r3, r1
 80052e2:	6113      	str	r3, [r2, #16]
 80052e4:	e005      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80052e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80052f0:	6113      	str	r3, [r2, #16]
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005302:	4a04      	ldr	r2, [pc, #16]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005304:	430b      	orrs	r3, r1
 8005306:	6713      	str	r3, [r2, #112]	@ 0x70
 8005308:	e00e      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800530a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800530e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005312:	e009      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005314:	58024400 	.word	0x58024400
 8005318:	58024800 	.word	0x58024800
 800531c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f002 0301 	and.w	r3, r2, #1
 8005334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005338:	2300      	movs	r3, #0
 800533a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800533e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005342:	460b      	mov	r3, r1
 8005344:	4313      	orrs	r3, r2
 8005346:	f000 8089 	beq.w	800545c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800534a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005350:	2b28      	cmp	r3, #40	@ 0x28
 8005352:	d86b      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005354:	a201      	add	r2, pc, #4	@ (adr r2, 800535c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535a:	bf00      	nop
 800535c:	08005435 	.word	0x08005435
 8005360:	0800542d 	.word	0x0800542d
 8005364:	0800542d 	.word	0x0800542d
 8005368:	0800542d 	.word	0x0800542d
 800536c:	0800542d 	.word	0x0800542d
 8005370:	0800542d 	.word	0x0800542d
 8005374:	0800542d 	.word	0x0800542d
 8005378:	0800542d 	.word	0x0800542d
 800537c:	08005401 	.word	0x08005401
 8005380:	0800542d 	.word	0x0800542d
 8005384:	0800542d 	.word	0x0800542d
 8005388:	0800542d 	.word	0x0800542d
 800538c:	0800542d 	.word	0x0800542d
 8005390:	0800542d 	.word	0x0800542d
 8005394:	0800542d 	.word	0x0800542d
 8005398:	0800542d 	.word	0x0800542d
 800539c:	08005417 	.word	0x08005417
 80053a0:	0800542d 	.word	0x0800542d
 80053a4:	0800542d 	.word	0x0800542d
 80053a8:	0800542d 	.word	0x0800542d
 80053ac:	0800542d 	.word	0x0800542d
 80053b0:	0800542d 	.word	0x0800542d
 80053b4:	0800542d 	.word	0x0800542d
 80053b8:	0800542d 	.word	0x0800542d
 80053bc:	08005435 	.word	0x08005435
 80053c0:	0800542d 	.word	0x0800542d
 80053c4:	0800542d 	.word	0x0800542d
 80053c8:	0800542d 	.word	0x0800542d
 80053cc:	0800542d 	.word	0x0800542d
 80053d0:	0800542d 	.word	0x0800542d
 80053d4:	0800542d 	.word	0x0800542d
 80053d8:	0800542d 	.word	0x0800542d
 80053dc:	08005435 	.word	0x08005435
 80053e0:	0800542d 	.word	0x0800542d
 80053e4:	0800542d 	.word	0x0800542d
 80053e8:	0800542d 	.word	0x0800542d
 80053ec:	0800542d 	.word	0x0800542d
 80053f0:	0800542d 	.word	0x0800542d
 80053f4:	0800542d 	.word	0x0800542d
 80053f8:	0800542d 	.word	0x0800542d
 80053fc:	08005435 	.word	0x08005435
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005404:	3308      	adds	r3, #8
 8005406:	2101      	movs	r1, #1
 8005408:	4618      	mov	r0, r3
 800540a:	f000 ffc3 	bl	8006394 <RCCEx_PLL2_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005414:	e00f      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541a:	3328      	adds	r3, #40	@ 0x28
 800541c:	2101      	movs	r1, #1
 800541e:	4618      	mov	r0, r3
 8005420:	f001 f86a 	bl	80064f8 <RCCEx_PLL3_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800542a:	e004      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005432:	e000      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800543e:	4bbf      	ldr	r3, [pc, #764]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005442:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800544c:	4abb      	ldr	r2, [pc, #748]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800544e:	430b      	orrs	r3, r1
 8005450:	6553      	str	r3, [r2, #84]	@ 0x54
 8005452:	e003      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800545c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f002 0302 	and.w	r3, r2, #2
 8005468:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800546c:	2300      	movs	r3, #0
 800546e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005472:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005476:	460b      	mov	r3, r1
 8005478:	4313      	orrs	r3, r2
 800547a:	d041      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005482:	2b05      	cmp	r3, #5
 8005484:	d824      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005486:	a201      	add	r2, pc, #4	@ (adr r2, 800548c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	080054d9 	.word	0x080054d9
 8005490:	080054a5 	.word	0x080054a5
 8005494:	080054bb 	.word	0x080054bb
 8005498:	080054d9 	.word	0x080054d9
 800549c:	080054d9 	.word	0x080054d9
 80054a0:	080054d9 	.word	0x080054d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a8:	3308      	adds	r3, #8
 80054aa:	2101      	movs	r1, #1
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 ff71 	bl	8006394 <RCCEx_PLL2_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054b8:	e00f      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054be:	3328      	adds	r3, #40	@ 0x28
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 f818 	bl	80064f8 <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80054d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054e2:	4b96      	ldr	r3, [pc, #600]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e6:	f023 0107 	bic.w	r1, r3, #7
 80054ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054f0:	4a92      	ldr	r2, [pc, #584]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054f2:	430b      	orrs	r3, r1
 80054f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80054f6:	e003      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005508:	f002 0304 	and.w	r3, r2, #4
 800550c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005510:	2300      	movs	r3, #0
 8005512:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005516:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800551a:	460b      	mov	r3, r1
 800551c:	4313      	orrs	r3, r2
 800551e:	d044      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005528:	2b05      	cmp	r3, #5
 800552a:	d825      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800552c:	a201      	add	r2, pc, #4	@ (adr r2, 8005534 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005581 	.word	0x08005581
 8005538:	0800554d 	.word	0x0800554d
 800553c:	08005563 	.word	0x08005563
 8005540:	08005581 	.word	0x08005581
 8005544:	08005581 	.word	0x08005581
 8005548:	08005581 	.word	0x08005581
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800554c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005550:	3308      	adds	r3, #8
 8005552:	2101      	movs	r1, #1
 8005554:	4618      	mov	r0, r3
 8005556:	f000 ff1d 	bl	8006394 <RCCEx_PLL2_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005560:	e00f      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005566:	3328      	adds	r3, #40	@ 0x28
 8005568:	2101      	movs	r1, #1
 800556a:	4618      	mov	r0, r3
 800556c:	f000 ffc4 	bl	80064f8 <RCCEx_PLL3_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005576:	e004      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800557e:	e000      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10b      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800558a:	4b6c      	ldr	r3, [pc, #432]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558e:	f023 0107 	bic.w	r1, r3, #7
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800559a:	4a68      	ldr	r2, [pc, #416]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800559c:	430b      	orrs	r3, r1
 800559e:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a0:	e003      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	f002 0320 	and.w	r3, r2, #32
 80055b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055ba:	2300      	movs	r3, #0
 80055bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055c4:	460b      	mov	r3, r1
 80055c6:	4313      	orrs	r3, r2
 80055c8:	d055      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055d6:	d033      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80055d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055dc:	d82c      	bhi.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80055de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e2:	d02f      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e8:	d826      	bhi.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80055ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055ee:	d02b      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80055f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055f4:	d820      	bhi.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80055f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055fa:	d012      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80055fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005600:	d81a      	bhi.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d022      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800560a:	d115      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005610:	3308      	adds	r3, #8
 8005612:	2100      	movs	r1, #0
 8005614:	4618      	mov	r0, r3
 8005616:	f000 febd 	bl	8006394 <RCCEx_PLL2_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005620:	e015      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005626:	3328      	adds	r3, #40	@ 0x28
 8005628:	2102      	movs	r1, #2
 800562a:	4618      	mov	r0, r3
 800562c:	f000 ff64 	bl	80064f8 <RCCEx_PLL3_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005636:	e00a      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800563e:	e006      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005640:	bf00      	nop
 8005642:	e004      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005644:	bf00      	nop
 8005646:	e002      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005648:	bf00      	nop
 800564a:	e000      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800564c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800564e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005656:	4b39      	ldr	r3, [pc, #228]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800565e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005666:	4a35      	ldr	r2, [pc, #212]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005668:	430b      	orrs	r3, r1
 800566a:	6553      	str	r3, [r2, #84]	@ 0x54
 800566c:	e003      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005686:	2300      	movs	r3, #0
 8005688:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800568c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005690:	460b      	mov	r3, r1
 8005692:	4313      	orrs	r3, r2
 8005694:	d058      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800569e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056a2:	d033      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80056a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056a8:	d82c      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ae:	d02f      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80056b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b4:	d826      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056ba:	d02b      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80056bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056c0:	d820      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056c6:	d012      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80056c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056cc:	d81a      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d022      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80056d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d6:	d115      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056dc:	3308      	adds	r3, #8
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fe57 	bl	8006394 <RCCEx_PLL2_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80056ec:	e015      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f2:	3328      	adds	r3, #40	@ 0x28
 80056f4:	2102      	movs	r1, #2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fefe 	bl	80064f8 <RCCEx_PLL3_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005702:	e00a      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800570a:	e006      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800570c:	bf00      	nop
 800570e:	e004      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005710:	bf00      	nop
 8005712:	e002      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005714:	bf00      	nop
 8005716:	e000      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800571a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10e      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005722:	4b06      	ldr	r3, [pc, #24]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005726:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800572a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005732:	4a02      	ldr	r2, [pc, #8]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005734:	430b      	orrs	r3, r1
 8005736:	6593      	str	r3, [r2, #88]	@ 0x58
 8005738:	e006      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800573a:	bf00      	nop
 800573c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005754:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005758:	2300      	movs	r3, #0
 800575a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800575e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005762:	460b      	mov	r3, r1
 8005764:	4313      	orrs	r3, r2
 8005766:	d055      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005770:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005774:	d033      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005776:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800577a:	d82c      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800577c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005780:	d02f      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005782:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005786:	d826      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005788:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800578c:	d02b      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800578e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005792:	d820      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005794:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005798:	d012      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800579a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800579e:	d81a      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d022      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80057a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057a8:	d115      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ae:	3308      	adds	r3, #8
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fdee 	bl	8006394 <RCCEx_PLL2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057be:	e015      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c4:	3328      	adds	r3, #40	@ 0x28
 80057c6:	2102      	movs	r1, #2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fe95 	bl	80064f8 <RCCEx_PLL3_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057d4:	e00a      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057dc:	e006      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80057de:	bf00      	nop
 80057e0:	e004      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80057e2:	bf00      	nop
 80057e4:	e002      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80057ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10b      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80057f4:	4ba1      	ldr	r3, [pc, #644]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005800:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005804:	4a9d      	ldr	r2, [pc, #628]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005806:	430b      	orrs	r3, r1
 8005808:	6593      	str	r3, [r2, #88]	@ 0x58
 800580a:	e003      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005810:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f002 0308 	and.w	r3, r2, #8
 8005820:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005824:	2300      	movs	r3, #0
 8005826:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800582a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800582e:	460b      	mov	r3, r1
 8005830:	4313      	orrs	r3, r2
 8005832:	d01e      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800583c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005840:	d10c      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005846:	3328      	adds	r3, #40	@ 0x28
 8005848:	2102      	movs	r1, #2
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fe54 	bl	80064f8 <RCCEx_PLL3_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800585c:	4b87      	ldr	r3, [pc, #540]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800585e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005860:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800586c:	4a83      	ldr	r2, [pc, #524]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800586e:	430b      	orrs	r3, r1
 8005870:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	f002 0310 	and.w	r3, r2, #16
 800587e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005882:	2300      	movs	r3, #0
 8005884:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005888:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800588c:	460b      	mov	r3, r1
 800588e:	4313      	orrs	r3, r2
 8005890:	d01e      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005896:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800589a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800589e:	d10c      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a4:	3328      	adds	r3, #40	@ 0x28
 80058a6:	2102      	movs	r1, #2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fe25 	bl	80064f8 <RCCEx_PLL3_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058ba:	4b70      	ldr	r3, [pc, #448]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058ca:	4a6c      	ldr	r2, [pc, #432]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80058dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058e0:	2300      	movs	r3, #0
 80058e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80058ea:	460b      	mov	r3, r1
 80058ec:	4313      	orrs	r3, r2
 80058ee:	d03e      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058fc:	d022      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80058fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005902:	d81b      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800590c:	d00b      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800590e:	e015      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005914:	3308      	adds	r3, #8
 8005916:	2100      	movs	r1, #0
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fd3b 	bl	8006394 <RCCEx_PLL2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005924:	e00f      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592a:	3328      	adds	r3, #40	@ 0x28
 800592c:	2102      	movs	r1, #2
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fde2 	bl	80064f8 <RCCEx_PLL3_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800593a:	e004      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005942:	e000      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10b      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800594e:	4b4b      	ldr	r3, [pc, #300]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005952:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800595e:	4a47      	ldr	r2, [pc, #284]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005960:	430b      	orrs	r3, r1
 8005962:	6593      	str	r3, [r2, #88]	@ 0x58
 8005964:	e003      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800596a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800597a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800597c:	2300      	movs	r3, #0
 800597e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005980:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005984:	460b      	mov	r3, r1
 8005986:	4313      	orrs	r3, r2
 8005988:	d03b      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005992:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005996:	d01f      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005998:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800599c:	d818      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800599e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059a2:	d003      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80059a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059a8:	d007      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80059aa:	e011      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ac:	4b33      	ldr	r3, [pc, #204]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b0:	4a32      	ldr	r2, [pc, #200]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80059b8:	e00f      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059be:	3328      	adds	r3, #40	@ 0x28
 80059c0:	2101      	movs	r1, #1
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fd98 	bl	80064f8 <RCCEx_PLL3_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80059ce:	e004      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059d6:	e000      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80059d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10b      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059e2:	4b26      	ldr	r3, [pc, #152]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f2:	4a22      	ldr	r2, [pc, #136]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059f4:	430b      	orrs	r3, r1
 80059f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80059f8:	e003      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a10:	2300      	movs	r3, #0
 8005a12:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	d034      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a2c:	d007      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005a2e:	e011      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a30:	4b12      	ldr	r3, [pc, #72]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a34:	4a11      	ldr	r2, [pc, #68]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a3c:	e00e      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a42:	3308      	adds	r3, #8
 8005a44:	2102      	movs	r1, #2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fca4 	bl	8006394 <RCCEx_PLL2_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a52:	e003      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a64:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a68:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a72:	4a02      	ldr	r2, [pc, #8]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a74:	430b      	orrs	r3, r1
 8005a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a78:	e006      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005a7a:	bf00      	nop
 8005a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005a94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a96:	2300      	movs	r3, #0
 8005a98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a9a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	d00c      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa8:	3328      	adds	r3, #40	@ 0x28
 8005aaa:	2102      	movs	r1, #2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fd23 	bl	80064f8 <RCCEx_PLL3_Config>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005aca:	663b      	str	r3, [r7, #96]	@ 0x60
 8005acc:	2300      	movs	r3, #0
 8005ace:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ad0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	d038      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae6:	d018      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005ae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aec:	d811      	bhi.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af2:	d014      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af8:	d80b      	bhi.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d011      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b02:	d106      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b04:	4bc3      	ldr	r3, [pc, #780]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	4ac2      	ldr	r2, [pc, #776]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b10:	e008      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b18:	e004      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b2c:	4bb9      	ldr	r3, [pc, #740]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b30:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b3c:	4ab5      	ldr	r2, [pc, #724]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b42:	e003      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005b62:	460b      	mov	r3, r1
 8005b64:	4313      	orrs	r3, r2
 8005b66:	d009      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b68:	4baa      	ldr	r3, [pc, #680]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b76:	4aa7      	ldr	r2, [pc, #668]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005b88:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005b92:	460b      	mov	r3, r1
 8005b94:	4313      	orrs	r3, r2
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005b98:	4b9e      	ldr	r3, [pc, #632]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ba8:	4a9a      	ldr	r2, [pc, #616]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005baa:	430b      	orrs	r3, r1
 8005bac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005bba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bc0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bca:	4b92      	ldr	r3, [pc, #584]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bd8:	4a8e      	ldr	r2, [pc, #568]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bda:	430b      	orrs	r3, r1
 8005bdc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005bea:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bec:	2300      	movs	r3, #0
 8005bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	d00e      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bfa:	4b86      	ldr	r3, [pc, #536]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	4a85      	ldr	r2, [pc, #532]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c04:	6113      	str	r3, [r2, #16]
 8005c06:	4b83      	ldr	r3, [pc, #524]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c08:	6919      	ldr	r1, [r3, #16]
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c12:	4a80      	ldr	r2, [pc, #512]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c14:	430b      	orrs	r3, r1
 8005c16:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005c24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c26:	2300      	movs	r3, #0
 8005c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4313      	orrs	r3, r2
 8005c32:	d009      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c34:	4b77      	ldr	r3, [pc, #476]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c38:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c42:	4a74      	ldr	r2, [pc, #464]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c44:	430b      	orrs	r3, r1
 8005c46:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c56:	2300      	movs	r3, #0
 8005c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c5a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4313      	orrs	r3, r2
 8005c62:	d00a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c64:	4b6b      	ldr	r3, [pc, #428]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c68:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c74:	4a67      	ldr	r2, [pc, #412]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c76:	430b      	orrs	r3, r1
 8005c78:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c82:	2100      	movs	r1, #0
 8005c84:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005c90:	460b      	mov	r3, r1
 8005c92:	4313      	orrs	r3, r2
 8005c94:	d011      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fb78 	bl	8006394 <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	6239      	str	r1, [r7, #32]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ccc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	d011      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cda:	3308      	adds	r3, #8
 8005cdc:	2101      	movs	r1, #1
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fb58 	bl	8006394 <RCCEx_PLL2_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	2100      	movs	r1, #0
 8005d04:	61b9      	str	r1, [r7, #24]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d10:	460b      	mov	r3, r1
 8005d12:	4313      	orrs	r3, r2
 8005d14:	d011      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fb38 	bl	8006394 <RCCEx_PLL2_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	2100      	movs	r1, #0
 8005d44:	6139      	str	r1, [r7, #16]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d50:	460b      	mov	r3, r1
 8005d52:	4313      	orrs	r3, r2
 8005d54:	d011      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5a:	3328      	adds	r3, #40	@ 0x28
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fbca 	bl	80064f8 <RCCEx_PLL3_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	2100      	movs	r1, #0
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	f003 0310 	and.w	r3, r3, #16
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d90:	460b      	mov	r3, r1
 8005d92:	4313      	orrs	r3, r2
 8005d94:	d011      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9a:	3328      	adds	r3, #40	@ 0x28
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fbaa 	bl	80064f8 <RCCEx_PLL3_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	6039      	str	r1, [r7, #0]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	d011      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dda:	3328      	adds	r3, #40	@ 0x28
 8005ddc:	2102      	movs	r1, #2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fb8a 	bl	80064f8 <RCCEx_PLL3_Config>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005dfa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e000      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e14:	58024400 	.word	0x58024400

08005e18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005e1c:	f7fe fd96 	bl	800494c <HAL_RCC_GetHCLKFreq>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4b06      	ldr	r3, [pc, #24]	@ (8005e3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	091b      	lsrs	r3, r3, #4
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	4904      	ldr	r1, [pc, #16]	@ (8005e40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e2e:	5ccb      	ldrb	r3, [r1, r3]
 8005e30:	f003 031f 	and.w	r3, r3, #31
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	58024400 	.word	0x58024400
 8005e40:	080083e8 	.word	0x080083e8

08005e44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	@ 0x24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e4c:	4ba1      	ldr	r3, [pc, #644]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005e56:	4b9f      	ldr	r3, [pc, #636]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	0b1b      	lsrs	r3, r3, #12
 8005e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e62:	4b9c      	ldr	r3, [pc, #624]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e66:	091b      	lsrs	r3, r3, #4
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005e6e:	4b99      	ldr	r3, [pc, #612]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e72:	08db      	lsrs	r3, r3, #3
 8005e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8111 	beq.w	80060b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	f000 8083 	beq.w	8005fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	f200 80a1 	bhi.w	8005fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d056      	beq.n	8005f5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005eae:	e099      	b.n	8005fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb0:	4b88      	ldr	r3, [pc, #544]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d02d      	beq.n	8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ebc:	4b85      	ldr	r3, [pc, #532]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	08db      	lsrs	r3, r3, #3
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	4a84      	ldr	r2, [pc, #528]	@ (80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ecc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	4b7b      	ldr	r3, [pc, #492]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005efa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f16:	e087      	b.n	8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80060dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f5a:	e065      	b.n	8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6e:	4b59      	ldr	r3, [pc, #356]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80060dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f9e:	e043      	b.n	8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005faa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80060e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb2:	4b48      	ldr	r3, [pc, #288]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80060dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fe2:	e021      	b.n	8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80060e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff6:	4b37      	ldr	r3, [pc, #220]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	ed97 6a03 	vldr	s12, [r7, #12]
 800600a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80060dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800600e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800601a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006026:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006028:	4b2a      	ldr	r3, [pc, #168]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800602a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602c:	0a5b      	lsrs	r3, r3, #9
 800602e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800603e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006042:	edd7 6a07 	vldr	s13, [r7, #28]
 8006046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800604a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800604e:	ee17 2a90 	vmov	r2, s15
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006056:	4b1f      	ldr	r3, [pc, #124]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605a:	0c1b      	lsrs	r3, r3, #16
 800605c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006068:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800606c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006070:	edd7 6a07 	vldr	s13, [r7, #28]
 8006074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800607c:	ee17 2a90 	vmov	r2, s15
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006084:	4b13      	ldr	r3, [pc, #76]	@ (80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006088:	0e1b      	lsrs	r3, r3, #24
 800608a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800609a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800609e:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060aa:	ee17 2a90 	vmov	r2, s15
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060b2:	e008      	b.n	80060c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	609a      	str	r2, [r3, #8]
}
 80060c6:	bf00      	nop
 80060c8:	3724      	adds	r7, #36	@ 0x24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	58024400 	.word	0x58024400
 80060d8:	03d09000 	.word	0x03d09000
 80060dc:	46000000 	.word	0x46000000
 80060e0:	4c742400 	.word	0x4c742400
 80060e4:	4a742400 	.word	0x4a742400
 80060e8:	4bbebc20 	.word	0x4bbebc20

080060ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b089      	sub	sp, #36	@ 0x24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060f4:	4ba1      	ldr	r3, [pc, #644]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80060fe:	4b9f      	ldr	r3, [pc, #636]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006102:	0d1b      	lsrs	r3, r3, #20
 8006104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006108:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800610a:	4b9c      	ldr	r3, [pc, #624]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800610c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610e:	0a1b      	lsrs	r3, r3, #8
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006116:	4b99      	ldr	r3, [pc, #612]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611a:	08db      	lsrs	r3, r3, #3
 800611c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	fb02 f303 	mul.w	r3, r2, r3
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 8111 	beq.w	800635c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b02      	cmp	r3, #2
 800613e:	f000 8083 	beq.w	8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	2b02      	cmp	r3, #2
 8006146:	f200 80a1 	bhi.w	800628c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d056      	beq.n	8006204 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006156:	e099      	b.n	800628c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006158:	4b88      	ldr	r3, [pc, #544]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d02d      	beq.n	80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006164:	4b85      	ldr	r3, [pc, #532]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	08db      	lsrs	r3, r3, #3
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	4a84      	ldr	r2, [pc, #528]	@ (8006380 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006170:	fa22 f303 	lsr.w	r3, r2, r3
 8006174:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	ee07 3a90 	vmov	s15, r3
 800617c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618e:	4b7b      	ldr	r3, [pc, #492]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619e:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80061be:	e087      	b.n	80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80061ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d2:	4b6a      	ldr	r3, [pc, #424]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006202:	e065      	b.n	80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	ee07 3a90 	vmov	s15, r3
 800620a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800638c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006216:	4b59      	ldr	r3, [pc, #356]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006226:	ed97 6a03 	vldr	s12, [r7, #12]
 800622a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800622e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800623a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800623e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006246:	e043      	b.n	80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006252:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800625a:	4b48      	ldr	r3, [pc, #288]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800626a:	ed97 6a03 	vldr	s12, [r7, #12]
 800626e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800627a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800627e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800628a:	e021      	b.n	80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006296:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800638c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800629a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800629e:	4b37      	ldr	r3, [pc, #220]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80062b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80062d0:	4b2a      	ldr	r3, [pc, #168]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d4:	0a5b      	lsrs	r3, r3, #9
 80062d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f6:	ee17 2a90 	vmov	r2, s15
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80062fe:	4b1f      	ldr	r3, [pc, #124]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	0c1b      	lsrs	r3, r3, #16
 8006304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006314:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006318:	edd7 6a07 	vldr	s13, [r7, #28]
 800631c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006324:	ee17 2a90 	vmov	r2, s15
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800632c:	4b13      	ldr	r3, [pc, #76]	@ (800637c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800632e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006330:	0e1b      	lsrs	r3, r3, #24
 8006332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006342:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006346:	edd7 6a07 	vldr	s13, [r7, #28]
 800634a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800634e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006352:	ee17 2a90 	vmov	r2, s15
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800635a:	e008      	b.n	800636e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	609a      	str	r2, [r3, #8]
}
 800636e:	bf00      	nop
 8006370:	3724      	adds	r7, #36	@ 0x24
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	58024400 	.word	0x58024400
 8006380:	03d09000 	.word	0x03d09000
 8006384:	46000000 	.word	0x46000000
 8006388:	4c742400 	.word	0x4c742400
 800638c:	4a742400 	.word	0x4a742400
 8006390:	4bbebc20 	.word	0x4bbebc20

08006394 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063a2:	4b53      	ldr	r3, [pc, #332]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d101      	bne.n	80063b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e099      	b.n	80064e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80063b2:	4b4f      	ldr	r3, [pc, #316]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a4e      	ldr	r2, [pc, #312]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063be:	f7fc fc89 	bl	8002cd4 <HAL_GetTick>
 80063c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063c4:	e008      	b.n	80063d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063c6:	f7fc fc85 	bl	8002cd4 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e086      	b.n	80064e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063d8:	4b45      	ldr	r3, [pc, #276]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f0      	bne.n	80063c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80063e4:	4b42      	ldr	r3, [pc, #264]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	031b      	lsls	r3, r3, #12
 80063f2:	493f      	ldr	r1, [pc, #252]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	3b01      	subs	r3, #1
 8006408:	025b      	lsls	r3, r3, #9
 800640a:	b29b      	uxth	r3, r3
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	3b01      	subs	r3, #1
 8006414:	041b      	lsls	r3, r3, #16
 8006416:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	3b01      	subs	r3, #1
 8006422:	061b      	lsls	r3, r3, #24
 8006424:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006428:	4931      	ldr	r1, [pc, #196]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800642a:	4313      	orrs	r3, r2
 800642c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800642e:	4b30      	ldr	r3, [pc, #192]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006432:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	492d      	ldr	r1, [pc, #180]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800643c:	4313      	orrs	r3, r2
 800643e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006440:	4b2b      	ldr	r3, [pc, #172]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006444:	f023 0220 	bic.w	r2, r3, #32
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	4928      	ldr	r1, [pc, #160]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800644e:	4313      	orrs	r3, r2
 8006450:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006452:	4b27      	ldr	r3, [pc, #156]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006456:	4a26      	ldr	r2, [pc, #152]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006458:	f023 0310 	bic.w	r3, r3, #16
 800645c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800645e:	4b24      	ldr	r3, [pc, #144]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006462:	4b24      	ldr	r3, [pc, #144]	@ (80064f4 <RCCEx_PLL2_Config+0x160>)
 8006464:	4013      	ands	r3, r2
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	69d2      	ldr	r2, [r2, #28]
 800646a:	00d2      	lsls	r2, r2, #3
 800646c:	4920      	ldr	r1, [pc, #128]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800646e:	4313      	orrs	r3, r2
 8006470:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006472:	4b1f      	ldr	r3, [pc, #124]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	4a1e      	ldr	r2, [pc, #120]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006478:	f043 0310 	orr.w	r3, r3, #16
 800647c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006484:	4b1a      	ldr	r3, [pc, #104]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 8006486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006488:	4a19      	ldr	r2, [pc, #100]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800648a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800648e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006490:	e00f      	b.n	80064b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d106      	bne.n	80064a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006498:	4b15      	ldr	r3, [pc, #84]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	4a14      	ldr	r2, [pc, #80]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 800649e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064a4:	e005      	b.n	80064b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80064a6:	4b12      	ldr	r3, [pc, #72]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80064a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064aa:	4a11      	ldr	r2, [pc, #68]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80064ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80064b2:	4b0f      	ldr	r3, [pc, #60]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a0e      	ldr	r2, [pc, #56]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80064b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064be:	f7fc fc09 	bl	8002cd4 <HAL_GetTick>
 80064c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064c4:	e008      	b.n	80064d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064c6:	f7fc fc05 	bl	8002cd4 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e006      	b.n	80064e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064d8:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <RCCEx_PLL2_Config+0x15c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0f0      	beq.n	80064c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	58024400 	.word	0x58024400
 80064f4:	ffff0007 	.word	0xffff0007

080064f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006506:	4b53      	ldr	r3, [pc, #332]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b03      	cmp	r3, #3
 8006510:	d101      	bne.n	8006516 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e099      	b.n	800664a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006516:	4b4f      	ldr	r3, [pc, #316]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a4e      	ldr	r2, [pc, #312]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 800651c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006522:	f7fc fbd7 	bl	8002cd4 <HAL_GetTick>
 8006526:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006528:	e008      	b.n	800653c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800652a:	f7fc fbd3 	bl	8002cd4 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e086      	b.n	800664a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800653c:	4b45      	ldr	r3, [pc, #276]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f0      	bne.n	800652a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006548:	4b42      	ldr	r3, [pc, #264]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	051b      	lsls	r3, r3, #20
 8006556:	493f      	ldr	r1, [pc, #252]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006558:	4313      	orrs	r3, r2
 800655a:	628b      	str	r3, [r1, #40]	@ 0x28
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	3b01      	subs	r3, #1
 8006562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	3b01      	subs	r3, #1
 800656c:	025b      	lsls	r3, r3, #9
 800656e:	b29b      	uxth	r3, r3
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	3b01      	subs	r3, #1
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	3b01      	subs	r3, #1
 8006586:	061b      	lsls	r3, r3, #24
 8006588:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800658c:	4931      	ldr	r1, [pc, #196]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 800658e:	4313      	orrs	r3, r2
 8006590:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006592:	4b30      	ldr	r3, [pc, #192]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006596:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	492d      	ldr	r1, [pc, #180]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80065a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	4928      	ldr	r1, [pc, #160]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80065b6:	4b27      	ldr	r3, [pc, #156]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	4a26      	ldr	r2, [pc, #152]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80065c2:	4b24      	ldr	r3, [pc, #144]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065c6:	4b24      	ldr	r3, [pc, #144]	@ (8006658 <RCCEx_PLL3_Config+0x160>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	69d2      	ldr	r2, [r2, #28]
 80065ce:	00d2      	lsls	r2, r2, #3
 80065d0:	4920      	ldr	r1, [pc, #128]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80065d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065da:	4a1e      	ldr	r2, [pc, #120]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80065e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ec:	4a19      	ldr	r2, [pc, #100]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80065f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80065f4:	e00f      	b.n	8006616 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d106      	bne.n	800660a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80065fc:	4b15      	ldr	r3, [pc, #84]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 80065fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006600:	4a14      	ldr	r2, [pc, #80]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006602:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006608:	e005      	b.n	8006616 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800660a:	4b12      	ldr	r3, [pc, #72]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 800660c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660e:	4a11      	ldr	r2, [pc, #68]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006610:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006614:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006616:	4b0f      	ldr	r3, [pc, #60]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a0e      	ldr	r2, [pc, #56]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 800661c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006622:	f7fc fb57 	bl	8002cd4 <HAL_GetTick>
 8006626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006628:	e008      	b.n	800663c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800662a:	f7fc fb53 	bl	8002cd4 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e006      	b.n	800664a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800663c:	4b05      	ldr	r3, [pc, #20]	@ (8006654 <RCCEx_PLL3_Config+0x15c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006648:	7bfb      	ldrb	r3, [r7, #15]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	58024400 	.word	0x58024400
 8006658:	ffff0007 	.word	0xffff0007

0800665c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e042      	b.n	80066f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fc f8e1 	bl	8002848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2224      	movs	r2, #36	@ 0x24
 800668a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fe1e 	bl	80072e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f8b3 	bl	8006818 <UART_SetConfig>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e01b      	b.n	80066f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fe9d 	bl	800742c <UART_CheckIdleState>
 80066f2:	4603      	mov	r3, r0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	@ 0x28
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	4613      	mov	r3, r2
 800670a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006712:	2b20      	cmp	r3, #32
 8006714:	d17b      	bne.n	800680e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_UART_Transmit+0x26>
 800671c:	88fb      	ldrh	r3, [r7, #6]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e074      	b.n	8006810 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2221      	movs	r2, #33	@ 0x21
 8006732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006736:	f7fc facd 	bl	8002cd4 <HAL_GetTick>
 800673a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	88fa      	ldrh	r2, [r7, #6]
 8006740:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006754:	d108      	bne.n	8006768 <HAL_UART_Transmit+0x6c>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e003      	b.n	8006770 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006770:	e030      	b.n	80067d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2200      	movs	r2, #0
 800677a:	2180      	movs	r1, #128	@ 0x80
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 feff 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e03d      	b.n	8006810 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	3302      	adds	r3, #2
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	e007      	b.n	80067c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1c8      	bne.n	8006772 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2200      	movs	r2, #0
 80067e8:	2140      	movs	r1, #64	@ 0x40
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fec8 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e006      	b.n	8006810 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	e000      	b.n	8006810 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800680e:	2302      	movs	r3, #2
  }
}
 8006810:	4618      	mov	r0, r3
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800681c:	b092      	sub	sp, #72	@ 0x48
 800681e:	af00      	add	r7, sp, #0
 8006820:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	431a      	orrs	r2, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	431a      	orrs	r2, r3
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	4313      	orrs	r3, r2
 800683e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4bbe      	ldr	r3, [pc, #760]	@ (8006b40 <UART_SetConfig+0x328>)
 8006848:	4013      	ands	r3, r2
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006850:	430b      	orrs	r3, r1
 8006852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4ab3      	ldr	r2, [pc, #716]	@ (8006b44 <UART_SetConfig+0x32c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006880:	4313      	orrs	r3, r2
 8006882:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	4baf      	ldr	r3, [pc, #700]	@ (8006b48 <UART_SetConfig+0x330>)
 800688c:	4013      	ands	r3, r2
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	6812      	ldr	r2, [r2, #0]
 8006892:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006894:	430b      	orrs	r3, r1
 8006896:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689e:	f023 010f 	bic.w	r1, r3, #15
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4aa6      	ldr	r2, [pc, #664]	@ (8006b4c <UART_SetConfig+0x334>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d177      	bne.n	80069a8 <UART_SetConfig+0x190>
 80068b8:	4ba5      	ldr	r3, [pc, #660]	@ (8006b50 <UART_SetConfig+0x338>)
 80068ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068c0:	2b28      	cmp	r3, #40	@ 0x28
 80068c2:	d86d      	bhi.n	80069a0 <UART_SetConfig+0x188>
 80068c4:	a201      	add	r2, pc, #4	@ (adr r2, 80068cc <UART_SetConfig+0xb4>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	08006971 	.word	0x08006971
 80068d0:	080069a1 	.word	0x080069a1
 80068d4:	080069a1 	.word	0x080069a1
 80068d8:	080069a1 	.word	0x080069a1
 80068dc:	080069a1 	.word	0x080069a1
 80068e0:	080069a1 	.word	0x080069a1
 80068e4:	080069a1 	.word	0x080069a1
 80068e8:	080069a1 	.word	0x080069a1
 80068ec:	08006979 	.word	0x08006979
 80068f0:	080069a1 	.word	0x080069a1
 80068f4:	080069a1 	.word	0x080069a1
 80068f8:	080069a1 	.word	0x080069a1
 80068fc:	080069a1 	.word	0x080069a1
 8006900:	080069a1 	.word	0x080069a1
 8006904:	080069a1 	.word	0x080069a1
 8006908:	080069a1 	.word	0x080069a1
 800690c:	08006981 	.word	0x08006981
 8006910:	080069a1 	.word	0x080069a1
 8006914:	080069a1 	.word	0x080069a1
 8006918:	080069a1 	.word	0x080069a1
 800691c:	080069a1 	.word	0x080069a1
 8006920:	080069a1 	.word	0x080069a1
 8006924:	080069a1 	.word	0x080069a1
 8006928:	080069a1 	.word	0x080069a1
 800692c:	08006989 	.word	0x08006989
 8006930:	080069a1 	.word	0x080069a1
 8006934:	080069a1 	.word	0x080069a1
 8006938:	080069a1 	.word	0x080069a1
 800693c:	080069a1 	.word	0x080069a1
 8006940:	080069a1 	.word	0x080069a1
 8006944:	080069a1 	.word	0x080069a1
 8006948:	080069a1 	.word	0x080069a1
 800694c:	08006991 	.word	0x08006991
 8006950:	080069a1 	.word	0x080069a1
 8006954:	080069a1 	.word	0x080069a1
 8006958:	080069a1 	.word	0x080069a1
 800695c:	080069a1 	.word	0x080069a1
 8006960:	080069a1 	.word	0x080069a1
 8006964:	080069a1 	.word	0x080069a1
 8006968:	080069a1 	.word	0x080069a1
 800696c:	08006999 	.word	0x08006999
 8006970:	2301      	movs	r3, #1
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006976:	e222      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006978:	2304      	movs	r3, #4
 800697a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697e:	e21e      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006980:	2308      	movs	r3, #8
 8006982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006986:	e21a      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006988:	2310      	movs	r3, #16
 800698a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698e:	e216      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006990:	2320      	movs	r3, #32
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e212      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006998:	2340      	movs	r3, #64	@ 0x40
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e20e      	b.n	8006dbe <UART_SetConfig+0x5a6>
 80069a0:	2380      	movs	r3, #128	@ 0x80
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e20a      	b.n	8006dbe <UART_SetConfig+0x5a6>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a69      	ldr	r2, [pc, #420]	@ (8006b54 <UART_SetConfig+0x33c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d130      	bne.n	8006a14 <UART_SetConfig+0x1fc>
 80069b2:	4b67      	ldr	r3, [pc, #412]	@ (8006b50 <UART_SetConfig+0x338>)
 80069b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	d826      	bhi.n	8006a0c <UART_SetConfig+0x1f4>
 80069be:	a201      	add	r2, pc, #4	@ (adr r2, 80069c4 <UART_SetConfig+0x1ac>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	080069dd 	.word	0x080069dd
 80069c8:	080069e5 	.word	0x080069e5
 80069cc:	080069ed 	.word	0x080069ed
 80069d0:	080069f5 	.word	0x080069f5
 80069d4:	080069fd 	.word	0x080069fd
 80069d8:	08006a05 	.word	0x08006a05
 80069dc:	2300      	movs	r3, #0
 80069de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e2:	e1ec      	b.n	8006dbe <UART_SetConfig+0x5a6>
 80069e4:	2304      	movs	r3, #4
 80069e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ea:	e1e8      	b.n	8006dbe <UART_SetConfig+0x5a6>
 80069ec:	2308      	movs	r3, #8
 80069ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f2:	e1e4      	b.n	8006dbe <UART_SetConfig+0x5a6>
 80069f4:	2310      	movs	r3, #16
 80069f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fa:	e1e0      	b.n	8006dbe <UART_SetConfig+0x5a6>
 80069fc:	2320      	movs	r3, #32
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a02:	e1dc      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006a04:	2340      	movs	r3, #64	@ 0x40
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e1d8      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006a0c:	2380      	movs	r3, #128	@ 0x80
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a12:	e1d4      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a4f      	ldr	r2, [pc, #316]	@ (8006b58 <UART_SetConfig+0x340>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d130      	bne.n	8006a80 <UART_SetConfig+0x268>
 8006a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8006b50 <UART_SetConfig+0x338>)
 8006a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	2b05      	cmp	r3, #5
 8006a28:	d826      	bhi.n	8006a78 <UART_SetConfig+0x260>
 8006a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a30 <UART_SetConfig+0x218>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a49 	.word	0x08006a49
 8006a34:	08006a51 	.word	0x08006a51
 8006a38:	08006a59 	.word	0x08006a59
 8006a3c:	08006a61 	.word	0x08006a61
 8006a40:	08006a69 	.word	0x08006a69
 8006a44:	08006a71 	.word	0x08006a71
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4e:	e1b6      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a56:	e1b2      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	e1ae      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a66:	e1aa      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006a68:	2320      	movs	r3, #32
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6e:	e1a6      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006a70:	2340      	movs	r3, #64	@ 0x40
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a76:	e1a2      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006a78:	2380      	movs	r3, #128	@ 0x80
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7e:	e19e      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a35      	ldr	r2, [pc, #212]	@ (8006b5c <UART_SetConfig+0x344>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d130      	bne.n	8006aec <UART_SetConfig+0x2d4>
 8006a8a:	4b31      	ldr	r3, [pc, #196]	@ (8006b50 <UART_SetConfig+0x338>)
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	d826      	bhi.n	8006ae4 <UART_SetConfig+0x2cc>
 8006a96:	a201      	add	r2, pc, #4	@ (adr r2, 8006a9c <UART_SetConfig+0x284>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006ab5 	.word	0x08006ab5
 8006aa0:	08006abd 	.word	0x08006abd
 8006aa4:	08006ac5 	.word	0x08006ac5
 8006aa8:	08006acd 	.word	0x08006acd
 8006aac:	08006ad5 	.word	0x08006ad5
 8006ab0:	08006add 	.word	0x08006add
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aba:	e180      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006abc:	2304      	movs	r3, #4
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac2:	e17c      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006ac4:	2308      	movs	r3, #8
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aca:	e178      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006acc:	2310      	movs	r3, #16
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad2:	e174      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006ad4:	2320      	movs	r3, #32
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ada:	e170      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006adc:	2340      	movs	r3, #64	@ 0x40
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae2:	e16c      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006ae4:	2380      	movs	r3, #128	@ 0x80
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aea:	e168      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b60 <UART_SetConfig+0x348>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d142      	bne.n	8006b7c <UART_SetConfig+0x364>
 8006af6:	4b16      	ldr	r3, [pc, #88]	@ (8006b50 <UART_SetConfig+0x338>)
 8006af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	d838      	bhi.n	8006b74 <UART_SetConfig+0x35c>
 8006b02:	a201      	add	r2, pc, #4	@ (adr r2, 8006b08 <UART_SetConfig+0x2f0>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b21 	.word	0x08006b21
 8006b0c:	08006b29 	.word	0x08006b29
 8006b10:	08006b31 	.word	0x08006b31
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b65 	.word	0x08006b65
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	2300      	movs	r3, #0
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b26:	e14a      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2e:	e146      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006b30:	2308      	movs	r3, #8
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b36:	e142      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006b38:	2310      	movs	r3, #16
 8006b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b3e:	e13e      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006b40:	cfff69f3 	.word	0xcfff69f3
 8006b44:	58000c00 	.word	0x58000c00
 8006b48:	11fff4ff 	.word	0x11fff4ff
 8006b4c:	40011000 	.word	0x40011000
 8006b50:	58024400 	.word	0x58024400
 8006b54:	40004400 	.word	0x40004400
 8006b58:	40004800 	.word	0x40004800
 8006b5c:	40004c00 	.word	0x40004c00
 8006b60:	40005000 	.word	0x40005000
 8006b64:	2320      	movs	r3, #32
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b6a:	e128      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006b6c:	2340      	movs	r3, #64	@ 0x40
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b72:	e124      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006b74:	2380      	movs	r3, #128	@ 0x80
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b7a:	e120      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4acb      	ldr	r2, [pc, #812]	@ (8006eb0 <UART_SetConfig+0x698>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d176      	bne.n	8006c74 <UART_SetConfig+0x45c>
 8006b86:	4bcb      	ldr	r3, [pc, #812]	@ (8006eb4 <UART_SetConfig+0x69c>)
 8006b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b8e:	2b28      	cmp	r3, #40	@ 0x28
 8006b90:	d86c      	bhi.n	8006c6c <UART_SetConfig+0x454>
 8006b92:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <UART_SetConfig+0x380>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006c3d 	.word	0x08006c3d
 8006b9c:	08006c6d 	.word	0x08006c6d
 8006ba0:	08006c6d 	.word	0x08006c6d
 8006ba4:	08006c6d 	.word	0x08006c6d
 8006ba8:	08006c6d 	.word	0x08006c6d
 8006bac:	08006c6d 	.word	0x08006c6d
 8006bb0:	08006c6d 	.word	0x08006c6d
 8006bb4:	08006c6d 	.word	0x08006c6d
 8006bb8:	08006c45 	.word	0x08006c45
 8006bbc:	08006c6d 	.word	0x08006c6d
 8006bc0:	08006c6d 	.word	0x08006c6d
 8006bc4:	08006c6d 	.word	0x08006c6d
 8006bc8:	08006c6d 	.word	0x08006c6d
 8006bcc:	08006c6d 	.word	0x08006c6d
 8006bd0:	08006c6d 	.word	0x08006c6d
 8006bd4:	08006c6d 	.word	0x08006c6d
 8006bd8:	08006c4d 	.word	0x08006c4d
 8006bdc:	08006c6d 	.word	0x08006c6d
 8006be0:	08006c6d 	.word	0x08006c6d
 8006be4:	08006c6d 	.word	0x08006c6d
 8006be8:	08006c6d 	.word	0x08006c6d
 8006bec:	08006c6d 	.word	0x08006c6d
 8006bf0:	08006c6d 	.word	0x08006c6d
 8006bf4:	08006c6d 	.word	0x08006c6d
 8006bf8:	08006c55 	.word	0x08006c55
 8006bfc:	08006c6d 	.word	0x08006c6d
 8006c00:	08006c6d 	.word	0x08006c6d
 8006c04:	08006c6d 	.word	0x08006c6d
 8006c08:	08006c6d 	.word	0x08006c6d
 8006c0c:	08006c6d 	.word	0x08006c6d
 8006c10:	08006c6d 	.word	0x08006c6d
 8006c14:	08006c6d 	.word	0x08006c6d
 8006c18:	08006c5d 	.word	0x08006c5d
 8006c1c:	08006c6d 	.word	0x08006c6d
 8006c20:	08006c6d 	.word	0x08006c6d
 8006c24:	08006c6d 	.word	0x08006c6d
 8006c28:	08006c6d 	.word	0x08006c6d
 8006c2c:	08006c6d 	.word	0x08006c6d
 8006c30:	08006c6d 	.word	0x08006c6d
 8006c34:	08006c6d 	.word	0x08006c6d
 8006c38:	08006c65 	.word	0x08006c65
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c42:	e0bc      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006c44:	2304      	movs	r3, #4
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4a:	e0b8      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c52:	e0b4      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006c54:	2310      	movs	r3, #16
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5a:	e0b0      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006c5c:	2320      	movs	r3, #32
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c62:	e0ac      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006c64:	2340      	movs	r3, #64	@ 0x40
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c6a:	e0a8      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006c6c:	2380      	movs	r3, #128	@ 0x80
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c72:	e0a4      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a8f      	ldr	r2, [pc, #572]	@ (8006eb8 <UART_SetConfig+0x6a0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d130      	bne.n	8006ce0 <UART_SetConfig+0x4c8>
 8006c7e:	4b8d      	ldr	r3, [pc, #564]	@ (8006eb4 <UART_SetConfig+0x69c>)
 8006c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d826      	bhi.n	8006cd8 <UART_SetConfig+0x4c0>
 8006c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <UART_SetConfig+0x478>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006ca9 	.word	0x08006ca9
 8006c94:	08006cb1 	.word	0x08006cb1
 8006c98:	08006cb9 	.word	0x08006cb9
 8006c9c:	08006cc1 	.word	0x08006cc1
 8006ca0:	08006cc9 	.word	0x08006cc9
 8006ca4:	08006cd1 	.word	0x08006cd1
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cae:	e086      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb6:	e082      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006cb8:	2308      	movs	r3, #8
 8006cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cbe:	e07e      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc6:	e07a      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006cc8:	2320      	movs	r3, #32
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cce:	e076      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006cd0:	2340      	movs	r3, #64	@ 0x40
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd6:	e072      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006cd8:	2380      	movs	r3, #128	@ 0x80
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cde:	e06e      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a75      	ldr	r2, [pc, #468]	@ (8006ebc <UART_SetConfig+0x6a4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d130      	bne.n	8006d4c <UART_SetConfig+0x534>
 8006cea:	4b72      	ldr	r3, [pc, #456]	@ (8006eb4 <UART_SetConfig+0x69c>)
 8006cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	d826      	bhi.n	8006d44 <UART_SetConfig+0x52c>
 8006cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <UART_SetConfig+0x4e4>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d15 	.word	0x08006d15
 8006d00:	08006d1d 	.word	0x08006d1d
 8006d04:	08006d25 	.word	0x08006d25
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d35 	.word	0x08006d35
 8006d10:	08006d3d 	.word	0x08006d3d
 8006d14:	2300      	movs	r3, #0
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1a:	e050      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d22:	e04c      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006d24:	2308      	movs	r3, #8
 8006d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d2a:	e048      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d32:	e044      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006d34:	2320      	movs	r3, #32
 8006d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3a:	e040      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006d3c:	2340      	movs	r3, #64	@ 0x40
 8006d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d42:	e03c      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006d44:	2380      	movs	r3, #128	@ 0x80
 8006d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d4a:	e038      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a5b      	ldr	r2, [pc, #364]	@ (8006ec0 <UART_SetConfig+0x6a8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d130      	bne.n	8006db8 <UART_SetConfig+0x5a0>
 8006d56:	4b57      	ldr	r3, [pc, #348]	@ (8006eb4 <UART_SetConfig+0x69c>)
 8006d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d5a:	f003 0307 	and.w	r3, r3, #7
 8006d5e:	2b05      	cmp	r3, #5
 8006d60:	d826      	bhi.n	8006db0 <UART_SetConfig+0x598>
 8006d62:	a201      	add	r2, pc, #4	@ (adr r2, 8006d68 <UART_SetConfig+0x550>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d81 	.word	0x08006d81
 8006d6c:	08006d89 	.word	0x08006d89
 8006d70:	08006d91 	.word	0x08006d91
 8006d74:	08006d99 	.word	0x08006d99
 8006d78:	08006da1 	.word	0x08006da1
 8006d7c:	08006da9 	.word	0x08006da9
 8006d80:	2302      	movs	r3, #2
 8006d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d86:	e01a      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8e:	e016      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006d90:	2308      	movs	r3, #8
 8006d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d96:	e012      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9e:	e00e      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006da0:	2320      	movs	r3, #32
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da6:	e00a      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006da8:	2340      	movs	r3, #64	@ 0x40
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dae:	e006      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006db0:	2380      	movs	r3, #128	@ 0x80
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db6:	e002      	b.n	8006dbe <UART_SetConfig+0x5a6>
 8006db8:	2380      	movs	r3, #128	@ 0x80
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ec0 <UART_SetConfig+0x6a8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	f040 80f8 	bne.w	8006fba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	dc46      	bgt.n	8006e60 <UART_SetConfig+0x648>
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	f2c0 8082 	blt.w	8006edc <UART_SetConfig+0x6c4>
 8006dd8:	3b02      	subs	r3, #2
 8006dda:	2b1e      	cmp	r3, #30
 8006ddc:	d87e      	bhi.n	8006edc <UART_SetConfig+0x6c4>
 8006dde:	a201      	add	r2, pc, #4	@ (adr r2, 8006de4 <UART_SetConfig+0x5cc>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006e67 	.word	0x08006e67
 8006de8:	08006edd 	.word	0x08006edd
 8006dec:	08006e6f 	.word	0x08006e6f
 8006df0:	08006edd 	.word	0x08006edd
 8006df4:	08006edd 	.word	0x08006edd
 8006df8:	08006edd 	.word	0x08006edd
 8006dfc:	08006e7f 	.word	0x08006e7f
 8006e00:	08006edd 	.word	0x08006edd
 8006e04:	08006edd 	.word	0x08006edd
 8006e08:	08006edd 	.word	0x08006edd
 8006e0c:	08006edd 	.word	0x08006edd
 8006e10:	08006edd 	.word	0x08006edd
 8006e14:	08006edd 	.word	0x08006edd
 8006e18:	08006edd 	.word	0x08006edd
 8006e1c:	08006e8f 	.word	0x08006e8f
 8006e20:	08006edd 	.word	0x08006edd
 8006e24:	08006edd 	.word	0x08006edd
 8006e28:	08006edd 	.word	0x08006edd
 8006e2c:	08006edd 	.word	0x08006edd
 8006e30:	08006edd 	.word	0x08006edd
 8006e34:	08006edd 	.word	0x08006edd
 8006e38:	08006edd 	.word	0x08006edd
 8006e3c:	08006edd 	.word	0x08006edd
 8006e40:	08006edd 	.word	0x08006edd
 8006e44:	08006edd 	.word	0x08006edd
 8006e48:	08006edd 	.word	0x08006edd
 8006e4c:	08006edd 	.word	0x08006edd
 8006e50:	08006edd 	.word	0x08006edd
 8006e54:	08006edd 	.word	0x08006edd
 8006e58:	08006edd 	.word	0x08006edd
 8006e5c:	08006ecf 	.word	0x08006ecf
 8006e60:	2b40      	cmp	r3, #64	@ 0x40
 8006e62:	d037      	beq.n	8006ed4 <UART_SetConfig+0x6bc>
 8006e64:	e03a      	b.n	8006edc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e66:	f7fe ffd7 	bl	8005e18 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e6c:	e03c      	b.n	8006ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe ffe6 	bl	8005e44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e7c:	e034      	b.n	8006ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e7e:	f107 0318 	add.w	r3, r7, #24
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff f932 	bl	80060ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e8c:	e02c      	b.n	8006ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e8e:	4b09      	ldr	r3, [pc, #36]	@ (8006eb4 <UART_SetConfig+0x69c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d016      	beq.n	8006ec8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e9a:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <UART_SetConfig+0x69c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	08db      	lsrs	r3, r3, #3
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	4a07      	ldr	r2, [pc, #28]	@ (8006ec4 <UART_SetConfig+0x6ac>)
 8006ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006eac:	e01c      	b.n	8006ee8 <UART_SetConfig+0x6d0>
 8006eae:	bf00      	nop
 8006eb0:	40011400 	.word	0x40011400
 8006eb4:	58024400 	.word	0x58024400
 8006eb8:	40007800 	.word	0x40007800
 8006ebc:	40007c00 	.word	0x40007c00
 8006ec0:	58000c00 	.word	0x58000c00
 8006ec4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006ec8:	4b9d      	ldr	r3, [pc, #628]	@ (8007140 <UART_SetConfig+0x928>)
 8006eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ecc:	e00c      	b.n	8006ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ece:	4b9d      	ldr	r3, [pc, #628]	@ (8007144 <UART_SetConfig+0x92c>)
 8006ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed2:	e009      	b.n	8006ee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ed4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eda:	e005      	b.n	8006ee8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ee6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 81de 	beq.w	80072ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef4:	4a94      	ldr	r2, [pc, #592]	@ (8007148 <UART_SetConfig+0x930>)
 8006ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006efa:	461a      	mov	r2, r3
 8006efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006efe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f02:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	4413      	add	r3, r2
 8006f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d305      	bcc.n	8006f20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d903      	bls.n	8006f28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f26:	e1c1      	b.n	80072ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	60bb      	str	r3, [r7, #8]
 8006f2e:	60fa      	str	r2, [r7, #12]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f34:	4a84      	ldr	r2, [pc, #528]	@ (8007148 <UART_SetConfig+0x930>)
 8006f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	607a      	str	r2, [r7, #4]
 8006f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f4a:	f7fa fac1 	bl	80014d0 <__aeabi_uldivmod>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4610      	mov	r0, r2
 8006f54:	4619      	mov	r1, r3
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	020b      	lsls	r3, r1, #8
 8006f60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f64:	0202      	lsls	r2, r0, #8
 8006f66:	6979      	ldr	r1, [r7, #20]
 8006f68:	6849      	ldr	r1, [r1, #4]
 8006f6a:	0849      	lsrs	r1, r1, #1
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	4605      	mov	r5, r0
 8006f72:	eb12 0804 	adds.w	r8, r2, r4
 8006f76:	eb43 0905 	adc.w	r9, r3, r5
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	469a      	mov	sl, r3
 8006f82:	4693      	mov	fp, r2
 8006f84:	4652      	mov	r2, sl
 8006f86:	465b      	mov	r3, fp
 8006f88:	4640      	mov	r0, r8
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	f7fa faa0 	bl	80014d0 <__aeabi_uldivmod>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4613      	mov	r3, r2
 8006f96:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f9e:	d308      	bcc.n	8006fb2 <UART_SetConfig+0x79a>
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fa6:	d204      	bcs.n	8006fb2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fae:	60da      	str	r2, [r3, #12]
 8006fb0:	e17c      	b.n	80072ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006fb8:	e178      	b.n	80072ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fc2:	f040 80c5 	bne.w	8007150 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006fc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	dc48      	bgt.n	8007060 <UART_SetConfig+0x848>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	db7b      	blt.n	80070ca <UART_SetConfig+0x8b2>
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d879      	bhi.n	80070ca <UART_SetConfig+0x8b2>
 8006fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fdc <UART_SetConfig+0x7c4>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	08007067 	.word	0x08007067
 8006fe0:	0800706f 	.word	0x0800706f
 8006fe4:	080070cb 	.word	0x080070cb
 8006fe8:	080070cb 	.word	0x080070cb
 8006fec:	08007077 	.word	0x08007077
 8006ff0:	080070cb 	.word	0x080070cb
 8006ff4:	080070cb 	.word	0x080070cb
 8006ff8:	080070cb 	.word	0x080070cb
 8006ffc:	08007087 	.word	0x08007087
 8007000:	080070cb 	.word	0x080070cb
 8007004:	080070cb 	.word	0x080070cb
 8007008:	080070cb 	.word	0x080070cb
 800700c:	080070cb 	.word	0x080070cb
 8007010:	080070cb 	.word	0x080070cb
 8007014:	080070cb 	.word	0x080070cb
 8007018:	080070cb 	.word	0x080070cb
 800701c:	08007097 	.word	0x08007097
 8007020:	080070cb 	.word	0x080070cb
 8007024:	080070cb 	.word	0x080070cb
 8007028:	080070cb 	.word	0x080070cb
 800702c:	080070cb 	.word	0x080070cb
 8007030:	080070cb 	.word	0x080070cb
 8007034:	080070cb 	.word	0x080070cb
 8007038:	080070cb 	.word	0x080070cb
 800703c:	080070cb 	.word	0x080070cb
 8007040:	080070cb 	.word	0x080070cb
 8007044:	080070cb 	.word	0x080070cb
 8007048:	080070cb 	.word	0x080070cb
 800704c:	080070cb 	.word	0x080070cb
 8007050:	080070cb 	.word	0x080070cb
 8007054:	080070cb 	.word	0x080070cb
 8007058:	080070cb 	.word	0x080070cb
 800705c:	080070bd 	.word	0x080070bd
 8007060:	2b40      	cmp	r3, #64	@ 0x40
 8007062:	d02e      	beq.n	80070c2 <UART_SetConfig+0x8aa>
 8007064:	e031      	b.n	80070ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007066:	f7fd fca1 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 800706a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800706c:	e033      	b.n	80070d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800706e:	f7fd fcb3 	bl	80049d8 <HAL_RCC_GetPCLK2Freq>
 8007072:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007074:	e02f      	b.n	80070d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fee2 	bl	8005e44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007084:	e027      	b.n	80070d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007086:	f107 0318 	add.w	r3, r7, #24
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff f82e 	bl	80060ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007094:	e01f      	b.n	80070d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007096:	4b2d      	ldr	r3, [pc, #180]	@ (800714c <UART_SetConfig+0x934>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070a2:	4b2a      	ldr	r3, [pc, #168]	@ (800714c <UART_SetConfig+0x934>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	08db      	lsrs	r3, r3, #3
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	4a24      	ldr	r2, [pc, #144]	@ (8007140 <UART_SetConfig+0x928>)
 80070ae:	fa22 f303 	lsr.w	r3, r2, r3
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070b4:	e00f      	b.n	80070d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80070b6:	4b22      	ldr	r3, [pc, #136]	@ (8007140 <UART_SetConfig+0x928>)
 80070b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070ba:	e00c      	b.n	80070d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070bc:	4b21      	ldr	r3, [pc, #132]	@ (8007144 <UART_SetConfig+0x92c>)
 80070be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c0:	e009      	b.n	80070d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c8:	e005      	b.n	80070d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80070d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80e7 	beq.w	80072ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e2:	4a19      	ldr	r2, [pc, #100]	@ (8007148 <UART_SetConfig+0x930>)
 80070e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e8:	461a      	mov	r2, r3
 80070ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80070f0:	005a      	lsls	r2, r3, #1
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	441a      	add	r2, r3
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007106:	2b0f      	cmp	r3, #15
 8007108:	d916      	bls.n	8007138 <UART_SetConfig+0x920>
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007110:	d212      	bcs.n	8007138 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007114:	b29b      	uxth	r3, r3
 8007116:	f023 030f 	bic.w	r3, r3, #15
 800711a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	085b      	lsrs	r3, r3, #1
 8007120:	b29b      	uxth	r3, r3
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	b29a      	uxth	r2, r3
 8007128:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800712a:	4313      	orrs	r3, r2
 800712c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007134:	60da      	str	r2, [r3, #12]
 8007136:	e0b9      	b.n	80072ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800713e:	e0b5      	b.n	80072ac <UART_SetConfig+0xa94>
 8007140:	03d09000 	.word	0x03d09000
 8007144:	003d0900 	.word	0x003d0900
 8007148:	08008400 	.word	0x08008400
 800714c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007150:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007154:	2b20      	cmp	r3, #32
 8007156:	dc49      	bgt.n	80071ec <UART_SetConfig+0x9d4>
 8007158:	2b00      	cmp	r3, #0
 800715a:	db7c      	blt.n	8007256 <UART_SetConfig+0xa3e>
 800715c:	2b20      	cmp	r3, #32
 800715e:	d87a      	bhi.n	8007256 <UART_SetConfig+0xa3e>
 8007160:	a201      	add	r2, pc, #4	@ (adr r2, 8007168 <UART_SetConfig+0x950>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	080071f3 	.word	0x080071f3
 800716c:	080071fb 	.word	0x080071fb
 8007170:	08007257 	.word	0x08007257
 8007174:	08007257 	.word	0x08007257
 8007178:	08007203 	.word	0x08007203
 800717c:	08007257 	.word	0x08007257
 8007180:	08007257 	.word	0x08007257
 8007184:	08007257 	.word	0x08007257
 8007188:	08007213 	.word	0x08007213
 800718c:	08007257 	.word	0x08007257
 8007190:	08007257 	.word	0x08007257
 8007194:	08007257 	.word	0x08007257
 8007198:	08007257 	.word	0x08007257
 800719c:	08007257 	.word	0x08007257
 80071a0:	08007257 	.word	0x08007257
 80071a4:	08007257 	.word	0x08007257
 80071a8:	08007223 	.word	0x08007223
 80071ac:	08007257 	.word	0x08007257
 80071b0:	08007257 	.word	0x08007257
 80071b4:	08007257 	.word	0x08007257
 80071b8:	08007257 	.word	0x08007257
 80071bc:	08007257 	.word	0x08007257
 80071c0:	08007257 	.word	0x08007257
 80071c4:	08007257 	.word	0x08007257
 80071c8:	08007257 	.word	0x08007257
 80071cc:	08007257 	.word	0x08007257
 80071d0:	08007257 	.word	0x08007257
 80071d4:	08007257 	.word	0x08007257
 80071d8:	08007257 	.word	0x08007257
 80071dc:	08007257 	.word	0x08007257
 80071e0:	08007257 	.word	0x08007257
 80071e4:	08007257 	.word	0x08007257
 80071e8:	08007249 	.word	0x08007249
 80071ec:	2b40      	cmp	r3, #64	@ 0x40
 80071ee:	d02e      	beq.n	800724e <UART_SetConfig+0xa36>
 80071f0:	e031      	b.n	8007256 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071f2:	f7fd fbdb 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 80071f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f8:	e033      	b.n	8007262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071fa:	f7fd fbed 	bl	80049d8 <HAL_RCC_GetPCLK2Freq>
 80071fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007200:	e02f      	b.n	8007262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fe1c 	bl	8005e44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800720c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007210:	e027      	b.n	8007262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007212:	f107 0318 	add.w	r3, r7, #24
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe ff68 	bl	80060ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007220:	e01f      	b.n	8007262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007222:	4b2d      	ldr	r3, [pc, #180]	@ (80072d8 <UART_SetConfig+0xac0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800722e:	4b2a      	ldr	r3, [pc, #168]	@ (80072d8 <UART_SetConfig+0xac0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	08db      	lsrs	r3, r3, #3
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	4a28      	ldr	r2, [pc, #160]	@ (80072dc <UART_SetConfig+0xac4>)
 800723a:	fa22 f303 	lsr.w	r3, r2, r3
 800723e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007240:	e00f      	b.n	8007262 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007242:	4b26      	ldr	r3, [pc, #152]	@ (80072dc <UART_SetConfig+0xac4>)
 8007244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007246:	e00c      	b.n	8007262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007248:	4b25      	ldr	r3, [pc, #148]	@ (80072e0 <UART_SetConfig+0xac8>)
 800724a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800724c:	e009      	b.n	8007262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800724e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007254:	e005      	b.n	8007262 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007260:	bf00      	nop
    }

    if (pclk != 0U)
 8007262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007264:	2b00      	cmp	r3, #0
 8007266:	d021      	beq.n	80072ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726c:	4a1d      	ldr	r2, [pc, #116]	@ (80072e4 <UART_SetConfig+0xacc>)
 800726e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007272:	461a      	mov	r2, r3
 8007274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007276:	fbb3 f2f2 	udiv	r2, r3, r2
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	085b      	lsrs	r3, r3, #1
 8007280:	441a      	add	r2, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	fbb2 f3f3 	udiv	r3, r2, r3
 800728a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728e:	2b0f      	cmp	r3, #15
 8007290:	d909      	bls.n	80072a6 <UART_SetConfig+0xa8e>
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007298:	d205      	bcs.n	80072a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800729a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729c:	b29a      	uxth	r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	60da      	str	r2, [r3, #12]
 80072a4:	e002      	b.n	80072ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2200      	movs	r2, #0
 80072c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2200      	movs	r2, #0
 80072c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3748      	adds	r7, #72	@ 0x48
 80072d0:	46bd      	mov	sp, r7
 80072d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072d6:	bf00      	nop
 80072d8:	58024400 	.word	0x58024400
 80072dc:	03d09000 	.word	0x03d09000
 80072e0:	003d0900 	.word	0x003d0900
 80072e4:	08008400 	.word	0x08008400

080072e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f4:	f003 0308 	and.w	r3, r3, #8
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00a      	beq.n	8007312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737c:	f003 0310 	and.w	r3, r3, #16
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01a      	beq.n	80073fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073e6:	d10a      	bne.n	80073fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	605a      	str	r2, [r3, #4]
  }
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b098      	sub	sp, #96	@ 0x60
 8007430:	af02      	add	r7, sp, #8
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800743c:	f7fb fc4a 	bl	8002cd4 <HAL_GetTick>
 8007440:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b08      	cmp	r3, #8
 800744e:	d12f      	bne.n	80074b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007458:	2200      	movs	r2, #0
 800745a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f88e 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d022      	beq.n	80074b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800747e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007488:	647b      	str	r3, [r7, #68]	@ 0x44
 800748a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800748e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e063      	b.n	8007578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d149      	bne.n	8007552 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c6:	2200      	movs	r2, #0
 80074c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f857 	bl	8007580 <UART_WaitOnFlagUntilTimeout>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d03c      	beq.n	8007552 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	623b      	str	r3, [r7, #32]
   return(result);
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80074f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e6      	bne.n	80074d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3308      	adds	r3, #8
 8007510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	60fb      	str	r3, [r7, #12]
   return(result);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3308      	adds	r3, #8
 8007528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800752a:	61fa      	str	r2, [r7, #28]
 800752c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	69b9      	ldr	r1, [r7, #24]
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	617b      	str	r3, [r7, #20]
   return(result);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e5      	bne.n	800750a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e012      	b.n	8007578 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2220      	movs	r2, #32
 8007556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3758      	adds	r7, #88	@ 0x58
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	4613      	mov	r3, r2
 800758e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007590:	e04f      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007598:	d04b      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800759a:	f7fb fb9b 	bl	8002cd4 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d302      	bcc.n	80075b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e04e      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d037      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b80      	cmp	r3, #128	@ 0x80
 80075c6:	d034      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b40      	cmp	r3, #64	@ 0x40
 80075cc:	d031      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d110      	bne.n	80075fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2208      	movs	r2, #8
 80075e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f839 	bl	800765c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2208      	movs	r2, #8
 80075ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e029      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800760c:	d111      	bne.n	8007632 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f81f 	bl	800765c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2220      	movs	r2, #32
 8007622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e00f      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69da      	ldr	r2, [r3, #28]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4013      	ands	r3, r2
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	429a      	cmp	r2, r3
 8007640:	bf0c      	ite	eq
 8007642:	2301      	moveq	r3, #1
 8007644:	2300      	movne	r3, #0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	79fb      	ldrb	r3, [r7, #7]
 800764c:	429a      	cmp	r2, r3
 800764e:	d0a0      	beq.n	8007592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b095      	sub	sp, #84	@ 0x54
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007682:	643b      	str	r3, [r7, #64]	@ 0x40
 8007684:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007688:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e6      	bne.n	8007664 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	4b1e      	ldr	r3, [pc, #120]	@ (8007724 <UART_EndRxTransfer+0xc8>)
 80076aa:	4013      	ands	r3, r2
 80076ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3308      	adds	r3, #8
 80076b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e5      	bne.n	8007696 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d118      	bne.n	8007704 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	60bb      	str	r3, [r7, #8]
   return(result);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f023 0310 	bic.w	r3, r3, #16
 80076e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6979      	ldr	r1, [r7, #20]
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	613b      	str	r3, [r7, #16]
   return(result);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e6      	bne.n	80076d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007718:	bf00      	nop
 800771a:	3754      	adds	r7, #84	@ 0x54
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	effffffe 	.word	0xeffffffe

08007728 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007736:	2b01      	cmp	r3, #1
 8007738:	d101      	bne.n	800773e <HAL_UARTEx_DisableFifoMode+0x16>
 800773a:	2302      	movs	r3, #2
 800773c:	e027      	b.n	800778e <HAL_UARTEx_DisableFifoMode+0x66>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2224      	movs	r2, #36	@ 0x24
 800774a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0201 	bic.w	r2, r2, #1
 8007764:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800776c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d101      	bne.n	80077b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077ae:	2302      	movs	r3, #2
 80077b0:	e02d      	b.n	800780e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2224      	movs	r2, #36	@ 0x24
 80077be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0201 	bic.w	r2, r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f850 	bl	8007894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2220      	movs	r2, #32
 8007800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800782a:	2302      	movs	r3, #2
 800782c:	e02d      	b.n	800788a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2224      	movs	r2, #36	@ 0x24
 800783a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 0201 	bic.w	r2, r2, #1
 8007854:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f812 	bl	8007894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2220      	movs	r2, #32
 800787c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d108      	bne.n	80078b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078b4:	e031      	b.n	800791a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078b6:	2310      	movs	r3, #16
 80078b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078ba:	2310      	movs	r3, #16
 80078bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	0e5b      	lsrs	r3, r3, #25
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	0f5b      	lsrs	r3, r3, #29
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	7b3a      	ldrb	r2, [r7, #12]
 80078e2:	4911      	ldr	r1, [pc, #68]	@ (8007928 <UARTEx_SetNbDataToProcess+0x94>)
 80078e4:	5c8a      	ldrb	r2, [r1, r2]
 80078e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078ea:	7b3a      	ldrb	r2, [r7, #12]
 80078ec:	490f      	ldr	r1, [pc, #60]	@ (800792c <UARTEx_SetNbDataToProcess+0x98>)
 80078ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	7b7a      	ldrb	r2, [r7, #13]
 8007900:	4909      	ldr	r1, [pc, #36]	@ (8007928 <UARTEx_SetNbDataToProcess+0x94>)
 8007902:	5c8a      	ldrb	r2, [r1, r2]
 8007904:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007908:	7b7a      	ldrb	r2, [r7, #13]
 800790a:	4908      	ldr	r1, [pc, #32]	@ (800792c <UARTEx_SetNbDataToProcess+0x98>)
 800790c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800790e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007912:	b29a      	uxth	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800791a:	bf00      	nop
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	08008418 	.word	0x08008418
 800792c:	08008420 	.word	0x08008420

08007930 <_vsiprintf_r>:
 8007930:	b500      	push	{lr}
 8007932:	b09b      	sub	sp, #108	@ 0x6c
 8007934:	9100      	str	r1, [sp, #0]
 8007936:	9104      	str	r1, [sp, #16]
 8007938:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800793c:	9105      	str	r1, [sp, #20]
 800793e:	9102      	str	r1, [sp, #8]
 8007940:	4905      	ldr	r1, [pc, #20]	@ (8007958 <_vsiprintf_r+0x28>)
 8007942:	9103      	str	r1, [sp, #12]
 8007944:	4669      	mov	r1, sp
 8007946:	f000 f9bd 	bl	8007cc4 <_svfiprintf_r>
 800794a:	9b00      	ldr	r3, [sp, #0]
 800794c:	2200      	movs	r2, #0
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	b01b      	add	sp, #108	@ 0x6c
 8007952:	f85d fb04 	ldr.w	pc, [sp], #4
 8007956:	bf00      	nop
 8007958:	ffff0208 	.word	0xffff0208

0800795c <vsiprintf>:
 800795c:	4613      	mov	r3, r2
 800795e:	460a      	mov	r2, r1
 8007960:	4601      	mov	r1, r0
 8007962:	4802      	ldr	r0, [pc, #8]	@ (800796c <vsiprintf+0x10>)
 8007964:	6800      	ldr	r0, [r0, #0]
 8007966:	f7ff bfe3 	b.w	8007930 <_vsiprintf_r>
 800796a:	bf00      	nop
 800796c:	24000030 	.word	0x24000030

08007970 <memcmp>:
 8007970:	b510      	push	{r4, lr}
 8007972:	3901      	subs	r1, #1
 8007974:	4402      	add	r2, r0
 8007976:	4290      	cmp	r0, r2
 8007978:	d101      	bne.n	800797e <memcmp+0xe>
 800797a:	2000      	movs	r0, #0
 800797c:	e005      	b.n	800798a <memcmp+0x1a>
 800797e:	7803      	ldrb	r3, [r0, #0]
 8007980:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007984:	42a3      	cmp	r3, r4
 8007986:	d001      	beq.n	800798c <memcmp+0x1c>
 8007988:	1b18      	subs	r0, r3, r4
 800798a:	bd10      	pop	{r4, pc}
 800798c:	3001      	adds	r0, #1
 800798e:	e7f2      	b.n	8007976 <memcmp+0x6>

08007990 <memset>:
 8007990:	4402      	add	r2, r0
 8007992:	4603      	mov	r3, r0
 8007994:	4293      	cmp	r3, r2
 8007996:	d100      	bne.n	800799a <memset+0xa>
 8007998:	4770      	bx	lr
 800799a:	f803 1b01 	strb.w	r1, [r3], #1
 800799e:	e7f9      	b.n	8007994 <memset+0x4>

080079a0 <__errno>:
 80079a0:	4b01      	ldr	r3, [pc, #4]	@ (80079a8 <__errno+0x8>)
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	24000030 	.word	0x24000030

080079ac <__libc_init_array>:
 80079ac:	b570      	push	{r4, r5, r6, lr}
 80079ae:	4d0d      	ldr	r5, [pc, #52]	@ (80079e4 <__libc_init_array+0x38>)
 80079b0:	4c0d      	ldr	r4, [pc, #52]	@ (80079e8 <__libc_init_array+0x3c>)
 80079b2:	1b64      	subs	r4, r4, r5
 80079b4:	10a4      	asrs	r4, r4, #2
 80079b6:	2600      	movs	r6, #0
 80079b8:	42a6      	cmp	r6, r4
 80079ba:	d109      	bne.n	80079d0 <__libc_init_array+0x24>
 80079bc:	4d0b      	ldr	r5, [pc, #44]	@ (80079ec <__libc_init_array+0x40>)
 80079be:	4c0c      	ldr	r4, [pc, #48]	@ (80079f0 <__libc_init_array+0x44>)
 80079c0:	f000 fc6a 	bl	8008298 <_init>
 80079c4:	1b64      	subs	r4, r4, r5
 80079c6:	10a4      	asrs	r4, r4, #2
 80079c8:	2600      	movs	r6, #0
 80079ca:	42a6      	cmp	r6, r4
 80079cc:	d105      	bne.n	80079da <__libc_init_array+0x2e>
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d4:	4798      	blx	r3
 80079d6:	3601      	adds	r6, #1
 80079d8:	e7ee      	b.n	80079b8 <__libc_init_array+0xc>
 80079da:	f855 3b04 	ldr.w	r3, [r5], #4
 80079de:	4798      	blx	r3
 80079e0:	3601      	adds	r6, #1
 80079e2:	e7f2      	b.n	80079ca <__libc_init_array+0x1e>
 80079e4:	08008964 	.word	0x08008964
 80079e8:	08008964 	.word	0x08008964
 80079ec:	08008964 	.word	0x08008964
 80079f0:	08008968 	.word	0x08008968

080079f4 <__retarget_lock_acquire_recursive>:
 80079f4:	4770      	bx	lr

080079f6 <__retarget_lock_release_recursive>:
 80079f6:	4770      	bx	lr

080079f8 <__aeabi_memclr>:
 80079f8:	2200      	movs	r2, #0
 80079fa:	f7f9 bccc 	b.w	8001396 <__aeabi_memset>

080079fe <memcpy>:
 80079fe:	440a      	add	r2, r1
 8007a00:	4291      	cmp	r1, r2
 8007a02:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a06:	d100      	bne.n	8007a0a <memcpy+0xc>
 8007a08:	4770      	bx	lr
 8007a0a:	b510      	push	{r4, lr}
 8007a0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a14:	4291      	cmp	r1, r2
 8007a16:	d1f9      	bne.n	8007a0c <memcpy+0xe>
 8007a18:	bd10      	pop	{r4, pc}
	...

08007a1c <_free_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	4605      	mov	r5, r0
 8007a20:	2900      	cmp	r1, #0
 8007a22:	d041      	beq.n	8007aa8 <_free_r+0x8c>
 8007a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a28:	1f0c      	subs	r4, r1, #4
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bfb8      	it	lt
 8007a2e:	18e4      	addlt	r4, r4, r3
 8007a30:	f000 f8e0 	bl	8007bf4 <__malloc_lock>
 8007a34:	4a1d      	ldr	r2, [pc, #116]	@ (8007aac <_free_r+0x90>)
 8007a36:	6813      	ldr	r3, [r2, #0]
 8007a38:	b933      	cbnz	r3, 8007a48 <_free_r+0x2c>
 8007a3a:	6063      	str	r3, [r4, #4]
 8007a3c:	6014      	str	r4, [r2, #0]
 8007a3e:	4628      	mov	r0, r5
 8007a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a44:	f000 b8dc 	b.w	8007c00 <__malloc_unlock>
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	d908      	bls.n	8007a5e <_free_r+0x42>
 8007a4c:	6820      	ldr	r0, [r4, #0]
 8007a4e:	1821      	adds	r1, r4, r0
 8007a50:	428b      	cmp	r3, r1
 8007a52:	bf01      	itttt	eq
 8007a54:	6819      	ldreq	r1, [r3, #0]
 8007a56:	685b      	ldreq	r3, [r3, #4]
 8007a58:	1809      	addeq	r1, r1, r0
 8007a5a:	6021      	streq	r1, [r4, #0]
 8007a5c:	e7ed      	b.n	8007a3a <_free_r+0x1e>
 8007a5e:	461a      	mov	r2, r3
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	b10b      	cbz	r3, 8007a68 <_free_r+0x4c>
 8007a64:	42a3      	cmp	r3, r4
 8007a66:	d9fa      	bls.n	8007a5e <_free_r+0x42>
 8007a68:	6811      	ldr	r1, [r2, #0]
 8007a6a:	1850      	adds	r0, r2, r1
 8007a6c:	42a0      	cmp	r0, r4
 8007a6e:	d10b      	bne.n	8007a88 <_free_r+0x6c>
 8007a70:	6820      	ldr	r0, [r4, #0]
 8007a72:	4401      	add	r1, r0
 8007a74:	1850      	adds	r0, r2, r1
 8007a76:	4283      	cmp	r3, r0
 8007a78:	6011      	str	r1, [r2, #0]
 8007a7a:	d1e0      	bne.n	8007a3e <_free_r+0x22>
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	6053      	str	r3, [r2, #4]
 8007a82:	4408      	add	r0, r1
 8007a84:	6010      	str	r0, [r2, #0]
 8007a86:	e7da      	b.n	8007a3e <_free_r+0x22>
 8007a88:	d902      	bls.n	8007a90 <_free_r+0x74>
 8007a8a:	230c      	movs	r3, #12
 8007a8c:	602b      	str	r3, [r5, #0]
 8007a8e:	e7d6      	b.n	8007a3e <_free_r+0x22>
 8007a90:	6820      	ldr	r0, [r4, #0]
 8007a92:	1821      	adds	r1, r4, r0
 8007a94:	428b      	cmp	r3, r1
 8007a96:	bf04      	itt	eq
 8007a98:	6819      	ldreq	r1, [r3, #0]
 8007a9a:	685b      	ldreq	r3, [r3, #4]
 8007a9c:	6063      	str	r3, [r4, #4]
 8007a9e:	bf04      	itt	eq
 8007aa0:	1809      	addeq	r1, r1, r0
 8007aa2:	6021      	streq	r1, [r4, #0]
 8007aa4:	6054      	str	r4, [r2, #4]
 8007aa6:	e7ca      	b.n	8007a3e <_free_r+0x22>
 8007aa8:	bd38      	pop	{r3, r4, r5, pc}
 8007aaa:	bf00      	nop
 8007aac:	240002dc 	.word	0x240002dc

08007ab0 <sbrk_aligned>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8007af0 <sbrk_aligned+0x40>)
 8007ab4:	460c      	mov	r4, r1
 8007ab6:	6831      	ldr	r1, [r6, #0]
 8007ab8:	4605      	mov	r5, r0
 8007aba:	b911      	cbnz	r1, 8007ac2 <sbrk_aligned+0x12>
 8007abc:	f000 fba6 	bl	800820c <_sbrk_r>
 8007ac0:	6030      	str	r0, [r6, #0]
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 fba1 	bl	800820c <_sbrk_r>
 8007aca:	1c43      	adds	r3, r0, #1
 8007acc:	d103      	bne.n	8007ad6 <sbrk_aligned+0x26>
 8007ace:	f04f 34ff 	mov.w	r4, #4294967295
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	bd70      	pop	{r4, r5, r6, pc}
 8007ad6:	1cc4      	adds	r4, r0, #3
 8007ad8:	f024 0403 	bic.w	r4, r4, #3
 8007adc:	42a0      	cmp	r0, r4
 8007ade:	d0f8      	beq.n	8007ad2 <sbrk_aligned+0x22>
 8007ae0:	1a21      	subs	r1, r4, r0
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 fb92 	bl	800820c <_sbrk_r>
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d1f2      	bne.n	8007ad2 <sbrk_aligned+0x22>
 8007aec:	e7ef      	b.n	8007ace <sbrk_aligned+0x1e>
 8007aee:	bf00      	nop
 8007af0:	240002d8 	.word	0x240002d8

08007af4 <_malloc_r>:
 8007af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007af8:	1ccd      	adds	r5, r1, #3
 8007afa:	f025 0503 	bic.w	r5, r5, #3
 8007afe:	3508      	adds	r5, #8
 8007b00:	2d0c      	cmp	r5, #12
 8007b02:	bf38      	it	cc
 8007b04:	250c      	movcc	r5, #12
 8007b06:	2d00      	cmp	r5, #0
 8007b08:	4606      	mov	r6, r0
 8007b0a:	db01      	blt.n	8007b10 <_malloc_r+0x1c>
 8007b0c:	42a9      	cmp	r1, r5
 8007b0e:	d904      	bls.n	8007b1a <_malloc_r+0x26>
 8007b10:	230c      	movs	r3, #12
 8007b12:	6033      	str	r3, [r6, #0]
 8007b14:	2000      	movs	r0, #0
 8007b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bf0 <_malloc_r+0xfc>
 8007b1e:	f000 f869 	bl	8007bf4 <__malloc_lock>
 8007b22:	f8d8 3000 	ldr.w	r3, [r8]
 8007b26:	461c      	mov	r4, r3
 8007b28:	bb44      	cbnz	r4, 8007b7c <_malloc_r+0x88>
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f7ff ffbf 	bl	8007ab0 <sbrk_aligned>
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	4604      	mov	r4, r0
 8007b36:	d158      	bne.n	8007bea <_malloc_r+0xf6>
 8007b38:	f8d8 4000 	ldr.w	r4, [r8]
 8007b3c:	4627      	mov	r7, r4
 8007b3e:	2f00      	cmp	r7, #0
 8007b40:	d143      	bne.n	8007bca <_malloc_r+0xd6>
 8007b42:	2c00      	cmp	r4, #0
 8007b44:	d04b      	beq.n	8007bde <_malloc_r+0xea>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	4639      	mov	r1, r7
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	eb04 0903 	add.w	r9, r4, r3
 8007b50:	f000 fb5c 	bl	800820c <_sbrk_r>
 8007b54:	4581      	cmp	r9, r0
 8007b56:	d142      	bne.n	8007bde <_malloc_r+0xea>
 8007b58:	6821      	ldr	r1, [r4, #0]
 8007b5a:	1a6d      	subs	r5, r5, r1
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7ff ffa6 	bl	8007ab0 <sbrk_aligned>
 8007b64:	3001      	adds	r0, #1
 8007b66:	d03a      	beq.n	8007bde <_malloc_r+0xea>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	442b      	add	r3, r5
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	bb62      	cbnz	r2, 8007bd0 <_malloc_r+0xdc>
 8007b76:	f8c8 7000 	str.w	r7, [r8]
 8007b7a:	e00f      	b.n	8007b9c <_malloc_r+0xa8>
 8007b7c:	6822      	ldr	r2, [r4, #0]
 8007b7e:	1b52      	subs	r2, r2, r5
 8007b80:	d420      	bmi.n	8007bc4 <_malloc_r+0xd0>
 8007b82:	2a0b      	cmp	r2, #11
 8007b84:	d917      	bls.n	8007bb6 <_malloc_r+0xc2>
 8007b86:	1961      	adds	r1, r4, r5
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	6025      	str	r5, [r4, #0]
 8007b8c:	bf18      	it	ne
 8007b8e:	6059      	strne	r1, [r3, #4]
 8007b90:	6863      	ldr	r3, [r4, #4]
 8007b92:	bf08      	it	eq
 8007b94:	f8c8 1000 	streq.w	r1, [r8]
 8007b98:	5162      	str	r2, [r4, r5]
 8007b9a:	604b      	str	r3, [r1, #4]
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f000 f82f 	bl	8007c00 <__malloc_unlock>
 8007ba2:	f104 000b 	add.w	r0, r4, #11
 8007ba6:	1d23      	adds	r3, r4, #4
 8007ba8:	f020 0007 	bic.w	r0, r0, #7
 8007bac:	1ac2      	subs	r2, r0, r3
 8007bae:	bf1c      	itt	ne
 8007bb0:	1a1b      	subne	r3, r3, r0
 8007bb2:	50a3      	strne	r3, [r4, r2]
 8007bb4:	e7af      	b.n	8007b16 <_malloc_r+0x22>
 8007bb6:	6862      	ldr	r2, [r4, #4]
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	bf0c      	ite	eq
 8007bbc:	f8c8 2000 	streq.w	r2, [r8]
 8007bc0:	605a      	strne	r2, [r3, #4]
 8007bc2:	e7eb      	b.n	8007b9c <_malloc_r+0xa8>
 8007bc4:	4623      	mov	r3, r4
 8007bc6:	6864      	ldr	r4, [r4, #4]
 8007bc8:	e7ae      	b.n	8007b28 <_malloc_r+0x34>
 8007bca:	463c      	mov	r4, r7
 8007bcc:	687f      	ldr	r7, [r7, #4]
 8007bce:	e7b6      	b.n	8007b3e <_malloc_r+0x4a>
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	42a3      	cmp	r3, r4
 8007bd6:	d1fb      	bne.n	8007bd0 <_malloc_r+0xdc>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	6053      	str	r3, [r2, #4]
 8007bdc:	e7de      	b.n	8007b9c <_malloc_r+0xa8>
 8007bde:	230c      	movs	r3, #12
 8007be0:	6033      	str	r3, [r6, #0]
 8007be2:	4630      	mov	r0, r6
 8007be4:	f000 f80c 	bl	8007c00 <__malloc_unlock>
 8007be8:	e794      	b.n	8007b14 <_malloc_r+0x20>
 8007bea:	6005      	str	r5, [r0, #0]
 8007bec:	e7d6      	b.n	8007b9c <_malloc_r+0xa8>
 8007bee:	bf00      	nop
 8007bf0:	240002dc 	.word	0x240002dc

08007bf4 <__malloc_lock>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	@ (8007bfc <__malloc_lock+0x8>)
 8007bf6:	f7ff befd 	b.w	80079f4 <__retarget_lock_acquire_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	240002d4 	.word	0x240002d4

08007c00 <__malloc_unlock>:
 8007c00:	4801      	ldr	r0, [pc, #4]	@ (8007c08 <__malloc_unlock+0x8>)
 8007c02:	f7ff bef8 	b.w	80079f6 <__retarget_lock_release_recursive>
 8007c06:	bf00      	nop
 8007c08:	240002d4 	.word	0x240002d4

08007c0c <__ssputs_r>:
 8007c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c10:	688e      	ldr	r6, [r1, #8]
 8007c12:	461f      	mov	r7, r3
 8007c14:	42be      	cmp	r6, r7
 8007c16:	680b      	ldr	r3, [r1, #0]
 8007c18:	4682      	mov	sl, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	4690      	mov	r8, r2
 8007c1e:	d82d      	bhi.n	8007c7c <__ssputs_r+0x70>
 8007c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c28:	d026      	beq.n	8007c78 <__ssputs_r+0x6c>
 8007c2a:	6965      	ldr	r5, [r4, #20]
 8007c2c:	6909      	ldr	r1, [r1, #16]
 8007c2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c32:	eba3 0901 	sub.w	r9, r3, r1
 8007c36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c3a:	1c7b      	adds	r3, r7, #1
 8007c3c:	444b      	add	r3, r9
 8007c3e:	106d      	asrs	r5, r5, #1
 8007c40:	429d      	cmp	r5, r3
 8007c42:	bf38      	it	cc
 8007c44:	461d      	movcc	r5, r3
 8007c46:	0553      	lsls	r3, r2, #21
 8007c48:	d527      	bpl.n	8007c9a <__ssputs_r+0x8e>
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f7ff ff52 	bl	8007af4 <_malloc_r>
 8007c50:	4606      	mov	r6, r0
 8007c52:	b360      	cbz	r0, 8007cae <__ssputs_r+0xa2>
 8007c54:	6921      	ldr	r1, [r4, #16]
 8007c56:	464a      	mov	r2, r9
 8007c58:	f7ff fed1 	bl	80079fe <memcpy>
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	6126      	str	r6, [r4, #16]
 8007c6a:	6165      	str	r5, [r4, #20]
 8007c6c:	444e      	add	r6, r9
 8007c6e:	eba5 0509 	sub.w	r5, r5, r9
 8007c72:	6026      	str	r6, [r4, #0]
 8007c74:	60a5      	str	r5, [r4, #8]
 8007c76:	463e      	mov	r6, r7
 8007c78:	42be      	cmp	r6, r7
 8007c7a:	d900      	bls.n	8007c7e <__ssputs_r+0x72>
 8007c7c:	463e      	mov	r6, r7
 8007c7e:	6820      	ldr	r0, [r4, #0]
 8007c80:	4632      	mov	r2, r6
 8007c82:	4641      	mov	r1, r8
 8007c84:	f000 faa8 	bl	80081d8 <memmove>
 8007c88:	68a3      	ldr	r3, [r4, #8]
 8007c8a:	1b9b      	subs	r3, r3, r6
 8007c8c:	60a3      	str	r3, [r4, #8]
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	4433      	add	r3, r6
 8007c92:	6023      	str	r3, [r4, #0]
 8007c94:	2000      	movs	r0, #0
 8007c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	f000 fac6 	bl	800822c <_realloc_r>
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d1e0      	bne.n	8007c68 <__ssputs_r+0x5c>
 8007ca6:	6921      	ldr	r1, [r4, #16]
 8007ca8:	4650      	mov	r0, sl
 8007caa:	f7ff feb7 	bl	8007a1c <_free_r>
 8007cae:	230c      	movs	r3, #12
 8007cb0:	f8ca 3000 	str.w	r3, [sl]
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	e7e9      	b.n	8007c96 <__ssputs_r+0x8a>
	...

08007cc4 <_svfiprintf_r>:
 8007cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	4698      	mov	r8, r3
 8007cca:	898b      	ldrh	r3, [r1, #12]
 8007ccc:	061b      	lsls	r3, r3, #24
 8007cce:	b09d      	sub	sp, #116	@ 0x74
 8007cd0:	4607      	mov	r7, r0
 8007cd2:	460d      	mov	r5, r1
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	d510      	bpl.n	8007cfa <_svfiprintf_r+0x36>
 8007cd8:	690b      	ldr	r3, [r1, #16]
 8007cda:	b973      	cbnz	r3, 8007cfa <_svfiprintf_r+0x36>
 8007cdc:	2140      	movs	r1, #64	@ 0x40
 8007cde:	f7ff ff09 	bl	8007af4 <_malloc_r>
 8007ce2:	6028      	str	r0, [r5, #0]
 8007ce4:	6128      	str	r0, [r5, #16]
 8007ce6:	b930      	cbnz	r0, 8007cf6 <_svfiprintf_r+0x32>
 8007ce8:	230c      	movs	r3, #12
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf0:	b01d      	add	sp, #116	@ 0x74
 8007cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf6:	2340      	movs	r3, #64	@ 0x40
 8007cf8:	616b      	str	r3, [r5, #20]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cfe:	2320      	movs	r3, #32
 8007d00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d08:	2330      	movs	r3, #48	@ 0x30
 8007d0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ea8 <_svfiprintf_r+0x1e4>
 8007d0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d12:	f04f 0901 	mov.w	r9, #1
 8007d16:	4623      	mov	r3, r4
 8007d18:	469a      	mov	sl, r3
 8007d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d1e:	b10a      	cbz	r2, 8007d24 <_svfiprintf_r+0x60>
 8007d20:	2a25      	cmp	r2, #37	@ 0x25
 8007d22:	d1f9      	bne.n	8007d18 <_svfiprintf_r+0x54>
 8007d24:	ebba 0b04 	subs.w	fp, sl, r4
 8007d28:	d00b      	beq.n	8007d42 <_svfiprintf_r+0x7e>
 8007d2a:	465b      	mov	r3, fp
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4638      	mov	r0, r7
 8007d32:	f7ff ff6b 	bl	8007c0c <__ssputs_r>
 8007d36:	3001      	adds	r0, #1
 8007d38:	f000 80a7 	beq.w	8007e8a <_svfiprintf_r+0x1c6>
 8007d3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d3e:	445a      	add	r2, fp
 8007d40:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d42:	f89a 3000 	ldrb.w	r3, [sl]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 809f 	beq.w	8007e8a <_svfiprintf_r+0x1c6>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d56:	f10a 0a01 	add.w	sl, sl, #1
 8007d5a:	9304      	str	r3, [sp, #16]
 8007d5c:	9307      	str	r3, [sp, #28]
 8007d5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d62:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d64:	4654      	mov	r4, sl
 8007d66:	2205      	movs	r2, #5
 8007d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6c:	484e      	ldr	r0, [pc, #312]	@ (8007ea8 <_svfiprintf_r+0x1e4>)
 8007d6e:	f7f9 fb5f 	bl	8001430 <memchr>
 8007d72:	9a04      	ldr	r2, [sp, #16]
 8007d74:	b9d8      	cbnz	r0, 8007dae <_svfiprintf_r+0xea>
 8007d76:	06d0      	lsls	r0, r2, #27
 8007d78:	bf44      	itt	mi
 8007d7a:	2320      	movmi	r3, #32
 8007d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d80:	0711      	lsls	r1, r2, #28
 8007d82:	bf44      	itt	mi
 8007d84:	232b      	movmi	r3, #43	@ 0x2b
 8007d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d90:	d015      	beq.n	8007dbe <_svfiprintf_r+0xfa>
 8007d92:	9a07      	ldr	r2, [sp, #28]
 8007d94:	4654      	mov	r4, sl
 8007d96:	2000      	movs	r0, #0
 8007d98:	f04f 0c0a 	mov.w	ip, #10
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007da2:	3b30      	subs	r3, #48	@ 0x30
 8007da4:	2b09      	cmp	r3, #9
 8007da6:	d94b      	bls.n	8007e40 <_svfiprintf_r+0x17c>
 8007da8:	b1b0      	cbz	r0, 8007dd8 <_svfiprintf_r+0x114>
 8007daa:	9207      	str	r2, [sp, #28]
 8007dac:	e014      	b.n	8007dd8 <_svfiprintf_r+0x114>
 8007dae:	eba0 0308 	sub.w	r3, r0, r8
 8007db2:	fa09 f303 	lsl.w	r3, r9, r3
 8007db6:	4313      	orrs	r3, r2
 8007db8:	9304      	str	r3, [sp, #16]
 8007dba:	46a2      	mov	sl, r4
 8007dbc:	e7d2      	b.n	8007d64 <_svfiprintf_r+0xa0>
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	1d19      	adds	r1, r3, #4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	9103      	str	r1, [sp, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	bfbb      	ittet	lt
 8007dca:	425b      	neglt	r3, r3
 8007dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007dd0:	9307      	strge	r3, [sp, #28]
 8007dd2:	9307      	strlt	r3, [sp, #28]
 8007dd4:	bfb8      	it	lt
 8007dd6:	9204      	strlt	r2, [sp, #16]
 8007dd8:	7823      	ldrb	r3, [r4, #0]
 8007dda:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ddc:	d10a      	bne.n	8007df4 <_svfiprintf_r+0x130>
 8007dde:	7863      	ldrb	r3, [r4, #1]
 8007de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007de2:	d132      	bne.n	8007e4a <_svfiprintf_r+0x186>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1d1a      	adds	r2, r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	9203      	str	r2, [sp, #12]
 8007dec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007df0:	3402      	adds	r4, #2
 8007df2:	9305      	str	r3, [sp, #20]
 8007df4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007eb8 <_svfiprintf_r+0x1f4>
 8007df8:	7821      	ldrb	r1, [r4, #0]
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	4650      	mov	r0, sl
 8007dfe:	f7f9 fb17 	bl	8001430 <memchr>
 8007e02:	b138      	cbz	r0, 8007e14 <_svfiprintf_r+0x150>
 8007e04:	9b04      	ldr	r3, [sp, #16]
 8007e06:	eba0 000a 	sub.w	r0, r0, sl
 8007e0a:	2240      	movs	r2, #64	@ 0x40
 8007e0c:	4082      	lsls	r2, r0
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	3401      	adds	r4, #1
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e18:	4824      	ldr	r0, [pc, #144]	@ (8007eac <_svfiprintf_r+0x1e8>)
 8007e1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e1e:	2206      	movs	r2, #6
 8007e20:	f7f9 fb06 	bl	8001430 <memchr>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d036      	beq.n	8007e96 <_svfiprintf_r+0x1d2>
 8007e28:	4b21      	ldr	r3, [pc, #132]	@ (8007eb0 <_svfiprintf_r+0x1ec>)
 8007e2a:	bb1b      	cbnz	r3, 8007e74 <_svfiprintf_r+0x1b0>
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	3307      	adds	r3, #7
 8007e30:	f023 0307 	bic.w	r3, r3, #7
 8007e34:	3308      	adds	r3, #8
 8007e36:	9303      	str	r3, [sp, #12]
 8007e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e3a:	4433      	add	r3, r6
 8007e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e3e:	e76a      	b.n	8007d16 <_svfiprintf_r+0x52>
 8007e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e44:	460c      	mov	r4, r1
 8007e46:	2001      	movs	r0, #1
 8007e48:	e7a8      	b.n	8007d9c <_svfiprintf_r+0xd8>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	3401      	adds	r4, #1
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	4619      	mov	r1, r3
 8007e52:	f04f 0c0a 	mov.w	ip, #10
 8007e56:	4620      	mov	r0, r4
 8007e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e5c:	3a30      	subs	r2, #48	@ 0x30
 8007e5e:	2a09      	cmp	r2, #9
 8007e60:	d903      	bls.n	8007e6a <_svfiprintf_r+0x1a6>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0c6      	beq.n	8007df4 <_svfiprintf_r+0x130>
 8007e66:	9105      	str	r1, [sp, #20]
 8007e68:	e7c4      	b.n	8007df4 <_svfiprintf_r+0x130>
 8007e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e6e:	4604      	mov	r4, r0
 8007e70:	2301      	movs	r3, #1
 8007e72:	e7f0      	b.n	8007e56 <_svfiprintf_r+0x192>
 8007e74:	ab03      	add	r3, sp, #12
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	462a      	mov	r2, r5
 8007e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb4 <_svfiprintf_r+0x1f0>)
 8007e7c:	a904      	add	r1, sp, #16
 8007e7e:	4638      	mov	r0, r7
 8007e80:	f3af 8000 	nop.w
 8007e84:	1c42      	adds	r2, r0, #1
 8007e86:	4606      	mov	r6, r0
 8007e88:	d1d6      	bne.n	8007e38 <_svfiprintf_r+0x174>
 8007e8a:	89ab      	ldrh	r3, [r5, #12]
 8007e8c:	065b      	lsls	r3, r3, #25
 8007e8e:	f53f af2d 	bmi.w	8007cec <_svfiprintf_r+0x28>
 8007e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e94:	e72c      	b.n	8007cf0 <_svfiprintf_r+0x2c>
 8007e96:	ab03      	add	r3, sp, #12
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	4b05      	ldr	r3, [pc, #20]	@ (8007eb4 <_svfiprintf_r+0x1f0>)
 8007e9e:	a904      	add	r1, sp, #16
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f000 f879 	bl	8007f98 <_printf_i>
 8007ea6:	e7ed      	b.n	8007e84 <_svfiprintf_r+0x1c0>
 8007ea8:	08008428 	.word	0x08008428
 8007eac:	08008432 	.word	0x08008432
 8007eb0:	00000000 	.word	0x00000000
 8007eb4:	08007c0d 	.word	0x08007c0d
 8007eb8:	0800842e 	.word	0x0800842e

08007ebc <_printf_common>:
 8007ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	4616      	mov	r6, r2
 8007ec2:	4698      	mov	r8, r3
 8007ec4:	688a      	ldr	r2, [r1, #8]
 8007ec6:	690b      	ldr	r3, [r1, #16]
 8007ec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	bfb8      	it	lt
 8007ed0:	4613      	movlt	r3, r2
 8007ed2:	6033      	str	r3, [r6, #0]
 8007ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ed8:	4607      	mov	r7, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	b10a      	cbz	r2, 8007ee2 <_printf_common+0x26>
 8007ede:	3301      	adds	r3, #1
 8007ee0:	6033      	str	r3, [r6, #0]
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	0699      	lsls	r1, r3, #26
 8007ee6:	bf42      	ittt	mi
 8007ee8:	6833      	ldrmi	r3, [r6, #0]
 8007eea:	3302      	addmi	r3, #2
 8007eec:	6033      	strmi	r3, [r6, #0]
 8007eee:	6825      	ldr	r5, [r4, #0]
 8007ef0:	f015 0506 	ands.w	r5, r5, #6
 8007ef4:	d106      	bne.n	8007f04 <_printf_common+0x48>
 8007ef6:	f104 0a19 	add.w	sl, r4, #25
 8007efa:	68e3      	ldr	r3, [r4, #12]
 8007efc:	6832      	ldr	r2, [r6, #0]
 8007efe:	1a9b      	subs	r3, r3, r2
 8007f00:	42ab      	cmp	r3, r5
 8007f02:	dc26      	bgt.n	8007f52 <_printf_common+0x96>
 8007f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f08:	6822      	ldr	r2, [r4, #0]
 8007f0a:	3b00      	subs	r3, #0
 8007f0c:	bf18      	it	ne
 8007f0e:	2301      	movne	r3, #1
 8007f10:	0692      	lsls	r2, r2, #26
 8007f12:	d42b      	bmi.n	8007f6c <_printf_common+0xb0>
 8007f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f18:	4641      	mov	r1, r8
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	47c8      	blx	r9
 8007f1e:	3001      	adds	r0, #1
 8007f20:	d01e      	beq.n	8007f60 <_printf_common+0xa4>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	6922      	ldr	r2, [r4, #16]
 8007f26:	f003 0306 	and.w	r3, r3, #6
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	bf02      	ittt	eq
 8007f2e:	68e5      	ldreq	r5, [r4, #12]
 8007f30:	6833      	ldreq	r3, [r6, #0]
 8007f32:	1aed      	subeq	r5, r5, r3
 8007f34:	68a3      	ldr	r3, [r4, #8]
 8007f36:	bf0c      	ite	eq
 8007f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f3c:	2500      	movne	r5, #0
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	bfc4      	itt	gt
 8007f42:	1a9b      	subgt	r3, r3, r2
 8007f44:	18ed      	addgt	r5, r5, r3
 8007f46:	2600      	movs	r6, #0
 8007f48:	341a      	adds	r4, #26
 8007f4a:	42b5      	cmp	r5, r6
 8007f4c:	d11a      	bne.n	8007f84 <_printf_common+0xc8>
 8007f4e:	2000      	movs	r0, #0
 8007f50:	e008      	b.n	8007f64 <_printf_common+0xa8>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4652      	mov	r2, sl
 8007f56:	4641      	mov	r1, r8
 8007f58:	4638      	mov	r0, r7
 8007f5a:	47c8      	blx	r9
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d103      	bne.n	8007f68 <_printf_common+0xac>
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f68:	3501      	adds	r5, #1
 8007f6a:	e7c6      	b.n	8007efa <_printf_common+0x3e>
 8007f6c:	18e1      	adds	r1, r4, r3
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	2030      	movs	r0, #48	@ 0x30
 8007f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f76:	4422      	add	r2, r4
 8007f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f80:	3302      	adds	r3, #2
 8007f82:	e7c7      	b.n	8007f14 <_printf_common+0x58>
 8007f84:	2301      	movs	r3, #1
 8007f86:	4622      	mov	r2, r4
 8007f88:	4641      	mov	r1, r8
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	47c8      	blx	r9
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d0e6      	beq.n	8007f60 <_printf_common+0xa4>
 8007f92:	3601      	adds	r6, #1
 8007f94:	e7d9      	b.n	8007f4a <_printf_common+0x8e>
	...

08007f98 <_printf_i>:
 8007f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f9c:	7e0f      	ldrb	r7, [r1, #24]
 8007f9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fa0:	2f78      	cmp	r7, #120	@ 0x78
 8007fa2:	4691      	mov	r9, r2
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	469a      	mov	sl, r3
 8007faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007fae:	d807      	bhi.n	8007fc0 <_printf_i+0x28>
 8007fb0:	2f62      	cmp	r7, #98	@ 0x62
 8007fb2:	d80a      	bhi.n	8007fca <_printf_i+0x32>
 8007fb4:	2f00      	cmp	r7, #0
 8007fb6:	f000 80d2 	beq.w	800815e <_printf_i+0x1c6>
 8007fba:	2f58      	cmp	r7, #88	@ 0x58
 8007fbc:	f000 80b9 	beq.w	8008132 <_printf_i+0x19a>
 8007fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007fc8:	e03a      	b.n	8008040 <_printf_i+0xa8>
 8007fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007fce:	2b15      	cmp	r3, #21
 8007fd0:	d8f6      	bhi.n	8007fc0 <_printf_i+0x28>
 8007fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8007fd8 <_printf_i+0x40>)
 8007fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fd8:	08008031 	.word	0x08008031
 8007fdc:	08008045 	.word	0x08008045
 8007fe0:	08007fc1 	.word	0x08007fc1
 8007fe4:	08007fc1 	.word	0x08007fc1
 8007fe8:	08007fc1 	.word	0x08007fc1
 8007fec:	08007fc1 	.word	0x08007fc1
 8007ff0:	08008045 	.word	0x08008045
 8007ff4:	08007fc1 	.word	0x08007fc1
 8007ff8:	08007fc1 	.word	0x08007fc1
 8007ffc:	08007fc1 	.word	0x08007fc1
 8008000:	08007fc1 	.word	0x08007fc1
 8008004:	08008145 	.word	0x08008145
 8008008:	0800806f 	.word	0x0800806f
 800800c:	080080ff 	.word	0x080080ff
 8008010:	08007fc1 	.word	0x08007fc1
 8008014:	08007fc1 	.word	0x08007fc1
 8008018:	08008167 	.word	0x08008167
 800801c:	08007fc1 	.word	0x08007fc1
 8008020:	0800806f 	.word	0x0800806f
 8008024:	08007fc1 	.word	0x08007fc1
 8008028:	08007fc1 	.word	0x08007fc1
 800802c:	08008107 	.word	0x08008107
 8008030:	6833      	ldr	r3, [r6, #0]
 8008032:	1d1a      	adds	r2, r3, #4
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6032      	str	r2, [r6, #0]
 8008038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800803c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008040:	2301      	movs	r3, #1
 8008042:	e09d      	b.n	8008180 <_printf_i+0x1e8>
 8008044:	6833      	ldr	r3, [r6, #0]
 8008046:	6820      	ldr	r0, [r4, #0]
 8008048:	1d19      	adds	r1, r3, #4
 800804a:	6031      	str	r1, [r6, #0]
 800804c:	0606      	lsls	r6, r0, #24
 800804e:	d501      	bpl.n	8008054 <_printf_i+0xbc>
 8008050:	681d      	ldr	r5, [r3, #0]
 8008052:	e003      	b.n	800805c <_printf_i+0xc4>
 8008054:	0645      	lsls	r5, r0, #25
 8008056:	d5fb      	bpl.n	8008050 <_printf_i+0xb8>
 8008058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800805c:	2d00      	cmp	r5, #0
 800805e:	da03      	bge.n	8008068 <_printf_i+0xd0>
 8008060:	232d      	movs	r3, #45	@ 0x2d
 8008062:	426d      	negs	r5, r5
 8008064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008068:	4859      	ldr	r0, [pc, #356]	@ (80081d0 <_printf_i+0x238>)
 800806a:	230a      	movs	r3, #10
 800806c:	e011      	b.n	8008092 <_printf_i+0xfa>
 800806e:	6821      	ldr	r1, [r4, #0]
 8008070:	6833      	ldr	r3, [r6, #0]
 8008072:	0608      	lsls	r0, r1, #24
 8008074:	f853 5b04 	ldr.w	r5, [r3], #4
 8008078:	d402      	bmi.n	8008080 <_printf_i+0xe8>
 800807a:	0649      	lsls	r1, r1, #25
 800807c:	bf48      	it	mi
 800807e:	b2ad      	uxthmi	r5, r5
 8008080:	2f6f      	cmp	r7, #111	@ 0x6f
 8008082:	4853      	ldr	r0, [pc, #332]	@ (80081d0 <_printf_i+0x238>)
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	bf14      	ite	ne
 8008088:	230a      	movne	r3, #10
 800808a:	2308      	moveq	r3, #8
 800808c:	2100      	movs	r1, #0
 800808e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008092:	6866      	ldr	r6, [r4, #4]
 8008094:	60a6      	str	r6, [r4, #8]
 8008096:	2e00      	cmp	r6, #0
 8008098:	bfa2      	ittt	ge
 800809a:	6821      	ldrge	r1, [r4, #0]
 800809c:	f021 0104 	bicge.w	r1, r1, #4
 80080a0:	6021      	strge	r1, [r4, #0]
 80080a2:	b90d      	cbnz	r5, 80080a8 <_printf_i+0x110>
 80080a4:	2e00      	cmp	r6, #0
 80080a6:	d04b      	beq.n	8008140 <_printf_i+0x1a8>
 80080a8:	4616      	mov	r6, r2
 80080aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80080ae:	fb03 5711 	mls	r7, r3, r1, r5
 80080b2:	5dc7      	ldrb	r7, [r0, r7]
 80080b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080b8:	462f      	mov	r7, r5
 80080ba:	42bb      	cmp	r3, r7
 80080bc:	460d      	mov	r5, r1
 80080be:	d9f4      	bls.n	80080aa <_printf_i+0x112>
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d10b      	bne.n	80080dc <_printf_i+0x144>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	07df      	lsls	r7, r3, #31
 80080c8:	d508      	bpl.n	80080dc <_printf_i+0x144>
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	6861      	ldr	r1, [r4, #4]
 80080ce:	4299      	cmp	r1, r3
 80080d0:	bfde      	ittt	le
 80080d2:	2330      	movle	r3, #48	@ 0x30
 80080d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080dc:	1b92      	subs	r2, r2, r6
 80080de:	6122      	str	r2, [r4, #16]
 80080e0:	f8cd a000 	str.w	sl, [sp]
 80080e4:	464b      	mov	r3, r9
 80080e6:	aa03      	add	r2, sp, #12
 80080e8:	4621      	mov	r1, r4
 80080ea:	4640      	mov	r0, r8
 80080ec:	f7ff fee6 	bl	8007ebc <_printf_common>
 80080f0:	3001      	adds	r0, #1
 80080f2:	d14a      	bne.n	800818a <_printf_i+0x1f2>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	b004      	add	sp, #16
 80080fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	f043 0320 	orr.w	r3, r3, #32
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	4833      	ldr	r0, [pc, #204]	@ (80081d4 <_printf_i+0x23c>)
 8008108:	2778      	movs	r7, #120	@ 0x78
 800810a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	6831      	ldr	r1, [r6, #0]
 8008112:	061f      	lsls	r7, r3, #24
 8008114:	f851 5b04 	ldr.w	r5, [r1], #4
 8008118:	d402      	bmi.n	8008120 <_printf_i+0x188>
 800811a:	065f      	lsls	r7, r3, #25
 800811c:	bf48      	it	mi
 800811e:	b2ad      	uxthmi	r5, r5
 8008120:	6031      	str	r1, [r6, #0]
 8008122:	07d9      	lsls	r1, r3, #31
 8008124:	bf44      	itt	mi
 8008126:	f043 0320 	orrmi.w	r3, r3, #32
 800812a:	6023      	strmi	r3, [r4, #0]
 800812c:	b11d      	cbz	r5, 8008136 <_printf_i+0x19e>
 800812e:	2310      	movs	r3, #16
 8008130:	e7ac      	b.n	800808c <_printf_i+0xf4>
 8008132:	4827      	ldr	r0, [pc, #156]	@ (80081d0 <_printf_i+0x238>)
 8008134:	e7e9      	b.n	800810a <_printf_i+0x172>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	f023 0320 	bic.w	r3, r3, #32
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	e7f6      	b.n	800812e <_printf_i+0x196>
 8008140:	4616      	mov	r6, r2
 8008142:	e7bd      	b.n	80080c0 <_printf_i+0x128>
 8008144:	6833      	ldr	r3, [r6, #0]
 8008146:	6825      	ldr	r5, [r4, #0]
 8008148:	6961      	ldr	r1, [r4, #20]
 800814a:	1d18      	adds	r0, r3, #4
 800814c:	6030      	str	r0, [r6, #0]
 800814e:	062e      	lsls	r6, r5, #24
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	d501      	bpl.n	8008158 <_printf_i+0x1c0>
 8008154:	6019      	str	r1, [r3, #0]
 8008156:	e002      	b.n	800815e <_printf_i+0x1c6>
 8008158:	0668      	lsls	r0, r5, #25
 800815a:	d5fb      	bpl.n	8008154 <_printf_i+0x1bc>
 800815c:	8019      	strh	r1, [r3, #0]
 800815e:	2300      	movs	r3, #0
 8008160:	6123      	str	r3, [r4, #16]
 8008162:	4616      	mov	r6, r2
 8008164:	e7bc      	b.n	80080e0 <_printf_i+0x148>
 8008166:	6833      	ldr	r3, [r6, #0]
 8008168:	1d1a      	adds	r2, r3, #4
 800816a:	6032      	str	r2, [r6, #0]
 800816c:	681e      	ldr	r6, [r3, #0]
 800816e:	6862      	ldr	r2, [r4, #4]
 8008170:	2100      	movs	r1, #0
 8008172:	4630      	mov	r0, r6
 8008174:	f7f9 f95c 	bl	8001430 <memchr>
 8008178:	b108      	cbz	r0, 800817e <_printf_i+0x1e6>
 800817a:	1b80      	subs	r0, r0, r6
 800817c:	6060      	str	r0, [r4, #4]
 800817e:	6863      	ldr	r3, [r4, #4]
 8008180:	6123      	str	r3, [r4, #16]
 8008182:	2300      	movs	r3, #0
 8008184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008188:	e7aa      	b.n	80080e0 <_printf_i+0x148>
 800818a:	6923      	ldr	r3, [r4, #16]
 800818c:	4632      	mov	r2, r6
 800818e:	4649      	mov	r1, r9
 8008190:	4640      	mov	r0, r8
 8008192:	47d0      	blx	sl
 8008194:	3001      	adds	r0, #1
 8008196:	d0ad      	beq.n	80080f4 <_printf_i+0x15c>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	079b      	lsls	r3, r3, #30
 800819c:	d413      	bmi.n	80081c6 <_printf_i+0x22e>
 800819e:	68e0      	ldr	r0, [r4, #12]
 80081a0:	9b03      	ldr	r3, [sp, #12]
 80081a2:	4298      	cmp	r0, r3
 80081a4:	bfb8      	it	lt
 80081a6:	4618      	movlt	r0, r3
 80081a8:	e7a6      	b.n	80080f8 <_printf_i+0x160>
 80081aa:	2301      	movs	r3, #1
 80081ac:	4632      	mov	r2, r6
 80081ae:	4649      	mov	r1, r9
 80081b0:	4640      	mov	r0, r8
 80081b2:	47d0      	blx	sl
 80081b4:	3001      	adds	r0, #1
 80081b6:	d09d      	beq.n	80080f4 <_printf_i+0x15c>
 80081b8:	3501      	adds	r5, #1
 80081ba:	68e3      	ldr	r3, [r4, #12]
 80081bc:	9903      	ldr	r1, [sp, #12]
 80081be:	1a5b      	subs	r3, r3, r1
 80081c0:	42ab      	cmp	r3, r5
 80081c2:	dcf2      	bgt.n	80081aa <_printf_i+0x212>
 80081c4:	e7eb      	b.n	800819e <_printf_i+0x206>
 80081c6:	2500      	movs	r5, #0
 80081c8:	f104 0619 	add.w	r6, r4, #25
 80081cc:	e7f5      	b.n	80081ba <_printf_i+0x222>
 80081ce:	bf00      	nop
 80081d0:	08008439 	.word	0x08008439
 80081d4:	0800844a 	.word	0x0800844a

080081d8 <memmove>:
 80081d8:	4288      	cmp	r0, r1
 80081da:	b510      	push	{r4, lr}
 80081dc:	eb01 0402 	add.w	r4, r1, r2
 80081e0:	d902      	bls.n	80081e8 <memmove+0x10>
 80081e2:	4284      	cmp	r4, r0
 80081e4:	4623      	mov	r3, r4
 80081e6:	d807      	bhi.n	80081f8 <memmove+0x20>
 80081e8:	1e43      	subs	r3, r0, #1
 80081ea:	42a1      	cmp	r1, r4
 80081ec:	d008      	beq.n	8008200 <memmove+0x28>
 80081ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081f6:	e7f8      	b.n	80081ea <memmove+0x12>
 80081f8:	4402      	add	r2, r0
 80081fa:	4601      	mov	r1, r0
 80081fc:	428a      	cmp	r2, r1
 80081fe:	d100      	bne.n	8008202 <memmove+0x2a>
 8008200:	bd10      	pop	{r4, pc}
 8008202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800820a:	e7f7      	b.n	80081fc <memmove+0x24>

0800820c <_sbrk_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4d06      	ldr	r5, [pc, #24]	@ (8008228 <_sbrk_r+0x1c>)
 8008210:	2300      	movs	r3, #0
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	602b      	str	r3, [r5, #0]
 8008218:	f7fa fc00 	bl	8002a1c <_sbrk>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_sbrk_r+0x1a>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_sbrk_r+0x1a>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	240002d0 	.word	0x240002d0

0800822c <_realloc_r>:
 800822c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008230:	4680      	mov	r8, r0
 8008232:	4615      	mov	r5, r2
 8008234:	460c      	mov	r4, r1
 8008236:	b921      	cbnz	r1, 8008242 <_realloc_r+0x16>
 8008238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800823c:	4611      	mov	r1, r2
 800823e:	f7ff bc59 	b.w	8007af4 <_malloc_r>
 8008242:	b92a      	cbnz	r2, 8008250 <_realloc_r+0x24>
 8008244:	f7ff fbea 	bl	8007a1c <_free_r>
 8008248:	2400      	movs	r4, #0
 800824a:	4620      	mov	r0, r4
 800824c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008250:	f000 f81a 	bl	8008288 <_malloc_usable_size_r>
 8008254:	4285      	cmp	r5, r0
 8008256:	4606      	mov	r6, r0
 8008258:	d802      	bhi.n	8008260 <_realloc_r+0x34>
 800825a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800825e:	d8f4      	bhi.n	800824a <_realloc_r+0x1e>
 8008260:	4629      	mov	r1, r5
 8008262:	4640      	mov	r0, r8
 8008264:	f7ff fc46 	bl	8007af4 <_malloc_r>
 8008268:	4607      	mov	r7, r0
 800826a:	2800      	cmp	r0, #0
 800826c:	d0ec      	beq.n	8008248 <_realloc_r+0x1c>
 800826e:	42b5      	cmp	r5, r6
 8008270:	462a      	mov	r2, r5
 8008272:	4621      	mov	r1, r4
 8008274:	bf28      	it	cs
 8008276:	4632      	movcs	r2, r6
 8008278:	f7ff fbc1 	bl	80079fe <memcpy>
 800827c:	4621      	mov	r1, r4
 800827e:	4640      	mov	r0, r8
 8008280:	f7ff fbcc 	bl	8007a1c <_free_r>
 8008284:	463c      	mov	r4, r7
 8008286:	e7e0      	b.n	800824a <_realloc_r+0x1e>

08008288 <_malloc_usable_size_r>:
 8008288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800828c:	1f18      	subs	r0, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	bfbc      	itt	lt
 8008292:	580b      	ldrlt	r3, [r1, r0]
 8008294:	18c0      	addlt	r0, r0, r3
 8008296:	4770      	bx	lr

08008298 <_init>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	bf00      	nop
 800829c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829e:	bc08      	pop	{r3}
 80082a0:	469e      	mov	lr, r3
 80082a2:	4770      	bx	lr

080082a4 <_fini>:
 80082a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a6:	bf00      	nop
 80082a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082aa:	bc08      	pop	{r3}
 80082ac:	469e      	mov	lr, r3
 80082ae:	4770      	bx	lr
